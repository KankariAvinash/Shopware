<?php

namespace Container3Ae2SBJ;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Container;
use Symfony\Component\DependencyInjection\Exception\LogicException;
use Symfony\Component\DependencyInjection\Exception\ParameterNotFoundException;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;
use Symfony\Component\DependencyInjection\ParameterBag\FrozenParameterBag;
use Symfony\Component\DependencyInjection\ParameterBag\ParameterBagInterface;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class Shopware_Core_KernelDevDebugContainer extends Container
{
    protected $targetDir;
    protected $parameters = [];
    protected \Closure $getService;

    public function __construct(private array $buildParameters = [], protected string $containerDir = __DIR__)
    {
        $this->targetDir = \dirname($containerDir);
        $this->parameters = $this->getDefaultParameters();

        $this->services = $this->privates = [];
        $this->syntheticIds = [
            'kernel' => true,
        ];
        $this->methodMap = [
            'Doctrine\\DBAL\\Connection' => 'getConnectionService',
            'OpenSearch\\Client' => 'getClientService',
            'Shopware\\Administration\\Controller\\AdminExtensionApiController' => 'getAdminExtensionApiControllerService',
            'Shopware\\Administration\\Controller\\AdminProductStreamController' => 'getAdminProductStreamControllerService',
            'Shopware\\Administration\\Controller\\AdminSearchController' => 'getAdminSearchControllerService',
            'Shopware\\Administration\\Controller\\AdminTagController' => 'getAdminTagControllerService',
            'Shopware\\Administration\\Controller\\AdministrationController' => 'getAdministrationControllerService',
            'Shopware\\Administration\\Controller\\DashboardController' => 'getDashboardControllerService',
            'Shopware\\Administration\\Controller\\NotificationController' => 'getNotificationControllerService',
            'Shopware\\Administration\\Controller\\UserConfigController' => 'getUserConfigControllerService',
            'Shopware\\Administration\\Notification\\NotificationDefinition' => 'getNotificationDefinitionService',
            'Shopware\\Administration\\Notification\\NotificationService' => 'getNotificationServiceService',
            'Shopware\\Administration\\Snippet\\AppAdministrationSnippetDefinition' => 'getAppAdministrationSnippetDefinitionService',
            'Shopware\\Core\\Checkout\\Cart\\Calculator' => 'getCalculatorService',
            'Shopware\\Core\\Checkout\\Cart\\Facade\\CartFacadeHookFactory' => 'getCartFacadeHookFactoryService',
            'Shopware\\Core\\Checkout\\Cart\\Facade\\PriceFactoryFactory' => 'getPriceFactoryFactoryService',
            'Shopware\\Core\\Checkout\\Cart\\Order\\Api\\OrderConverterController' => 'getOrderConverterControllerService',
            'Shopware\\Core\\Checkout\\Cart\\Order\\Api\\OrderRecalculationController' => 'getOrderRecalculationControllerService',
            'Shopware\\Core\\Checkout\\Cart\\PriceActionController' => 'getPriceActionControllerService',
            'Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartDeleteRoute' => 'getCartDeleteRouteService',
            'Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute' => 'getCartItemAddRouteService',
            'Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemRemoveRoute' => 'getCartItemRemoveRouteService',
            'Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemUpdateRoute' => 'getCartItemUpdateRouteService',
            'Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartLoadRoute' => 'getCartLoadRouteService',
            'Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute' => 'getCartOrderRouteService',
            'Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService' => 'getCartServiceService',
            'Shopware\\Core\\Checkout\\Cart\\TaxProvider\\TaxProviderRegistry' => 'getTaxProviderRegistryService',
            'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerAddress\\CustomerAddressDefinition' => 'getCustomerAddressDefinitionService',
            'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupRegistrationSalesChannel\\CustomerGroupRegistrationSalesChannelDefinition' => 'getCustomerGroupRegistrationSalesChannelDefinitionService',
            'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupTranslation\\CustomerGroupTranslationDefinition' => 'getCustomerGroupTranslationDefinitionService',
            'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroup\\CustomerGroupDefinition' => 'getCustomerGroupDefinitionService',
            'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerRecovery\\CustomerRecoveryDefinition' => 'getCustomerRecoveryDefinitionService',
            'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerTag\\CustomerTagDefinition' => 'getCustomerTagDefinitionService',
            'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlistProduct\\CustomerWishlistProductDefinition' => 'getCustomerWishlistProductDefinitionService',
            'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlist\\CustomerWishlistDefinition' => 'getCustomerWishlistDefinitionService',
            'Shopware\\Core\\Checkout\\Customer\\Api\\CustomerGroupRegistrationActionController' => 'getCustomerGroupRegistrationActionControllerService',
            'Shopware\\Core\\Checkout\\Customer\\CustomerDefinition' => 'getCustomerDefinitionService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountNewsletterRecipientRoute' => 'getAccountNewsletterRecipientRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AddWishlistProductRoute' => 'getAddWishlistProductRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangeCustomerProfileRoute' => 'getChangeCustomerProfileRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangeEmailRoute' => 'getChangeEmailRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangeLanguageRoute' => 'getChangeLanguageRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangePasswordRoute' => 'getChangePasswordRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangePaymentMethodRoute' => 'getChangePaymentMethodRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\CustomerGroupRegistrationSettingsRoute' => 'getCustomerGroupRegistrationSettingsRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\CustomerRecoveryIsExpiredRoute' => 'getCustomerRecoveryIsExpiredRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\CustomerRoute' => 'getCustomerRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\DeleteAddressRoute' => 'getDeleteAddressRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\DeleteCustomerRoute' => 'getDeleteCustomerRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\DownloadRoute' => 'getDownloadRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ListAddressRoute' => 'getListAddressRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\LoadWishlistRoute' => 'getLoadWishlistRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\LoginRoute' => 'getLoginRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\LogoutRoute' => 'getLogoutRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\MergeWishlistProductRoute' => 'getMergeWishlistProductRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\RegisterConfirmRoute' => 'getRegisterConfirmRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\RegisterRoute' => 'getRegisterRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\RemoveWishlistProductRoute' => 'getRemoveWishlistProductRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ResetPasswordRoute' => 'getResetPasswordRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SendPasswordRecoveryMailRoute' => 'getSendPasswordRecoveryMailRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SwitchDefaultAddressRoute' => 'getSwitchDefaultAddressRouteService',
            'Shopware\\Core\\Checkout\\Customer\\SalesChannel\\UpsertAddressRoute' => 'getUpsertAddressRouteService',
            'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfigSalesChannel\\DocumentBaseConfigSalesChannelDefinition' => 'getDocumentBaseConfigSalesChannelDefinitionService',
            'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfig\\DocumentBaseConfigDefinition' => 'getDocumentBaseConfigDefinitionService',
            'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentTypeTranslation\\DocumentTypeTranslationDefinition' => 'getDocumentTypeTranslationDefinitionService',
            'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentType\\DocumentTypeDefinition' => 'getDocumentTypeDefinitionService',
            'Shopware\\Core\\Checkout\\Document\\Controller\\DocumentController' => 'getDocumentControllerService',
            'Shopware\\Core\\Checkout\\Document\\DocumentDefinition' => 'getDocumentDefinitionService',
            'Shopware\\Core\\Checkout\\Document\\DocumentGeneratorController' => 'getDocumentGeneratorControllerService',
            'Shopware\\Core\\Checkout\\Document\\SalesChannel\\DocumentRoute' => 'getDocumentRouteService',
            'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderAddress\\OrderAddressDefinition' => 'getOrderAddressDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderCustomer\\OrderCustomerDefinition' => 'getOrderCustomerDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDeliveryPosition\\OrderDeliveryPositionDefinition' => 'getOrderDeliveryPositionDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDelivery\\OrderDeliveryDefinition' => 'getOrderDeliveryDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItemDownload\\OrderLineItemDownloadDefinition' => 'getOrderLineItemDownloadDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItem\\OrderLineItemDefinition' => 'getOrderLineItemDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTag\\OrderTagDefinition' => 'getOrderTagDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefundPosition\\OrderTransactionCaptureRefundPositionDefinition' => 'getOrderTransactionCaptureRefundPositionDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefund\\OrderTransactionCaptureRefundDefinition' => 'getOrderTransactionCaptureRefundDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCapture\\OrderTransactionCaptureDefinition' => 'getOrderTransactionCaptureDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionDefinition' => 'getOrderTransactionDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\Api\\OrderActionController' => 'getOrderActionControllerService',
            'Shopware\\Core\\Checkout\\Order\\OrderDefinition' => 'getOrderDefinitionService',
            'Shopware\\Core\\Checkout\\Order\\SalesChannel\\CancelOrderRoute' => 'getCancelOrderRouteService',
            'Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderRoute' => 'getOrderRouteService',
            'Shopware\\Core\\Checkout\\Order\\SalesChannel\\SetPaymentOrderRoute' => 'getSetPaymentOrderRouteService',
            'Shopware\\Core\\Checkout\\Payment\\Aggregate\\PaymentMethodTranslation\\PaymentMethodTranslationDefinition' => 'getPaymentMethodTranslationDefinitionService',
            'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentRecurringProcessor' => 'getPaymentRecurringProcessorService',
            'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentRefundProcessor' => 'getPaymentRefundProcessorService',
            'Shopware\\Core\\Checkout\\Payment\\Controller\\PaymentController' => 'getPaymentControllerService',
            'Shopware\\Core\\Checkout\\Payment\\PaymentMethodDefinition' => 'getPaymentMethodDefinitionService',
            'Shopware\\Core\\Checkout\\Payment\\SalesChannel\\CachedPaymentMethodRoute' => 'getCachedPaymentMethodRouteService',
            'Shopware\\Core\\Checkout\\Payment\\SalesChannel\\HandlePaymentMethodRoute' => 'getHandlePaymentMethodRouteService',
            'Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SalesChannelPaymentMethodDefinition' => 'getSalesChannelPaymentMethodDefinitionService',
            'Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SortedPaymentMethodRoute' => 'getSortedPaymentMethodRouteService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionCartRule\\PromotionCartRuleDefinition' => 'getPromotionCartRuleDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountPrice\\PromotionDiscountPriceDefinition' => 'getPromotionDiscountPriceDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountRule\\PromotionDiscountRuleDefinition' => 'getPromotionDiscountRuleDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscount\\PromotionDiscountDefinition' => 'getPromotionDiscountDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionIndividualCode\\PromotionIndividualCodeDefinition' => 'getPromotionIndividualCodeDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionOrderRule\\PromotionOrderRuleDefinition' => 'getPromotionOrderRuleDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaCustomer\\PromotionPersonaCustomerDefinition' => 'getPromotionPersonaCustomerDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaRule\\PromotionPersonaRuleDefinition' => 'getPromotionPersonaRuleDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSalesChannel\\PromotionSalesChannelDefinition' => 'getPromotionSalesChannelDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroupRule\\PromotionSetGroupRuleDefinition' => 'getPromotionSetGroupRuleDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroup\\PromotionSetGroupDefinition' => 'getPromotionSetGroupDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionTranslation\\PromotionTranslationDefinition' => 'getPromotionTranslationDefinitionService',
            'Shopware\\Core\\Checkout\\Promotion\\Api\\PromotionActionController' => 'getPromotionActionControllerService',
            'Shopware\\Core\\Checkout\\Promotion\\Api\\PromotionController' => 'getPromotionControllerService',
            'Shopware\\Core\\Checkout\\Promotion\\PromotionDefinition' => 'getPromotionDefinitionService',
            'Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodPrice\\ShippingMethodPriceDefinition' => 'getShippingMethodPriceDefinitionService',
            'Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTag\\ShippingMethodTagDefinition' => 'getShippingMethodTagDefinitionService',
            'Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTranslation\\ShippingMethodTranslationDefinition' => 'getShippingMethodTranslationDefinitionService',
            'Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\CachedShippingMethodRoute' => 'getCachedShippingMethodRouteService',
            'Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SalesChannelShippingMethodDefinition' => 'getSalesChannelShippingMethodDefinitionService',
            'Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SortedShippingMethodRoute' => 'getSortedShippingMethodRouteService',
            'Shopware\\Core\\Checkout\\Shipping\\ShippingMethodDefinition' => 'getShippingMethodDefinitionService',
            'Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTag\\CategoryTagDefinition' => 'getCategoryTagDefinitionService',
            'Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTranslation\\CategoryTranslationDefinition' => 'getCategoryTranslationDefinitionService',
            'Shopware\\Core\\Content\\Category\\CategoryDefinition' => 'getCategoryDefinitionService',
            'Shopware\\Core\\Content\\Category\\CategoryHydrator' => 'getCategoryHydratorService',
            'Shopware\\Core\\Content\\Category\\SalesChannel\\CachedCategoryRoute' => 'getCachedCategoryRouteService',
            'Shopware\\Core\\Content\\Category\\SalesChannel\\CachedNavigationRoute' => 'getCachedNavigationRouteService',
            'Shopware\\Core\\Content\\Category\\SalesChannel\\CategoryListRoute' => 'getCategoryListRouteService',
            'Shopware\\Core\\Content\\Category\\SalesChannel\\SalesChannelCategoryDefinition' => 'getSalesChannelCategoryDefinitionService',
            'Shopware\\Core\\Content\\Category\\SalesChannel\\TreeBuildingNavigationRoute' => 'getTreeBuildingNavigationRouteService',
            'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsBlock\\CmsBlockDefinition' => 'getCmsBlockDefinitionService',
            'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsPageTranslation\\CmsPageTranslationDefinition' => 'getCmsPageTranslationDefinitionService',
            'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSection\\CmsSectionDefinition' => 'getCmsSectionDefinitionService',
            'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlotTranslation\\CmsSlotTranslationDefinition' => 'getCmsSlotTranslationDefinitionService',
            'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlot\\CmsSlotDefinition' => 'getCmsSlotDefinitionService',
            'Shopware\\Core\\Content\\Cms\\CmsPageDefinition' => 'getCmsPageDefinitionService',
            'Shopware\\Core\\Content\\Cms\\DataAbstractionLayer\\FieldSerializer\\SlotConfigFieldSerializer' => 'getSlotConfigFieldSerializerService',
            'Shopware\\Core\\Content\\Cms\\DataResolver\\CmsSlotsDataResolver' => 'getCmsSlotsDataResolverService',
            'Shopware\\Core\\Content\\Cms\\SalesChannel\\CmsRoute' => 'getCmsRouteService',
            'Shopware\\Core\\Content\\ContactForm\\SalesChannel\\ContactFormRoute' => 'getContactFormRouteService',
            'Shopware\\Core\\Content\\Flow\\Aggregate\\FlowSequence\\FlowSequenceDefinition' => 'getFlowSequenceDefinitionService',
            'Shopware\\Core\\Content\\Flow\\Aggregate\\FlowTemplate\\FlowTemplateDefinition' => 'getFlowTemplateDefinitionService',
            'Shopware\\Core\\Content\\Flow\\Controller\\TriggerFlowController' => 'getTriggerFlowControllerService',
            'Shopware\\Core\\Content\\Flow\\DataAbstractionLayer\\FieldSerializer\\FlowTemplateConfigFieldSerializer' => 'getFlowTemplateConfigFieldSerializerService',
            'Shopware\\Core\\Content\\Flow\\Dispatching\\CachedFlowLoader' => 'getCachedFlowLoaderService',
            'Shopware\\Core\\Content\\Flow\\Dispatching\\FlowExecutor' => 'getFlowExecutorService',
            'Shopware\\Core\\Content\\Flow\\Dispatching\\FlowFactory' => 'getFlowFactoryService',
            'Shopware\\Core\\Content\\Flow\\FlowDefinition' => 'getFlowDefinitionService',
            'Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportFile\\ImportExportFileDefinition' => 'getImportExportFileDefinitionService',
            'Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportLog\\ImportExportLogDefinition' => 'getImportExportLogDefinitionService',
            'Shopware\\Core\\Content\\ImportExport\\Controller\\ImportExportActionController' => 'getImportExportActionControllerService',
            'Shopware\\Core\\Content\\ImportExport\\ImportExportFactory' => 'getImportExportFactoryService',
            'Shopware\\Core\\Content\\ImportExport\\ImportExportProfileDefinition' => 'getImportExportProfileDefinitionService',
            'Shopware\\Core\\Content\\ImportExport\\ImportExportProfileTranslationDefinition' => 'getImportExportProfileTranslationDefinitionService',
            'Shopware\\Core\\Content\\ImportExport\\Message\\ImportExportHandler' => 'getImportExportHandlerService',
            'Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageSalesChannel\\LandingPageSalesChannelDefinition' => 'getLandingPageSalesChannelDefinitionService',
            'Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTag\\LandingPageTagDefinition' => 'getLandingPageTagDefinitionService',
            'Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTranslation\\LandingPageTranslationDefinition' => 'getLandingPageTranslationDefinitionService',
            'Shopware\\Core\\Content\\LandingPage\\LandingPageDefinition' => 'getLandingPageDefinitionService',
            'Shopware\\Core\\Content\\LandingPage\\SalesChannel\\CachedLandingPageRoute' => 'getCachedLandingPageRouteService',
            'Shopware\\Core\\Content\\LandingPage\\SalesChannel\\SalesChannelLandingPageDefinition' => 'getSalesChannelLandingPageDefinitionService',
            'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooterTranslation\\MailHeaderFooterTranslationDefinition' => 'getMailHeaderFooterTranslationDefinitionService',
            'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooter\\MailHeaderFooterDefinition' => 'getMailHeaderFooterDefinitionService',
            'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateMedia\\MailTemplateMediaDefinition' => 'getMailTemplateMediaDefinitionService',
            'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTranslation\\MailTemplateTranslationDefinition' => 'getMailTemplateTranslationDefinitionService',
            'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTypeTranslation\\MailTemplateTypeTranslationDefinition' => 'getMailTemplateTypeTranslationDefinitionService',
            'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateType\\MailTemplateTypeDefinition' => 'getMailTemplateTypeDefinitionService',
            'Shopware\\Core\\Content\\MailTemplate\\Api\\MailActionController' => 'getMailActionControllerService',
            'Shopware\\Core\\Content\\MailTemplate\\MailTemplateDefinition' => 'getMailTemplateDefinitionService',
            'Shopware\\Core\\Content\\Mail\\Service\\MailAttachmentsBuilder' => 'getMailAttachmentsBuilderService',
            'Shopware\\Core\\Content\\Mail\\Service\\MailFactory' => 'getMailFactoryService',
            'Shopware\\Core\\Content\\Mail\\Service\\MailSender' => 'getMailSenderService',
            'Shopware\\Core\\Content\\Media\\Aggregate\\MediaDefaultFolder\\MediaDefaultFolderDefinition' => 'getMediaDefaultFolderDefinitionService',
            'Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfigurationMediaThumbnailSize\\MediaFolderConfigurationMediaThumbnailSizeDefinition' => 'getMediaFolderConfigurationMediaThumbnailSizeDefinitionService',
            'Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfiguration\\MediaFolderConfigurationDefinition' => 'getMediaFolderConfigurationDefinitionService',
            'Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolder\\MediaFolderDefinition' => 'getMediaFolderDefinitionService',
            'Shopware\\Core\\Content\\Media\\Aggregate\\MediaTag\\MediaTagDefinition' => 'getMediaTagDefinitionService',
            'Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnailSize\\MediaThumbnailSizeDefinition' => 'getMediaThumbnailSizeDefinitionService',
            'Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnail\\MediaThumbnailDefinition' => 'getMediaThumbnailDefinitionService',
            'Shopware\\Core\\Content\\Media\\Aggregate\\MediaTranslation\\MediaTranslationDefinition' => 'getMediaTranslationDefinitionService',
            'Shopware\\Core\\Content\\Media\\Api\\MediaFolderController' => 'getMediaFolderControllerService',
            'Shopware\\Core\\Content\\Media\\Api\\MediaUploadController' => 'getMediaUploadControllerService',
            'Shopware\\Core\\Content\\Media\\Core\\Strategy\\BCStrategy' => 'getBCStrategyService',
            'Shopware\\Core\\Content\\Media\\File\\FileSaver' => 'getFileSaverService',
            'Shopware\\Core\\Content\\Media\\MediaDefinition' => 'getMediaDefinitionService',
            'Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipientTag\\NewsletterRecipientTagDefinition' => 'getNewsletterRecipientTagDefinitionService',
            'Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipient\\NewsletterRecipientDefinition' => 'getNewsletterRecipientDefinitionService',
            'Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterConfirmRoute' => 'getNewsletterConfirmRouteService',
            'Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterSubscribeRoute' => 'getNewsletterSubscribeRouteService',
            'Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterUnsubscribeRoute' => 'getNewsletterUnsubscribeRouteService',
            'Shopware\\Core\\Content\\Newsletter\\SalesChannel\\SalesChannelNewsletterRecipientDefinition' => 'getSalesChannelNewsletterRecipientDefinitionService',
            'Shopware\\Core\\Content\\ProductExport\\Api\\ProductExportController' => 'getProductExportControllerService',
            'Shopware\\Core\\Content\\ProductExport\\ProductExportDefinition' => 'getProductExportDefinitionService',
            'Shopware\\Core\\Content\\ProductExport\\ProductExportHydrator' => 'getProductExportHydratorService',
            'Shopware\\Core\\Content\\ProductExport\\SalesChannel\\ExportController' => 'getExportControllerService',
            'Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator' => 'getProductExportGeneratorService',
            'Shopware\\Core\\Content\\ProductExport\\Service\\ProductExporter' => 'getProductExporterService',
            'Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamFilter\\ProductStreamFilterDefinition' => 'getProductStreamFilterDefinitionService',
            'Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamFilter\\ProductStreamFilterHydrator' => 'getProductStreamFilterHydratorService',
            'Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamTranslation\\ProductStreamTranslationDefinition' => 'getProductStreamTranslationDefinitionService',
            'Shopware\\Core\\Content\\ProductStream\\ProductStreamDefinition' => 'getProductStreamDefinitionService',
            'Shopware\\Core\\Content\\ProductStream\\ProductStreamHydrator' => 'getProductStreamHydratorService',
            'Shopware\\Core\\Content\\ProductStream\\Service\\ProductStreamBuilder' => 'getProductStreamBuilderService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategoryTree\\ProductCategoryTreeDefinition' => 'getProductCategoryTreeDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategory\\ProductCategoryDefinition' => 'getProductCategoryDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductConfiguratorSetting\\ProductConfiguratorSettingDefinition' => 'getProductConfiguratorSettingDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductConfiguratorSetting\\ProductConfiguratorSettingHydrator' => 'getProductConfiguratorSettingHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingAssignedProducts\\ProductCrossSellingAssignedProductsDefinition' => 'getProductCrossSellingAssignedProductsDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingAssignedProducts\\ProductCrossSellingAssignedProductsHydrator' => 'getProductCrossSellingAssignedProductsHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingTranslation\\ProductCrossSellingTranslationDefinition' => 'getProductCrossSellingTranslationDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSelling\\ProductCrossSellingDefinition' => 'getProductCrossSellingDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSelling\\ProductCrossSellingHydrator' => 'getProductCrossSellingHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCustomFieldSet\\ProductCustomFieldSetDefinition' => 'getProductCustomFieldSetDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductDownload\\ProductDownloadDefinition' => 'getProductDownloadDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSetTranslation\\ProductFeatureSetTranslationDefinition' => 'getProductFeatureSetTranslationDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSet\\ProductFeatureSetDefinition' => 'getProductFeatureSetDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSet\\ProductFeatureSetHydrator' => 'getProductFeatureSetHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductKeywordDictionary\\ProductKeywordDictionaryDefinition' => 'getProductKeywordDictionaryDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductKeywordDictionary\\ProductKeywordDictionaryHydrator' => 'getProductKeywordDictionaryHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturerTranslation\\ProductManufacturerTranslationDefinition' => 'getProductManufacturerTranslationDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturer\\ProductManufacturerDefinition' => 'getProductManufacturerDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturer\\ProductManufacturerHydrator' => 'getProductManufacturerHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductMedia\\ProductMediaDefinition' => 'getProductMediaDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductMedia\\ProductMediaHydrator' => 'getProductMediaHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductOption\\ProductOptionDefinition' => 'getProductOptionDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductPrice\\ProductPriceDefinition' => 'getProductPriceDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductPrice\\ProductPriceHydrator' => 'getProductPriceHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductProperty\\ProductPropertyDefinition' => 'getProductPropertyDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductReview\\ProductReviewDefinition' => 'getProductReviewDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductReview\\ProductReviewHydrator' => 'getProductReviewHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfigField\\ProductSearchConfigFieldDefinition' => 'getProductSearchConfigFieldDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfigField\\ProductSearchConfigFieldHydrator' => 'getProductSearchConfigFieldHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfig\\ProductSearchConfigDefinition' => 'getProductSearchConfigDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfig\\ProductSearchConfigHydrator' => 'getProductSearchConfigHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchKeyword\\ProductSearchKeywordDefinition' => 'getProductSearchKeywordDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchKeyword\\ProductSearchKeywordHydrator' => 'getProductSearchKeywordHydratorService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductStreamMapping\\ProductStreamMappingDefinition' => 'getProductStreamMappingDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductTag\\ProductTagDefinition' => 'getProductTagDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductTranslation\\ProductTranslationDefinition' => 'getProductTranslationDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductVisibility\\ProductVisibilityDefinition' => 'getProductVisibilityDefinitionService',
            'Shopware\\Core\\Content\\Product\\Aggregate\\ProductVisibility\\ProductVisibilityHydrator' => 'getProductVisibilityHydratorService',
            'Shopware\\Core\\Content\\Product\\Api\\ProductActionController' => 'getProductActionControllerService',
            'Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\CheapestPrice\\CheapestPriceAccessorBuilder' => 'getCheapestPriceAccessorBuilderService',
            'Shopware\\Core\\Content\\Product\\ProductDefinition' => 'getProductDefinitionService',
            'Shopware\\Core\\Content\\Product\\ProductHydrator' => 'getProductHydratorService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute' => 'getCachedProductCrossSellingRouteService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Detail\\CachedProductDetailRoute' => 'getCachedProductDetailRouteService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\FindVariant\\FindProductVariantRoute' => 'getFindProductVariantRouteService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\CachedProductListingRoute' => 'getCachedProductListingRouteService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ResolveCriteriaProductListingRoute' => 'getResolveCriteriaProductListingRouteService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\ProductListRoute' => 'getProductListRouteService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\CachedProductReviewRoute' => 'getCachedProductReviewRouteService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\ProductReviewSaveRoute' => 'getProductReviewSaveRouteService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\SalesChannelProductDefinition' => 'getSalesChannelProductDefinitionService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Search\\CachedProductSearchRoute' => 'getCachedProductSearchRouteService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Search\\ResolvedCriteriaProductSearchRoute' => 'getResolvedCriteriaProductSearchRouteService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingDefinition' => 'getProductSortingDefinitionService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingHydrator' => 'getProductSortingHydratorService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingTranslationDefinition' => 'getProductSortingTranslationDefinitionService',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Suggest\\CachedProductSuggestRoute' => 'getCachedProductSuggestRouteService',
            'Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOptionTranslation\\PropertyGroupOptionTranslationDefinition' => 'getPropertyGroupOptionTranslationDefinitionService',
            'Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOption\\PropertyGroupOptionDefinition' => 'getPropertyGroupOptionDefinitionService',
            'Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOption\\PropertyGroupOptionHydrator' => 'getPropertyGroupOptionHydratorService',
            'Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupTranslation\\PropertyGroupTranslationDefinition' => 'getPropertyGroupTranslationDefinitionService',
            'Shopware\\Core\\Content\\Property\\PropertyGroupDefinition' => 'getPropertyGroupDefinitionService',
            'Shopware\\Core\\Content\\Property\\PropertyGroupHydrator' => 'getPropertyGroupHydratorService',
            'Shopware\\Core\\Content\\Rule\\Aggregate\\RuleCondition\\RuleConditionDefinition' => 'getRuleConditionDefinitionService',
            'Shopware\\Core\\Content\\Rule\\Aggregate\\RuleTag\\RuleTagDefinition' => 'getRuleTagDefinitionService',
            'Shopware\\Core\\Content\\Rule\\RuleDefinition' => 'getRuleDefinitionService',
            'Shopware\\Core\\Content\\Seo\\Api\\SeoActionController' => 'getSeoActionControllerService',
            'Shopware\\Core\\Content\\Seo\\EmptyPathInfoResolver' => 'getEmptyPathInfoResolverService',
            'Shopware\\Core\\Content\\Seo\\Entity\\Dbal\\SeoUrlAssociationFieldResolver' => 'getSeoUrlAssociationFieldResolverService',
            'Shopware\\Core\\Content\\Seo\\Entity\\Serializer\\SeoUrlFieldSerializer' => 'getSeoUrlFieldSerializerService',
            'Shopware\\Core\\Content\\Seo\\MainCategory\\MainCategoryDefinition' => 'getMainCategoryDefinitionService',
            'Shopware\\Core\\Content\\Seo\\MainCategory\\SalesChannel\\SalesChannelMainCategoryDefinition' => 'getSalesChannelMainCategoryDefinitionService',
            'Shopware\\Core\\Content\\Seo\\SalesChannel\\SeoUrlRoute' => 'getSeoUrlRouteService',
            'Shopware\\Core\\Content\\Seo\\SeoUrlPlaceholderHandlerInterface' => 'getSeoUrlPlaceholderHandlerInterfaceService',
            'Shopware\\Core\\Content\\Seo\\SeoUrlTemplate\\SeoUrlTemplateDefinition' => 'getSeoUrlTemplateDefinitionService',
            'Shopware\\Core\\Content\\Seo\\SeoUrl\\SalesChannel\\SalesChannelSeoUrlDefinition' => 'getSalesChannelSeoUrlDefinitionService',
            'Shopware\\Core\\Content\\Seo\\SeoUrl\\SeoUrlDefinition' => 'getSeoUrlDefinitionService',
            'Shopware\\Core\\Content\\Sitemap\\SalesChannel\\CachedSitemapRoute' => 'getCachedSitemapRouteService',
            'Shopware\\Core\\Framework\\Adapter\\Asset\\AssetPackageService' => 'getAssetPackageServiceService',
            'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheIdLoader' => 'getCacheIdLoaderService',
            'Shopware\\Core\\Framework\\Adapter\\Cache\\Script\\Facade\\CacheInvalidatorFacadeHookFactory' => 'getCacheInvalidatorFacadeHookFactoryService',
            'Shopware\\Core\\Framework\\Adapter\\Twig\\AppTemplateIterator' => 'getAppTemplateIteratorService',
            'Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder' => 'getTemplateFinderService',
            'Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateIterator' => 'getTemplateIteratorService',
            'Shopware\\Core\\Framework\\Api\\Acl\\AclCriteriaValidator' => 'getAclCriteriaValidatorService',
            'Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclRoleDefinition' => 'getAclRoleDefinitionService',
            'Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclUserRoleDefinition' => 'getAclUserRoleDefinitionService',
            'Shopware\\Core\\Framework\\Api\\Controller\\AccessKeyController' => 'getAccessKeyControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\AclController' => 'getAclControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\ApiController' => 'getApiControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\AuthController' => 'getAuthControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\CacheController' => 'getCacheControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\CustomSnippetFormatController' => 'getCustomSnippetFormatControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\FallbackController' => 'getFallbackControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\IndexingController' => 'getIndexingControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\InfoController' => 'getInfoControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\IntegrationController' => 'getIntegrationControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\SalesChannelProxyController' => 'getSalesChannelProxyControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\SyncController' => 'getSyncControllerService',
            'Shopware\\Core\\Framework\\Api\\Controller\\UserController' => 'getUserControllerService',
            'Shopware\\Core\\Framework\\Api\\Sync\\SyncService' => 'getSyncServiceService',
            'Shopware\\Core\\Framework\\App\\Aggregate\\ActionButtonTranslation\\ActionButtonTranslationDefinition' => 'getActionButtonTranslationDefinitionService',
            'Shopware\\Core\\Framework\\App\\Aggregate\\ActionButton\\ActionButtonDefinition' => 'getActionButtonDefinitionService',
            'Shopware\\Core\\Framework\\App\\Aggregate\\AppPaymentMethod\\AppPaymentMethodDefinition' => 'getAppPaymentMethodDefinitionService',
            'Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptConditionTranslation\\AppScriptConditionTranslationDefinition' => 'getAppScriptConditionTranslationDefinitionService',
            'Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptCondition\\AppScriptConditionDefinition' => 'getAppScriptConditionDefinitionService',
            'Shopware\\Core\\Framework\\App\\Aggregate\\AppShippingMethod\\AppShippingMethodDefinition' => 'getAppShippingMethodDefinitionService',
            'Shopware\\Core\\Framework\\App\\Aggregate\\AppTranslation\\AppTranslationDefinition' => 'getAppTranslationDefinitionService',
            'Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlockTranslation\\AppCmsBlockTranslationDefinition' => 'getAppCmsBlockTranslationDefinitionService',
            'Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlock\\AppCmsBlockDefinition' => 'getAppCmsBlockDefinitionService',
            'Shopware\\Core\\Framework\\App\\Aggregate\\FlowActionTranslation\\AppFlowActionTranslationDefinition' => 'getAppFlowActionTranslationDefinitionService',
            'Shopware\\Core\\Framework\\App\\Aggregate\\FlowAction\\AppFlowActionDefinition' => 'getAppFlowActionDefinitionService',
            'Shopware\\Core\\Framework\\App\\Aggregate\\FlowEvent\\AppFlowEventDefinition' => 'getAppFlowEventDefinitionService',
            'Shopware\\Core\\Framework\\App\\Api\\AppActionController' => 'getAppActionControllerService',
            'Shopware\\Core\\Framework\\App\\Api\\AppCmsController' => 'getAppCmsControllerService',
            'Shopware\\Core\\Framework\\App\\Api\\AppJWTGenerateRoute' => 'getAppJWTGenerateRouteService',
            'Shopware\\Core\\Framework\\App\\Api\\AppUrlChangeController' => 'getAppUrlChangeControllerService',
            'Shopware\\Core\\Framework\\App\\AppDefinition' => 'getAppDefinitionService',
            'Shopware\\Core\\Framework\\App\\AppLocaleProvider' => 'getAppLocaleProviderService',
            'Shopware\\Core\\Framework\\App\\AppUrlChangeResolver\\Resolver' => 'getResolverService',
            'Shopware\\Core\\Framework\\App\\FlowAction\\AppFlowActionProvider' => 'getAppFlowActionProviderService',
            'Shopware\\Core\\Framework\\App\\Flow\\Action\\AppFlowActionProvider' => 'getAppFlowActionProvider2Service',
            'Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider' => 'getShopIdProviderService',
            'Shopware\\Core\\Framework\\App\\Template\\TemplateDefinition' => 'getTemplateDefinitionService',
            'Shopware\\Core\\Framework\\App\\Template\\TemplateStateService' => 'getTemplateStateServiceService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator' => 'getEntityCacheKeyGeneratorService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityHydrator' => 'getEntityHydratorService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldAccessorBuilder\\ConfigJsonFieldAccessorBuilder' => 'getConfigJsonFieldAccessorBuilderService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldAccessorBuilder\\CustomFieldsAccessorBuilder' => 'getCustomFieldsAccessorBuilderService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldAccessorBuilder\\DefaultFieldAccessorBuilder' => 'getDefaultFieldAccessorBuilderService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldAccessorBuilder\\JsonFieldAccessorBuilder' => 'getJsonFieldAccessorBuilderService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldAccessorBuilder\\PriceFieldAccessorBuilder' => 'getPriceFieldAccessorBuilderService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldResolver\\ManyToManyAssociationFieldResolver' => 'getManyToManyAssociationFieldResolverService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldResolver\\ManyToOneAssociationFieldResolver' => 'getManyToOneAssociationFieldResolverService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldResolver\\OneToManyAssociationFieldResolver' => 'getOneToManyAssociationFieldResolverService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldResolver\\TranslationFieldResolver' => 'getTranslationFieldResolverService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\JoinGroupBuilder' => 'getJoinGroupBuilderService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry' => 'getDefinitionInstanceRegistryService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory' => 'getEntityLoadedEventFactoryService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\ExtensionRegistry' => 'getExtensionRegistryService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Facade\\RepositoryFacadeHookFactory' => 'getRepositoryFacadeHookFactoryService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Facade\\RepositoryWriterFacadeHookFactory' => 'getRepositoryWriterFacadeHookFactoryService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Facade\\SalesChannelRepositoryFacadeHookFactory' => 'getSalesChannelRepositoryFacadeHookFactoryService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\BlobFieldSerializer' => 'getBlobFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\BoolFieldSerializer' => 'getBoolFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CalculatedPriceFieldSerializer' => 'getCalculatedPriceFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CartPriceFieldSerializer' => 'getCartPriceFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CashRoundingConfigFieldSerializer' => 'getCashRoundingConfigFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\ConfigJsonFieldSerializer' => 'getConfigJsonFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CreatedAtFieldSerializer' => 'getCreatedAtFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CreatedByFieldSerializer' => 'getCreatedByFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CronIntervalFieldSerializer' => 'getCronIntervalFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CustomFieldsSerializer' => 'getCustomFieldsSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\DateFieldSerializer' => 'getDateFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\DateIntervalFieldSerializer' => 'getDateIntervalFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\DateTimeFieldSerializer' => 'getDateTimeFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\EmailFieldSerializer' => 'getEmailFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\FkFieldSerializer' => 'getFkFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\FloatFieldSerializer' => 'getFloatFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\IdFieldSerializer' => 'getIdFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\IntFieldSerializer' => 'getIntFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\JsonFieldSerializer' => 'getJsonFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\ListFieldSerializer' => 'getListFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\LongTextFieldSerializer' => 'getLongTextFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\ManyToManyAssociationFieldSerializer' => 'getManyToManyAssociationFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\ManyToOneAssociationFieldSerializer' => 'getManyToOneAssociationFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\OneToManyAssociationFieldSerializer' => 'getOneToManyAssociationFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\OneToOneAssociationFieldSerializer' => 'getOneToOneAssociationFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\PHPUnserializeFieldSerializer' => 'getPHPUnserializeFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\PasswordFieldSerializer' => 'getPasswordFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\PriceDefinitionFieldSerializer' => 'getPriceDefinitionFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\PriceFieldSerializer' => 'getPriceFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\ReferenceVersionFieldSerializer' => 'getReferenceVersionFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\RemoteAddressFieldSerializer' => 'getRemoteAddressFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\StateMachineStateFieldSerializer' => 'getStateMachineStateFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\StringFieldSerializer' => 'getStringFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\TaxFreeConfigFieldSerializer' => 'getTaxFreeConfigFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\TimeZoneFieldSerializer' => 'getTimeZoneFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\TranslatedFieldSerializer' => 'getTranslatedFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\TranslationsAssociationFieldSerializer' => 'getTranslationsAssociationFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\UpdatedAtFieldSerializer' => 'getUpdatedAtFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\UpdatedByFieldSerializer' => 'getUpdatedByFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\VariantListingConfigFieldSerializer' => 'getVariantListingConfigFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\VersionDataPayloadFieldSerializer' => 'getVersionDataPayloadFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\VersionFieldSerializer' => 'getVersionFieldSerializerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry' => 'getEntityIndexerRegistryService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface' => 'getEntityReaderInterfaceService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface' => 'getEntityAggregatorInterfaceService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface' => 'getEntitySearcherInterfaceService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager' => 'getVersionManagerService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommitData\\VersionCommitDataDefinition' => 'getVersionCommitDataDefinitionService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommit\\VersionCommitDefinition' => 'getVersionCommitDefinitionService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\VersionDefinition' => 'getVersionDefinitionService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriteGatewayInterface' => 'getEntityWriteGatewayInterfaceService',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter' => 'getEntityWriterService',
            'Shopware\\Core\\Framework\\Event\\BusinessEventCollector' => 'getBusinessEventCollectorService',
            'Shopware\\Core\\Framework\\Event\\BusinessEventRegistry' => 'getBusinessEventRegistryService',
            'Shopware\\Core\\Framework\\Increment\\Controller\\IncrementApiController' => 'getIncrementApiControllerService',
            'Shopware\\Core\\Framework\\Log\\LogEntryDefinition' => 'getLogEntryDefinitionService',
            'Shopware\\Core\\Framework\\MessageQueue\\Api\\ConsumeMessagesController' => 'getConsumeMessagesControllerService',
            'Shopware\\Core\\Framework\\MessageQueue\\Api\\ScheduledTaskController' => 'getScheduledTaskControllerService',
            'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\ScheduledTaskDefinition' => 'getScheduledTaskDefinitionService',
            'Shopware\\Core\\Framework\\Migration\\IndexerQueuer' => 'getIndexerQueuerService',
            'Shopware\\Core\\Framework\\Migration\\MigrationCollectionLoader' => 'getMigrationCollectionLoaderService',
            'Shopware\\Core\\Framework\\Plugin\\Aggregate\\PluginTranslation\\PluginTranslationDefinition' => 'getPluginTranslationDefinitionService',
            'Shopware\\Core\\Framework\\Plugin\\KernelPluginCollection' => 'getKernelPluginCollectionService',
            'Shopware\\Core\\Framework\\Plugin\\KernelPluginLoader\\KernelPluginLoader' => 'getKernelPluginLoaderService',
            'Shopware\\Core\\Framework\\Plugin\\PluginDefinition' => 'getPluginDefinitionService',
            'Shopware\\Core\\Framework\\Plugin\\Util\\PluginIdProvider' => 'getPluginIdProviderService',
            'Shopware\\Core\\Framework\\Routing\\CanonicalRedirectService' => 'getCanonicalRedirectServiceService',
            'Shopware\\Core\\Framework\\Routing\\Facade\\RequestFacadeFactory' => 'getRequestFacadeFactoryService',
            'Shopware\\Core\\Framework\\Routing\\RequestTransformerInterface' => 'getRequestTransformerInterfaceService',
            'Shopware\\Core\\Framework\\Rule\\Api\\RuleConfigController' => 'getRuleConfigControllerService',
            'Shopware\\Core\\Framework\\Script\\Api\\ScriptApiRoute' => 'getScriptApiRouteService',
            'Shopware\\Core\\Framework\\Script\\Api\\ScriptResponseFactoryFacadeHookFactory' => 'getScriptResponseFactoryFacadeHookFactoryService',
            'Shopware\\Core\\Framework\\Script\\Api\\ScriptStoreApiRoute' => 'getScriptStoreApiRouteService',
            'Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor' => 'getScriptExecutorService',
            'Shopware\\Core\\Framework\\Script\\ScriptDefinition' => 'getScriptDefinitionService',
            'Shopware\\Core\\Framework\\Store\\Api\\ExtensionStoreActionsController' => 'getExtensionStoreActionsControllerService',
            'Shopware\\Core\\Framework\\Store\\Api\\ExtensionStoreDataController' => 'getExtensionStoreDataControllerService',
            'Shopware\\Core\\Framework\\Store\\Api\\ExtensionStoreLicensesController' => 'getExtensionStoreLicensesControllerService',
            'Shopware\\Core\\Framework\\Store\\Api\\FirstRunWizardController' => 'getFirstRunWizardControllerService',
            'Shopware\\Core\\Framework\\Store\\Api\\StoreController' => 'getStoreControllerService',
            'Shopware\\Core\\Framework\\Store\\Authentication\\StoreRequestOptionsProvider' => 'getStoreRequestOptionsProviderService',
            'Shopware\\Core\\Framework\\Store\\Services\\ShopSecretInvalidMiddleware' => 'getShopSecretInvalidMiddlewareService',
            'Shopware\\Core\\Framework\\Store\\Services\\StoreSessionExpiredMiddleware' => 'getStoreSessionExpiredMiddlewareService',
            'Shopware\\Core\\Framework\\Store\\Services\\VerifyResponseSignatureMiddleware' => 'getVerifyResponseSignatureMiddlewareService',
            'Shopware\\Core\\Framework\\Update\\Api\\UpdateController' => 'getUpdateControllerService',
            'Shopware\\Core\\Framework\\Util\\HtmlSanitizer' => 'getHtmlSanitizerService',
            'Shopware\\Core\\Framework\\Webhook\\EventLog\\WebhookEventLogDefinition' => 'getWebhookEventLogDefinitionService',
            'Shopware\\Core\\Framework\\Webhook\\WebhookDefinition' => 'getWebhookDefinitionService',
            'Shopware\\Core\\Maintenance\\SalesChannel\\Service\\SalesChannelCreator' => 'getSalesChannelCreatorService',
            'Shopware\\Core\\Maintenance\\User\\Service\\UserProvisioner' => 'getUserProvisionerService',
            'Shopware\\Core\\Profiling\\Profiler' => 'getProfilerService',
            'Shopware\\Core\\System\\Country\\Aggregate\\CountryStateTranslation\\CountryStateTranslationDefinition' => 'getCountryStateTranslationDefinitionService',
            'Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\CountryStateDefinition' => 'getCountryStateDefinitionService',
            'Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\SalesChannel\\SalesChannelCountryStateDefinition' => 'getSalesChannelCountryStateDefinitionService',
            'Shopware\\Core\\System\\Country\\Aggregate\\CountryTranslation\\CountryTranslationDefinition' => 'getCountryTranslationDefinitionService',
            'Shopware\\Core\\System\\Country\\CountryDefinition' => 'getCountryDefinitionService',
            'Shopware\\Core\\System\\Country\\SalesChannel\\CachedCountryRoute' => 'getCachedCountryRouteService',
            'Shopware\\Core\\System\\Country\\SalesChannel\\CachedCountryStateRoute' => 'getCachedCountryStateRouteService',
            'Shopware\\Core\\System\\Country\\SalesChannel\\SalesChannelCountryDefinition' => 'getSalesChannelCountryDefinitionService',
            'Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyCountryRounding\\CurrencyCountryRoundingDefinition' => 'getCurrencyCountryRoundingDefinitionService',
            'Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyTranslation\\CurrencyTranslationDefinition' => 'getCurrencyTranslationDefinitionService',
            'Shopware\\Core\\System\\Currency\\CurrencyDefinition' => 'getCurrencyDefinitionService',
            'Shopware\\Core\\System\\Currency\\CurrencyFormatter' => 'getCurrencyFormatterService',
            'Shopware\\Core\\System\\Currency\\SalesChannel\\CachedCurrencyRoute' => 'getCachedCurrencyRouteService',
            'Shopware\\Core\\System\\Currency\\SalesChannel\\SalesChannelCurrencyDefinition' => 'getSalesChannelCurrencyDefinitionService',
            'Shopware\\Core\\System\\CustomEntity\\Api\\CustomEntityApiController' => 'getCustomEntityApiControllerService',
            'Shopware\\Core\\System\\CustomEntity\\CustomEntityDefinition' => 'getCustomEntityDefinitionService',
            'Shopware\\Core\\System\\CustomEntity\\CustomEntityRegistrar' => 'getCustomEntityRegistrarService',
            'Shopware\\Core\\System\\CustomEntity\\Schema\\CustomEntitySchemaUpdater' => 'getCustomEntitySchemaUpdaterService',
            'Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSetRelation\\CustomFieldSetRelationDefinition' => 'getCustomFieldSetRelationDefinitionService',
            'Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSet\\CustomFieldSetDefinition' => 'getCustomFieldSetDefinitionService',
            'Shopware\\Core\\System\\CustomField\\Api\\CustomFieldSetActionController' => 'getCustomFieldSetActionControllerService',
            'Shopware\\Core\\System\\CustomField\\CustomFieldDefinition' => 'getCustomFieldDefinitionService',
            'Shopware\\Core\\System\\DeliveryTime\\Aggregate\\DeliveryTimeTranslation\\DeliveryTimeTranslationDefinition' => 'getDeliveryTimeTranslationDefinitionService',
            'Shopware\\Core\\System\\DeliveryTime\\DeliveryTimeDefinition' => 'getDeliveryTimeDefinitionService',
            'Shopware\\Core\\System\\Integration\\Aggregate\\IntegrationRole\\IntegrationRoleDefinition' => 'getIntegrationRoleDefinitionService',
            'Shopware\\Core\\System\\Integration\\IntegrationDefinition' => 'getIntegrationDefinitionService',
            'Shopware\\Core\\System\\Language\\LanguageDefinition' => 'getLanguageDefinitionService',
            'Shopware\\Core\\System\\Language\\SalesChannel\\CachedLanguageRoute' => 'getCachedLanguageRouteService',
            'Shopware\\Core\\System\\Language\\SalesChannel\\SalesChannelLanguageDefinition' => 'getSalesChannelLanguageDefinitionService',
            'Shopware\\Core\\System\\Locale\\Aggregate\\LocaleTranslation\\LocaleTranslationDefinition' => 'getLocaleTranslationDefinitionService',
            'Shopware\\Core\\System\\Locale\\LocaleDefinition' => 'getLocaleDefinitionService',
            'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeSalesChannel\\NumberRangeSalesChannelDefinition' => 'getNumberRangeSalesChannelDefinitionService',
            'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeState\\NumberRangeStateDefinition' => 'getNumberRangeStateDefinitionService',
            'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTranslation\\NumberRangeTranslationDefinition' => 'getNumberRangeTranslationDefinitionService',
            'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTypeTranslation\\NumberRangeTypeTranslationDefinition' => 'getNumberRangeTypeTranslationDefinitionService',
            'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeType\\NumberRangeTypeDefinition' => 'getNumberRangeTypeDefinitionService',
            'Shopware\\Core\\System\\NumberRange\\Api\\NumberRangeController' => 'getNumberRangeControllerService',
            'Shopware\\Core\\System\\NumberRange\\NumberRangeDefinition' => 'getNumberRangeDefinitionService',
            'Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface' => 'getNumberRangeValueGeneratorInterfaceService',
            'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelAnalytics\\SalesChannelAnalyticsDefinition' => 'getSalesChannelAnalyticsDefinitionService',
            'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCountry\\SalesChannelCountryDefinition' => 'getSalesChannelCountryDefinition2Service',
            'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCurrency\\SalesChannelCurrencyDefinition' => 'getSalesChannelCurrencyDefinition2Service',
            'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelDomain\\SalesChannelDomainDefinition' => 'getSalesChannelDomainDefinitionService',
            'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelLanguage\\SalesChannelLanguageDefinition' => 'getSalesChannelLanguageDefinition2Service',
            'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelPaymentMethod\\SalesChannelPaymentMethodDefinition' => 'getSalesChannelPaymentMethodDefinition2Service',
            'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelShippingMethod\\SalesChannelShippingMethodDefinition' => 'getSalesChannelShippingMethodDefinition2Service',
            'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTranslation\\SalesChannelTranslationDefinition' => 'getSalesChannelTranslationDefinitionService',
            'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTypeTranslation\\SalesChannelTypeTranslationDefinition' => 'getSalesChannelTypeTranslationDefinitionService',
            'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelType\\SalesChannelTypeDefinition' => 'getSalesChannelTypeDefinitionService',
            'Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory' => 'getSalesChannelContextFactoryService',
            'Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry' => 'getSalesChannelDefinitionInstanceRegistryService',
            'Shopware\\Core\\System\\SalesChannel\\SalesChannelDefinition' => 'getSalesChannelDefinitionService',
            'Shopware\\Core\\System\\SalesChannel\\SalesChannel\\ContextRoute' => 'getContextRouteService',
            'Shopware\\Core\\System\\SalesChannel\\SalesChannel\\ContextSwitchRoute' => 'getContextSwitchRouteService',
            'Shopware\\Core\\System\\SalesChannel\\SalesChannel\\StoreApiInfoController' => 'getStoreApiInfoControllerService',
            'Shopware\\Core\\System\\Salutation\\Aggregate\\SalutationTranslation\\SalutationTranslationDefinition' => 'getSalutationTranslationDefinitionService',
            'Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute' => 'getCachedSalutationRouteService',
            'Shopware\\Core\\System\\Salutation\\SalesChannel\\SalesChannelSalutationDefinition' => 'getSalesChannelSalutationDefinitionService',
            'Shopware\\Core\\System\\Salutation\\SalutationDefinition' => 'getSalutationDefinitionService',
            'Shopware\\Core\\System\\Snippet\\Aggregate\\SnippetSet\\SnippetSetDefinition' => 'getSnippetSetDefinitionService',
            'Shopware\\Core\\System\\Snippet\\Api\\SnippetController' => 'getSnippetControllerService',
            'Shopware\\Core\\System\\Snippet\\Files\\SnippetFileCollection' => 'getSnippetFileCollectionService',
            'Shopware\\Core\\System\\Snippet\\Filter\\SnippetFilterFactory' => 'getSnippetFilterFactoryService',
            'Shopware\\Core\\System\\Snippet\\SnippetDefinition' => 'getSnippetDefinitionService',
            'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineHistory\\StateMachineHistoryDefinition' => 'getStateMachineHistoryDefinitionService',
            'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateDefinition' => 'getStateMachineStateDefinitionService',
            'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateTranslationDefinition' => 'getStateMachineStateTranslationDefinitionService',
            'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineTransition\\StateMachineTransitionDefinition' => 'getStateMachineTransitionDefinitionService',
            'Shopware\\Core\\System\\StateMachine\\Api\\StateMachineActionController' => 'getStateMachineActionControllerService',
            'Shopware\\Core\\System\\StateMachine\\StateMachineDefinition' => 'getStateMachineDefinitionService',
            'Shopware\\Core\\System\\StateMachine\\StateMachineTranslationDefinition' => 'getStateMachineTranslationDefinitionService',
            'Shopware\\Core\\System\\SystemConfig\\Api\\SystemConfigController' => 'getSystemConfigControllerService',
            'Shopware\\Core\\System\\SystemConfig\\Facade\\SystemConfigFacadeHookFactory' => 'getSystemConfigFacadeHookFactoryService',
            'Shopware\\Core\\System\\SystemConfig\\SystemConfigDefinition' => 'getSystemConfigDefinitionService',
            'Shopware\\Core\\System\\SystemConfig\\SystemConfigService' => 'getSystemConfigServiceService',
            'Shopware\\Core\\System\\Tag\\Service\\FilterTagIdsService' => 'getFilterTagIdsServiceService',
            'Shopware\\Core\\System\\Tag\\TagDefinition' => 'getTagDefinitionService',
            'Shopware\\Core\\System\\TaxProvider\\Aggregate\\TaxProviderTranslation\\TaxProviderTranslationDefinition' => 'getTaxProviderTranslationDefinitionService',
            'Shopware\\Core\\System\\TaxProvider\\TaxProviderDefinition' => 'getTaxProviderDefinitionService',
            'Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleTypeTranslation\\TaxRuleTypeTranslationDefinition' => 'getTaxRuleTypeTranslationDefinitionService',
            'Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleType\\TaxRuleTypeDefinition' => 'getTaxRuleTypeDefinitionService',
            'Shopware\\Core\\System\\Tax\\Aggregate\\TaxRule\\TaxRuleDefinition' => 'getTaxRuleDefinitionService',
            'Shopware\\Core\\System\\Tax\\TaxDefinition' => 'getTaxDefinitionService',
            'Shopware\\Core\\System\\Unit\\Aggregate\\UnitTranslation\\UnitTranslationDefinition' => 'getUnitTranslationDefinitionService',
            'Shopware\\Core\\System\\Unit\\UnitDefinition' => 'getUnitDefinitionService',
            'Shopware\\Core\\System\\UsageData\\Api\\ConsentController' => 'getConsentControllerService',
            'Shopware\\Core\\System\\UsageData\\Services\\IntegrationChangedService' => 'getIntegrationChangedServiceService',
            'Shopware\\Core\\System\\User\\Aggregate\\UserAccessKey\\UserAccessKeyDefinition' => 'getUserAccessKeyDefinitionService',
            'Shopware\\Core\\System\\User\\Aggregate\\UserConfig\\UserConfigDefinition' => 'getUserConfigDefinitionService',
            'Shopware\\Core\\System\\User\\Aggregate\\UserRecovery\\UserRecoveryDefinition' => 'getUserRecoveryDefinitionService',
            'Shopware\\Core\\System\\User\\Api\\UserRecoveryController' => 'getUserRecoveryControllerService',
            'Shopware\\Core\\System\\User\\Api\\UserValidationController' => 'getUserValidationControllerService',
            'Shopware\\Core\\System\\User\\UserDefinition' => 'getUserDefinitionService',
            'Shopware\\Elasticsearch\\Admin\\AdminElasticsearchHelper' => 'getAdminElasticsearchHelperService',
            'Shopware\\Elasticsearch\\Admin\\AdminSearchController' => 'getAdminSearchController2Service',
            'Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper' => 'getElasticsearchHelperService',
            'Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler' => 'getCreateAliasTaskHandlerService',
            'Shopware\\Elasticsearch\\Product\\EsProductDefinition' => 'getEsProductDefinitionService',
            'Shopware\\Storefront\\Controller\\AccountOrderController' => 'getAccountOrderControllerService',
            'Shopware\\Storefront\\Controller\\AccountPaymentController' => 'getAccountPaymentControllerService',
            'Shopware\\Storefront\\Controller\\AccountProfileController' => 'getAccountProfileControllerService',
            'Shopware\\Storefront\\Controller\\AddressController' => 'getAddressControllerService',
            'Shopware\\Storefront\\Controller\\Api\\CaptchaController' => 'getCaptchaControllerService',
            'Shopware\\Storefront\\Controller\\AppController' => 'getAppControllerService',
            'Shopware\\Storefront\\Controller\\AuthController' => 'getAuthController2Service',
            'Shopware\\Storefront\\Controller\\CaptchaController' => 'getCaptchaController2Service',
            'Shopware\\Storefront\\Controller\\CartLineItemController' => 'getCartLineItemControllerService',
            'Shopware\\Storefront\\Controller\\CheckoutController' => 'getCheckoutControllerService',
            'Shopware\\Storefront\\Controller\\CmsController' => 'getCmsControllerService',
            'Shopware\\Storefront\\Controller\\ContextController' => 'getContextControllerService',
            'Shopware\\Storefront\\Controller\\CookieController' => 'getCookieControllerService',
            'Shopware\\Storefront\\Controller\\CountryStateController' => 'getCountryStateControllerService',
            'Shopware\\Storefront\\Controller\\DocumentController' => 'getDocumentController2Service',
            'Shopware\\Storefront\\Controller\\DownloadController' => 'getDownloadControllerService',
            'Shopware\\Storefront\\Controller\\ErrorController' => 'getErrorControllerService',
            'Shopware\\Storefront\\Controller\\FormController' => 'getFormControllerService',
            'Shopware\\Storefront\\Controller\\LandingPageController' => 'getLandingPageControllerService',
            'Shopware\\Storefront\\Controller\\MaintenanceController' => 'getMaintenanceControllerService',
            'Shopware\\Storefront\\Controller\\NavigationController' => 'getNavigationControllerService',
            'Shopware\\Storefront\\Controller\\NewsletterController' => 'getNewsletterControllerService',
            'Shopware\\Storefront\\Controller\\ProductController' => 'getProductControllerService',
            'Shopware\\Storefront\\Controller\\RegisterController' => 'getRegisterControllerService',
            'Shopware\\Storefront\\Controller\\ScriptController' => 'getScriptControllerService',
            'Shopware\\Storefront\\Controller\\SearchController' => 'getSearchControllerService',
            'Shopware\\Storefront\\Controller\\SitemapController' => 'getSitemapControllerService',
            'Shopware\\Storefront\\Controller\\VerificationHashController' => 'getVerificationHashControllerService',
            'Shopware\\Storefront\\Controller\\WellKnownController' => 'getWellKnownControllerService',
            'Shopware\\Storefront\\Controller\\WishlistController' => 'getWishlistControllerService',
            'Shopware\\Storefront\\Framework\\Cache\\CacheStore' => 'getCacheStoreService',
            'Shopware\\Storefront\\Framework\\Media\\StorefrontMediaValidatorRegistry' => 'getStorefrontMediaValidatorRegistryService',
            'Shopware\\Storefront\\Page\\Checkout\\Register\\CheckoutRegisterPageLoader' => 'getCheckoutRegisterPageLoaderService',
            'Shopware\\Storefront\\Page\\Product\\Review\\ProductReviewLoader' => 'getProductReviewLoaderService',
            'Shopware\\Storefront\\Page\\Search\\SearchPageLoader' => 'getSearchPageLoaderService',
            'Shopware\\Storefront\\Theme\\Aggregate\\ThemeChildDefinition' => 'getThemeChildDefinitionService',
            'Shopware\\Storefront\\Theme\\Aggregate\\ThemeMediaDefinition' => 'getThemeMediaDefinitionService',
            'Shopware\\Storefront\\Theme\\Aggregate\\ThemeSalesChannelDefinition' => 'getThemeSalesChannelDefinitionService',
            'Shopware\\Storefront\\Theme\\Aggregate\\ThemeTranslationDefinition' => 'getThemeTranslationDefinitionService',
            'Shopware\\Storefront\\Theme\\Controller\\ThemeController' => 'getThemeControllerService',
            'Shopware\\Storefront\\Theme\\SalesChannelThemeLoader' => 'getSalesChannelThemeLoaderService',
            'Shopware\\Storefront\\Theme\\StorefrontPluginRegistry' => 'getStorefrontPluginRegistryService',
            'Shopware\\Storefront\\Theme\\ThemeDefinition' => 'getThemeDefinitionService',
            'Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController' => 'getRedirectControllerService',
            'Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController' => 'getTemplateControllerService',
            'acl_role.repository' => 'getAclRole_RepositoryService',
            'acl_user_role.repository' => 'getAclUserRole_RepositoryService',
            'admin.openSearch.client' => 'getAdmin_OpenSearch_ClientService',
            'administration.filesystem.private' => 'getAdministration_Filesystem_PrivateService',
            'administration.filesystem.public' => 'getAdministration_Filesystem_PublicService',
            'app.repository' => 'getApp_RepositoryService',
            'app_action_button.repository' => 'getAppActionButton_RepositoryService',
            'app_action_button_translation.repository' => 'getAppActionButtonTranslation_RepositoryService',
            'app_administration_snippet.repository' => 'getAppAdministrationSnippet_RepositoryService',
            'app_cms_block.repository' => 'getAppCmsBlock_RepositoryService',
            'app_cms_block_translation.repository' => 'getAppCmsBlockTranslation_RepositoryService',
            'app_flow_action.repository' => 'getAppFlowAction_RepositoryService',
            'app_flow_action_translation.repository' => 'getAppFlowActionTranslation_RepositoryService',
            'app_flow_event.repository' => 'getAppFlowEvent_RepositoryService',
            'app_payment_method.repository' => 'getAppPaymentMethod_RepositoryService',
            'app_script_condition.repository' => 'getAppScriptCondition_RepositoryService',
            'app_script_condition_translation.repository' => 'getAppScriptConditionTranslation_RepositoryService',
            'app_shipping_method.repository' => 'getAppShippingMethod_RepositoryService',
            'app_template.repository' => 'getAppTemplate_RepositoryService',
            'app_translation.repository' => 'getAppTranslation_RepositoryService',
            'cache.app' => 'getCache_AppService',
            'cache.app_clearer' => 'getCache_AppClearerService',
            'cache.global_clearer' => 'getCache_GlobalClearerService',
            'cache.system' => 'getCache_SystemService',
            'cache.system_clearer' => 'getCache_SystemClearerService',
            'cache.validator_expression_language' => 'getCache_ValidatorExpressionLanguageService',
            'cache_warmer' => 'getCacheWarmerService',
            'category.repository' => 'getCategory_RepositoryService',
            'category_tag.repository' => 'getCategoryTag_RepositoryService',
            'category_translation.repository' => 'getCategoryTranslation_RepositoryService',
            'checkout.filesystem.private' => 'getCheckout_Filesystem_PrivateService',
            'checkout.filesystem.public' => 'getCheckout_Filesystem_PublicService',
            'cms_block.repository' => 'getCmsBlock_RepositoryService',
            'cms_page.repository' => 'getCmsPage_RepositoryService',
            'cms_page_translation.repository' => 'getCmsPageTranslation_RepositoryService',
            'cms_section.repository' => 'getCmsSection_RepositoryService',
            'cms_slot.repository' => 'getCmsSlot_RepositoryService',
            'cms_slot_translation.repository' => 'getCmsSlotTranslation_RepositoryService',
            'console.command_loader' => 'getConsole_CommandLoaderService',
            'container.env_var_processors_locator' => 'getContainer_EnvVarProcessorsLocatorService',
            'container.get_routing_condition_service' => 'getContainer_GetRoutingConditionServiceService',
            'content.filesystem.private' => 'getContent_Filesystem_PrivateService',
            'content.filesystem.public' => 'getContent_Filesystem_PublicService',
            'country.repository' => 'getCountry_RepositoryService',
            'country_state.repository' => 'getCountryState_RepositoryService',
            'country_state_translation.repository' => 'getCountryStateTranslation_RepositoryService',
            'country_translation.repository' => 'getCountryTranslation_RepositoryService',
            'currency.repository' => 'getCurrency_RepositoryService',
            'currency_country_rounding.repository' => 'getCurrencyCountryRounding_RepositoryService',
            'currency_translation.repository' => 'getCurrencyTranslation_RepositoryService',
            'custom_entity.repository' => 'getCustomEntity_RepositoryService',
            'custom_field.repository' => 'getCustomField_RepositoryService',
            'custom_field_set.repository' => 'getCustomFieldSet_RepositoryService',
            'custom_field_set_relation.repository' => 'getCustomFieldSetRelation_RepositoryService',
            'customer.repository' => 'getCustomer_RepositoryService',
            'customer_address.repository' => 'getCustomerAddress_RepositoryService',
            'customer_group.repository' => 'getCustomerGroup_RepositoryService',
            'customer_group_registration_sales_channels.repository' => 'getCustomerGroupRegistrationSalesChannels_RepositoryService',
            'customer_group_translation.repository' => 'getCustomerGroupTranslation_RepositoryService',
            'customer_recovery.repository' => 'getCustomerRecovery_RepositoryService',
            'customer_tag.repository' => 'getCustomerTag_RepositoryService',
            'customer_wishlist.repository' => 'getCustomerWishlist_RepositoryService',
            'customer_wishlist_product.repository' => 'getCustomerWishlistProduct_RepositoryService',
            'data_collector.dump' => 'getDataCollector_DumpService',
            'debug.error_handler_configurator' => 'getDebug_ErrorHandlerConfiguratorService',
            'delivery_time.repository' => 'getDeliveryTime_RepositoryService',
            'delivery_time_translation.repository' => 'getDeliveryTimeTranslation_RepositoryService',
            'document.repository' => 'getDocument_RepositoryService',
            'document_base_config.repository' => 'getDocumentBaseConfig_RepositoryService',
            'document_base_config_sales_channel.repository' => 'getDocumentBaseConfigSalesChannel_RepositoryService',
            'document_type.repository' => 'getDocumentType_RepositoryService',
            'document_type_translation.repository' => 'getDocumentTypeTranslation_RepositoryService',
            'elasticsearch.filesystem.private' => 'getElasticsearch_Filesystem_PrivateService',
            'elasticsearch.filesystem.public' => 'getElasticsearch_Filesystem_PublicService',
            'error_controller' => 'getErrorController2Service',
            'event_dispatcher' => 'getEventDispatcherService',
            'flow.repository' => 'getFlow_RepositoryService',
            'flow_sequence.repository' => 'getFlowSequence_RepositoryService',
            'flow_template.repository' => 'getFlowTemplate_RepositoryService',
            'framework.filesystem.private' => 'getFramework_Filesystem_PrivateService',
            'framework.filesystem.public' => 'getFramework_Filesystem_PublicService',
            'http_kernel' => 'getHttpKernelService',
            'import_export_file.repository' => 'getImportExportFile_RepositoryService',
            'import_export_log.repository' => 'getImportExportLog_RepositoryService',
            'import_export_profile.repository' => 'getImportExportProfile_RepositoryService',
            'import_export_profile_translation.repository' => 'getImportExportProfileTranslation_RepositoryService',
            'integration.repository' => 'getIntegration_RepositoryService',
            'integration_role.repository' => 'getIntegrationRole_RepositoryService',
            'landing_page.repository' => 'getLandingPage_RepositoryService',
            'landing_page_sales_channel.repository' => 'getLandingPageSalesChannel_RepositoryService',
            'landing_page_tag.repository' => 'getLandingPageTag_RepositoryService',
            'landing_page_translation.repository' => 'getLandingPageTranslation_RepositoryService',
            'language.repository' => 'getLanguage_RepositoryService',
            'locale.repository' => 'getLocale_RepositoryService',
            'locale_translation.repository' => 'getLocaleTranslation_RepositoryService',
            'log_entry.repository' => 'getLogEntry_RepositoryService',
            'mail_header_footer.repository' => 'getMailHeaderFooter_RepositoryService',
            'mail_header_footer_translation.repository' => 'getMailHeaderFooterTranslation_RepositoryService',
            'mail_template.repository' => 'getMailTemplate_RepositoryService',
            'mail_template_media.repository' => 'getMailTemplateMedia_RepositoryService',
            'mail_template_translation.repository' => 'getMailTemplateTranslation_RepositoryService',
            'mail_template_type.repository' => 'getMailTemplateType_RepositoryService',
            'mail_template_type_translation.repository' => 'getMailTemplateTypeTranslation_RepositoryService',
            'main_category.repository' => 'getMainCategory_RepositoryService',
            'maintenance.filesystem.private' => 'getMaintenance_Filesystem_PrivateService',
            'maintenance.filesystem.public' => 'getMaintenance_Filesystem_PublicService',
            'media.repository' => 'getMedia_RepositoryService',
            'media_default_folder.repository' => 'getMediaDefaultFolder_RepositoryService',
            'media_folder.repository' => 'getMediaFolder_RepositoryService',
            'media_folder_configuration.repository' => 'getMediaFolderConfiguration_RepositoryService',
            'media_folder_configuration_media_thumbnail_size.repository' => 'getMediaFolderConfigurationMediaThumbnailSize_RepositoryService',
            'media_tag.repository' => 'getMediaTag_RepositoryService',
            'media_thumbnail.repository' => 'getMediaThumbnail_RepositoryService',
            'media_thumbnail_size.repository' => 'getMediaThumbnailSize_RepositoryService',
            'media_translation.repository' => 'getMediaTranslation_RepositoryService',
            'messenger.default_bus' => 'getMessenger_DefaultBusService',
            'monolog.logger.business_events' => 'getMonolog_Logger_BusinessEventsService',
            'monolog.logger.elasticsearch' => 'getMonolog_Logger_ElasticsearchService',
            'newsletter_recipient.repository' => 'getNewsletterRecipient_RepositoryService',
            'newsletter_recipient_tag.repository' => 'getNewsletterRecipientTag_RepositoryService',
            'notification.repository' => 'getNotification_RepositoryService',
            'number_range.repository' => 'getNumberRange_RepositoryService',
            'number_range_sales_channel.repository' => 'getNumberRangeSalesChannel_RepositoryService',
            'number_range_state.repository' => 'getNumberRangeState_RepositoryService',
            'number_range_translation.repository' => 'getNumberRangeTranslation_RepositoryService',
            'number_range_type.repository' => 'getNumberRangeType_RepositoryService',
            'number_range_type_translation.repository' => 'getNumberRangeTypeTranslation_RepositoryService',
            'order.repository' => 'getOrder_RepositoryService',
            'order_address.repository' => 'getOrderAddress_RepositoryService',
            'order_customer.repository' => 'getOrderCustomer_RepositoryService',
            'order_delivery.repository' => 'getOrderDelivery_RepositoryService',
            'order_delivery_position.repository' => 'getOrderDeliveryPosition_RepositoryService',
            'order_line_item.repository' => 'getOrderLineItem_RepositoryService',
            'order_line_item_download.repository' => 'getOrderLineItemDownload_RepositoryService',
            'order_tag.repository' => 'getOrderTag_RepositoryService',
            'order_transaction.repository' => 'getOrderTransaction_RepositoryService',
            'order_transaction_capture.repository' => 'getOrderTransactionCapture_RepositoryService',
            'order_transaction_capture_refund.repository' => 'getOrderTransactionCaptureRefund_RepositoryService',
            'order_transaction_capture_refund_position.repository' => 'getOrderTransactionCaptureRefundPosition_RepositoryService',
            'payment_method.repository' => 'getPaymentMethod_RepositoryService',
            'payment_method_translation.repository' => 'getPaymentMethodTranslation_RepositoryService',
            'plugin.repository' => 'getPlugin_RepositoryService',
            'plugin_translation.repository' => 'getPluginTranslation_RepositoryService',
            'product.repository' => 'getProduct_RepositoryService',
            'product_category.repository' => 'getProductCategory_RepositoryService',
            'product_category_tree.repository' => 'getProductCategoryTree_RepositoryService',
            'product_configurator_setting.repository' => 'getProductConfiguratorSetting_RepositoryService',
            'product_cross_selling.repository' => 'getProductCrossSelling_RepositoryService',
            'product_cross_selling_assigned_products.repository' => 'getProductCrossSellingAssignedProducts_RepositoryService',
            'product_cross_selling_translation.repository' => 'getProductCrossSellingTranslation_RepositoryService',
            'product_custom_field_set.repository' => 'getProductCustomFieldSet_RepositoryService',
            'product_download.repository' => 'getProductDownload_RepositoryService',
            'product_export.repository' => 'getProductExport_RepositoryService',
            'product_feature_set.repository' => 'getProductFeatureSet_RepositoryService',
            'product_feature_set_translation.repository' => 'getProductFeatureSetTranslation_RepositoryService',
            'product_keyword_dictionary.repository' => 'getProductKeywordDictionary_RepositoryService',
            'product_manufacturer.repository' => 'getProductManufacturer_RepositoryService',
            'product_manufacturer_translation.repository' => 'getProductManufacturerTranslation_RepositoryService',
            'product_media.repository' => 'getProductMedia_RepositoryService',
            'product_option.repository' => 'getProductOption_RepositoryService',
            'product_price.repository' => 'getProductPrice_RepositoryService',
            'product_property.repository' => 'getProductProperty_RepositoryService',
            'product_review.repository' => 'getProductReview_RepositoryService',
            'product_search_config.repository' => 'getProductSearchConfig_RepositoryService',
            'product_search_config_field.repository' => 'getProductSearchConfigField_RepositoryService',
            'product_search_keyword.repository' => 'getProductSearchKeyword_RepositoryService',
            'product_sorting.repository' => 'getProductSorting_RepositoryService',
            'product_sorting_translation.repository' => 'getProductSortingTranslation_RepositoryService',
            'product_stream.repository' => 'getProductStream_RepositoryService',
            'product_stream_filter.repository' => 'getProductStreamFilter_RepositoryService',
            'product_stream_mapping.repository' => 'getProductStreamMapping_RepositoryService',
            'product_stream_translation.repository' => 'getProductStreamTranslation_RepositoryService',
            'product_tag.repository' => 'getProductTag_RepositoryService',
            'product_translation.repository' => 'getProductTranslation_RepositoryService',
            'product_visibility.repository' => 'getProductVisibility_RepositoryService',
            'profiling.filesystem.private' => 'getProfiling_Filesystem_PrivateService',
            'profiling.filesystem.public' => 'getProfiling_Filesystem_PublicService',
            'promotion.repository' => 'getPromotion_RepositoryService',
            'promotion_cart_rule.repository' => 'getPromotionCartRule_RepositoryService',
            'promotion_discount.repository' => 'getPromotionDiscount_RepositoryService',
            'promotion_discount_prices.repository' => 'getPromotionDiscountPrices_RepositoryService',
            'promotion_discount_rule.repository' => 'getPromotionDiscountRule_RepositoryService',
            'promotion_individual_code.repository' => 'getPromotionIndividualCode_RepositoryService',
            'promotion_order_rule.repository' => 'getPromotionOrderRule_RepositoryService',
            'promotion_persona_customer.repository' => 'getPromotionPersonaCustomer_RepositoryService',
            'promotion_persona_rule.repository' => 'getPromotionPersonaRule_RepositoryService',
            'promotion_sales_channel.repository' => 'getPromotionSalesChannel_RepositoryService',
            'promotion_setgroup.repository' => 'getPromotionSetgroup_RepositoryService',
            'promotion_setgroup_rule.repository' => 'getPromotionSetgroupRule_RepositoryService',
            'promotion_translation.repository' => 'getPromotionTranslation_RepositoryService',
            'property_group.repository' => 'getPropertyGroup_RepositoryService',
            'property_group_option.repository' => 'getPropertyGroupOption_RepositoryService',
            'property_group_option_translation.repository' => 'getPropertyGroupOptionTranslation_RepositoryService',
            'property_group_translation.repository' => 'getPropertyGroupTranslation_RepositoryService',
            'request_stack' => 'getRequestStackService',
            'router' => 'getRouterService',
            'routing.loader' => 'getRouting_LoaderService',
            'rule.repository' => 'getRule_RepositoryService',
            'rule_condition.repository' => 'getRuleCondition_RepositoryService',
            'rule_tag.repository' => 'getRuleTag_RepositoryService',
            'sales_channel.category.repository' => 'getSalesChannel_Category_RepositoryService',
            'sales_channel.country.repository' => 'getSalesChannel_Country_RepositoryService',
            'sales_channel.country_state.repository' => 'getSalesChannel_CountryState_RepositoryService',
            'sales_channel.currency.repository' => 'getSalesChannel_Currency_RepositoryService',
            'sales_channel.landing_page.repository' => 'getSalesChannel_LandingPage_RepositoryService',
            'sales_channel.language.repository' => 'getSalesChannel_Language_RepositoryService',
            'sales_channel.main_category.repository' => 'getSalesChannel_MainCategory_RepositoryService',
            'sales_channel.newsletter_recipient.repository' => 'getSalesChannel_NewsletterRecipient_RepositoryService',
            'sales_channel.payment_method.repository' => 'getSalesChannel_PaymentMethod_RepositoryService',
            'sales_channel.product.repository' => 'getSalesChannel_Product_RepositoryService',
            'sales_channel.repository' => 'getSalesChannel_RepositoryService',
            'sales_channel.salutation.repository' => 'getSalesChannel_Salutation_RepositoryService',
            'sales_channel.seo_url.repository' => 'getSalesChannel_SeoUrl_RepositoryService',
            'sales_channel.shipping_method.repository' => 'getSalesChannel_ShippingMethod_RepositoryService',
            'sales_channel_analytics.repository' => 'getSalesChannelAnalytics_RepositoryService',
            'sales_channel_country.repository' => 'getSalesChannelCountry_RepositoryService',
            'sales_channel_currency.repository' => 'getSalesChannelCurrency_RepositoryService',
            'sales_channel_definition.Shopware\\Administration\\Notification\\NotificationDefinition' => 'getNotificationDefinition2Service',
            'sales_channel_definition.Shopware\\Administration\\Snippet\\AppAdministrationSnippetDefinition' => 'getAppAdministrationSnippetDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerAddress\\CustomerAddressDefinition' => 'getCustomerAddressDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupRegistrationSalesChannel\\CustomerGroupRegistrationSalesChannelDefinition' => 'getCustomerGroupRegistrationSalesChannelDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupTranslation\\CustomerGroupTranslationDefinition' => 'getCustomerGroupTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroup\\CustomerGroupDefinition' => 'getCustomerGroupDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerRecovery\\CustomerRecoveryDefinition' => 'getCustomerRecoveryDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerTag\\CustomerTagDefinition' => 'getCustomerTagDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlistProduct\\CustomerWishlistProductDefinition' => 'getCustomerWishlistProductDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlist\\CustomerWishlistDefinition' => 'getCustomerWishlistDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\CustomerDefinition' => 'getCustomerDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfigSalesChannel\\DocumentBaseConfigSalesChannelDefinition' => 'getDocumentBaseConfigSalesChannelDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfig\\DocumentBaseConfigDefinition' => 'getDocumentBaseConfigDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentTypeTranslation\\DocumentTypeTranslationDefinition' => 'getDocumentTypeTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentType\\DocumentTypeDefinition' => 'getDocumentTypeDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Document\\DocumentDefinition' => 'getDocumentDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderAddress\\OrderAddressDefinition' => 'getOrderAddressDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderCustomer\\OrderCustomerDefinition' => 'getOrderCustomerDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDeliveryPosition\\OrderDeliveryPositionDefinition' => 'getOrderDeliveryPositionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDelivery\\OrderDeliveryDefinition' => 'getOrderDeliveryDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItemDownload\\OrderLineItemDownloadDefinition' => 'getOrderLineItemDownloadDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItem\\OrderLineItemDefinition' => 'getOrderLineItemDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTag\\OrderTagDefinition' => 'getOrderTagDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefundPosition\\OrderTransactionCaptureRefundPositionDefinition' => 'getOrderTransactionCaptureRefundPositionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefund\\OrderTransactionCaptureRefundDefinition' => 'getOrderTransactionCaptureRefundDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCapture\\OrderTransactionCaptureDefinition' => 'getOrderTransactionCaptureDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionDefinition' => 'getOrderTransactionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Order\\OrderDefinition' => 'getOrderDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Payment\\Aggregate\\PaymentMethodTranslation\\PaymentMethodTranslationDefinition' => 'getPaymentMethodTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionCartRule\\PromotionCartRuleDefinition' => 'getPromotionCartRuleDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountPrice\\PromotionDiscountPriceDefinition' => 'getPromotionDiscountPriceDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountRule\\PromotionDiscountRuleDefinition' => 'getPromotionDiscountRuleDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscount\\PromotionDiscountDefinition' => 'getPromotionDiscountDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionIndividualCode\\PromotionIndividualCodeDefinition' => 'getPromotionIndividualCodeDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionOrderRule\\PromotionOrderRuleDefinition' => 'getPromotionOrderRuleDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaCustomer\\PromotionPersonaCustomerDefinition' => 'getPromotionPersonaCustomerDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaRule\\PromotionPersonaRuleDefinition' => 'getPromotionPersonaRuleDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSalesChannel\\PromotionSalesChannelDefinition' => 'getPromotionSalesChannelDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroupRule\\PromotionSetGroupRuleDefinition' => 'getPromotionSetGroupRuleDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroup\\PromotionSetGroupDefinition' => 'getPromotionSetGroupDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionTranslation\\PromotionTranslationDefinition' => 'getPromotionTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\PromotionDefinition' => 'getPromotionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodPrice\\ShippingMethodPriceDefinition' => 'getShippingMethodPriceDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTag\\ShippingMethodTagDefinition' => 'getShippingMethodTagDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTranslation\\ShippingMethodTranslationDefinition' => 'getShippingMethodTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTag\\CategoryTagDefinition' => 'getCategoryTagDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTranslation\\CategoryTranslationDefinition' => 'getCategoryTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Cms\\Aggregate\\CmsBlock\\CmsBlockDefinition' => 'getCmsBlockDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Cms\\Aggregate\\CmsPageTranslation\\CmsPageTranslationDefinition' => 'getCmsPageTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSection\\CmsSectionDefinition' => 'getCmsSectionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlotTranslation\\CmsSlotTranslationDefinition' => 'getCmsSlotTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlot\\CmsSlotDefinition' => 'getCmsSlotDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Cms\\CmsPageDefinition' => 'getCmsPageDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Flow\\Aggregate\\FlowSequence\\FlowSequenceDefinition' => 'getFlowSequenceDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Flow\\Aggregate\\FlowTemplate\\FlowTemplateDefinition' => 'getFlowTemplateDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Flow\\FlowDefinition' => 'getFlowDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportFile\\ImportExportFileDefinition' => 'getImportExportFileDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportLog\\ImportExportLogDefinition' => 'getImportExportLogDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\ImportExport\\ImportExportProfileDefinition' => 'getImportExportProfileDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\ImportExport\\ImportExportProfileTranslationDefinition' => 'getImportExportProfileTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageSalesChannel\\LandingPageSalesChannelDefinition' => 'getLandingPageSalesChannelDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTag\\LandingPageTagDefinition' => 'getLandingPageTagDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTranslation\\LandingPageTranslationDefinition' => 'getLandingPageTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooterTranslation\\MailHeaderFooterTranslationDefinition' => 'getMailHeaderFooterTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooter\\MailHeaderFooterDefinition' => 'getMailHeaderFooterDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateMedia\\MailTemplateMediaDefinition' => 'getMailTemplateMediaDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTranslation\\MailTemplateTranslationDefinition' => 'getMailTemplateTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTypeTranslation\\MailTemplateTypeTranslationDefinition' => 'getMailTemplateTypeTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateType\\MailTemplateTypeDefinition' => 'getMailTemplateTypeDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\MailTemplateDefinition' => 'getMailTemplateDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaDefaultFolder\\MediaDefaultFolderDefinition' => 'getMediaDefaultFolderDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfigurationMediaThumbnailSize\\MediaFolderConfigurationMediaThumbnailSizeDefinition' => 'getMediaFolderConfigurationMediaThumbnailSizeDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfiguration\\MediaFolderConfigurationDefinition' => 'getMediaFolderConfigurationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolder\\MediaFolderDefinition' => 'getMediaFolderDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaTag\\MediaTagDefinition' => 'getMediaTagDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnailSize\\MediaThumbnailSizeDefinition' => 'getMediaThumbnailSizeDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnail\\MediaThumbnailDefinition' => 'getMediaThumbnailDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaTranslation\\MediaTranslationDefinition' => 'getMediaTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Media\\MediaDefinition' => 'getMediaDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipientTag\\NewsletterRecipientTagDefinition' => 'getNewsletterRecipientTagDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\ProductExport\\ProductExportDefinition' => 'getProductExportDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamFilter\\ProductStreamFilterDefinition' => 'getProductStreamFilterDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamTranslation\\ProductStreamTranslationDefinition' => 'getProductStreamTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\ProductStream\\ProductStreamDefinition' => 'getProductStreamDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategoryTree\\ProductCategoryTreeDefinition' => 'getProductCategoryTreeDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategory\\ProductCategoryDefinition' => 'getProductCategoryDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductConfiguratorSetting\\ProductConfiguratorSettingDefinition' => 'getProductConfiguratorSettingDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingAssignedProducts\\ProductCrossSellingAssignedProductsDefinition' => 'getProductCrossSellingAssignedProductsDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingTranslation\\ProductCrossSellingTranslationDefinition' => 'getProductCrossSellingTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSelling\\ProductCrossSellingDefinition' => 'getProductCrossSellingDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCustomFieldSet\\ProductCustomFieldSetDefinition' => 'getProductCustomFieldSetDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductDownload\\ProductDownloadDefinition' => 'getProductDownloadDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSetTranslation\\ProductFeatureSetTranslationDefinition' => 'getProductFeatureSetTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSet\\ProductFeatureSetDefinition' => 'getProductFeatureSetDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductKeywordDictionary\\ProductKeywordDictionaryDefinition' => 'getProductKeywordDictionaryDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturerTranslation\\ProductManufacturerTranslationDefinition' => 'getProductManufacturerTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturer\\ProductManufacturerDefinition' => 'getProductManufacturerDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductMedia\\ProductMediaDefinition' => 'getProductMediaDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductOption\\ProductOptionDefinition' => 'getProductOptionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductPrice\\ProductPriceDefinition' => 'getProductPriceDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductProperty\\ProductPropertyDefinition' => 'getProductPropertyDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductReview\\ProductReviewDefinition' => 'getProductReviewDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfigField\\ProductSearchConfigFieldDefinition' => 'getProductSearchConfigFieldDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfig\\ProductSearchConfigDefinition' => 'getProductSearchConfigDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchKeyword\\ProductSearchKeywordDefinition' => 'getProductSearchKeywordDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductStreamMapping\\ProductStreamMappingDefinition' => 'getProductStreamMappingDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductTag\\ProductTagDefinition' => 'getProductTagDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductTranslation\\ProductTranslationDefinition' => 'getProductTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductVisibility\\ProductVisibilityDefinition' => 'getProductVisibilityDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingDefinition' => 'getProductSortingDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingTranslationDefinition' => 'getProductSortingTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOptionTranslation\\PropertyGroupOptionTranslationDefinition' => 'getPropertyGroupOptionTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOption\\PropertyGroupOptionDefinition' => 'getPropertyGroupOptionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupTranslation\\PropertyGroupTranslationDefinition' => 'getPropertyGroupTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Property\\PropertyGroupDefinition' => 'getPropertyGroupDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Rule\\Aggregate\\RuleCondition\\RuleConditionDefinition' => 'getRuleConditionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Rule\\Aggregate\\RuleTag\\RuleTagDefinition' => 'getRuleTagDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Rule\\RuleDefinition' => 'getRuleDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Content\\Seo\\SeoUrlTemplate\\SeoUrlTemplateDefinition' => 'getSeoUrlTemplateDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclRoleDefinition' => 'getAclRoleDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclUserRoleDefinition' => 'getAclUserRoleDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\ActionButtonTranslation\\ActionButtonTranslationDefinition' => 'getActionButtonTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\ActionButton\\ActionButtonDefinition' => 'getActionButtonDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\AppPaymentMethod\\AppPaymentMethodDefinition' => 'getAppPaymentMethodDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptConditionTranslation\\AppScriptConditionTranslationDefinition' => 'getAppScriptConditionTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptCondition\\AppScriptConditionDefinition' => 'getAppScriptConditionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\AppShippingMethod\\AppShippingMethodDefinition' => 'getAppShippingMethodDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\AppTranslation\\AppTranslationDefinition' => 'getAppTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlockTranslation\\AppCmsBlockTranslationDefinition' => 'getAppCmsBlockTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlock\\AppCmsBlockDefinition' => 'getAppCmsBlockDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\FlowActionTranslation\\AppFlowActionTranslationDefinition' => 'getAppFlowActionTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\FlowAction\\AppFlowActionDefinition' => 'getAppFlowActionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\FlowEvent\\AppFlowEventDefinition' => 'getAppFlowEventDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\AppDefinition' => 'getAppDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\App\\Template\\TemplateDefinition' => 'getTemplateDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommitData\\VersionCommitDataDefinition' => 'getVersionCommitDataDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommit\\VersionCommitDefinition' => 'getVersionCommitDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\VersionDefinition' => 'getVersionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\Log\\LogEntryDefinition' => 'getLogEntryDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\ScheduledTaskDefinition' => 'getScheduledTaskDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\Plugin\\Aggregate\\PluginTranslation\\PluginTranslationDefinition' => 'getPluginTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\Plugin\\PluginDefinition' => 'getPluginDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\Script\\ScriptDefinition' => 'getScriptDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\Webhook\\EventLog\\WebhookEventLogDefinition' => 'getWebhookEventLogDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\Framework\\Webhook\\WebhookDefinition' => 'getWebhookDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Country\\Aggregate\\CountryStateTranslation\\CountryStateTranslationDefinition' => 'getCountryStateTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Country\\Aggregate\\CountryTranslation\\CountryTranslationDefinition' => 'getCountryTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyCountryRounding\\CurrencyCountryRoundingDefinition' => 'getCurrencyCountryRoundingDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyTranslation\\CurrencyTranslationDefinition' => 'getCurrencyTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\CustomEntity\\CustomEntityDefinition' => 'getCustomEntityDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSetRelation\\CustomFieldSetRelationDefinition' => 'getCustomFieldSetRelationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSet\\CustomFieldSetDefinition' => 'getCustomFieldSetDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\CustomField\\CustomFieldDefinition' => 'getCustomFieldDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\DeliveryTime\\Aggregate\\DeliveryTimeTranslation\\DeliveryTimeTranslationDefinition' => 'getDeliveryTimeTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\DeliveryTime\\DeliveryTimeDefinition' => 'getDeliveryTimeDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Integration\\Aggregate\\IntegrationRole\\IntegrationRoleDefinition' => 'getIntegrationRoleDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Integration\\IntegrationDefinition' => 'getIntegrationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Locale\\Aggregate\\LocaleTranslation\\LocaleTranslationDefinition' => 'getLocaleTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Locale\\LocaleDefinition' => 'getLocaleDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeSalesChannel\\NumberRangeSalesChannelDefinition' => 'getNumberRangeSalesChannelDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeState\\NumberRangeStateDefinition' => 'getNumberRangeStateDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTranslation\\NumberRangeTranslationDefinition' => 'getNumberRangeTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTypeTranslation\\NumberRangeTypeTranslationDefinition' => 'getNumberRangeTypeTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeType\\NumberRangeTypeDefinition' => 'getNumberRangeTypeDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\NumberRange\\NumberRangeDefinition' => 'getNumberRangeDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelAnalytics\\SalesChannelAnalyticsDefinition' => 'getSalesChannelAnalyticsDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCountry\\SalesChannelCountryDefinition' => 'getSalesChannelCountryDefinition3Service',
            'sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCurrency\\SalesChannelCurrencyDefinition' => 'getSalesChannelCurrencyDefinition3Service',
            'sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelDomain\\SalesChannelDomainDefinition' => 'getSalesChannelDomainDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelLanguage\\SalesChannelLanguageDefinition' => 'getSalesChannelLanguageDefinition3Service',
            'sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelPaymentMethod\\SalesChannelPaymentMethodDefinition' => 'getSalesChannelPaymentMethodDefinition3Service',
            'sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelShippingMethod\\SalesChannelShippingMethodDefinition' => 'getSalesChannelShippingMethodDefinition3Service',
            'sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTranslation\\SalesChannelTranslationDefinition' => 'getSalesChannelTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTypeTranslation\\SalesChannelTypeTranslationDefinition' => 'getSalesChannelTypeTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelType\\SalesChannelTypeDefinition' => 'getSalesChannelTypeDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\SalesChannelDefinition' => 'getSalesChannelDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Salutation\\Aggregate\\SalutationTranslation\\SalutationTranslationDefinition' => 'getSalutationTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Snippet\\Aggregate\\SnippetSet\\SnippetSetDefinition' => 'getSnippetSetDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Snippet\\SnippetDefinition' => 'getSnippetDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineHistory\\StateMachineHistoryDefinition' => 'getStateMachineHistoryDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateDefinition' => 'getStateMachineStateDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateTranslationDefinition' => 'getStateMachineStateTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineTransition\\StateMachineTransitionDefinition' => 'getStateMachineTransitionDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\StateMachine\\StateMachineDefinition' => 'getStateMachineDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\StateMachine\\StateMachineTranslationDefinition' => 'getStateMachineTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\SystemConfig\\SystemConfigDefinition' => 'getSystemConfigDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Tag\\TagDefinition' => 'getTagDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\TaxProvider\\Aggregate\\TaxProviderTranslation\\TaxProviderTranslationDefinition' => 'getTaxProviderTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\TaxProvider\\TaxProviderDefinition' => 'getTaxProviderDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleTypeTranslation\\TaxRuleTypeTranslationDefinition' => 'getTaxRuleTypeTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleType\\TaxRuleTypeDefinition' => 'getTaxRuleTypeDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Tax\\Aggregate\\TaxRule\\TaxRuleDefinition' => 'getTaxRuleDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Tax\\TaxDefinition' => 'getTaxDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Unit\\Aggregate\\UnitTranslation\\UnitTranslationDefinition' => 'getUnitTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\Unit\\UnitDefinition' => 'getUnitDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\User\\Aggregate\\UserAccessKey\\UserAccessKeyDefinition' => 'getUserAccessKeyDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\User\\Aggregate\\UserConfig\\UserConfigDefinition' => 'getUserConfigDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\User\\Aggregate\\UserRecovery\\UserRecoveryDefinition' => 'getUserRecoveryDefinition2Service',
            'sales_channel_definition.Shopware\\Core\\System\\User\\UserDefinition' => 'getUserDefinition2Service',
            'sales_channel_definition.Shopware\\Storefront\\Theme\\Aggregate\\ThemeChildDefinition' => 'getThemeChildDefinition2Service',
            'sales_channel_definition.Shopware\\Storefront\\Theme\\Aggregate\\ThemeMediaDefinition' => 'getThemeMediaDefinition2Service',
            'sales_channel_definition.Shopware\\Storefront\\Theme\\Aggregate\\ThemeSalesChannelDefinition' => 'getThemeSalesChannelDefinition2Service',
            'sales_channel_definition.Shopware\\Storefront\\Theme\\Aggregate\\ThemeTranslationDefinition' => 'getThemeTranslationDefinition2Service',
            'sales_channel_definition.Shopware\\Storefront\\Theme\\ThemeDefinition' => 'getThemeDefinition2Service',
            'sales_channel_domain.repository' => 'getSalesChannelDomain_RepositoryService',
            'sales_channel_language.repository' => 'getSalesChannelLanguage_RepositoryService',
            'sales_channel_payment_method.repository' => 'getSalesChannelPaymentMethod_RepositoryService',
            'sales_channel_shipping_method.repository' => 'getSalesChannelShippingMethod_RepositoryService',
            'sales_channel_translation.repository' => 'getSalesChannelTranslation_RepositoryService',
            'sales_channel_type.repository' => 'getSalesChannelType_RepositoryService',
            'sales_channel_type_translation.repository' => 'getSalesChannelTypeTranslation_RepositoryService',
            'salutation.repository' => 'getSalutation_RepositoryService',
            'salutation_translation.repository' => 'getSalutationTranslation_RepositoryService',
            'scheduled_task.repository' => 'getScheduledTask_RepositoryService',
            'script.repository' => 'getScript_RepositoryService',
            'seo_url.repository' => 'getSeoUrl_RepositoryService',
            'seo_url_template.repository' => 'getSeoUrlTemplate_RepositoryService',
            'services_resetter' => 'getServicesResetterService',
            'shipping_method.repository' => 'getShippingMethod_RepositoryService',
            'shipping_method_price.repository' => 'getShippingMethodPrice_RepositoryService',
            'shipping_method_tag.repository' => 'getShippingMethodTag_RepositoryService',
            'shipping_method_translation.repository' => 'getShippingMethodTranslation_RepositoryService',
            'shopware.filesystem.asset' => 'getShopware_Filesystem_AssetService',
            'shopware.filesystem.private' => 'getShopware_Filesystem_PrivateService',
            'shopware.filesystem.public' => 'getShopware_Filesystem_PublicService',
            'shopware.filesystem.sitemap' => 'getShopware_Filesystem_SitemapService',
            'shopware.filesystem.temp' => 'getShopware_Filesystem_TempService',
            'shopware.filesystem.theme' => 'getShopware_Filesystem_ThemeService',
            'shopware.frw_client' => 'getShopware_FrwClientService',
            'shopware.increment.gateway.registry' => 'getShopware_Increment_Gateway_RegistryService',
            'shopware.store_client' => 'getShopware_StoreClientService',
            'snippet.repository' => 'getSnippet_RepositoryService',
            'snippet_set.repository' => 'getSnippetSet_RepositoryService',
            'state_machine.repository' => 'getStateMachine_RepositoryService',
            'state_machine_history.repository' => 'getStateMachineHistory_RepositoryService',
            'state_machine_state.repository' => 'getStateMachineState_RepositoryService',
            'state_machine_state_translation.repository' => 'getStateMachineStateTranslation_RepositoryService',
            'state_machine_transition.repository' => 'getStateMachineTransition_RepositoryService',
            'state_machine_translation.repository' => 'getStateMachineTranslation_RepositoryService',
            'storefront.filesystem.private' => 'getStorefront_Filesystem_PrivateService',
            'storefront.filesystem.public' => 'getStorefront_Filesystem_PublicService',
            'system.filesystem.private' => 'getSystem_Filesystem_PrivateService',
            'system.filesystem.public' => 'getSystem_Filesystem_PublicService',
            'system_config.repository' => 'getSystemConfig_RepositoryService',
            'tag.repository' => 'getTag_RepositoryService',
            'tax.repository' => 'getTax_RepositoryService',
            'tax_provider.repository' => 'getTaxProvider_RepositoryService',
            'tax_provider_translation.repository' => 'getTaxProviderTranslation_RepositoryService',
            'tax_rule.repository' => 'getTaxRule_RepositoryService',
            'tax_rule_type.repository' => 'getTaxRuleType_RepositoryService',
            'tax_rule_type_translation.repository' => 'getTaxRuleTypeTranslation_RepositoryService',
            'theme.repository' => 'getTheme_RepositoryService',
            'theme_child.repository' => 'getThemeChild_RepositoryService',
            'theme_media.repository' => 'getThemeMedia_RepositoryService',
            'theme_sales_channel.repository' => 'getThemeSalesChannel_RepositoryService',
            'theme_translation.repository' => 'getThemeTranslation_RepositoryService',
            'translator' => 'getTranslatorService',
            'twig' => 'getTwigService',
            'unit.repository' => 'getUnit_RepositoryService',
            'unit_translation.repository' => 'getUnitTranslation_RepositoryService',
            'user.repository' => 'getUser_RepositoryService',
            'user_access_key.repository' => 'getUserAccessKey_RepositoryService',
            'user_config.repository' => 'getUserConfig_RepositoryService',
            'user_recovery.repository' => 'getUserRecovery_RepositoryService',
            'var_dumper.cloner' => 'getVarDumper_ClonerService',
            'version.repository' => 'getVersion_RepositoryService',
            'version_commit.repository' => 'getVersionCommit_RepositoryService',
            'version_commit_data.repository' => 'getVersionCommitData_RepositoryService',
            'webhook.repository' => 'getWebhook_RepositoryService',
            'webhook_event_log.repository' => 'getWebhookEventLog_RepositoryService',
        ];
        $this->aliases = [
            'Shopware\\Core\\Checkout\\Payment\\SalesChannel\\PaymentMethodRoute' => 'Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SortedPaymentMethodRoute',
            'Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\ShippingMethodRoute' => 'Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SortedShippingMethodRoute',
            'Shopware\\Core\\Content\\Category\\SalesChannel\\CategoryRoute' => 'Shopware\\Core\\Content\\Category\\SalesChannel\\CachedCategoryRoute',
            'Shopware\\Core\\Content\\Category\\SalesChannel\\NavigationRoute' => 'Shopware\\Core\\Content\\Category\\SalesChannel\\TreeBuildingNavigationRoute',
            'Shopware\\Core\\Content\\Flow\\Dispatching\\FlowLoader' => 'Shopware\\Core\\Content\\Flow\\Dispatching\\CachedFlowLoader',
            'Shopware\\Core\\Content\\LandingPage\\SalesChannel\\LandingPageRoute' => 'Shopware\\Core\\Content\\LandingPage\\SalesChannel\\CachedLandingPageRoute',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\ProductCrossSellingRoute' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Detail\\ProductDetailRoute' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\Detail\\CachedProductDetailRoute',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingRoute' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ResolveCriteriaProductListingRoute',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\ProductReviewRoute' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\CachedProductReviewRoute',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Search\\ProductSearchRoute' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\Search\\ResolvedCriteriaProductSearchRoute',
            'Shopware\\Core\\Content\\Product\\SalesChannel\\Suggest\\ProductSuggestRoute' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\Suggest\\CachedProductSuggestRoute',
            'Shopware\\Core\\Content\\Seo\\SeoResolver' => 'Shopware\\Core\\Content\\Seo\\EmptyPathInfoResolver',
            'Shopware\\Core\\Content\\Sitemap\\SalesChannel\\SitemapRoute' => 'Shopware\\Core\\Content\\Sitemap\\SalesChannel\\CachedSitemapRoute',
            'Shopware\\Core\\System\\Country\\SalesChannel\\CountryRoute' => 'Shopware\\Core\\System\\Country\\SalesChannel\\CachedCountryRoute',
            'Shopware\\Core\\System\\Country\\SalesChannel\\CountryStateRoute' => 'Shopware\\Core\\System\\Country\\SalesChannel\\CachedCountryStateRoute',
            'Shopware\\Core\\System\\Currency\\SalesChannel\\CurrencyRoute' => 'Shopware\\Core\\System\\Currency\\SalesChannel\\CachedCurrencyRoute',
            'Shopware\\Core\\System\\Language\\SalesChannel\\LanguageRoute' => 'Shopware\\Core\\System\\Language\\SalesChannel\\CachedLanguageRoute',
            'Shopware\\Core\\System\\Salutation\\SalesChannel\\SalutationRoute' => 'Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Payment\\PaymentMethodDefinition' => 'Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SalesChannelPaymentMethodDefinition',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SalesChannelPaymentMethodDefinition' => 'Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SalesChannelPaymentMethodDefinition',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SalesChannelShippingMethodDefinition' => 'Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SalesChannelShippingMethodDefinition',
            'sales_channel_definition.Shopware\\Core\\Checkout\\Shipping\\ShippingMethodDefinition' => 'Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SalesChannelShippingMethodDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\Category\\CategoryDefinition' => 'Shopware\\Core\\Content\\Category\\SalesChannel\\SalesChannelCategoryDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\Category\\SalesChannel\\SalesChannelCategoryDefinition' => 'Shopware\\Core\\Content\\Category\\SalesChannel\\SalesChannelCategoryDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\LandingPage\\LandingPageDefinition' => 'Shopware\\Core\\Content\\LandingPage\\SalesChannel\\SalesChannelLandingPageDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\LandingPage\\SalesChannel\\SalesChannelLandingPageDefinition' => 'Shopware\\Core\\Content\\LandingPage\\SalesChannel\\SalesChannelLandingPageDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipient\\NewsletterRecipientDefinition' => 'Shopware\\Core\\Content\\Newsletter\\SalesChannel\\SalesChannelNewsletterRecipientDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\Newsletter\\SalesChannel\\SalesChannelNewsletterRecipientDefinition' => 'Shopware\\Core\\Content\\Newsletter\\SalesChannel\\SalesChannelNewsletterRecipientDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\ProductDefinition' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\SalesChannelProductDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\Product\\SalesChannel\\SalesChannelProductDefinition' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\SalesChannelProductDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\Seo\\MainCategory\\MainCategoryDefinition' => 'Shopware\\Core\\Content\\Seo\\MainCategory\\SalesChannel\\SalesChannelMainCategoryDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\Seo\\MainCategory\\SalesChannel\\SalesChannelMainCategoryDefinition' => 'Shopware\\Core\\Content\\Seo\\MainCategory\\SalesChannel\\SalesChannelMainCategoryDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\Seo\\SeoUrl\\SalesChannel\\SalesChannelSeoUrlDefinition' => 'Shopware\\Core\\Content\\Seo\\SeoUrl\\SalesChannel\\SalesChannelSeoUrlDefinition',
            'sales_channel_definition.Shopware\\Core\\Content\\Seo\\SeoUrl\\SeoUrlDefinition' => 'Shopware\\Core\\Content\\Seo\\SeoUrl\\SalesChannel\\SalesChannelSeoUrlDefinition',
            'sales_channel_definition.Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\CountryStateDefinition' => 'Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\SalesChannel\\SalesChannelCountryStateDefinition',
            'sales_channel_definition.Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\SalesChannel\\SalesChannelCountryStateDefinition' => 'Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\SalesChannel\\SalesChannelCountryStateDefinition',
            'sales_channel_definition.Shopware\\Core\\System\\Country\\CountryDefinition' => 'Shopware\\Core\\System\\Country\\SalesChannel\\SalesChannelCountryDefinition',
            'sales_channel_definition.Shopware\\Core\\System\\Country\\SalesChannel\\SalesChannelCountryDefinition' => 'Shopware\\Core\\System\\Country\\SalesChannel\\SalesChannelCountryDefinition',
            'sales_channel_definition.Shopware\\Core\\System\\Currency\\CurrencyDefinition' => 'Shopware\\Core\\System\\Currency\\SalesChannel\\SalesChannelCurrencyDefinition',
            'sales_channel_definition.Shopware\\Core\\System\\Currency\\SalesChannel\\SalesChannelCurrencyDefinition' => 'Shopware\\Core\\System\\Currency\\SalesChannel\\SalesChannelCurrencyDefinition',
            'sales_channel_definition.Shopware\\Core\\System\\Language\\LanguageDefinition' => 'Shopware\\Core\\System\\Language\\SalesChannel\\SalesChannelLanguageDefinition',
            'sales_channel_definition.Shopware\\Core\\System\\Language\\SalesChannel\\SalesChannelLanguageDefinition' => 'Shopware\\Core\\System\\Language\\SalesChannel\\SalesChannelLanguageDefinition',
            'sales_channel_definition.Shopware\\Core\\System\\Salutation\\SalesChannel\\SalesChannelSalutationDefinition' => 'Shopware\\Core\\System\\Salutation\\SalesChannel\\SalesChannelSalutationDefinition',
            'sales_channel_definition.Shopware\\Core\\System\\Salutation\\SalutationDefinition' => 'Shopware\\Core\\System\\Salutation\\SalesChannel\\SalesChannelSalutationDefinition',
        ];

        $this->privates['service_container'] = static function ($container) {
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/dbal/src/Connection.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/HttpKernelInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/KernelInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/RebootableInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/TerminableInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Kernel.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Kernel/MicroKernelTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Kernel.php';
            include_once \dirname(__DIR__, 4).'/vendor/cocur/slugify/src/SlugifyInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/cocur/slugify/src/Slugify.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/ContextResolverListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/CoreSubscriber.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/RouteScopeListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/RouteEventSubscriber.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/MaintenanceModeResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/Filter/SnippetFilterFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/TemplateFinderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/TemplateFinder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/NamespaceHierarchy/NamespaceHierarchyBuilder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/TemplateScopeDetector.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Loader/LoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/EntityTemplateLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/RequestContextResolverInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/RouteScopeCheckTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/SalesChannelRequestContextResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/ApiRequestContextResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/RouteScopeRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Util/HtmlSanitizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/HandlerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/Handler.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/ResettableInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Log/Monolog/ExcludeFlowEventHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Log/Monolog/ErrorCodeLogLevelHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Log/Monolog/ExcludeExceptionHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/ProcessableHandlerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/FormattableHandlerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/ProcessableHandlerTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/FormattableHandlerTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/AbstractProcessingHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/RouteParamsCleanupListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Storage/AbstractKeyValueStorage.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Storage/MySQLKeyValueStorage.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Acl/AclAnnotationValidator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/CacheStateSubscriber.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/CacheInvalidator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/InvalidatorStorage/AbstractInvalidatorStorage.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/container/src/ContainerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/service-contracts/ServiceProviderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DependencyInjection/TaggedServiceLocator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/service-contracts/ServiceLocatorTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ServiceLocator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/CacheTagCollection.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/cache/src/CacheItemPoolInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Adapter/AdapterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Adapter/TagAwareAdapterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache-contracts/CacheInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache-contracts/TagAwareCacheInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache-contracts/CacheTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/CacheDecorator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/PruneableInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/ResettableInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/log/src/LoggerAwareInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Traits/ContractsTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/log/src/LoggerAwareTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Adapter/TagAwareAdapter.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/EventListener/CorsListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/EventListener/ResponseHeaderListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Serializer/JsonEntityEncoder.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Repositories/RepositoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Repositories/AccessTokenRepositoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/OAuth/AccessTokenRepository.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Repositories/RefreshTokenRepositoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/OAuth/RefreshTokenRepository.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/CryptKey.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/event/src/EmitterAwareInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/event/src/EmitterAwareTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/AuthorizationServer.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Repositories/ClientRepositoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/OAuth/ClientRepository.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Repositories/ScopeRepositoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/OAuth/ScopeRepository.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/EventListener/JsonRequestTransformerListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/EventListener/ExpectationSubscriber.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/EventListener/Authentication/SalesChannelAuthenticationListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/EventListener/Authentication/ApiAuthenticationListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/ResourceServer.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/AuthorizationValidators/AuthorizationValidatorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/OAuth/BearerTokenValidator.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/CryptTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/AuthorizationValidators/BearerTokenValidator.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/oauth2-server/src/Repositories/UserRepositoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/OAuth/UserRepository.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Validation/DataValidator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/psr-http-message-bridge/HttpMessageFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/psr-http-message-bridge/Factory/PsrHttpFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/http-factory/src/RequestFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/http-factory/src/ResponseFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/http-factory/src/ServerRequestFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/http-factory/src/StreamFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/http-factory/src/UploadedFileFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/http-factory/src/UriFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/nyholm/psr7/src/Factory/Psr17Factory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Mapping/Factory/MetadataFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Validator/ValidatorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Validation/HappyPathValidator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ShopId/ShopIdProvider.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Persister/ScriptPersister.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/ScriptFileReader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/AppPayloadServiceHelper.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ActiveAppsLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/AbstractAppLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/AppLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/AppLocaleProvider.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/AppDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/AppPaymentMethod/AppPaymentMethodDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomField/CustomFieldService.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Event/EntityLoadedEventFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Cache/EntityCacheKeyGenerator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/EntityDefinitionQueryHelper.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/JoinGroupBuilder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/EntityHydrator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/Term/TokenizerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/Term/Tokenizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/Term/SearchTermInterpreter.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/Term/EntityScoreQueryBuilder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Read/EntityReaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/EntityReader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/CriteriaFieldsResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/CriteriaQueryBuilder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldResolver/CriteriaPartResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Write/EntityWriterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Write/EntityWriter.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/EntityForeignKeyResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Write/EntityWriteResultFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Write/WriteCommandExtractor.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Write/EntityWriteGatewayInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/EntityWriteGateway.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/ExceptionHandlerRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/Parser/SqlQueryParser.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Version/VersionDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Version/Aggregate/VersionCommit/VersionCommitDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Version/Aggregate/VersionCommitData/VersionCommitDataDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/VersionManager.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/DefinitionInstanceRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/FilesystemFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/flysystem/src/FilesystemReader.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/flysystem/src/FilesystemWriter.php';
            include_once \dirname(__DIR__, 4).'/vendor/league/flysystem/src/FilesystemOperator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/VersionStrategy/VersionStrategyInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Asset/FlysystemLastModifiedVersionStrategy.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Execution/ScriptLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Execution/ScriptExecutor.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/ScriptDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/DataCollector/DataCollectorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/DataCollector/DataCollector.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/DataCollector/TemplateAwareDataCollectorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/DataCollector/AbstractDataCollector.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Debugging/ScriptTraces.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Language/LanguageDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Entity/SalesChannelDefinitionInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Language/SalesChannel/SalesChannelLanguageDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Language/LanguageLoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Language/CachedLanguageLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Language/LanguageLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Language/SalesChannel/AbstractLanguageRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Language/SalesChannel/CachedLanguageRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Language/SalesChannel/LanguageRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrl/SeoUrlDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrl/SalesChannel/SalesChannelSeoUrlDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlRoute/SeoUrlRouteRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlPlaceholderHandlerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlPlaceholderHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SalesChannel/StoreApiSeoResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/event-dispatcher/src/EventDispatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/event-dispatcher-contracts/EventDispatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/event-dispatcher/EventDispatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/WebhookDispatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/FlowDispatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/event-dispatcher/EventDispatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/BusinessEventEncoder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/SalesChannelDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelDomain/SalesChannelDomainDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/SalesChannelContextPersister.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/SalesChannelContextServiceInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/SalesChannelContextService.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Entity/SalesChannelDefinitionInstanceRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Api/StoreApiResponseListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Api/StructEncoder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Entity/DefinitionRegistryChain.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/CountryDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/Aggregate/CountryState/CountryStateDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Currency/CurrencyDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Currency/Aggregate/CurrencyCountryRounding/CurrencyCountryRoundingDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Currency/SalesChannel/SalesChannelCurrencyDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Currency/CurrencyFormatter.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Currency/SalesChannel/AbstractCurrencyRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Currency/SalesChannel/CachedCurrencyRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Currency/SalesChannel/CurrencyRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Locale/LanguageLocaleCodeProvider.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/Aggregate/SnippetSet/SnippetSetDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/SnippetDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Tax/TaxDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/TaxProvider/TaxProviderDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/User/UserDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/Loader/InitialStateIdLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Util/XmlReader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/Util/ConfigReader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/Store/MemoizedSystemConfigStore.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/ValueGenerator/NumberRangeValueGeneratorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/ValueGenerator/NumberRangeValueGenerator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/ValueGenerator/Pattern/ValueGeneratorPatternRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/CategoryDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/SalesChannel/SalesChannelCategoryDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/Service/NavigationLoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/Service/NavigationLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/SalesChannel/AbstractNavigationRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/SalesChannel/CachedNavigationRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/SalesChannel/NavigationRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/SalesChannel/TreeBuildingNavigationRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/Service/CategoryBreadcrumbBuilder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/MediaDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/ProductDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/SalesChannelProductDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductDownload/ProductDownloadDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Rule/RuleDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/CmsPageDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/CmsSlotsDataResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/SalesChannel/SalesChannelCmsPageLoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/SalesChannel/SalesChannelCmsPageLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/FlowFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Price/AmountCalculator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Price/CashRounding.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/AbstractCartPersister.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartPersister.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartSerializationCleaner.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartCalculator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/AbstractCartItemUpdateRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/CartItemUpdateRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/AbstractCartLoadRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/CartLoadRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/AbstractCartDeleteRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/CartDeleteRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/AbstractCartItemRemoveRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/CartItemRemoveRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/AbstractCartItemAddRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/CartItemAddRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/AbstractCartOrderRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/SalesChannel/CartOrderRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Order/OrderPersisterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Order/OrderPersister.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/PreparedPaymentService.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Tax/PercentageTaxRuleBuilder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Tax/TaxDetector.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Tax/TaxCalculator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/TaxProvider/TaxProviderProcessor.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/TaxProvider/TaxAdjustment.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/TaxProvider/TaxAdjustmentCalculator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/TaxProvider/Payload/TaxProviderPayloadService.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/TaxProvider/TaxProviderRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Processor.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Validator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Transaction/TransactionProcessor.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartRuleLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/AbstractRuleLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CachedRuleLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/RuleLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItemFactoryRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/CustomerDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerAddress/CustomerAddressDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerGroup/CustomerGroupDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/OrderDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderAddress/OrderAddressDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Order/OrderConverter.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Order/LineItemDownloadLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/PaymentMethodDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/SalesChannel/SalesChannelPaymentMethodDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/AbstractPaymentTransactionStructFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentTransactionStructFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/lcobucci/jwt/src/Configuration.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/Token/JWTConfigurationFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/lcobucci/jwt/src/Signer.php';
            include_once \dirname(__DIR__, 4).'/vendor/lcobucci/jwt/src/Signer/OpenSSL.php';
            include_once \dirname(__DIR__, 4).'/vendor/lcobucci/jwt/src/Signer/Rsa.php';
            include_once \dirname(__DIR__, 4).'/vendor/lcobucci/jwt/src/Signer/Rsa/Sha256.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PaymentHandlerRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/SalesChannel/AbstractPaymentMethodRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/SalesChannel/CachedPaymentMethodRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/SalesChannel/PaymentMethodRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/SalesChannel/SortedPaymentMethodRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/ShippingMethodDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/SalesChannel/SalesChannelShippingMethodDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/SalesChannel/AbstractShippingMethodRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/SalesChannel/CachedShippingMethodRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/SalesChannel/ShippingMethodRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/SalesChannel/SortedShippingMethodRoute.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Notification/NotificationService.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Notification/NotificationDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/DataAbstractionLayer/CriteriaParser.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/ElasticsearchHelper.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/ElasticsearchRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Routing/MaintenanceModeResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ThemeConfigValueAccessor.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/CachedResolvedConfigLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/composer/composer/src/Composer/EventDispatcher/EventSubscriberInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Twig/TwigDateRequestListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Routing/StorefrontSubscriber.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/HreflangLoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/HreflangLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/AffiliateTracking/AffiliateTrackingListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Header/HeaderPageletLoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Header/HeaderPageletLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Footer/FooterPageletLoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Footer/FooterPageletLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/GenericPageLoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/GenericPageLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/AbstractCacheTracer.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheTracer.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/CacheTracer.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheResponseSubscriber.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Captcha/CaptchaRouteListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Routing/ResponseHeaderListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/StorefrontPluginConfiguration/AbstractStorefrontPluginConfigurationFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/StorefrontPluginConfiguration/StorefrontPluginConfigurationFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/StorefrontPluginRegistryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/StorefrontPluginRegistry.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ThemeCompilerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ThemeCompiler.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/AbstractScssCompiler.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ScssPhpCompiler.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ThemeFileImporterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ThemeFileImporter.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ThemeFileResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ThemeService.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ConfigLoader/AbstractConfigLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ConfigLoader/DatabaseConfigLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ThemeDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/MappingEntityDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Aggregate/ThemeSalesChannelDefinition.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/NamespaceHierarchy/TemplateNamespaceHierarchyBuilderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Twig/ThemeNamespaceHierarchyBuilder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Twig/ThemeInheritanceBuilderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Twig/ThemeInheritanceBuilder.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/SalesChannelThemeLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/ResponseListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/LocaleListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/ValidateRequestListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/DisallowRobotsIndexingListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/ErrorListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/CacheAttributeListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ParameterBag/ParameterBagInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ParameterBag/ParameterBag.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ParameterBag/FrozenParameterBag.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ParameterBag/ContainerBagInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ParameterBag/ContainerBag.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/runtime/RunnerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/runtime/Runner/Symfony/HttpKernelRunner.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/runtime/Runner/Symfony/ResponseRunner.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/runtime/RuntimeInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/runtime/GenericRuntime.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/runtime/SymfonyRuntime.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/HttpKernel.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ControllerResolverInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/TraceableControllerResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ControllerResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ContainerControllerResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Controller/ControllerResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolverInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/TraceableArgumentResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/ControllerMetadata/ArgumentMetadataFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/ControllerMetadata/ArgumentMetadataFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/RequestStack.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/UriSigner.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/config/ConfigCacheFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/config/ResourceCheckerConfigCacheFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/LocaleAwareListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Traits/AbstractAdapterTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Adapter/AbstractAdapter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/Packages.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Asset/AssetPackageService.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/PathPackage.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/Context/ContextInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/Context/RequestStackContext.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/asset/VersionStrategy/EmptyVersionStrategy.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/HttpCache/SurrogateInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/HttpCache/AbstractSurrogate.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/HttpCache/Esi.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/SurrogateListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/FragmentListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation-contracts/TranslatorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/TranslatorBagInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation-contracts/LocaleAwareInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Translator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheWarmer/WarmableInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Translation/Translator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Formatter/MessageFormatterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Formatter/IntlFormatterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Formatter/MessageFormatter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation-contracts/TranslatorTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/IdentityTranslator.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/LocaleSwitcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/DebugHandlersListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Debug/FileLinkFormatter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/stopwatch/Stopwatch.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/RequestContextAwareInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Matcher/UrlMatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Generator/UrlGeneratorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/RouterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Matcher/RequestMatcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Router.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Routing/Router.php';
            include_once \dirname(__DIR__, 4).'/vendor/psr/log/src/LoggerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Logger.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Log/DebugLoggerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/monolog-bridge/Logger.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/RequestContext.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/RouterListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/annotations/lib/Doctrine/Common/Annotations/Reader.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/annotations/lib/Doctrine/Common/Annotations/AnnotationReader.php';
            include_once \dirname(__DIR__, 4).'/vendor/doctrine/annotations/lib/Doctrine/Common/Annotations/PsrCachedReader.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Traits/ProxyTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Adapter/PhpArrayAdapter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/SerializerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/NormalizerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ContextAwareNormalizerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/DenormalizerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ContextAwareDenormalizerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/EncoderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/ContextAwareEncoderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/DecoderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/ContextAwareDecoderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Serializer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/SerializerAwareInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/CacheableSupportsMethodInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/SerializerAwareTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/UnwrappingDenormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-access/PropertyAccessorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-access/PropertyAccessor.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/cache/Adapter/ArrayAdapter.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Struct/Serializer/StructNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/SendEmailMessageJsonSerializer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/NormalizerAwareTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Serialization/Normalizer/FlattenExceptionNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ProblemNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/UidNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/DateTimeNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ConstraintViolationListNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/NameConverter/NameConverterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/NameConverter/AdvancedNameConverterInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/NameConverter/MetadataAwareNameConverter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/MimeMessageNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ObjectToPopulateTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/AbstractNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/AbstractObjectNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/PropertyNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/ClassDiscriminatorResolverInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/ClassDiscriminatorFromClassMetadata.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/DateTimeZoneNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/DateIntervalNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/FormErrorNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/BackedEnumNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/DataUriNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/JsonSerializableNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/DenormalizerAwareInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/DenormalizerAwareTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ArrayDenormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ObjectNormalizer.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Serializer/JsonApiDecoder.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/NormalizationAwareInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/XmlEncoder.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/JsonEncoder.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/YamlEncoder.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Encoder/CsvEncoder.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/Factory/ClassMetadataFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/Factory/ClassResolverTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/Factory/ClassMetadataFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/Loader/LoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/Loader/LoaderChain.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Mapping/Loader/AnnotationLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyTypeExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyDescriptionExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyAccessExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyListExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyInfoExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyInitializableExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyInfoExtractor.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyReadInfoExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/PropertyWriteInfoExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/Extractor/ConstructorArgumentTypeExtractorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/Extractor/ReflectionExtractor.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/lock/LockFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/lock/PersistingStoreInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/lock/Store/StoreFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/AbstractSessionListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/SessionListener.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ValidatorBuilder.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Validation.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidatorFactoryInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ContainerConstraintValidatorFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Mapping/Loader/LoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Mapping/Loader/AutoMappingTrait.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Mapping/Loader/PropertyInfoLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/MessageBusInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/MessageBus.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/mime/MimeTypeGuesserInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/mime/MimeTypesInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/mime/MimeTypes.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Cache/CacheInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Cache/FilesystemCache.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/ExtensionInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/AbstractExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/CoreExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/EscaperExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/OptimizerExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/StagingExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/ExtensionSet.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Template.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/TemplateWrapper.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Environment.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/TwigEnvironment.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/ProfilerExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/ProfilerExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Profiler/Profile.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/AssetExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/CodeExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/RoutingExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/YamlExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/StopwatchExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/HttpKernelExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/HttpFoundationExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/UrlHelper.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/SerializerExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/DumpExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Extension/NodeExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Extension/PhpSyntaxExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Extension/FeatureFlagExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/intl-extra/IntlExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/string-extra/StringExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Extension/PcreExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Extension/InstanceOfExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Filter/CurrencyFilter.php';
            include_once \dirname(__DIR__, 4).'/vendor/cocur/slugify/src/Bridge/Twig/SlugifyExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Filter/ReplaceRecursiveFilter.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/SecurityExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Extension/SeoUrlFunctionExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Extension/CategoryUrlExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/Service/AbstractCategoryUrlGenerator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/Service/CategoryUrlGenerator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Extension/MediaExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Extension/RawUrlFunctionExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Extension/SwSanitizeTwigFilter.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/Extension/BuildBreadcrumbExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Profiling/Twig/DoctrineExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/GlobalsInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Twig/TemplateDataExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Twig/Extension/ConfigExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Twig/TemplateConfigAccessor.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Twig/IconExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Twig/ThumbnailExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Twig/Extension/UrlEncodingTwigFilter.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Twig/Extension/IconCacheTwigFilter.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/AppVariable.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Twig/TwigAppVariable.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/RuntimeLoader/RuntimeLoaderInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/RuntimeLoader/ContainerRuntimeLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bundle/DependencyInjection/Configurator/EnvironmentConfigurator.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Loader/ChainLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Loader/FilesystemLoader.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/TranslationExtension.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Processor/ProcessorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Processor/PsrLogMessageProcessor.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/monolog-bridge/Handler/CompatibilityHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/monolog-bridge/Handler/ConsoleHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/monolog-bridge/Handler/CompatibilityProcessingHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/var-dumper/Cloner/ClonerInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/var-dumper/Cloner/AbstractCloner.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/var-dumper/Cloner/VarCloner.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/var-dumper/Dumper/DataDumperInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/var-dumper/Cloner/DumperInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/var-dumper/Dumper/AbstractDumper.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/var-dumper/Dumper/CliDumper.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/var-dumper/Dumper/HtmlDumper.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityRepository.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/RateLimiter/RateLimiter.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/RateLimiter/RateLimiterFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/rate-limiter/Storage/StorageInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/rate-limiter/Storage/CacheStorage.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Entity/SalesChannelRepository.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Translation/AbstractTranslator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Translation/Translator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Routing/Router.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Messenger/MessageBus.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/event-dispatcher/Debug/TraceableEventDispatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Debug/TraceableEventDispatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Event/NestedEventDispatcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/NullHandler.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/EntitySearcherInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/DataAbstractionLayer/ElasticsearchEntitySearcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/EntitySearcher.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/DataAbstractionLayer/AbstractElasticsearchSearchHydrator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/DataAbstractionLayer/ElasticsearchEntitySearchHydrator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/EntityAggregatorInterface.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/DataAbstractionLayer/ElasticsearchEntityAggregator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/EntityAggregator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/DataAbstractionLayer/AbstractElasticsearchAggregationHydrator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/DataAbstractionLayer/ElasticsearchEntityAggregatorHydrator.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Profiler/ClientProfiler.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/AbstractSalesChannelContextFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/CachedSalesChannelContextFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/SalesChannelContextFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/AbstractBaseContextFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/CachedBaseContextFactory.php';
            include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/BaseContextFactory.php';
            include_once __DIR__.'/proxy-classes.php';
        };
    }

    public function compile(): void
    {
        throw new LogicException('You cannot compile a dumped container that was already compiled.');
    }

    public function isCompiled(): bool
    {
        return true;
    }

    public function getRemovedIds(): array
    {
        return require $this->containerDir.\DIRECTORY_SEPARATOR.'removed-ids.php';
    }

    protected function createProxy($class, \Closure $factory)
    {
        return $factory();
    }

    /**
     * Gets the public 'Doctrine\DBAL\Connection' shared service.
     *
     * @return \Doctrine\DBAL\Connection
     */
    protected static function getConnectionService($container)
    {
        return $container->services['Doctrine\\DBAL\\Connection'] = \Shopware\Core\Kernel::getConnection();
    }

    /**
     * Gets the public 'OpenSearch\Client' shared service.
     *
     * @return \Shopware\Elasticsearch\Profiler\ClientProfiler
     */
    protected static function getClientService($container)
    {
        return $container->services['OpenSearch\\Client'] = new \Shopware\Elasticsearch\Profiler\ClientProfiler(($container->privates['shopware.es.profiled.client.inner'] ?? self::getShopware_Es_Profiled_Client_InnerService($container)));
    }

    /**
     * Gets the public 'Shopware\Administration\Controller\AdminExtensionApiController' shared service.
     *
     * @return \Shopware\Administration\Controller\AdminExtensionApiController
     */
    protected static function getAdminExtensionApiControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Controller/AdminExtensionApiController.php';

        $container->services['Shopware\\Administration\\Controller\\AdminExtensionApiController'] = $instance = new \Shopware\Administration\Controller\AdminExtensionApiController(($container->privates['Shopware\\Core\\Framework\\App\\ActionButton\\Executor'] ?? self::getExecutorService($container)), ($container->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'] ?? self::getShopIdProviderService($container)), ($container->services['app.repository'] ?? self::getApp_RepositoryService($container)), ($container->privates['Shopware\\Core\\Framework\\App\\Hmac\\QuerySigner'] ?? self::getQuerySignerService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Administration\Controller\AdminProductStreamController' shared service.
     *
     * @return \Shopware\Administration\Controller\AdminProductStreamController
     */
    protected static function getAdminProductStreamControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Controller/AdminProductStreamController.php';

        $container->services['Shopware\\Administration\\Controller\\AdminProductStreamController'] = $instance = new \Shopware\Administration\Controller\AdminProductStreamController(($container->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? self::getProductDefinitionService($container)), ($container->services['sales_channel.product.repository'] ?? self::getSalesChannel_Product_RepositoryService($container)), ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? self::getSalesChannelContextServiceService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\RequestCriteriaBuilder'] ?? self::getRequestCriteriaBuilderService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Administration\Controller\AdminSearchController' shared service.
     *
     * @return \Shopware\Administration\Controller\AdminSearchController
     */
    protected static function getAdminSearchControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Controller/AdminSearchController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Service/AdminSearcher.php';

        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container));

        $container->services['Shopware\\Administration\\Controller\\AdminSearchController'] = $instance = new \Shopware\Administration\Controller\AdminSearchController(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\RequestCriteriaBuilder'] ?? self::getRequestCriteriaBuilderService($container)), $a, new \Shopware\Administration\Service\AdminSearcher($a), ($container->privates['serializer'] ?? self::getSerializerService($container)), ($container->services['Shopware\\Core\\Framework\\Api\\Acl\\AclCriteriaValidator'] ?? self::getAclCriteriaValidatorService($container)), $a, ($container->privates['Shopware\\Core\\Framework\\Api\\Serializer\\JsonEntityEncoder'] ?? self::getJsonEntityEncoderService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Administration\Controller\AdminTagController' shared service.
     *
     * @return \Shopware\Administration\Controller\AdminTagController
     */
    protected static function getAdminTagControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Controller/AdminTagController.php';

        $container->services['Shopware\\Administration\\Controller\\AdminTagController'] = $instance = new \Shopware\Administration\Controller\AdminTagController(($container->services['Shopware\\Core\\System\\Tag\\Service\\FilterTagIdsService'] ?? self::getFilterTagIdsServiceService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Administration\Controller\AdministrationController' shared service.
     *
     * @return \Shopware\Administration\Controller\AdministrationController
     */
    protected static function getAdministrationControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Controller/AdministrationController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Snippet/SnippetFinderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Snippet/CachedSnippetFinder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Snippet/SnippetFinder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Framework/Routing/KnownIps/KnownIpsCollectorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Framework/Routing/KnownIps/KnownIpsCollector.php';

        $a = ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container));

        $container->services['Shopware\\Administration\\Controller\\AdministrationController'] = $instance = new \Shopware\Administration\Controller\AdministrationController(($container->services['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder'] ?? self::getTemplateFinderService($container)), ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\FirstRunWizardService'] ?? self::getFirstRunWizardServiceService($container)), new \Shopware\Administration\Snippet\CachedSnippetFinder(new \Shopware\Administration\Snippet\SnippetFinder(($container->services['kernel'] ?? $container->get('kernel', 1)), $a), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container))), $container->parameters['kernel.supported_api_versions'], new \Shopware\Administration\Framework\Routing\KnownIps\KnownIpsCollector(), $a, ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), (\dirname(__DIR__, 4).'/vendor/shopware/core'), ($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container)), ($container->services['currency.repository'] ?? self::getCurrency_RepositoryService($container)), ($container->services['Shopware\\Core\\Framework\\Util\\HtmlSanitizer'] ?? self::getHtmlSanitizerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->privates['parameter_bag'] ??= new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Administration\Controller\DashboardController' shared service.
     *
     * @return \Shopware\Administration\Controller\DashboardController
     */
    protected static function getDashboardControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Controller/DashboardController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Dashboard/OrderAmountService.php';

        $container->services['Shopware\\Administration\\Controller\\DashboardController'] = $instance = new \Shopware\Administration\Controller\DashboardController(new \Shopware\Administration\Dashboard\OrderAmountService(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\CashRounding'] ??= new \Shopware\Core\Checkout\Cart\Price\CashRounding()), $container->getEnv('bool:SHOPWARE_DBAL_TIMEZONE_SUPPORT_ENABLED')));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Administration\Controller\NotificationController' shared service.
     *
     * @return \Shopware\Administration\Controller\NotificationController
     */
    protected static function getNotificationControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Controller/NotificationController.php';

        $container->services['Shopware\\Administration\\Controller\\NotificationController'] = $instance = new \Shopware\Administration\Controller\NotificationController(($container->privates['shopware.rate_limiter'] ?? self::getShopware_RateLimiterService($container)), ($container->services['Shopware\\Administration\\Notification\\NotificationService'] ?? self::getNotificationServiceService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Administration\Controller\UserConfigController' shared service.
     *
     * @return \Shopware\Administration\Controller\UserConfigController
     */
    protected static function getUserConfigControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Controller/UserConfigController.php';

        $container->services['Shopware\\Administration\\Controller\\UserConfigController'] = $instance = new \Shopware\Administration\Controller\UserConfigController(($container->services['user_config.repository'] ?? self::getUserConfig_RepositoryService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Administration\Notification\NotificationDefinition' shared service.
     *
     * @return \Shopware\Administration\Notification\NotificationDefinition
     */
    protected static function getNotificationDefinitionService($container)
    {
        $container->services['Shopware\\Administration\\Notification\\NotificationDefinition'] = $instance = new \Shopware\Administration\Notification\NotificationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Administration\Notification\NotificationService' shared service.
     *
     * @return \Shopware\Administration\Notification\NotificationService
     */
    protected static function getNotificationServiceService($container)
    {
        $a = ($container->services['notification.repository'] ?? self::getNotification_RepositoryService($container));

        if (isset($container->services['Shopware\\Administration\\Notification\\NotificationService'])) {
            return $container->services['Shopware\\Administration\\Notification\\NotificationService'];
        }

        return $container->services['Shopware\\Administration\\Notification\\NotificationService'] = new \Shopware\Administration\Notification\NotificationService($a);
    }

    /**
     * Gets the public 'Shopware\Administration\Snippet\AppAdministrationSnippetDefinition' shared service.
     *
     * @return \Shopware\Administration\Snippet\AppAdministrationSnippetDefinition
     */
    protected static function getAppAdministrationSnippetDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Snippet/AppAdministrationSnippetDefinition.php';

        $container->services['Shopware\\Administration\\Snippet\\AppAdministrationSnippetDefinition'] = $instance = new \Shopware\Administration\Snippet\AppAdministrationSnippetDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Cart\Calculator' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Calculator
     */
    protected static function getCalculatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Calculator.php';

        return $container->services['Shopware\\Core\\Checkout\\Cart\\Calculator'] = new \Shopware\Core\Checkout\Cart\Calculator(($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] ?? self::getQuantityPriceCalculatorService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\PercentagePriceCalculator'] ?? self::getPercentagePriceCalculatorService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\AbsolutePriceCalculator'] ?? self::getAbsolutePriceCalculatorService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Cart\Facade\CartFacadeHookFactory' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Facade\CartFacadeHookFactory
     */
    protected static function getCartFacadeHookFactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Execution/Awareness/HookServiceFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Facade/CartFacadeHookFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Facade/CartFacadeHelper.php';

        $a = ($container->privates['Shopware\\Core\\Checkout\\Cart\\Facade\\ScriptPriceStubs'] ?? self::getScriptPriceStubsService($container));

        return $container->services['Shopware\\Core\\Checkout\\Cart\\Facade\\CartFacadeHookFactory'] = new \Shopware\Core\Checkout\Cart\Facade\CartFacadeHookFactory(new \Shopware\Core\Checkout\Cart\Facade\CartFacadeHelper(($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryRegistry'] ?? self::getLineItemFactoryRegistryService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Processor'] ?? self::getProcessorService($container)), $a), $a);
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Cart\Facade\PriceFactoryFactory' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Facade\PriceFactoryFactory
     */
    protected static function getPriceFactoryFactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Execution/Awareness/HookServiceFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Facade/PriceFactoryFactory.php';

        return $container->services['Shopware\\Core\\Checkout\\Cart\\Facade\\PriceFactoryFactory'] = new \Shopware\Core\Checkout\Cart\Facade\PriceFactoryFactory(($container->privates['Shopware\\Core\\Checkout\\Cart\\Facade\\ScriptPriceStubs'] ?? self::getScriptPriceStubsService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Cart\Order\Api\OrderConverterController' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Order\Api\OrderConverterController
     */
    protected static function getOrderConverterControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Order/Api/OrderConverterController.php';

        $container->services['Shopware\\Core\\Checkout\\Cart\\Order\\Api\\OrderConverterController'] = $instance = new \Shopware\Core\Checkout\Cart\Order\Api\OrderConverterController(($container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'] ?? self::getOrderConverterService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] ?? self::getCartPersisterService($container)), ($container->services['order.repository'] ?? self::getOrder_RepositoryService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Cart\Order\Api\OrderRecalculationController' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Order\Api\OrderRecalculationController
     */
    protected static function getOrderRecalculationControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Order/Api/OrderRecalculationController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Order/RecalculationService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionItemBuilder.php';

        $container->services['Shopware\\Core\\Checkout\\Cart\\Order\\Api\\OrderRecalculationController'] = $instance = new \Shopware\Core\Checkout\Cart\Order\Api\OrderRecalculationController(new \Shopware\Core\Checkout\Cart\Order\RecalculationService(($container->services['order.repository'] ?? self::getOrder_RepositoryService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'] ?? self::getOrderConverterService($container)), ($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? self::getCartServiceService($container)), ($container->services['product.repository'] ?? self::getProduct_RepositoryService($container)), ($container->services['order_address.repository'] ?? self::getOrderAddress_RepositoryService($container)), ($container->services['customer_address.repository'] ?? self::getCustomerAddress_RepositoryService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Processor'] ?? self::getProcessorService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'] ?? self::getCartRuleLoaderService($container)), ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionItemBuilder'] ??= new \Shopware\Core\Checkout\Promotion\Cart\PromotionItemBuilder())));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Cart\PriceActionController' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\PriceActionController
     */
    protected static function getPriceActionControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/PriceActionController.php';

        $container->services['Shopware\\Core\\Checkout\\Cart\\PriceActionController'] = $instance = new \Shopware\Core\Checkout\Cart\PriceActionController(($container->services['tax.repository'] ?? self::getTax_RepositoryService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\NetPriceCalculator'] ?? self::getNetPriceCalculatorService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\GrossPriceCalculator'] ?? self::getGrossPriceCalculatorService($container)), ($container->services['currency.repository'] ?? self::getCurrency_RepositoryService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Cart\SalesChannel\CartDeleteRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\SalesChannel\CartDeleteRoute
     */
    protected static function getCartDeleteRouteService($container)
    {
        $a = ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] ?? self::getCartPersisterService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartDeleteRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartDeleteRoute'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartDeleteRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartDeleteRoute'];
        }

        return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartDeleteRoute'] = new \Shopware\Core\Checkout\Cart\SalesChannel\CartDeleteRoute($a, $b);
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Cart\SalesChannel\CartItemAddRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\SalesChannel\CartItemAddRoute
     */
    protected static function getCartItemAddRouteService($container)
    {
        $a = ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartCalculator'] ?? self::getCartCalculatorService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute'];
        }
        $b = ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] ?? self::getCartPersisterService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute'];
        }
        $d = ($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryRegistry'] ?? self::getLineItemFactoryRegistryService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute'];
        }
        $e = ($container->privates['shopware.rate_limiter'] ?? self::getShopware_RateLimiterService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute'];
        }

        return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute'] = new \Shopware\Core\Checkout\Cart\SalesChannel\CartItemAddRoute($a, $b, $c, $d, $e);
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Cart\SalesChannel\CartItemRemoveRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\SalesChannel\CartItemRemoveRoute
     */
    protected static function getCartItemRemoveRouteService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemRemoveRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemRemoveRoute'];
        }
        $b = ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartCalculator'] ?? self::getCartCalculatorService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemRemoveRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemRemoveRoute'];
        }
        $c = ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] ?? self::getCartPersisterService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemRemoveRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemRemoveRoute'];
        }

        return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemRemoveRoute'] = new \Shopware\Core\Checkout\Cart\SalesChannel\CartItemRemoveRoute($a, $b, $c);
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Cart\SalesChannel\CartItemUpdateRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\SalesChannel\CartItemUpdateRoute
     */
    protected static function getCartItemUpdateRouteService($container)
    {
        $a = ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] ?? self::getCartPersisterService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemUpdateRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemUpdateRoute'];
        }
        $b = ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartCalculator'] ?? self::getCartCalculatorService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemUpdateRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemUpdateRoute'];
        }
        $c = ($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryRegistry'] ?? self::getLineItemFactoryRegistryService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemUpdateRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemUpdateRoute'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemUpdateRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemUpdateRoute'];
        }

        return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemUpdateRoute'] = new \Shopware\Core\Checkout\Cart\SalesChannel\CartItemUpdateRoute($a, $b, $c, $d);
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Cart\SalesChannel\CartLoadRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\SalesChannel\CartLoadRoute
     */
    protected static function getCartLoadRouteService($container)
    {
        $a = ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] ?? self::getCartPersisterService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartLoadRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartLoadRoute'];
        }
        $b = ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartFactory'] ?? self::getCartFactoryService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartLoadRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartLoadRoute'];
        }
        $c = ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartCalculator'] ?? self::getCartCalculatorService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartLoadRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartLoadRoute'];
        }
        $d = ($container->privates['Shopware\\Core\\Checkout\\Cart\\TaxProvider\\TaxProviderProcessor'] ?? self::getTaxProviderProcessorService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartLoadRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartLoadRoute'];
        }

        return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartLoadRoute'] = new \Shopware\Core\Checkout\Cart\SalesChannel\CartLoadRoute($a, $b, $c, $d);
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Cart\SalesChannel\CartOrderRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\SalesChannel\CartOrderRoute
     */
    protected static function getCartOrderRouteService($container)
    {
        $a = ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartCalculator'] ?? self::getCartCalculatorService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'];
        }
        $b = ($container->services['order.repository'] ?? self::getOrder_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'];
        }
        $c = ($container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'] ?? self::getOrderConverterService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'];
        }
        $d = ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] ?? self::getCartPersisterService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'];
        }
        $e = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'];
        }
        $f = ($container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PaymentHandlerRegistry'] ?? self::getPaymentHandlerRegistryService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'];
        }
        $g = ($container->services['app_payment_method.repository'] ?? self::getAppPaymentMethod_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'];
        }

        return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'] = new \Shopware\Core\Checkout\Cart\SalesChannel\CartOrderRoute($a, $b, new \Shopware\Core\Checkout\Cart\Order\OrderPersister($b, $c), $d, $e, new \Shopware\Core\Checkout\Payment\PreparedPaymentService($f, $g, ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), ($container->privates['Shopware\\Core\\System\\StateMachine\\Loader\\InitialStateIdLoader'] ?? self::getInitialStateIdLoaderService($container)), ($container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentTransactionStructFactory'] ??= new \Shopware\Core\Checkout\Payment\Cart\PaymentTransactionStructFactory())), ($container->privates['Shopware\\Core\\Checkout\\Cart\\TaxProvider\\TaxProviderProcessor'] ?? self::getTaxProviderProcessorService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Cart\SalesChannel\CartService' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\SalesChannel\CartService
     */
    protected static function getCartServiceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] = $container->createProxy('CartServiceGhost32c4436', static fn () => \CartServiceGhost32c4436::createLazyGhost(static fn ($proxy) => self::getCartServiceService($container, $proxy)));
        }

        return ($lazyLoad->__construct(($container->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] ?? self::getCartPersisterService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartCalculator'] ?? self::getCartCalculatorService($container)), ($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartLoadRoute'] ?? self::getCartLoadRouteService($container)), ($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartDeleteRoute'] ?? self::getCartDeleteRouteService($container)), ($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemAddRoute'] ?? self::getCartItemAddRouteService($container)), ($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemUpdateRoute'] ?? self::getCartItemUpdateRouteService($container)), ($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartItemRemoveRoute'] ?? self::getCartItemRemoveRouteService($container)), ($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'] ?? self::getCartOrderRouteService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartFactory'] ?? self::getCartFactoryService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Cart\TaxProvider\TaxProviderRegistry' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\TaxProvider\TaxProviderRegistry
     */
    protected static function getTaxProviderRegistryService($container)
    {
        return $container->services['Shopware\\Core\\Checkout\\Cart\\TaxProvider\\TaxProviderRegistry'] = new \Shopware\Core\Checkout\Cart\TaxProvider\TaxProviderRegistry(new RewindableGenerator(fn () => new \EmptyIterator(), 0));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\Aggregate\CustomerAddress\CustomerAddressDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerAddress\CustomerAddressDefinition
     */
    protected static function getCustomerAddressDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerAddress\\CustomerAddressDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerAddress\CustomerAddressDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupRegistrationSalesChannel\CustomerGroupRegistrationSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupRegistrationSalesChannel\CustomerGroupRegistrationSalesChannelDefinition
     */
    protected static function getCustomerGroupRegistrationSalesChannelDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerGroupRegistrationSalesChannel/CustomerGroupRegistrationSalesChannelDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupRegistrationSalesChannel\\CustomerGroupRegistrationSalesChannelDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupRegistrationSalesChannel\CustomerGroupRegistrationSalesChannelDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupTranslation\CustomerGroupTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupTranslation\CustomerGroupTranslationDefinition
     */
    protected static function getCustomerGroupTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerGroupTranslation/CustomerGroupTranslationDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupTranslation\\CustomerGroupTranslationDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupTranslation\CustomerGroupTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\Aggregate\CustomerGroup\CustomerGroupDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroup\CustomerGroupDefinition
     */
    protected static function getCustomerGroupDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroup\\CustomerGroupDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroup\CustomerGroupDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\Aggregate\CustomerRecovery\CustomerRecoveryDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerRecovery\CustomerRecoveryDefinition
     */
    protected static function getCustomerRecoveryDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerRecovery/CustomerRecoveryDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerRecovery\\CustomerRecoveryDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerRecovery\CustomerRecoveryDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\Aggregate\CustomerTag\CustomerTagDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerTag\CustomerTagDefinition
     */
    protected static function getCustomerTagDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerTag/CustomerTagDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerTag\\CustomerTagDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerTag\CustomerTagDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlistProduct\CustomerWishlistProductDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlistProduct\CustomerWishlistProductDefinition
     */
    protected static function getCustomerWishlistProductDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerWishlistProduct/CustomerWishlistProductDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlistProduct\\CustomerWishlistProductDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlistProduct\CustomerWishlistProductDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlist\CustomerWishlistDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlist\CustomerWishlistDefinition
     */
    protected static function getCustomerWishlistDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerWishlist/CustomerWishlistDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlist\\CustomerWishlistDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlist\CustomerWishlistDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\Api\CustomerGroupRegistrationActionController' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Api\CustomerGroupRegistrationActionController
     */
    protected static function getCustomerGroupRegistrationActionControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Api/CustomerGroupRegistrationActionController.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\Api\\CustomerGroupRegistrationActionController'] = new \Shopware\Core\Checkout\Customer\Api\CustomerGroupRegistrationActionController(($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container)), ($container->services['customer_group.repository'] ?? self::getCustomerGroup_RepositoryService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'] ?? self::getSalesChannelContextRestorerService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\CustomerDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\CustomerDefinition
     */
    protected static function getCustomerDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Checkout\\Customer\\CustomerDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\CustomerDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\AccountNewsletterRecipientRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\AccountNewsletterRecipientRoute
     */
    protected static function getAccountNewsletterRecipientRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractAccountNewsletterRecipientRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AccountNewsletterRecipientRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountNewsletterRecipientRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\AccountNewsletterRecipientRoute(($container->services['sales_channel.newsletter_recipient.repository'] ?? self::getSalesChannel_NewsletterRecipient_RepositoryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\AddWishlistProductRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\AddWishlistProductRoute
     */
    protected static function getAddWishlistProductRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractAddWishlistProductRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AddWishlistProductRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AddWishlistProductRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\AddWishlistProductRoute(($container->services['customer_wishlist.repository'] ?? self::getCustomerWishlist_RepositoryService($container)), ($container->services['sales_channel.product.repository'] ?? self::getSalesChannel_Product_RepositoryService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\ChangeCustomerProfileRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\ChangeCustomerProfileRoute
     */
    protected static function getChangeCustomerProfileRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractChangeCustomerProfileRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/ChangeCustomerProfileRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangeCustomerProfileRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\ChangeCustomerProfileRoute(($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)), ($container->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\CustomerProfileValidationFactory'] ?? self::getCustomerProfileValidationFactoryService($container)), ($container->privates['Shopware\\Core\\System\\SalesChannel\\StoreApiCustomFieldMapper'] ?? self::getStoreApiCustomFieldMapperService($container)), ($container->services['salutation.repository'] ?? self::getSalutation_RepositoryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\ChangeEmailRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\ChangeEmailRoute
     */
    protected static function getChangeEmailRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractChangeEmailRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/ChangeEmailRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangeEmailRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\ChangeEmailRoute(($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\ChangeLanguageRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\ChangeLanguageRoute
     */
    protected static function getChangeLanguageRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractChangeLanguageRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/ChangeLanguageRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangeLanguageRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\ChangeLanguageRoute(($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\ChangePasswordRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\ChangePasswordRoute
     */
    protected static function getChangePasswordRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractChangePasswordRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/ChangePasswordRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangePasswordRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\ChangePasswordRoute(($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\ChangePaymentMethodRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\ChangePaymentMethodRoute
     */
    protected static function getChangePaymentMethodRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractChangePaymentMethodRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/ChangePaymentMethodRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangePaymentMethodRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\ChangePaymentMethodRoute(($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['payment_method.repository'] ?? self::getPaymentMethod_RepositoryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\CustomerGroupRegistrationSettingsRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\CustomerGroupRegistrationSettingsRoute
     */
    protected static function getCustomerGroupRegistrationSettingsRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractCustomerGroupRegistrationSettingsRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/CustomerGroupRegistrationSettingsRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\CustomerGroupRegistrationSettingsRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\CustomerGroupRegistrationSettingsRoute(($container->services['customer_group.repository'] ?? self::getCustomerGroup_RepositoryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\CustomerRecoveryIsExpiredRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\CustomerRecoveryIsExpiredRoute
     */
    protected static function getCustomerRecoveryIsExpiredRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractCustomerRecoveryIsExpiredRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/CustomerRecoveryIsExpiredRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\CustomerRecoveryIsExpiredRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\CustomerRecoveryIsExpiredRoute(($container->services['customer_recovery.repository'] ?? self::getCustomerRecovery_RepositoryService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->privates['shopware.rate_limiter'] ?? self::getShopware_RateLimiterService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\CustomerRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\CustomerRoute
     */
    protected static function getCustomerRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractCustomerRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/CustomerRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\CustomerRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\CustomerRoute(($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\DeleteAddressRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\DeleteAddressRoute
     */
    protected static function getDeleteAddressRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractDeleteAddressRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/CustomerAddressValidationTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/DeleteAddressRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\DeleteAddressRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\DeleteAddressRoute(($container->services['customer_address.repository'] ?? self::getCustomerAddress_RepositoryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\DeleteCustomerRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\DeleteCustomerRoute
     */
    protected static function getDeleteCustomerRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractDeleteCustomerRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/DeleteCustomerRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\DeleteCustomerRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\DeleteCustomerRoute(($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\DownloadRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\DownloadRoute
     */
    protected static function getDownloadRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractDownloadRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/DownloadRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/File/DownloadResponseGenerator.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\DownloadRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\DownloadRoute(($container->services['order_line_item_download.repository'] ?? self::getOrderLineItemDownload_RepositoryService($container)), new \Shopware\Core\Content\Media\File\DownloadResponseGenerator(($container->services['shopware.filesystem.public'] ?? self::getShopware_Filesystem_PublicService($container)), ($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)), ($container->privates['Shopware\\Core\\Content\\Media\\MediaService'] ?? self::getMediaServiceService($container)), 'php', ($container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\AbstractMediaUrlGenerator'] ?? self::getAbstractMediaUrlGeneratorService($container))));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\ListAddressRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\ListAddressRoute
     */
    protected static function getListAddressRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractListAddressRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/ListAddressRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ListAddressRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\ListAddressRoute(($container->services['customer_address.repository'] ?? self::getCustomerAddress_RepositoryService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\LoadWishlistRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\LoadWishlistRoute
     */
    protected static function getLoadWishlistRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractLoadWishlistRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/LoadWishlistRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/AbstractProductCloseoutFilterFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/ProductCloseoutFilterFactory.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\LoadWishlistRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\LoadWishlistRoute(($container->services['customer_wishlist.repository'] ?? self::getCustomerWishlist_RepositoryService($container)), ($container->services['sales_channel.product.repository'] ?? self::getSalesChannel_Product_RepositoryService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\ProductCloseoutFilterFactory'] ??= new \Shopware\Core\Content\Product\SalesChannel\ProductCloseoutFilterFactory()));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\LoginRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\LoginRoute
     */
    protected static function getLoginRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractLoginRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/LoginRoute.php';

        $a = new \Shopware\Core\Framework\RateLimiter\RateLimiter();

        $b = ($container->privates['cache.rate_limiter'] ?? self::getCache_RateLimiterService($container));
        $c = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));
        $d = ($container->privates['lock.default.factory'] ?? self::getLock_Default_FactoryService($container));

        $a->registerLimiterFactory('login', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $container->parameters['shopware.api.rate_limiter.login.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'login'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($b), $c, $d));
        $a->registerLimiterFactory('guest_login', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $container->parameters['shopware.api.rate_limiter.login.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'guest_login'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($b), $c, $d));
        $a->registerLimiterFactory('oauth', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $container->parameters['shopware.api.rate_limiter.login.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'oauth'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($b), $c, $d));
        $a->registerLimiterFactory('reset_password', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $container->parameters['shopware.api.rate_limiter.reset_password.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'reset_password'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($b), $c, $d));
        $a->registerLimiterFactory('user_recovery', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $container->parameters['shopware.api.rate_limiter.reset_password.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'user_recovery'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($b), $c, $d));
        $a->registerLimiterFactory('contact_form', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $container->parameters['shopware.api.rate_limiter.reset_password.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'contact_form'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($b), $c, $d));
        $a->registerLimiterFactory('notification', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $container->parameters['shopware.api.rate_limiter.login.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'notification'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($b), $c, $d));
        $a->registerLimiterFactory('newsletter_form', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $container->parameters['shopware.api.rate_limiter.reset_password.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'newsletter_form'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($b), $c, $d));
        $a->registerLimiterFactory('cart_add_line_item', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'system_config', 'reset' => '1 hours', 'limits' => $container->parameters['shopware.api.rate_limiter.cart_add_line_item.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'cart_add_line_item'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($b), $c, $d));

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\LoginRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\LoginRoute(($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'] ?? self::getAccountServiceService($container)), ($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container)), ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'] ?? self::getCartRestorerService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $a);
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\LogoutRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\LogoutRoute
     */
    protected static function getLogoutRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractLogoutRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/LogoutRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\LogoutRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\LogoutRoute(($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'] ?? self::getSalesChannelContextPersisterService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? self::getCartServiceService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\MergeWishlistProductRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\MergeWishlistProductRoute
     */
    protected static function getMergeWishlistProductRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractMergeWishlistProductRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/MergeWishlistProductRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\MergeWishlistProductRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\MergeWishlistProductRoute(($container->services['customer_wishlist.repository'] ?? self::getCustomerWishlist_RepositoryService($container)), ($container->services['sales_channel.product.repository'] ?? self::getSalesChannel_Product_RepositoryService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\RegisterConfirmRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\RegisterConfirmRoute
     */
    protected static function getRegisterConfirmRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractRegisterConfirmRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/RegisterConfirmRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\RegisterConfirmRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\RegisterConfirmRoute(($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)), ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'] ?? self::getSalesChannelContextPersisterService($container)), ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? self::getSalesChannelContextServiceService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\RegisterRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\RegisterRoute
     */
    protected static function getRegisterRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractRegisterRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/RegisterRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Validation/DataValidationFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Validation/CustomerValidationFactory.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\RegisterRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\RegisterRoute(($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface'] ?? self::getNumberRangeValueGeneratorInterfaceService($container)), ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)), new \Shopware\Core\Checkout\Customer\Validation\CustomerValidationFactory(($container->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\CustomerProfileValidationFactory'] ?? self::getCustomerProfileValidationFactoryService($container))), ($container->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\AddressValidationFactory'] ?? self::getAddressValidationFactoryService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container)), ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'] ?? self::getSalesChannelContextPersisterService($container)), ($container->services['sales_channel.country.repository'] ?? self::getSalesChannel_Country_RepositoryService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? self::getSalesChannelContextServiceService($container)), ($container->privates['Shopware\\Core\\System\\SalesChannel\\StoreApiCustomFieldMapper'] ?? self::getStoreApiCustomFieldMapperService($container)), ($container->services['salutation.repository'] ?? self::getSalutation_RepositoryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\RemoveWishlistProductRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\RemoveWishlistProductRoute
     */
    protected static function getRemoveWishlistProductRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractRemoveWishlistProductRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/RemoveWishlistProductRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\RemoveWishlistProductRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\RemoveWishlistProductRoute(($container->services['customer_wishlist.repository'] ?? self::getCustomerWishlist_RepositoryService($container)), ($container->services['customer_wishlist_product.repository'] ?? self::getCustomerWishlistProduct_RepositoryService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\ResetPasswordRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\ResetPasswordRoute
     */
    protected static function getResetPasswordRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractResetPasswordRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/ResetPasswordRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ResetPasswordRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\ResetPasswordRoute(($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container)), ($container->services['customer_recovery.repository'] ?? self::getCustomerRecovery_RepositoryService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->privates['shopware.rate_limiter'] ?? self::getShopware_RateLimiterService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\SendPasswordRecoveryMailRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\SendPasswordRecoveryMailRoute
     */
    protected static function getSendPasswordRecoveryMailRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractSendPasswordRecoveryMailRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/SendPasswordRecoveryMailRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SendPasswordRecoveryMailRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\SendPasswordRecoveryMailRoute(($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container)), ($container->services['customer_recovery.repository'] ?? self::getCustomerRecovery_RepositoryService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->privates['shopware.rate_limiter'] ?? self::getShopware_RateLimiterService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\SwitchDefaultAddressRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\SwitchDefaultAddressRoute
     */
    protected static function getSwitchDefaultAddressRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractSwitchDefaultAddressRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/CustomerAddressValidationTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/SwitchDefaultAddressRoute.php';

        $a = ($container->services['customer_address.repository'] ?? self::getCustomerAddress_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SwitchDefaultAddressRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SwitchDefaultAddressRoute'];
        }
        $b = ($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SwitchDefaultAddressRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SwitchDefaultAddressRoute'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SwitchDefaultAddressRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SwitchDefaultAddressRoute'];
        }

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SwitchDefaultAddressRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\SwitchDefaultAddressRoute($a, $b, $c);
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Customer\SalesChannel\UpsertAddressRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\UpsertAddressRoute
     */
    protected static function getUpsertAddressRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AbstractUpsertAddressRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/CustomerAddressValidationTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/UpsertAddressRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\UpsertAddressRoute'] = new \Shopware\Core\Checkout\Customer\SalesChannel\UpsertAddressRoute(($container->services['customer_address.repository'] ?? self::getCustomerAddress_RepositoryService($container)), ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\AddressValidationFactory'] ?? self::getAddressValidationFactoryService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->privates['Shopware\\Core\\System\\SalesChannel\\StoreApiCustomFieldMapper'] ?? self::getStoreApiCustomFieldMapperService($container)), ($container->services['salutation.repository'] ?? self::getSalutation_RepositoryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfigSalesChannel\DocumentBaseConfigSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfigSalesChannel\DocumentBaseConfigSalesChannelDefinition
     */
    protected static function getDocumentBaseConfigSalesChannelDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Aggregate/DocumentBaseConfigSalesChannel/DocumentBaseConfigSalesChannelDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfigSalesChannel\\DocumentBaseConfigSalesChannelDefinition'] = $instance = new \Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfigSalesChannel\DocumentBaseConfigSalesChannelDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfig\DocumentBaseConfigDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfig\DocumentBaseConfigDefinition
     */
    protected static function getDocumentBaseConfigDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Aggregate/DocumentBaseConfig/DocumentBaseConfigDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfig\\DocumentBaseConfigDefinition'] = $instance = new \Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfig\DocumentBaseConfigDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Document\Aggregate\DocumentTypeTranslation\DocumentTypeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Aggregate\DocumentTypeTranslation\DocumentTypeTranslationDefinition
     */
    protected static function getDocumentTypeTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Aggregate/DocumentTypeTranslation/DocumentTypeTranslationDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentTypeTranslation\\DocumentTypeTranslationDefinition'] = $instance = new \Shopware\Core\Checkout\Document\Aggregate\DocumentTypeTranslation\DocumentTypeTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Document\Aggregate\DocumentType\DocumentTypeDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Aggregate\DocumentType\DocumentTypeDefinition
     */
    protected static function getDocumentTypeDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Aggregate/DocumentType/DocumentTypeDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentType\\DocumentTypeDefinition'] = $instance = new \Shopware\Core\Checkout\Document\Aggregate\DocumentType\DocumentTypeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Document\Controller\DocumentController' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Controller\DocumentController
     */
    protected static function getDocumentControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Controller/DocumentController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Service/DocumentMerger.php';
        include_once \dirname(__DIR__, 4).'/vendor/tecnickcom/tcpdf/tcpdf.php';
        include_once \dirname(__DIR__, 4).'/vendor/setasign/fpdi/src/FpdiTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/setasign/fpdi/src/Tcpdf/Fpdi.php';

        $a = ($container->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentGenerator'] ?? self::getDocumentGeneratorService($container));

        $container->services['Shopware\\Core\\Checkout\\Document\\Controller\\DocumentController'] = $instance = new \Shopware\Core\Checkout\Document\Controller\DocumentController($a, new \Shopware\Core\Checkout\Document\Service\DocumentMerger(($container->services['document.repository'] ?? self::getDocument_RepositoryService($container)), ($container->privates['Shopware\\Core\\Content\\Media\\MediaService'] ?? self::getMediaServiceService($container)), $a, new \setasign\Fpdi\Tcpdf\Fpdi()));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Document\DocumentDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\DocumentDefinition
     */
    protected static function getDocumentDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/DocumentDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Document\\DocumentDefinition'] = $instance = new \Shopware\Core\Checkout\Document\DocumentDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Document\DocumentGeneratorController' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\DocumentGeneratorController
     */
    protected static function getDocumentGeneratorControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/DocumentGeneratorController.php';

        $container->services['Shopware\\Core\\Checkout\\Document\\DocumentGeneratorController'] = $instance = new \Shopware\Core\Checkout\Document\DocumentGeneratorController(($container->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentGenerator'] ?? self::getDocumentGeneratorService($container)), ($container->privates['serializer'] ?? self::getSerializerService($container)), ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Document\SalesChannel\DocumentRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\SalesChannel\DocumentRoute
     */
    protected static function getDocumentRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/SalesChannel/AbstractDocumentRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/SalesChannel/DocumentRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Document\\SalesChannel\\DocumentRoute'] = new \Shopware\Core\Checkout\Document\SalesChannel\DocumentRoute(($container->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentGenerator'] ?? self::getDocumentGeneratorService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Order\Aggregate\OrderAddress\OrderAddressDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderAddress\OrderAddressDefinition
     */
    protected static function getOrderAddressDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderAddress\\OrderAddressDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderAddress\OrderAddressDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Order\Aggregate\OrderCustomer\OrderCustomerDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderCustomer\OrderCustomerDefinition
     */
    protected static function getOrderCustomerDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderCustomer/OrderCustomerDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderCustomer\\OrderCustomerDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderCustomer\OrderCustomerDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Order\Aggregate\OrderDeliveryPosition\OrderDeliveryPositionDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderDeliveryPosition\OrderDeliveryPositionDefinition
     */
    protected static function getOrderDeliveryPositionDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderDeliveryPosition/OrderDeliveryPositionDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDeliveryPosition\\OrderDeliveryPositionDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderDeliveryPosition\OrderDeliveryPositionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Order\Aggregate\OrderDelivery\OrderDeliveryDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderDelivery\OrderDeliveryDefinition
     */
    protected static function getOrderDeliveryDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderDelivery/OrderDeliveryDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDelivery\\OrderDeliveryDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderDelivery\OrderDeliveryDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Order\Aggregate\OrderLineItemDownload\OrderLineItemDownloadDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderLineItemDownload\OrderLineItemDownloadDefinition
     */
    protected static function getOrderLineItemDownloadDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderLineItemDownload/OrderLineItemDownloadDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItemDownload\\OrderLineItemDownloadDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderLineItemDownload\OrderLineItemDownloadDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Order\Aggregate\OrderLineItem\OrderLineItemDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderLineItem\OrderLineItemDefinition
     */
    protected static function getOrderLineItemDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderLineItem/OrderLineItemDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItem\\OrderLineItemDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderLineItem\OrderLineItemDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Order\Aggregate\OrderTag\OrderTagDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderTag\OrderTagDefinition
     */
    protected static function getOrderTagDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTag/OrderTagDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTag\\OrderTagDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderTag\OrderTagDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefundPosition\OrderTransactionCaptureRefundPositionDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefundPosition\OrderTransactionCaptureRefundPositionDefinition
     */
    protected static function getOrderTransactionCaptureRefundPositionDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTransactionCaptureRefundPosition/OrderTransactionCaptureRefundPositionDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefundPosition\\OrderTransactionCaptureRefundPositionDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefundPosition\OrderTransactionCaptureRefundPositionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefund\OrderTransactionCaptureRefundDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefund\OrderTransactionCaptureRefundDefinition
     */
    protected static function getOrderTransactionCaptureRefundDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTransactionCaptureRefund/OrderTransactionCaptureRefundDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefund\\OrderTransactionCaptureRefundDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefund\OrderTransactionCaptureRefundDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCapture\OrderTransactionCaptureDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCapture\OrderTransactionCaptureDefinition
     */
    protected static function getOrderTransactionCaptureDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTransactionCapture/OrderTransactionCaptureDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCapture\\OrderTransactionCaptureDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCapture\OrderTransactionCaptureDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Order\Aggregate\OrderTransaction\OrderTransactionDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderTransaction\OrderTransactionDefinition
     */
    protected static function getOrderTransactionDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTransaction/OrderTransactionDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderTransaction\OrderTransactionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Order\Api\OrderActionController' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Api\OrderActionController
     */
    protected static function getOrderActionControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Api/OrderActionController.php';

        $container->services['Shopware\\Core\\Checkout\\Order\\Api\\OrderActionController'] = $instance = new \Shopware\Core\Checkout\Order\Api\OrderActionController(($container->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'] ?? self::getOrderServiceService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentRefundProcessor'] ?? self::getPaymentRefundProcessorService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Order\OrderDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\OrderDefinition
     */
    protected static function getOrderDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Checkout\\Order\\OrderDefinition'] = $instance = new \Shopware\Core\Checkout\Order\OrderDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Order\SalesChannel\CancelOrderRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\SalesChannel\CancelOrderRoute
     */
    protected static function getCancelOrderRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/SalesChannel/AbstractCancelOrderRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/SalesChannel/CancelOrderRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Order\\SalesChannel\\CancelOrderRoute'] = new \Shopware\Core\Checkout\Order\SalesChannel\CancelOrderRoute(($container->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'] ?? self::getOrderServiceService($container)), ($container->services['order.repository'] ?? self::getOrder_RepositoryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Order\SalesChannel\OrderRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\SalesChannel\OrderRoute
     */
    protected static function getOrderRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/SalesChannel/AbstractOrderRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/SalesChannel/OrderRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderRoute'] = new \Shopware\Core\Checkout\Order\SalesChannel\OrderRoute(($container->services['order.repository'] ?? self::getOrder_RepositoryService($container)), ($container->services['promotion.repository'] ?? self::getPromotion_RepositoryService($container)), ($container->privates['shopware.rate_limiter'] ?? self::getShopware_RateLimiterService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Order\SalesChannel\SetPaymentOrderRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\SalesChannel\SetPaymentOrderRoute
     */
    protected static function getSetPaymentOrderRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/SalesChannel/AbstractSetPaymentOrderRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/SalesChannel/SetPaymentOrderRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Order\\SalesChannel\\SetPaymentOrderRoute'] = new \Shopware\Core\Checkout\Order\SalesChannel\SetPaymentOrderRoute(($container->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'] ?? self::getOrderServiceService($container)), ($container->services['order.repository'] ?? self::getOrder_RepositoryService($container)), ($container->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SortedPaymentMethodRoute'] ?? self::getSortedPaymentMethodRouteService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'] ?? self::getOrderConverterService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'] ?? self::getCartRuleLoaderService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->privates['Shopware\\Core\\System\\StateMachine\\Loader\\InitialStateIdLoader'] ?? self::getInitialStateIdLoaderService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Payment\Aggregate\PaymentMethodTranslation\PaymentMethodTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\Aggregate\PaymentMethodTranslation\PaymentMethodTranslationDefinition
     */
    protected static function getPaymentMethodTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Aggregate/PaymentMethodTranslation/PaymentMethodTranslationDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Payment\\Aggregate\\PaymentMethodTranslation\\PaymentMethodTranslationDefinition'] = $instance = new \Shopware\Core\Checkout\Payment\Aggregate\PaymentMethodTranslation\PaymentMethodTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Payment\Cart\PaymentRecurringProcessor' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\Cart\PaymentRecurringProcessor
     */
    protected static function getPaymentRecurringProcessorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentRecurringProcessor.php';

        return $container->services['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentRecurringProcessor'] = new \Shopware\Core\Checkout\Payment\Cart\PaymentRecurringProcessor(($container->services['order.repository'] ?? self::getOrder_RepositoryService($container)), ($container->privates['Shopware\\Core\\System\\StateMachine\\Loader\\InitialStateIdLoader'] ?? self::getInitialStateIdLoaderService($container)), ($container->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'] ?? self::getOrderTransactionStateHandlerService($container)), ($container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PaymentHandlerRegistry'] ?? self::getPaymentHandlerRegistryService($container)), ($container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentTransactionStructFactory'] ??= new \Shopware\Core\Checkout\Payment\Cart\PaymentTransactionStructFactory()), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Payment\Cart\PaymentRefundProcessor' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\Cart\PaymentRefundProcessor
     */
    protected static function getPaymentRefundProcessorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentRefundProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTransactionCaptureRefund/OrderTransactionCaptureRefundStateHandler.php';

        return $container->services['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentRefundProcessor'] = new \Shopware\Core\Checkout\Payment\Cart\PaymentRefundProcessor(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), new \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefund\OrderTransactionCaptureRefundStateHandler(($container->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'] ?? self::getStateMachineRegistryService($container))), ($container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PaymentHandlerRegistry'] ?? self::getPaymentHandlerRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Payment\Controller\PaymentController' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\Controller\PaymentController
     */
    protected static function getPaymentControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Controller/PaymentController.php';

        $container->services['Shopware\\Core\\Checkout\\Payment\\Controller\\PaymentController'] = $instance = new \Shopware\Core\Checkout\Payment\Controller\PaymentController(($container->privates['Shopware\\Core\\Checkout\\Payment\\PaymentService'] ?? self::getPaymentServiceService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'] ?? self::getOrderConverterService($container)), ($container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\Token\\JWTFactoryV2'] ?? self::getJWTFactoryV2Service($container)), ($container->services['order.repository'] ?? self::getOrder_RepositoryService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Payment\PaymentMethodDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\PaymentMethodDefinition
     */
    protected static function getPaymentMethodDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Checkout\\Payment\\PaymentMethodDefinition'] = $instance = new \Shopware\Core\Checkout\Payment\PaymentMethodDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Payment\SalesChannel\CachedPaymentMethodRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\SalesChannel\CachedPaymentMethodRoute
     */
    protected static function getCachedPaymentMethodRouteService($container)
    {
        $a = ($container->services['sales_channel.payment_method.repository'] ?? self::getSalesChannel_PaymentMethod_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\CachedPaymentMethodRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\CachedPaymentMethodRoute'];
        }
        $b = ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? self::getCacheTracerService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\CachedPaymentMethodRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\CachedPaymentMethodRoute'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\CachedPaymentMethodRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\CachedPaymentMethodRoute'];
        }

        return $container->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\CachedPaymentMethodRoute'] = new \Shopware\Core\Checkout\Payment\SalesChannel\CachedPaymentMethodRoute(new \Shopware\Core\Checkout\Payment\SalesChannel\PaymentMethodRoute($a), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator()), $b, $c, []);
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Payment\SalesChannel\HandlePaymentMethodRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\SalesChannel\HandlePaymentMethodRoute
     */
    protected static function getHandlePaymentMethodRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/SalesChannel/AbstractHandlePaymentMethodRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/SalesChannel/HandlePaymentMethodRoute.php';

        return $container->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\HandlePaymentMethodRoute'] = new \Shopware\Core\Checkout\Payment\SalesChannel\HandlePaymentMethodRoute(($container->privates['Shopware\\Core\\Checkout\\Payment\\PaymentService'] ?? self::getPaymentServiceService($container)), ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Payment\SalesChannel\SalesChannelPaymentMethodDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\SalesChannel\SalesChannelPaymentMethodDefinition
     */
    protected static function getSalesChannelPaymentMethodDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SalesChannelPaymentMethodDefinition'] = $instance = new \Shopware\Core\Checkout\Payment\SalesChannel\SalesChannelPaymentMethodDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Payment\SalesChannel\SortedPaymentMethodRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\SalesChannel\SortedPaymentMethodRoute
     */
    protected static function getSortedPaymentMethodRouteService($container)
    {
        $a = ($container->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\CachedPaymentMethodRoute'] ?? self::getCachedPaymentMethodRouteService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SortedPaymentMethodRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SortedPaymentMethodRoute'];
        }

        return $container->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SortedPaymentMethodRoute'] = new \Shopware\Core\Checkout\Payment\SalesChannel\SortedPaymentMethodRoute($a, ($container->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'] ?? self::getScriptExecutorService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionCartRule\PromotionCartRuleDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionCartRule\PromotionCartRuleDefinition
     */
    protected static function getPromotionCartRuleDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionCartRule/PromotionCartRuleDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionCartRule\\PromotionCartRuleDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionCartRule\PromotionCartRuleDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountPrice\PromotionDiscountPriceDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountPrice\PromotionDiscountPriceDefinition
     */
    protected static function getPromotionDiscountPriceDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionDiscountPrice/PromotionDiscountPriceDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountPrice\\PromotionDiscountPriceDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountPrice\PromotionDiscountPriceDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountRule\PromotionDiscountRuleDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountRule\PromotionDiscountRuleDefinition
     */
    protected static function getPromotionDiscountRuleDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionDiscountRule/PromotionDiscountRuleDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountRule\\PromotionDiscountRuleDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountRule\PromotionDiscountRuleDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscount\PromotionDiscountDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscount\PromotionDiscountDefinition
     */
    protected static function getPromotionDiscountDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionDiscount/PromotionDiscountDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscount\\PromotionDiscountDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscount\PromotionDiscountDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionIndividualCode\PromotionIndividualCodeDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionIndividualCode\PromotionIndividualCodeDefinition
     */
    protected static function getPromotionIndividualCodeDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionIndividualCode/PromotionIndividualCodeDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionIndividualCode\\PromotionIndividualCodeDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionIndividualCode\PromotionIndividualCodeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionOrderRule\PromotionOrderRuleDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionOrderRule\PromotionOrderRuleDefinition
     */
    protected static function getPromotionOrderRuleDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionOrderRule/PromotionOrderRuleDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionOrderRule\\PromotionOrderRuleDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionOrderRule\PromotionOrderRuleDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaCustomer\PromotionPersonaCustomerDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaCustomer\PromotionPersonaCustomerDefinition
     */
    protected static function getPromotionPersonaCustomerDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionPersonaCustomer/PromotionPersonaCustomerDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaCustomer\\PromotionPersonaCustomerDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaCustomer\PromotionPersonaCustomerDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaRule\PromotionPersonaRuleDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaRule\PromotionPersonaRuleDefinition
     */
    protected static function getPromotionPersonaRuleDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionPersonaRule/PromotionPersonaRuleDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaRule\\PromotionPersonaRuleDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaRule\PromotionPersonaRuleDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionSalesChannel\PromotionSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSalesChannel\PromotionSalesChannelDefinition
     */
    protected static function getPromotionSalesChannelDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionSalesChannel/PromotionSalesChannelDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSalesChannel\\PromotionSalesChannelDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSalesChannel\PromotionSalesChannelDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroupRule\PromotionSetGroupRuleDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroupRule\PromotionSetGroupRuleDefinition
     */
    protected static function getPromotionSetGroupRuleDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionSetGroupRule/PromotionSetGroupRuleDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroupRule\\PromotionSetGroupRuleDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroupRule\PromotionSetGroupRuleDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroup\PromotionSetGroupDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroup\PromotionSetGroupDefinition
     */
    protected static function getPromotionSetGroupDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionSetGroup/PromotionSetGroupDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroup\\PromotionSetGroupDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroup\PromotionSetGroupDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Promotion\Aggregate\PromotionTranslation\PromotionTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionTranslation\PromotionTranslationDefinition
     */
    protected static function getPromotionTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionTranslation/PromotionTranslationDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionTranslation\\PromotionTranslationDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionTranslation\PromotionTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Promotion\Api\PromotionActionController' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Api\PromotionActionController
     */
    protected static function getPromotionActionControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Api/PromotionActionController.php';

        $container->services['Shopware\\Core\\Checkout\\Promotion\\Api\\PromotionActionController'] = $instance = new \Shopware\Core\Checkout\Promotion\Api\PromotionActionController(($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\LineItemGroupServiceRegistry'] ?? self::getLineItemGroupServiceRegistryService($container)), ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\Discount\\Filter\\FilterServiceRegistry'] ?? self::getFilterServiceRegistryService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Promotion\Api\PromotionController' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Api\PromotionController
     */
    protected static function getPromotionControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Api/PromotionController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Util/PromotionCodeService.php';

        $container->services['Shopware\\Core\\Checkout\\Promotion\\Api\\PromotionController'] = $instance = new \Shopware\Core\Checkout\Promotion\Api\PromotionController(new \Shopware\Core\Checkout\Promotion\Util\PromotionCodeService(($container->services['promotion.repository'] ?? self::getPromotion_RepositoryService($container)), ($container->services['promotion_individual_code.repository'] ?? self::getPromotionIndividualCode_RepositoryService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container))));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Promotion\PromotionDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\PromotionDefinition
     */
    protected static function getPromotionDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/PromotionDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Promotion\\PromotionDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\PromotionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodPrice\ShippingMethodPriceDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodPrice\ShippingMethodPriceDefinition
     */
    protected static function getShippingMethodPriceDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/Aggregate/ShippingMethodPrice/ShippingMethodPriceDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodPrice\\ShippingMethodPriceDefinition'] = $instance = new \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodPrice\ShippingMethodPriceDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTag\ShippingMethodTagDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTag\ShippingMethodTagDefinition
     */
    protected static function getShippingMethodTagDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/Aggregate/ShippingMethodTag/ShippingMethodTagDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTag\\ShippingMethodTagDefinition'] = $instance = new \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTag\ShippingMethodTagDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTranslation\ShippingMethodTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTranslation\ShippingMethodTranslationDefinition
     */
    protected static function getShippingMethodTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/Aggregate/ShippingMethodTranslation/ShippingMethodTranslationDefinition.php';

        $container->services['Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTranslation\\ShippingMethodTranslationDefinition'] = $instance = new \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTranslation\ShippingMethodTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Shipping\SalesChannel\CachedShippingMethodRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Shipping\SalesChannel\CachedShippingMethodRoute
     */
    protected static function getCachedShippingMethodRouteService($container)
    {
        $a = ($container->services['sales_channel.shipping_method.repository'] ?? self::getSalesChannel_ShippingMethod_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\CachedShippingMethodRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\CachedShippingMethodRoute'];
        }
        $b = ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? self::getCacheTracerService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\CachedShippingMethodRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\CachedShippingMethodRoute'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\CachedShippingMethodRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\CachedShippingMethodRoute'];
        }

        return $container->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\CachedShippingMethodRoute'] = new \Shopware\Core\Checkout\Shipping\SalesChannel\CachedShippingMethodRoute(new \Shopware\Core\Checkout\Shipping\SalesChannel\ShippingMethodRoute($a), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator()), $b, $c, []);
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Shipping\SalesChannel\SalesChannelShippingMethodDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Shipping\SalesChannel\SalesChannelShippingMethodDefinition
     */
    protected static function getSalesChannelShippingMethodDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SalesChannelShippingMethodDefinition'] = $instance = new \Shopware\Core\Checkout\Shipping\SalesChannel\SalesChannelShippingMethodDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Shipping\SalesChannel\SortedShippingMethodRoute' shared service.
     *
     * @return \Shopware\Core\Checkout\Shipping\SalesChannel\SortedShippingMethodRoute
     */
    protected static function getSortedShippingMethodRouteService($container)
    {
        $a = ($container->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\CachedShippingMethodRoute'] ?? self::getCachedShippingMethodRouteService($container));

        if (isset($container->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SortedShippingMethodRoute'])) {
            return $container->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SortedShippingMethodRoute'];
        }

        return $container->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SortedShippingMethodRoute'] = new \Shopware\Core\Checkout\Shipping\SalesChannel\SortedShippingMethodRoute($a, ($container->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'] ?? self::getScriptExecutorService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Checkout\Shipping\ShippingMethodDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Shipping\ShippingMethodDefinition
     */
    protected static function getShippingMethodDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Checkout\\Shipping\\ShippingMethodDefinition'] = $instance = new \Shopware\Core\Checkout\Shipping\ShippingMethodDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Category\Aggregate\CategoryTag\CategoryTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Category\Aggregate\CategoryTag\CategoryTagDefinition
     */
    protected static function getCategoryTagDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/Aggregate/CategoryTag/CategoryTagDefinition.php';

        $container->services['Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTag\\CategoryTagDefinition'] = $instance = new \Shopware\Core\Content\Category\Aggregate\CategoryTag\CategoryTagDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Category\Aggregate\CategoryTranslation\CategoryTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Category\Aggregate\CategoryTranslation\CategoryTranslationDefinition
     */
    protected static function getCategoryTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/Aggregate/CategoryTranslation/CategoryTranslationDefinition.php';

        $container->services['Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTranslation\\CategoryTranslationDefinition'] = $instance = new \Shopware\Core\Content\Category\Aggregate\CategoryTranslation\CategoryTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Category\CategoryDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Category\CategoryDefinition
     */
    protected static function getCategoryDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Content\\Category\\CategoryDefinition'] = $instance = new \Shopware\Core\Content\Category\CategoryDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Category\CategoryHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Category\CategoryHydrator
     */
    protected static function getCategoryHydratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/CategoryHydrator.php';

        return $container->services['Shopware\\Core\\Content\\Category\\CategoryHydrator'] = new \Shopware\Core\Content\Category\CategoryHydrator($container);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Category\SalesChannel\CachedCategoryRoute' shared service.
     *
     * @return \Shopware\Core\Content\Category\SalesChannel\CachedCategoryRoute
     */
    protected static function getCachedCategoryRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/SalesChannel/AbstractCategoryRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/SalesChannel/CachedCategoryRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/SalesChannel/CategoryRoute.php';

        return $container->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CachedCategoryRoute'] = new \Shopware\Core\Content\Category\SalesChannel\CachedCategoryRoute(new \Shopware\Core\Content\Category\SalesChannel\CategoryRoute(($container->services['sales_channel.category.repository'] ?? self::getSalesChannel_Category_RepositoryService($container)), ($container->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'] ?? self::getSalesChannelCmsPageLoaderService($container)), ($container->services['Shopware\\Core\\Content\\Category\\SalesChannel\\SalesChannelCategoryDefinition'] ?? self::getSalesChannelCategoryDefinitionService($container))), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator()), ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? self::getCacheTracerService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), []);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Category\SalesChannel\CachedNavigationRoute' shared service.
     *
     * @return \Shopware\Core\Content\Category\SalesChannel\CachedNavigationRoute
     */
    protected static function getCachedNavigationRouteService($container)
    {
        $a = ($container->services['sales_channel.category.repository'] ?? self::getSalesChannel_Category_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CachedNavigationRoute'])) {
            return $container->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CachedNavigationRoute'];
        }
        $b = ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? self::getCacheTracerService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CachedNavigationRoute'])) {
            return $container->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CachedNavigationRoute'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CachedNavigationRoute'])) {
            return $container->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CachedNavigationRoute'];
        }

        return $container->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CachedNavigationRoute'] = new \Shopware\Core\Content\Category\SalesChannel\CachedNavigationRoute(new \Shopware\Core\Content\Category\SalesChannel\NavigationRoute(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $a), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator()), $b, $c, []);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Category\SalesChannel\CategoryListRoute' shared service.
     *
     * @return \Shopware\Core\Content\Category\SalesChannel\CategoryListRoute
     */
    protected static function getCategoryListRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/SalesChannel/AbstractCategoryListRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/SalesChannel/CategoryListRoute.php';

        return $container->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CategoryListRoute'] = new \Shopware\Core\Content\Category\SalesChannel\CategoryListRoute(($container->services['sales_channel.category.repository'] ?? self::getSalesChannel_Category_RepositoryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Category\SalesChannel\SalesChannelCategoryDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Category\SalesChannel\SalesChannelCategoryDefinition
     */
    protected static function getSalesChannelCategoryDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Content\\Category\\SalesChannel\\SalesChannelCategoryDefinition'] = $instance = new \Shopware\Core\Content\Category\SalesChannel\SalesChannelCategoryDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Category\SalesChannel\TreeBuildingNavigationRoute' shared service.
     *
     * @return \Shopware\Core\Content\Category\SalesChannel\TreeBuildingNavigationRoute
     */
    protected static function getTreeBuildingNavigationRouteService($container)
    {
        $a = ($container->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CachedNavigationRoute'] ?? self::getCachedNavigationRouteService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Category\\SalesChannel\\TreeBuildingNavigationRoute'])) {
            return $container->services['Shopware\\Core\\Content\\Category\\SalesChannel\\TreeBuildingNavigationRoute'];
        }

        return $container->services['Shopware\\Core\\Content\\Category\\SalesChannel\\TreeBuildingNavigationRoute'] = new \Shopware\Core\Content\Category\SalesChannel\TreeBuildingNavigationRoute($a);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Cms\Aggregate\CmsBlock\CmsBlockDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\Aggregate\CmsBlock\CmsBlockDefinition
     */
    protected static function getCmsBlockDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/Aggregate/CmsBlock/CmsBlockDefinition.php';

        $container->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsBlock\\CmsBlockDefinition'] = $instance = new \Shopware\Core\Content\Cms\Aggregate\CmsBlock\CmsBlockDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Cms\Aggregate\CmsPageTranslation\CmsPageTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\Aggregate\CmsPageTranslation\CmsPageTranslationDefinition
     */
    protected static function getCmsPageTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/Aggregate/CmsPageTranslation/CmsPageTranslationDefinition.php';

        $container->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsPageTranslation\\CmsPageTranslationDefinition'] = $instance = new \Shopware\Core\Content\Cms\Aggregate\CmsPageTranslation\CmsPageTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Cms\Aggregate\CmsSection\CmsSectionDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\Aggregate\CmsSection\CmsSectionDefinition
     */
    protected static function getCmsSectionDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/Aggregate/CmsSection/CmsSectionDefinition.php';

        $container->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSection\\CmsSectionDefinition'] = $instance = new \Shopware\Core\Content\Cms\Aggregate\CmsSection\CmsSectionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Cms\Aggregate\CmsSlotTranslation\CmsSlotTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\Aggregate\CmsSlotTranslation\CmsSlotTranslationDefinition
     */
    protected static function getCmsSlotTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/Aggregate/CmsSlotTranslation/CmsSlotTranslationDefinition.php';

        $container->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlotTranslation\\CmsSlotTranslationDefinition'] = $instance = new \Shopware\Core\Content\Cms\Aggregate\CmsSlotTranslation\CmsSlotTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Cms\Aggregate\CmsSlot\CmsSlotDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\Aggregate\CmsSlot\CmsSlotDefinition
     */
    protected static function getCmsSlotDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/Aggregate/CmsSlot/CmsSlotDefinition.php';

        $container->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlot\\CmsSlotDefinition'] = $instance = new \Shopware\Core\Content\Cms\Aggregate\CmsSlot\CmsSlotDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Cms\CmsPageDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\CmsPageDefinition
     */
    protected static function getCmsPageDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Content\\Cms\\CmsPageDefinition'] = $instance = new \Shopware\Core\Content\Cms\CmsPageDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Cms\DataAbstractionLayer\FieldSerializer\SlotConfigFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Content\Cms\DataAbstractionLayer\FieldSerializer\SlotConfigFieldSerializer
     */
    protected static function getSlotConfigFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/JsonFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataAbstractionLayer/FieldSerializer/SlotConfigFieldSerializer.php';

        return $container->services['Shopware\\Core\\Content\\Cms\\DataAbstractionLayer\\FieldSerializer\\SlotConfigFieldSerializer'] = new \Shopware\Core\Content\Cms\DataAbstractionLayer\FieldSerializer\SlotConfigFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Cms\DataResolver\CmsSlotsDataResolver' shared service.
     *
     * @return \Shopware\Core\Content\Cms\DataResolver\CmsSlotsDataResolver
     */
    protected static function getCmsSlotsDataResolverService($container)
    {
        $a = ($container->services['sales_channel.product.repository'] ?? self::getSalesChannel_Product_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Cms\\DataResolver\\CmsSlotsDataResolver'])) {
            return $container->services['Shopware\\Core\\Content\\Cms\\DataResolver\\CmsSlotsDataResolver'];
        }

        return $container->services['Shopware\\Core\\Content\\Cms\\DataResolver\\CmsSlotsDataResolver'] = new \Shopware\Core\Content\Cms\DataResolver\CmsSlotsDataResolver(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Content\\Media\\Cms\\ImageCmsElementResolver'] ?? self::getImageCmsElementResolverService($container));
            yield 1 => ($container->privates['Shopware\\Core\\Content\\Media\\Cms\\Type\\ImageSliderTypeDataResolver'] ?? self::getImageSliderTypeDataResolverService($container));
            yield 2 => ($container->privates['Shopware\\Core\\Content\\Media\\Cms\\Type\\ImageGalleryTypeDataResolver'] ?? self::getImageGalleryTypeDataResolverService($container));
            yield 3 => ($container->privates['Shopware\\Core\\Content\\Media\\Cms\\YoutubeVideoCmsElementResolver'] ??= new \Shopware\Core\Content\Media\Cms\YoutubeVideoCmsElementResolver());
            yield 4 => ($container->privates['Shopware\\Core\\Content\\Media\\Cms\\VimeoVideoCmsElementResolver'] ??= new \Shopware\Core\Content\Media\Cms\VimeoVideoCmsElementResolver());
            yield 5 => ($container->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductBoxCmsElementResolver'] ?? self::getProductBoxCmsElementResolverService($container));
            yield 6 => ($container->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductListingCmsElementResolver'] ?? self::getProductListingCmsElementResolverService($container));
            yield 7 => ($container->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductSliderCmsElementResolver'] ?? self::getProductSliderCmsElementResolverService($container));
            yield 8 => ($container->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductNameCmsElementResolver'] ??= new \Shopware\Core\Content\Product\Cms\ProductNameCmsElementResolver());
            yield 9 => ($container->privates['Shopware\\Core\\Content\\Product\\Cms\\ManufacturerLogoCmsElementResolver'] ??= new \Shopware\Core\Content\Product\Cms\ManufacturerLogoCmsElementResolver());
            yield 10 => ($container->privates['Shopware\\Core\\Content\\Product\\Cms\\CrossSellingCmsElementResolver'] ?? self::getCrossSellingCmsElementResolverService($container));
            yield 11 => ($container->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductDescriptionReviewsCmsElementResolver'] ?? self::getProductDescriptionReviewsCmsElementResolverService($container));
            yield 12 => ($container->privates['Shopware\\Core\\Content\\Product\\Cms\\BuyBoxCmsElementResolver'] ?? self::getBuyBoxCmsElementResolverService($container));
            yield 13 => ($container->privates['Shopware\\Core\\Content\\Cms\\DataResolver\\Element\\TextCmsElementResolver'] ?? self::getTextCmsElementResolverService($container));
            yield 14 => ($container->privates['Shopware\\Core\\Content\\Cms\\DataResolver\\Element\\FormCmsElementResolver'] ?? self::getFormCmsElementResolverService($container));
        }, 15), ['product' => $a], ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Cms\SalesChannel\CmsRoute' shared service.
     *
     * @return \Shopware\Core\Content\Cms\SalesChannel\CmsRoute
     */
    protected static function getCmsRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/SalesChannel/AbstractCmsRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/SalesChannel/CmsRoute.php';

        return $container->services['Shopware\\Core\\Content\\Cms\\SalesChannel\\CmsRoute'] = new \Shopware\Core\Content\Cms\SalesChannel\CmsRoute(($container->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'] ?? self::getSalesChannelCmsPageLoaderService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\ContactForm\SalesChannel\ContactFormRoute' shared service.
     *
     * @return \Shopware\Core\Content\ContactForm\SalesChannel\ContactFormRoute
     */
    protected static function getContactFormRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ContactForm/SalesChannel/AbstractContactFormRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ContactForm/SalesChannel/ContactFormRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Validation/DataValidationFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ContactForm/Validation/ContactFormValidationFactory.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));
        $b = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        return $container->services['Shopware\\Core\\Content\\ContactForm\\SalesChannel\\ContactFormRoute'] = new \Shopware\Core\Content\ContactForm\SalesChannel\ContactFormRoute(new \Shopware\Core\Content\ContactForm\Validation\ContactFormValidationFactory($a, $b), ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)), $a, $b, ($container->services['cms_slot.repository'] ?? self::getCmsSlot_RepositoryService($container)), ($container->services['salutation.repository'] ?? self::getSalutation_RepositoryService($container)), ($container->services['category.repository'] ?? self::getCategory_RepositoryService($container)), ($container->services['landing_page.repository'] ?? self::getLandingPage_RepositoryService($container)), ($container->services['product.repository'] ?? self::getProduct_RepositoryService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->privates['shopware.rate_limiter'] ?? self::getShopware_RateLimiterService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Flow\Aggregate\FlowSequence\FlowSequenceDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Aggregate\FlowSequence\FlowSequenceDefinition
     */
    protected static function getFlowSequenceDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Aggregate/FlowSequence/FlowSequenceDefinition.php';

        $container->services['Shopware\\Core\\Content\\Flow\\Aggregate\\FlowSequence\\FlowSequenceDefinition'] = $instance = new \Shopware\Core\Content\Flow\Aggregate\FlowSequence\FlowSequenceDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Flow\Aggregate\FlowTemplate\FlowTemplateDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Aggregate\FlowTemplate\FlowTemplateDefinition
     */
    protected static function getFlowTemplateDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Aggregate/FlowTemplate/FlowTemplateDefinition.php';

        $container->services['Shopware\\Core\\Content\\Flow\\Aggregate\\FlowTemplate\\FlowTemplateDefinition'] = $instance = new \Shopware\Core\Content\Flow\Aggregate\FlowTemplate\FlowTemplateDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Flow\Controller\TriggerFlowController' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Controller\TriggerFlowController
     */
    protected static function getTriggerFlowControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Controller/TriggerFlowController.php';

        $container->services['Shopware\\Core\\Content\\Flow\\Controller\\TriggerFlowController'] = $instance = new \Shopware\Core\Content\Flow\Controller\TriggerFlowController(($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['app_flow_event.repository'] ?? self::getAppFlowEvent_RepositoryService($container)), ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Flow\DataAbstractionLayer\FieldSerializer\FlowTemplateConfigFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Content\Flow\DataAbstractionLayer\FieldSerializer\FlowTemplateConfigFieldSerializer
     */
    protected static function getFlowTemplateConfigFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/JsonFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/DataAbstractionLayer/FieldSerializer/FlowTemplateConfigFieldSerializer.php';

        return $container->services['Shopware\\Core\\Content\\Flow\\DataAbstractionLayer\\FieldSerializer\\FlowTemplateConfigFieldSerializer'] = new \Shopware\Core\Content\Flow\DataAbstractionLayer\FieldSerializer\FlowTemplateConfigFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Flow\Dispatching\CachedFlowLoader' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\CachedFlowLoader
     */
    protected static function getCachedFlowLoaderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/AbstractFlowLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/CachedFlowLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/FlowLoader.php';

        return $container->services['Shopware\\Core\\Content\\Flow\\Dispatching\\CachedFlowLoader'] = new \Shopware\Core\Content\Flow\Dispatching\CachedFlowLoader(new \Shopware\Core\Content\Flow\Dispatching\FlowLoader(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container))), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Flow\Dispatching\FlowExecutor' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\FlowExecutor
     */
    protected static function getFlowExecutorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/FlowExecutor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Rule/FlowRuleScopeBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Delivery/DeliveryBuilder.php';

        return $container->services['Shopware\\Core\\Content\\Flow\\Dispatching\\FlowExecutor'] = new \Shopware\Core\Content\Flow\Dispatching\FlowExecutor(($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\App\\Flow\\Action\\AppFlowActionProvider'] ?? self::getAppFlowActionProvider2Service($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\CachedRuleLoader'] ?? self::getCachedRuleLoaderService($container)), new \Shopware\Core\Content\Flow\Rule\FlowRuleScopeBuilder(($container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'] ?? self::getOrderConverterService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Delivery\\DeliveryBuilder'] ??= new \Shopware\Core\Checkout\Cart\Delivery\DeliveryBuilder()), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'] ?? self::getProductCartProcessorService($container));
            yield 1 => ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionCollector'] ?? self::getPromotionCollectorService($container));
            yield 2 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\CustomCartProcessor'] ?? self::getCustomCartProcessorService($container));
            yield 3 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Delivery\\DeliveryProcessor'] ?? self::getDeliveryProcessorService($container));
        }, 4)), new RewindableGenerator(function () use ($container) {
            yield 'action.add.order.tag' => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddOrderTagAction'] ?? self::getAddOrderTagActionService($container));
            yield 'action.add.customer.tag' => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddCustomerTagAction'] ?? self::getAddCustomerTagActionService($container));
            yield 'action.remove.order.tag' => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\RemoveOrderTagAction'] ?? self::getRemoveOrderTagActionService($container));
            yield 'action.remove.customer.tag' => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\RemoveCustomerTagAction'] ?? self::getRemoveCustomerTagActionService($container));
            yield 'action.change.customer.group' => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\ChangeCustomerGroupAction'] ?? self::getChangeCustomerGroupActionService($container));
            yield 'action.change.customer.status' => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\ChangeCustomerStatusAction'] ?? self::getChangeCustomerStatusActionService($container));
            yield 'action.generate.document' => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\GenerateDocumentAction'] ?? self::getGenerateDocumentActionService($container));
            yield 'action.grant.download.access' => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\GrantDownloadAccessAction'] ?? self::getGrantDownloadAccessActionService($container));
            yield 'action.mail.send' => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SendMailAction'] ?? self::getSendMailActionService($container));
            yield 'action.set.order.state' => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetOrderStateAction'] ?? self::getSetOrderStateActionService($container));
            yield 'action.set.customer.custom.field' => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetCustomerCustomFieldAction'] ?? self::getSetCustomerCustomFieldActionService($container));
            yield 'action.set.customer.group.custom.field' => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetCustomerGroupCustomFieldAction'] ?? self::getSetCustomerGroupCustomFieldActionService($container));
            yield 'action.add.customer.affiliate.and.campaign.code' => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddCustomerAffiliateAndCampaignCodeAction'] ?? self::getAddCustomerAffiliateAndCampaignCodeActionService($container));
            yield 'action.add.order.affiliate.and.campaign.code' => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddOrderAffiliateAndCampaignCodeAction'] ?? self::getAddOrderAffiliateAndCampaignCodeActionService($container));
            yield 'action.set.order.custom.field' => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetOrderCustomFieldAction'] ?? self::getSetOrderCustomFieldActionService($container));
            yield 'action.stop.flow' => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\StopFlowAction'] ??= new \Shopware\Core\Content\Flow\Dispatching\Action\StopFlowAction());
        }, 16));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Flow\Dispatching\FlowFactory' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\FlowFactory
     */
    protected static function getFlowFactoryService($container)
    {
        return $container->services['Shopware\\Core\\Content\\Flow\\Dispatching\\FlowFactory'] = new \Shopware\Core\Content\Flow\Dispatching\FlowFactory(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomAppStorer'] ??= new \Shopware\Core\Content\Flow\Dispatching\Storer\CustomAppStorer());
            yield 1 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\OrderStorer'] ?? self::getOrderStorerService($container));
            yield 2 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ProductStorer'] ?? self::getProductStorerService($container));
            yield 3 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerStorer'] ?? self::getCustomerStorerService($container));
            yield 4 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\MailStorer'] ??= new \Shopware\Core\Content\Flow\Dispatching\Storer\MailStorer());
            yield 5 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\UserStorer'] ?? self::getUserStorerService($container));
            yield 6 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerGroupStorer'] ?? self::getCustomerGroupStorerService($container));
            yield 7 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerRecoveryStorer'] ?? self::getCustomerRecoveryStorerService($container));
            yield 8 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\OrderTransactionStorer'] ?? self::getOrderTransactionStorerService($container));
            yield 9 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\NewsletterRecipientStorer'] ?? self::getNewsletterRecipientStorerService($container));
            yield 10 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ContactFormDataStorer'] ??= new \Shopware\Core\Content\Flow\Dispatching\Storer\ContactFormDataStorer());
            yield 11 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ReviewFormDataStorer'] ??= new \Shopware\Core\Content\Flow\Dispatching\Storer\ReviewFormDataStorer());
            yield 12 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ScalarValuesStorer'] ??= new \Shopware\Core\Content\Flow\Dispatching\Storer\ScalarValuesStorer());
            yield 13 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ConfirmUrlStorer'] ??= new \Shopware\Core\Content\Flow\Dispatching\Storer\ConfirmUrlStorer());
            yield 14 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ContentsStorer'] ??= new \Shopware\Core\Content\Flow\Dispatching\Storer\ContentsStorer());
            yield 15 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ContextTokenStorer'] ??= new \Shopware\Core\Content\Flow\Dispatching\Storer\ContextTokenStorer());
            yield 16 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\EmailStorer'] ??= new \Shopware\Core\Content\Flow\Dispatching\Storer\EmailStorer());
            yield 17 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\MessageStorer'] ??= new \Shopware\Core\Content\Flow\Dispatching\Storer\MessageStorer());
            yield 18 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\NameStorer'] ??= new \Shopware\Core\Content\Flow\Dispatching\Storer\NameStorer());
            yield 19 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\RecipientsStorer'] ??= new \Shopware\Core\Content\Flow\Dispatching\Storer\RecipientsStorer());
            yield 20 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ResetUrlStorer'] ??= new \Shopware\Core\Content\Flow\Dispatching\Storer\ResetUrlStorer());
            yield 21 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ShopNameStorer'] ??= new \Shopware\Core\Content\Flow\Dispatching\Storer\ShopNameStorer());
            yield 22 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\SubjectStorer'] ??= new \Shopware\Core\Content\Flow\Dispatching\Storer\SubjectStorer());
            yield 23 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\TemplateDataStorer'] ??= new \Shopware\Core\Content\Flow\Dispatching\Storer\TemplateDataStorer());
            yield 24 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\UrlStorer'] ??= new \Shopware\Core\Content\Flow\Dispatching\Storer\UrlStorer());
            yield 25 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\MediaUploadedStorer'] ??= new \Shopware\Core\Content\Flow\Dispatching\Storer\MediaUploadedStorer());
        }, 26));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Flow\FlowDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Flow\FlowDefinition
     */
    protected static function getFlowDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/FlowDefinition.php';

        $container->services['Shopware\\Core\\Content\\Flow\\FlowDefinition'] = $instance = new \Shopware\Core\Content\Flow\FlowDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\ImportExport\Aggregate\ImportExportFile\ImportExportFileDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Aggregate\ImportExportFile\ImportExportFileDefinition
     */
    protected static function getImportExportFileDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Aggregate/ImportExportFile/ImportExportFileDefinition.php';

        $container->services['Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportFile\\ImportExportFileDefinition'] = $instance = new \Shopware\Core\Content\ImportExport\Aggregate\ImportExportFile\ImportExportFileDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\ImportExport\Aggregate\ImportExportLog\ImportExportLogDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Aggregate\ImportExportLog\ImportExportLogDefinition
     */
    protected static function getImportExportLogDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Aggregate/ImportExportLog/ImportExportLogDefinition.php';

        $container->services['Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportLog\\ImportExportLogDefinition'] = $instance = new \Shopware\Core\Content\ImportExport\Aggregate\ImportExportLog\ImportExportLogDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\ImportExport\Controller\ImportExportActionController' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Controller\ImportExportActionController
     */
    protected static function getImportExportActionControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Controller/ImportExportActionController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Service/SupportedFeaturesService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Service/DownloadService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Service/AbstractMappingService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Service/MappingService.php';

        $a = ($container->services['import_export_profile.repository'] ?? self::getImportExportProfile_RepositoryService($container));
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container));

        $container->services['Shopware\\Core\\Content\\ImportExport\\Controller\\ImportExportActionController'] = $instance = new \Shopware\Core\Content\ImportExport\Controller\ImportExportActionController(new \Shopware\Core\Content\ImportExport\Service\SupportedFeaturesService($container->parameters['import_export.supported_entities'], $container->parameters['import_export.supported_file_types']), ($container->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'] ?? self::getImportExportServiceService($container)), new \Shopware\Core\Content\ImportExport\Service\DownloadService(($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)), ($container->services['import_export_file.repository'] ?? self::getImportExportFile_RepositoryService($container))), $a, ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)), ($container->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'] ?? self::getImportExportFactoryService($container)), $b, ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container)), new \Shopware\Core\Content\ImportExport\Service\MappingService(($container->privates['Shopware\\Core\\Content\\ImportExport\\Service\\FileService'] ?? self::getFileServiceService($container)), $a, $b));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\ImportExport\ImportExportFactory' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\ImportExportFactory
     */
    protected static function getImportExportFactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/ImportExportFactory.php';

        $a = ($container->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'] ?? self::getImportExportServiceService($container));

        if (isset($container->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'])) {
            return $container->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'])) {
            return $container->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'];
        }
        $c = ($container->services['import_export_log.repository'] ?? self::getImportExportLog_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'])) {
            return $container->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'];
        }
        $d = ($container->privates['Shopware\\Core\\Content\\ImportExport\\Service\\FileService'] ?? self::getFileServiceService($container));

        if (isset($container->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'])) {
            return $container->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'];
        }

        return $container->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'] = new \Shopware\Core\Content\ImportExport\ImportExportFactory($a, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)), $b, $c, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $d, new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Content\\ImportExport\\Processing\\Reader\\CsvReaderFactory'] ??= new \Shopware\Core\Content\ImportExport\Processing\Reader\CsvReaderFactory());
        }, 1), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Content\\ImportExport\\Processing\\Writer\\CsvFileWriterFactory'] ?? self::getCsvFileWriterFactoryService($container));
        }, 1), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Content\\ImportExport\\Processing\\Pipe\\PipeFactory'] ?? self::getPipeFactoryService($container));
        }, 1));
    }

    /**
     * Gets the public 'Shopware\Core\Content\ImportExport\ImportExportProfileDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\ImportExportProfileDefinition
     */
    protected static function getImportExportProfileDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/ImportExportProfileDefinition.php';

        $container->services['Shopware\\Core\\Content\\ImportExport\\ImportExportProfileDefinition'] = $instance = new \Shopware\Core\Content\ImportExport\ImportExportProfileDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\ImportExport\ImportExportProfileTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\ImportExportProfileTranslationDefinition
     */
    protected static function getImportExportProfileTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/ImportExportProfileTranslationDefinition.php';

        $container->services['Shopware\\Core\\Content\\ImportExport\\ImportExportProfileTranslationDefinition'] = $instance = new \Shopware\Core\Content\ImportExport\ImportExportProfileTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\ImportExport\Message\ImportExportHandler' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Message\ImportExportHandler
     */
    protected static function getImportExportHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Message/ImportExportHandler.php';

        $a = ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container));

        if (isset($container->services['Shopware\\Core\\Content\\ImportExport\\Message\\ImportExportHandler'])) {
            return $container->services['Shopware\\Core\\Content\\ImportExport\\Message\\ImportExportHandler'];
        }
        $b = ($container->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'] ?? self::getImportExportFactoryService($container));

        if (isset($container->services['Shopware\\Core\\Content\\ImportExport\\Message\\ImportExportHandler'])) {
            return $container->services['Shopware\\Core\\Content\\ImportExport\\Message\\ImportExportHandler'];
        }

        return $container->services['Shopware\\Core\\Content\\ImportExport\\Message\\ImportExportHandler'] = new \Shopware\Core\Content\ImportExport\Message\ImportExportHandler($a, $b);
    }

    /**
     * Gets the public 'Shopware\Core\Content\LandingPage\Aggregate\LandingPageSalesChannel\LandingPageSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\Content\LandingPage\Aggregate\LandingPageSalesChannel\LandingPageSalesChannelDefinition
     */
    protected static function getLandingPageSalesChannelDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/Aggregate/LandingPageSalesChannel/LandingPageSalesChannelDefinition.php';

        $container->services['Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageSalesChannel\\LandingPageSalesChannelDefinition'] = $instance = new \Shopware\Core\Content\LandingPage\Aggregate\LandingPageSalesChannel\LandingPageSalesChannelDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\LandingPage\Aggregate\LandingPageTag\LandingPageTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\LandingPage\Aggregate\LandingPageTag\LandingPageTagDefinition
     */
    protected static function getLandingPageTagDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/Aggregate/LandingPageTag/LandingPageTagDefinition.php';

        $container->services['Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTag\\LandingPageTagDefinition'] = $instance = new \Shopware\Core\Content\LandingPage\Aggregate\LandingPageTag\LandingPageTagDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\LandingPage\Aggregate\LandingPageTranslation\LandingPageTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\LandingPage\Aggregate\LandingPageTranslation\LandingPageTranslationDefinition
     */
    protected static function getLandingPageTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/Aggregate/LandingPageTranslation/LandingPageTranslationDefinition.php';

        $container->services['Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTranslation\\LandingPageTranslationDefinition'] = $instance = new \Shopware\Core\Content\LandingPage\Aggregate\LandingPageTranslation\LandingPageTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\LandingPage\LandingPageDefinition' shared service.
     *
     * @return \Shopware\Core\Content\LandingPage\LandingPageDefinition
     */
    protected static function getLandingPageDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/LandingPageDefinition.php';

        $container->services['Shopware\\Core\\Content\\LandingPage\\LandingPageDefinition'] = $instance = new \Shopware\Core\Content\LandingPage\LandingPageDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\LandingPage\SalesChannel\CachedLandingPageRoute' shared service.
     *
     * @return \Shopware\Core\Content\LandingPage\SalesChannel\CachedLandingPageRoute
     */
    protected static function getCachedLandingPageRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/SalesChannel/AbstractLandingPageRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/SalesChannel/CachedLandingPageRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/SalesChannel/LandingPageRoute.php';

        return $container->services['Shopware\\Core\\Content\\LandingPage\\SalesChannel\\CachedLandingPageRoute'] = new \Shopware\Core\Content\LandingPage\SalesChannel\CachedLandingPageRoute(new \Shopware\Core\Content\LandingPage\SalesChannel\LandingPageRoute(($container->services['sales_channel.landing_page.repository'] ?? self::getSalesChannel_LandingPage_RepositoryService($container)), ($container->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'] ?? self::getSalesChannelCmsPageLoaderService($container)), ($container->services['Shopware\\Core\\Content\\LandingPage\\SalesChannel\\SalesChannelLandingPageDefinition'] ?? self::getSalesChannelLandingPageDefinitionService($container))), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator()), ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? self::getCacheTracerService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), []);
    }

    /**
     * Gets the public 'Shopware\Core\Content\LandingPage\SalesChannel\SalesChannelLandingPageDefinition' shared service.
     *
     * @return \Shopware\Core\Content\LandingPage\SalesChannel\SalesChannelLandingPageDefinition
     */
    protected static function getSalesChannelLandingPageDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/LandingPageDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/SalesChannel/SalesChannelLandingPageDefinition.php';

        $container->services['Shopware\\Core\\Content\\LandingPage\\SalesChannel\\SalesChannelLandingPageDefinition'] = $instance = new \Shopware\Core\Content\LandingPage\SalesChannel\SalesChannelLandingPageDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooterTranslation\MailHeaderFooterTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooterTranslation\MailHeaderFooterTranslationDefinition
     */
    protected static function getMailHeaderFooterTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailHeaderFooterTranslation/MailHeaderFooterTranslationDefinition.php';

        $container->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooterTranslation\\MailHeaderFooterTranslationDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooterTranslation\MailHeaderFooterTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooter\MailHeaderFooterDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooter\MailHeaderFooterDefinition
     */
    protected static function getMailHeaderFooterDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailHeaderFooter/MailHeaderFooterDefinition.php';

        $container->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooter\\MailHeaderFooterDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooter\MailHeaderFooterDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateMedia\MailTemplateMediaDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateMedia\MailTemplateMediaDefinition
     */
    protected static function getMailTemplateMediaDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailTemplateMedia/MailTemplateMediaDefinition.php';

        $container->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateMedia\\MailTemplateMediaDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateMedia\MailTemplateMediaDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTranslation\MailTemplateTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTranslation\MailTemplateTranslationDefinition
     */
    protected static function getMailTemplateTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailTemplateTranslation/MailTemplateTranslationDefinition.php';

        $container->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTranslation\\MailTemplateTranslationDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTranslation\MailTemplateTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTypeTranslation\MailTemplateTypeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTypeTranslation\MailTemplateTypeTranslationDefinition
     */
    protected static function getMailTemplateTypeTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailTemplateTypeTranslation/MailTemplateTypeTranslationDefinition.php';

        $container->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTypeTranslation\\MailTemplateTypeTranslationDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTypeTranslation\MailTemplateTypeTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateType\MailTemplateTypeDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateType\MailTemplateTypeDefinition
     */
    protected static function getMailTemplateTypeDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailTemplateType/MailTemplateTypeDefinition.php';

        $container->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateType\\MailTemplateTypeDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateType\MailTemplateTypeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\MailTemplate\Api\MailActionController' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Api\MailActionController
     */
    protected static function getMailActionControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Api/MailActionController.php';

        $container->services['Shopware\\Core\\Content\\MailTemplate\\Api\\MailActionController'] = $instance = new \Shopware\Core\Content\MailTemplate\Api\MailActionController(($container->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'] ?? self::getMailServiceService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\StringTemplateRenderer'] ?? self::getStringTemplateRendererService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\MailTemplate\MailTemplateDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\MailTemplateDefinition
     */
    protected static function getMailTemplateDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/MailTemplateDefinition.php';

        $container->services['Shopware\\Core\\Content\\MailTemplate\\MailTemplateDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\MailTemplateDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Mail\Service\MailAttachmentsBuilder' shared service.
     *
     * @return \Shopware\Core\Content\Mail\Service\MailAttachmentsBuilder
     */
    protected static function getMailAttachmentsBuilderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Mail/Service/MailAttachmentsBuilder.php';

        $a = ($container->privates['Shopware\\Core\\Content\\Media\\MediaService'] ?? self::getMediaServiceService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Mail\\Service\\MailAttachmentsBuilder'])) {
            return $container->services['Shopware\\Core\\Content\\Mail\\Service\\MailAttachmentsBuilder'];
        }
        $b = ($container->services['media.repository'] ?? self::getMedia_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Mail\\Service\\MailAttachmentsBuilder'])) {
            return $container->services['Shopware\\Core\\Content\\Mail\\Service\\MailAttachmentsBuilder'];
        }
        $c = ($container->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentGenerator'] ?? self::getDocumentGeneratorService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Mail\\Service\\MailAttachmentsBuilder'])) {
            return $container->services['Shopware\\Core\\Content\\Mail\\Service\\MailAttachmentsBuilder'];
        }

        return $container->services['Shopware\\Core\\Content\\Mail\\Service\\MailAttachmentsBuilder'] = new \Shopware\Core\Content\Mail\Service\MailAttachmentsBuilder($a, $b, $c, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Mail\Service\MailFactory' shared service.
     *
     * @return \Shopware\Core\Content\Mail\Service\MailFactory
     */
    protected static function getMailFactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Mail/Service/AbstractMailFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Mail/Service/MailFactory.php';

        return $container->services['Shopware\\Core\\Content\\Mail\\Service\\MailFactory'] = new \Shopware\Core\Content\Mail\Service\MailFactory(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Mail\Service\MailSender' shared service.
     *
     * @return \Shopware\Core\Content\Mail\Service\MailSender
     */
    protected static function getMailSenderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Mail/Service/AbstractMailSender.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Mail/Service/MailSender.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/MailerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Mailer.php';

        return $container->services['Shopware\\Core\\Content\\Mail\\Service\\MailSender'] = new \Shopware\Core\Content\Mail\Service\MailSender(new \Symfony\Component\Mailer\Mailer(($container->privates['mailer.transports'] ?? self::getMailer_TransportsService($container)), NULL, ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container))), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Media\Aggregate\MediaDefaultFolder\MediaDefaultFolderDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaDefaultFolder\MediaDefaultFolderDefinition
     */
    protected static function getMediaDefaultFolderDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaDefaultFolder/MediaDefaultFolderDefinition.php';

        $container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaDefaultFolder\\MediaDefaultFolderDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaDefaultFolder\MediaDefaultFolderDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Media\Aggregate\MediaFolderConfigurationMediaThumbnailSize\MediaFolderConfigurationMediaThumbnailSizeDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaFolderConfigurationMediaThumbnailSize\MediaFolderConfigurationMediaThumbnailSizeDefinition
     */
    protected static function getMediaFolderConfigurationMediaThumbnailSizeDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaFolderConfigurationMediaThumbnailSize/MediaFolderConfigurationMediaThumbnailSizeDefinition.php';

        $container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfigurationMediaThumbnailSize\\MediaFolderConfigurationMediaThumbnailSizeDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaFolderConfigurationMediaThumbnailSize\MediaFolderConfigurationMediaThumbnailSizeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Media\Aggregate\MediaFolderConfiguration\MediaFolderConfigurationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaFolderConfiguration\MediaFolderConfigurationDefinition
     */
    protected static function getMediaFolderConfigurationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaFolderConfiguration/MediaFolderConfigurationDefinition.php';

        $container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfiguration\\MediaFolderConfigurationDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaFolderConfiguration\MediaFolderConfigurationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Media\Aggregate\MediaFolder\MediaFolderDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaFolder\MediaFolderDefinition
     */
    protected static function getMediaFolderDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaFolder/MediaFolderDefinition.php';

        $container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolder\\MediaFolderDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaFolder\MediaFolderDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Media\Aggregate\MediaTag\MediaTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaTag\MediaTagDefinition
     */
    protected static function getMediaTagDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaTag/MediaTagDefinition.php';

        $container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaTag\\MediaTagDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaTag\MediaTagDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Media\Aggregate\MediaThumbnailSize\MediaThumbnailSizeDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaThumbnailSize\MediaThumbnailSizeDefinition
     */
    protected static function getMediaThumbnailSizeDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaThumbnailSize/MediaThumbnailSizeDefinition.php';

        $container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnailSize\\MediaThumbnailSizeDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaThumbnailSize\MediaThumbnailSizeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Media\Aggregate\MediaThumbnail\MediaThumbnailDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaThumbnail\MediaThumbnailDefinition
     */
    protected static function getMediaThumbnailDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaThumbnail/MediaThumbnailDefinition.php';

        $container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnail\\MediaThumbnailDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaThumbnail\MediaThumbnailDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Media\Aggregate\MediaTranslation\MediaTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaTranslation\MediaTranslationDefinition
     */
    protected static function getMediaTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaTranslation/MediaTranslationDefinition.php';

        $container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaTranslation\\MediaTranslationDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaTranslation\MediaTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Media\Api\MediaFolderController' shared service.
     *
     * @return \Shopware\Core\Content\Media\Api\MediaFolderController
     */
    protected static function getMediaFolderControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Api/MediaFolderController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/MediaFolderService.php';

        $container->services['Shopware\\Core\\Content\\Media\\Api\\MediaFolderController'] = $instance = new \Shopware\Core\Content\Media\Api\MediaFolderController(new \Shopware\Core\Content\Media\MediaFolderService(($container->services['media.repository'] ?? self::getMedia_RepositoryService($container)), ($container->services['media_folder.repository'] ?? self::getMediaFolder_RepositoryService($container)), ($container->services['media_folder_configuration.repository'] ?? self::getMediaFolderConfiguration_RepositoryService($container))));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Media\Api\MediaUploadController' shared service.
     *
     * @return \Shopware\Core\Content\Media\Api\MediaUploadController
     */
    protected static function getMediaUploadControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Api/MediaUploadController.php';

        $container->services['Shopware\\Core\\Content\\Media\\Api\\MediaUploadController'] = $instance = new \Shopware\Core\Content\Media\Api\MediaUploadController(($container->privates['Shopware\\Core\\Content\\Media\\MediaService'] ?? self::getMediaServiceService($container)), ($container->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'] ?? self::getFileSaverService($container)), ($container->privates['Shopware\\Core\\Content\\Media\\File\\FileNameProvider'] ?? self::getFileNameProviderService($container)), ($container->services['Shopware\\Core\\Content\\Media\\MediaDefinition'] ?? self::getMediaDefinitionService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Media\Core\Strategy\BCStrategy' shared service.
     *
     * @return \Shopware\Core\Content\Media\Core\Strategy\BCStrategy
     */
    protected static function getBCStrategyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Core/Application/AbstractMediaPathStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Core/Strategy/BCStrategy.php';

        $a = ($container->services['media.repository'] ?? self::getMedia_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Media\\Core\\Strategy\\BCStrategy'])) {
            return $container->services['Shopware\\Core\\Content\\Media\\Core\\Strategy\\BCStrategy'];
        }
        $b = ($container->services['media_thumbnail.repository'] ?? self::getMediaThumbnail_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Media\\Core\\Strategy\\BCStrategy'])) {
            return $container->services['Shopware\\Core\\Content\\Media\\Core\\Strategy\\BCStrategy'];
        }

        return $container->services['Shopware\\Core\\Content\\Media\\Core\\Strategy\\BCStrategy'] = new \Shopware\Core\Content\Media\Core\Strategy\BCStrategy($a, $b, ($container->privates['Shopware\\Core\\Content\\Media\\Pathname\\UrlGeneratorInterface'] ?? self::getUrlGeneratorInterfaceService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Media\File\FileSaver' shared service.
     *
     * @return \Shopware\Core\Content\Media\File\FileSaver
     */
    protected static function getFileSaverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/File/FileSaver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Metadata/MetadataLoader.php';

        $a = ($container->services['media.repository'] ?? self::getMedia_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'])) {
            return $container->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'];
        }
        $b = ($container->privates['Shopware\\Core\\Content\\Media\\Thumbnail\\ThumbnailService'] ?? self::getThumbnailServiceService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'])) {
            return $container->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'];
        }
        $c = ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'])) {
            return $container->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'])) {
            return $container->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'];
        }
        $e = ($container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\MediaLocationBuilder'] ?? self::getMediaLocationBuilderService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'])) {
            return $container->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'];
        }
        $f = ($container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\AbstractMediaPathStrategy'] ?? self::getAbstractMediaPathStrategyService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'])) {
            return $container->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'];
        }

        return $container->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'] = new \Shopware\Core\Content\Media\File\FileSaver($a, ($container->services['shopware.filesystem.public'] ?? self::getShopware_Filesystem_PublicService($container)), ($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)), $b, new \Shopware\Core\Content\Media\Metadata\MetadataLoader(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Content\\Media\\Metadata\\MetadataLoader\\ImageMetadataLoader'] ??= new \Shopware\Core\Content\Media\Metadata\MetadataLoader\ImageMetadataLoader());
        }, 1)), ($container->privates['Shopware\\Core\\Content\\Media\\TypeDetector\\TypeDetector'] ?? self::getTypeDetectorService($container)), $c, $d, $e, $f, $container->parameters['shopware.filesystem.allowed_extensions'], $container->parameters['shopware.filesystem.private_allowed_extensions']);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Media\MediaDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\MediaDefinition
     */
    protected static function getMediaDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Content\\Media\\MediaDefinition'] = $instance = new \Shopware\Core\Content\Media\MediaDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Newsletter\Aggregate\NewsletterRecipientTag\NewsletterRecipientTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Newsletter\Aggregate\NewsletterRecipientTag\NewsletterRecipientTagDefinition
     */
    protected static function getNewsletterRecipientTagDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/Aggregate/NewsletterRecipientTag/NewsletterRecipientTagDefinition.php';

        $container->services['Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipientTag\\NewsletterRecipientTagDefinition'] = $instance = new \Shopware\Core\Content\Newsletter\Aggregate\NewsletterRecipientTag\NewsletterRecipientTagDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Newsletter\Aggregate\NewsletterRecipient\NewsletterRecipientDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Newsletter\Aggregate\NewsletterRecipient\NewsletterRecipientDefinition
     */
    protected static function getNewsletterRecipientDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/Aggregate/NewsletterRecipient/NewsletterRecipientDefinition.php';

        $container->services['Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipient\\NewsletterRecipientDefinition'] = $instance = new \Shopware\Core\Content\Newsletter\Aggregate\NewsletterRecipient\NewsletterRecipientDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Newsletter\SalesChannel\NewsletterConfirmRoute' shared service.
     *
     * @return \Shopware\Core\Content\Newsletter\SalesChannel\NewsletterConfirmRoute
     */
    protected static function getNewsletterConfirmRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/SalesChannel/AbstractNewsletterConfirmRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/SalesChannel/NewsletterConfirmRoute.php';

        return $container->services['Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterConfirmRoute'] = new \Shopware\Core\Content\Newsletter\SalesChannel\NewsletterConfirmRoute(($container->services['newsletter_recipient.repository'] ?? self::getNewsletterRecipient_RepositoryService($container)), ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Newsletter\SalesChannel\NewsletterSubscribeRoute' shared service.
     *
     * @return \Shopware\Core\Content\Newsletter\SalesChannel\NewsletterSubscribeRoute
     */
    protected static function getNewsletterSubscribeRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/SalesChannel/AbstractNewsletterSubscribeRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/SalesChannel/NewsletterSubscribeRoute.php';

        return $container->services['Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterSubscribeRoute'] = new \Shopware\Core\Content\Newsletter\SalesChannel\NewsletterSubscribeRoute(($container->services['newsletter_recipient.repository'] ?? self::getNewsletterRecipient_RepositoryService($container)), ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->privates['shopware.rate_limiter'] ?? self::getShopware_RateLimiterService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Newsletter\SalesChannel\NewsletterUnsubscribeRoute' shared service.
     *
     * @return \Shopware\Core\Content\Newsletter\SalesChannel\NewsletterUnsubscribeRoute
     */
    protected static function getNewsletterUnsubscribeRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/SalesChannel/AbstractNewsletterUnsubscribeRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/SalesChannel/NewsletterUnsubscribeRoute.php';

        return $container->services['Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterUnsubscribeRoute'] = new \Shopware\Core\Content\Newsletter\SalesChannel\NewsletterUnsubscribeRoute(($container->services['newsletter_recipient.repository'] ?? self::getNewsletterRecipient_RepositoryService($container)), ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Newsletter\SalesChannel\SalesChannelNewsletterRecipientDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Newsletter\SalesChannel\SalesChannelNewsletterRecipientDefinition
     */
    protected static function getSalesChannelNewsletterRecipientDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/Aggregate/NewsletterRecipient/NewsletterRecipientDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/SalesChannel/SalesChannelNewsletterRecipientDefinition.php';

        $container->services['Shopware\\Core\\Content\\Newsletter\\SalesChannel\\SalesChannelNewsletterRecipientDefinition'] = $instance = new \Shopware\Core\Content\Newsletter\SalesChannel\SalesChannelNewsletterRecipientDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\ProductExport\Api\ProductExportController' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\Api\ProductExportController
     */
    protected static function getProductExportControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Api/ProductExportController.php';

        $container->services['Shopware\\Core\\Content\\ProductExport\\Api\\ProductExportController'] = $instance = new \Shopware\Core\Content\ProductExport\Api\ProductExportController(($container->services['sales_channel_domain.repository'] ?? self::getSalesChannelDomain_RepositoryService($container)), ($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container)), ($container->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'] ?? self::getProductExportGeneratorService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\ProductExport\ProductExportDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\ProductExportDefinition
     */
    protected static function getProductExportDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/ProductExportDefinition.php';

        $container->services['Shopware\\Core\\Content\\ProductExport\\ProductExportDefinition'] = $instance = new \Shopware\Core\Content\ProductExport\ProductExportDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\ProductExport\ProductExportHydrator' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\ProductExportHydrator
     */
    protected static function getProductExportHydratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/ProductExportHydrator.php';

        return $container->services['Shopware\\Core\\Content\\ProductExport\\ProductExportHydrator'] = new \Shopware\Core\Content\ProductExport\ProductExportHydrator($container);
    }

    /**
     * Gets the public 'Shopware\Core\Content\ProductExport\SalesChannel\ExportController' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\SalesChannel\ExportController
     */
    protected static function getExportControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/SalesChannel/ExportController.php';

        return $container->services['Shopware\\Core\\Content\\ProductExport\\SalesChannel\\ExportController'] = new \Shopware\Core\Content\ProductExport\SalesChannel\ExportController(($container->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExporter'] ?? self::getProductExporterService($container)), ($container->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportFileHandler'] ?? self::getProductExportFileHandlerService($container)), ($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['product_export.repository'] ?? self::getProductExport_RepositoryService($container)), ($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? self::getSalesChannelContextFactoryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\ProductExport\Service\ProductExportGenerator' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\Service\ProductExportGenerator
     */
    protected static function getProductExportGeneratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExportGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExportGenerator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExportValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExportValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/TwigVariableParserFactory.php';

        $a = ($container->services['Shopware\\Core\\Content\\ProductStream\\Service\\ProductStreamBuilder'] ?? self::getProductStreamBuilderService($container));

        if (isset($container->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'])) {
            return $container->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'];
        }
        $b = ($container->services['sales_channel.product.repository'] ?? self::getSalesChannel_Product_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'])) {
            return $container->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'];
        }
        $c = ($container->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportRenderer'] ?? self::getProductExportRendererService($container));

        if (isset($container->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'])) {
            return $container->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'])) {
            return $container->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'];
        }
        $e = ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? self::getSalesChannelContextServiceService($container));

        if (isset($container->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'])) {
            return $container->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'];
        }
        $f = ($container->services['translator'] ?? self::getTranslatorService($container));

        if (isset($container->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'])) {
            return $container->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'];
        }
        $g = ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'] ?? self::getSalesChannelContextPersisterService($container));

        if (isset($container->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'])) {
            return $container->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'];
        }
        $h = ($container->services['twig'] ?? self::getTwigService($container));

        if (isset($container->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'])) {
            return $container->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'];
        }

        return $container->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'] = new \Shopware\Core\Content\ProductExport\Service\ProductExportGenerator($a, $b, $c, $d, new \Shopware\Core\Content\ProductExport\Service\ProductExportValidator(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Content\\ProductExport\\Validator\\XmlValidator'] ??= new \Shopware\Core\Content\ProductExport\Validator\XmlValidator());
        }, 1)), $e, $f, $g, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), 100, ($container->services['Shopware\\Core\\Content\\Seo\\SeoUrlPlaceholderHandlerInterface'] ?? self::getSeoUrlPlaceholderHandlerInterfaceService($container)), $h, ($container->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? self::getProductDefinitionService($container)), ($container->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'] ?? self::getLanguageLocaleCodeProviderService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\TwigVariableParserFactory'] ??= new \Shopware\Core\Framework\Adapter\Twig\TwigVariableParserFactory()));
    }

    /**
     * Gets the public 'Shopware\Core\Content\ProductExport\Service\ProductExporter' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\Service\ProductExporter
     */
    protected static function getProductExporterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExporterInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExporter.php';

        return $container->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExporter'] = new \Shopware\Core\Content\ProductExport\Service\ProductExporter(($container->services['product_export.repository'] ?? self::getProductExport_RepositoryService($container)), ($container->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'] ?? self::getProductExportGeneratorService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportFileHandler'] ?? self::getProductExportFileHandlerService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\ProductStream\Aggregate\ProductStreamFilter\ProductStreamFilterDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ProductStream\Aggregate\ProductStreamFilter\ProductStreamFilterDefinition
     */
    protected static function getProductStreamFilterDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/Aggregate/ProductStreamFilter/ProductStreamFilterDefinition.php';

        $container->services['Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamFilter\\ProductStreamFilterDefinition'] = $instance = new \Shopware\Core\Content\ProductStream\Aggregate\ProductStreamFilter\ProductStreamFilterDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\ProductStream\Aggregate\ProductStreamFilter\ProductStreamFilterHydrator' shared service.
     *
     * @return \Shopware\Core\Content\ProductStream\Aggregate\ProductStreamFilter\ProductStreamFilterHydrator
     */
    protected static function getProductStreamFilterHydratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/Aggregate/ProductStreamFilter/ProductStreamFilterHydrator.php';

        return $container->services['Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamFilter\\ProductStreamFilterHydrator'] = new \Shopware\Core\Content\ProductStream\Aggregate\ProductStreamFilter\ProductStreamFilterHydrator($container);
    }

    /**
     * Gets the public 'Shopware\Core\Content\ProductStream\Aggregate\ProductStreamTranslation\ProductStreamTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ProductStream\Aggregate\ProductStreamTranslation\ProductStreamTranslationDefinition
     */
    protected static function getProductStreamTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/Aggregate/ProductStreamTranslation/ProductStreamTranslationDefinition.php';

        $container->services['Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamTranslation\\ProductStreamTranslationDefinition'] = $instance = new \Shopware\Core\Content\ProductStream\Aggregate\ProductStreamTranslation\ProductStreamTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\ProductStream\ProductStreamDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ProductStream\ProductStreamDefinition
     */
    protected static function getProductStreamDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/ProductStreamDefinition.php';

        $container->services['Shopware\\Core\\Content\\ProductStream\\ProductStreamDefinition'] = $instance = new \Shopware\Core\Content\ProductStream\ProductStreamDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\ProductStream\ProductStreamHydrator' shared service.
     *
     * @return \Shopware\Core\Content\ProductStream\ProductStreamHydrator
     */
    protected static function getProductStreamHydratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/ProductStreamHydrator.php';

        return $container->services['Shopware\\Core\\Content\\ProductStream\\ProductStreamHydrator'] = new \Shopware\Core\Content\ProductStream\ProductStreamHydrator($container);
    }

    /**
     * Gets the public 'Shopware\Core\Content\ProductStream\Service\ProductStreamBuilder' shared service.
     *
     * @return \Shopware\Core\Content\ProductStream\Service\ProductStreamBuilder
     */
    protected static function getProductStreamBuilderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/Service/ProductStreamBuilderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/Service/ProductStreamBuilder.php';

        $a = ($container->services['product_stream.repository'] ?? self::getProductStream_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\Content\\ProductStream\\Service\\ProductStreamBuilder'])) {
            return $container->services['Shopware\\Core\\Content\\ProductStream\\Service\\ProductStreamBuilder'];
        }

        return $container->services['Shopware\\Core\\Content\\ProductStream\\Service\\ProductStreamBuilder'] = new \Shopware\Core\Content\ProductStream\Service\ProductStreamBuilder($a, ($container->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? self::getProductDefinitionService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductCategoryTree\ProductCategoryTreeDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCategoryTree\ProductCategoryTreeDefinition
     */
    protected static function getProductCategoryTreeDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCategoryTree/ProductCategoryTreeDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategoryTree\\ProductCategoryTreeDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCategoryTree\ProductCategoryTreeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductCategory\ProductCategoryDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCategory\ProductCategoryDefinition
     */
    protected static function getProductCategoryDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCategory/ProductCategoryDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategory\\ProductCategoryDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCategory\ProductCategoryDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductConfiguratorSetting\ProductConfiguratorSettingDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductConfiguratorSetting\ProductConfiguratorSettingDefinition
     */
    protected static function getProductConfiguratorSettingDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductConfiguratorSetting/ProductConfiguratorSettingDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductConfiguratorSetting\\ProductConfiguratorSettingDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductConfiguratorSetting\ProductConfiguratorSettingDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductConfiguratorSetting\ProductConfiguratorSettingHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductConfiguratorSetting\ProductConfiguratorSettingHydrator
     */
    protected static function getProductConfiguratorSettingHydratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductConfiguratorSetting/ProductConfiguratorSettingHydrator.php';

        return $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductConfiguratorSetting\\ProductConfiguratorSettingHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductConfiguratorSetting\ProductConfiguratorSettingHydrator($container);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductCrossSellingAssignedProducts\ProductCrossSellingAssignedProductsDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCrossSellingAssignedProducts\ProductCrossSellingAssignedProductsDefinition
     */
    protected static function getProductCrossSellingAssignedProductsDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCrossSellingAssignedProducts/ProductCrossSellingAssignedProductsDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingAssignedProducts\\ProductCrossSellingAssignedProductsDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCrossSellingAssignedProducts\ProductCrossSellingAssignedProductsDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductCrossSellingAssignedProducts\ProductCrossSellingAssignedProductsHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCrossSellingAssignedProducts\ProductCrossSellingAssignedProductsHydrator
     */
    protected static function getProductCrossSellingAssignedProductsHydratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCrossSellingAssignedProducts/ProductCrossSellingAssignedProductsHydrator.php';

        return $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingAssignedProducts\\ProductCrossSellingAssignedProductsHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductCrossSellingAssignedProducts\ProductCrossSellingAssignedProductsHydrator($container);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductCrossSellingTranslation\ProductCrossSellingTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCrossSellingTranslation\ProductCrossSellingTranslationDefinition
     */
    protected static function getProductCrossSellingTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCrossSellingTranslation/ProductCrossSellingTranslationDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingTranslation\\ProductCrossSellingTranslationDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCrossSellingTranslation\ProductCrossSellingTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductCrossSelling\ProductCrossSellingDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCrossSelling\ProductCrossSellingDefinition
     */
    protected static function getProductCrossSellingDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCrossSelling/ProductCrossSellingDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSelling\\ProductCrossSellingDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCrossSelling\ProductCrossSellingDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductCrossSelling\ProductCrossSellingHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCrossSelling\ProductCrossSellingHydrator
     */
    protected static function getProductCrossSellingHydratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCrossSelling/ProductCrossSellingHydrator.php';

        return $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSelling\\ProductCrossSellingHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductCrossSelling\ProductCrossSellingHydrator($container);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductCustomFieldSet\ProductCustomFieldSetDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCustomFieldSet\ProductCustomFieldSetDefinition
     */
    protected static function getProductCustomFieldSetDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCustomFieldSet/ProductCustomFieldSetDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCustomFieldSet\\ProductCustomFieldSetDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCustomFieldSet\ProductCustomFieldSetDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductDownload\ProductDownloadDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductDownload\ProductDownloadDefinition
     */
    protected static function getProductDownloadDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductDownload\\ProductDownloadDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductDownload\ProductDownloadDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductFeatureSetTranslation\ProductFeatureSetTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductFeatureSetTranslation\ProductFeatureSetTranslationDefinition
     */
    protected static function getProductFeatureSetTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductFeatureSetTranslation/ProductFeatureSetTranslationDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSetTranslation\\ProductFeatureSetTranslationDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductFeatureSetTranslation\ProductFeatureSetTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductFeatureSet\ProductFeatureSetDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductFeatureSet\ProductFeatureSetDefinition
     */
    protected static function getProductFeatureSetDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductFeatureSet/ProductFeatureSetDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSet\\ProductFeatureSetDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductFeatureSet\ProductFeatureSetDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductFeatureSet\ProductFeatureSetHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductFeatureSet\ProductFeatureSetHydrator
     */
    protected static function getProductFeatureSetHydratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductFeatureSet/ProductFeatureSetHydrator.php';

        return $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSet\\ProductFeatureSetHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductFeatureSet\ProductFeatureSetHydrator($container);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductKeywordDictionary\ProductKeywordDictionaryDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductKeywordDictionary\ProductKeywordDictionaryDefinition
     */
    protected static function getProductKeywordDictionaryDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductKeywordDictionary/ProductKeywordDictionaryDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductKeywordDictionary\\ProductKeywordDictionaryDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductKeywordDictionary\ProductKeywordDictionaryDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductKeywordDictionary\ProductKeywordDictionaryHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductKeywordDictionary\ProductKeywordDictionaryHydrator
     */
    protected static function getProductKeywordDictionaryHydratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductKeywordDictionary/ProductKeywordDictionaryHydrator.php';

        return $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductKeywordDictionary\\ProductKeywordDictionaryHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductKeywordDictionary\ProductKeywordDictionaryHydrator($container);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductManufacturerTranslation\ProductManufacturerTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductManufacturerTranslation\ProductManufacturerTranslationDefinition
     */
    protected static function getProductManufacturerTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductManufacturerTranslation/ProductManufacturerTranslationDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturerTranslation\\ProductManufacturerTranslationDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductManufacturerTranslation\ProductManufacturerTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductManufacturer\ProductManufacturerDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductManufacturer\ProductManufacturerDefinition
     */
    protected static function getProductManufacturerDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductManufacturer/ProductManufacturerDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturer\\ProductManufacturerDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductManufacturer\ProductManufacturerDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductManufacturer\ProductManufacturerHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductManufacturer\ProductManufacturerHydrator
     */
    protected static function getProductManufacturerHydratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductManufacturer/ProductManufacturerHydrator.php';

        return $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturer\\ProductManufacturerHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductManufacturer\ProductManufacturerHydrator($container);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductMedia\ProductMediaDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductMedia\ProductMediaDefinition
     */
    protected static function getProductMediaDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductMedia/ProductMediaDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductMedia\\ProductMediaDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductMedia\ProductMediaDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductMedia\ProductMediaHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductMedia\ProductMediaHydrator
     */
    protected static function getProductMediaHydratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductMedia/ProductMediaHydrator.php';

        return $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductMedia\\ProductMediaHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductMedia\ProductMediaHydrator($container);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductOption\ProductOptionDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductOption\ProductOptionDefinition
     */
    protected static function getProductOptionDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductOption/ProductOptionDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductOption\\ProductOptionDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductOption\ProductOptionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductPrice\ProductPriceDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductPrice\ProductPriceDefinition
     */
    protected static function getProductPriceDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductPrice/ProductPriceDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductPrice\\ProductPriceDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductPrice\ProductPriceDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductPrice\ProductPriceHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductPrice\ProductPriceHydrator
     */
    protected static function getProductPriceHydratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductPrice/ProductPriceHydrator.php';

        return $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductPrice\\ProductPriceHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductPrice\ProductPriceHydrator($container);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductProperty\ProductPropertyDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductProperty\ProductPropertyDefinition
     */
    protected static function getProductPropertyDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductProperty/ProductPropertyDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductProperty\\ProductPropertyDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductProperty\ProductPropertyDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductReview\ProductReviewDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductReview\ProductReviewDefinition
     */
    protected static function getProductReviewDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductReview/ProductReviewDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductReview\\ProductReviewDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductReview\ProductReviewDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductReview\ProductReviewHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductReview\ProductReviewHydrator
     */
    protected static function getProductReviewHydratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductReview/ProductReviewHydrator.php';

        return $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductReview\\ProductReviewHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductReview\ProductReviewHydrator($container);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductSearchConfigField\ProductSearchConfigFieldDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductSearchConfigField\ProductSearchConfigFieldDefinition
     */
    protected static function getProductSearchConfigFieldDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductSearchConfigField/ProductSearchConfigFieldDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfigField\\ProductSearchConfigFieldDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductSearchConfigField\ProductSearchConfigFieldDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductSearchConfigField\ProductSearchConfigFieldHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductSearchConfigField\ProductSearchConfigFieldHydrator
     */
    protected static function getProductSearchConfigFieldHydratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductSearchConfigField/ProductSearchConfigFieldHydrator.php';

        return $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfigField\\ProductSearchConfigFieldHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductSearchConfigField\ProductSearchConfigFieldHydrator($container);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductSearchConfig\ProductSearchConfigDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductSearchConfig\ProductSearchConfigDefinition
     */
    protected static function getProductSearchConfigDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductSearchConfig/ProductSearchConfigDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfig\\ProductSearchConfigDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductSearchConfig\ProductSearchConfigDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductSearchConfig\ProductSearchConfigHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductSearchConfig\ProductSearchConfigHydrator
     */
    protected static function getProductSearchConfigHydratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductSearchConfig/ProductSearchConfigHydrator.php';

        return $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfig\\ProductSearchConfigHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductSearchConfig\ProductSearchConfigHydrator($container);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductSearchKeyword\ProductSearchKeywordDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductSearchKeyword\ProductSearchKeywordDefinition
     */
    protected static function getProductSearchKeywordDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductSearchKeyword/ProductSearchKeywordDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchKeyword\\ProductSearchKeywordDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductSearchKeyword\ProductSearchKeywordDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductSearchKeyword\ProductSearchKeywordHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductSearchKeyword\ProductSearchKeywordHydrator
     */
    protected static function getProductSearchKeywordHydratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductSearchKeyword/ProductSearchKeywordHydrator.php';

        return $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchKeyword\\ProductSearchKeywordHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductSearchKeyword\ProductSearchKeywordHydrator($container);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductStreamMapping\ProductStreamMappingDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductStreamMapping\ProductStreamMappingDefinition
     */
    protected static function getProductStreamMappingDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductStreamMapping/ProductStreamMappingDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductStreamMapping\\ProductStreamMappingDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductStreamMapping\ProductStreamMappingDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductTag\ProductTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductTag\ProductTagDefinition
     */
    protected static function getProductTagDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductTag/ProductTagDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductTag\\ProductTagDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductTag\ProductTagDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductTranslation\ProductTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductTranslation\ProductTranslationDefinition
     */
    protected static function getProductTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductTranslation/ProductTranslationDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductTranslation\\ProductTranslationDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductTranslation\ProductTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductVisibility\ProductVisibilityDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductVisibility\ProductVisibilityDefinition
     */
    protected static function getProductVisibilityDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductVisibility/ProductVisibilityDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductVisibility\\ProductVisibilityDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductVisibility\ProductVisibilityDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Aggregate\ProductVisibility\ProductVisibilityHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductVisibility\ProductVisibilityHydrator
     */
    protected static function getProductVisibilityHydratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductVisibility/ProductVisibilityHydrator.php';

        return $container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductVisibility\\ProductVisibilityHydrator'] = new \Shopware\Core\Content\Product\Aggregate\ProductVisibility\ProductVisibilityHydrator($container);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\Api\ProductActionController' shared service.
     *
     * @return \Shopware\Core\Content\Product\Api\ProductActionController
     */
    protected static function getProductActionControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Api/ProductActionController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Util/VariantCombinationLoader.php';

        $container->services['Shopware\\Core\\Content\\Product\\Api\\ProductActionController'] = $instance = new \Shopware\Core\Content\Product\Api\ProductActionController(new \Shopware\Core\Content\Product\Util\VariantCombinationLoader(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container))));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\DataAbstractionLayer\CheapestPrice\CheapestPriceAccessorBuilder' shared service.
     *
     * @return \Shopware\Core\Content\Product\DataAbstractionLayer\CheapestPrice\CheapestPriceAccessorBuilder
     */
    protected static function getCheapestPriceAccessorBuilderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/FieldAccessorBuilderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/CheapestPrice/CheapestPriceAccessorBuilder.php';

        return $container->services['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\CheapestPrice\\CheapestPriceAccessorBuilder'] = new \Shopware\Core\Content\Product\DataAbstractionLayer\CheapestPrice\CheapestPriceAccessorBuilder(100, ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\ProductDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\ProductDefinition
     */
    protected static function getProductDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] = $instance = new \Shopware\Core\Content\Product\ProductDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\ProductHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\ProductHydrator
     */
    protected static function getProductHydratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/ProductHydrator.php';

        return $container->services['Shopware\\Core\\Content\\Product\\ProductHydrator'] = new \Shopware\Core\Content\Product\ProductHydrator($container);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\CrossSelling\CachedProductCrossSellingRoute' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\CrossSelling\CachedProductCrossSellingRoute
     */
    protected static function getCachedProductCrossSellingRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/CrossSelling/AbstractProductCrossSellingRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/CrossSelling/CachedProductCrossSellingRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/CrossSelling/ProductCrossSellingRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/AbstractProductCloseoutFilterFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/ProductCloseoutFilterFactory.php';

        $a = ($container->services['product_cross_selling.repository'] ?? self::getProductCrossSelling_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'])) {
            return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'])) {
            return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'];
        }
        $c = ($container->services['sales_channel.product.repository'] ?? self::getSalesChannel_Product_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'])) {
            return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'];
        }
        $d = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'])) {
            return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'];
        }
        $e = ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingLoader'] ?? self::getProductListingLoaderService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'])) {
            return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'];
        }
        $f = ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? self::getCacheTracerService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'])) {
            return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'];
        }

        return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'] = new \Shopware\Core\Content\Product\SalesChannel\CrossSelling\CachedProductCrossSellingRoute(new \Shopware\Core\Content\Product\SalesChannel\CrossSelling\ProductCrossSellingRoute($a, $b, ($container->services['Shopware\\Core\\Content\\ProductStream\\Service\\ProductStreamBuilder'] ?? self::getProductStreamBuilderService($container)), $c, $d, $e, ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\ProductCloseoutFilterFactory'] ??= new \Shopware\Core\Content\Product\SalesChannel\ProductCloseoutFilterFactory())), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator()), $f, $b, []);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\Detail\CachedProductDetailRoute' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Detail\CachedProductDetailRoute
     */
    protected static function getCachedProductDetailRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Detail/AbstractProductDetailRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Detail/CachedProductDetailRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Detail/ProductDetailRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/AbstractProductCloseoutFilterFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/ProductCloseoutFilterFactory.php';

        return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Detail\\CachedProductDetailRoute'] = new \Shopware\Core\Content\Product\SalesChannel\Detail\CachedProductDetailRoute(new \Shopware\Core\Content\Product\SalesChannel\Detail\ProductDetailRoute(($container->services['sales_channel.product.repository'] ?? self::getSalesChannel_Product_RepositoryService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->privates['Shopware\\Storefront\\Page\\Product\\Configurator\\ProductPageConfiguratorLoader'] ?? self::getProductPageConfiguratorLoaderService($container)), ($container->privates['Shopware\\Core\\Content\\Category\\Service\\CategoryBreadcrumbBuilder'] ?? self::getCategoryBreadcrumbBuilderService($container)), ($container->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'] ?? self::getSalesChannelCmsPageLoaderService($container)), ($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\SalesChannelProductDefinition'] ?? self::getSalesChannelProductDefinitionService($container)), ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\ProductCloseoutFilterFactory'] ??= new \Shopware\Core\Content\Product\SalesChannel\ProductCloseoutFilterFactory())), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator()), ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? self::getCacheTracerService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), []);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\FindVariant\FindProductVariantRoute' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\FindVariant\FindProductVariantRoute
     */
    protected static function getFindProductVariantRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/FindVariant/AbstractFindProductVariantRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/FindVariant/FindProductVariantRoute.php';

        return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\FindVariant\\FindProductVariantRoute'] = new \Shopware\Core\Content\Product\SalesChannel\FindVariant\FindProductVariantRoute(($container->services['sales_channel.product.repository'] ?? self::getSalesChannel_Product_RepositoryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\Listing\CachedProductListingRoute' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Listing\CachedProductListingRoute
     */
    protected static function getCachedProductListingRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Listing/AbstractProductListingRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Listing/CachedProductListingRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Listing/ProductListingRoute.php';

        $a = ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingLoader'] ?? self::getProductListingLoaderService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\CachedProductListingRoute'])) {
            return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\CachedProductListingRoute'];
        }
        $b = ($container->services['category.repository'] ?? self::getCategory_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\CachedProductListingRoute'])) {
            return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\CachedProductListingRoute'];
        }
        $c = ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? self::getCacheTracerService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\CachedProductListingRoute'])) {
            return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\CachedProductListingRoute'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\CachedProductListingRoute'])) {
            return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\CachedProductListingRoute'];
        }

        return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\CachedProductListingRoute'] = new \Shopware\Core\Content\Product\SalesChannel\Listing\CachedProductListingRoute(new \Shopware\Core\Content\Product\SalesChannel\Listing\ProductListingRoute($a, $b, ($container->services['Shopware\\Core\\Content\\ProductStream\\Service\\ProductStreamBuilder'] ?? self::getProductStreamBuilderService($container))), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator()), $c, $d, []);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\Listing\ResolveCriteriaProductListingRoute' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Listing\ResolveCriteriaProductListingRoute
     */
    protected static function getResolveCriteriaProductListingRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Listing/AbstractProductListingRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Listing/ResolveCriteriaProductListingRoute.php';

        $a = ($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\CachedProductListingRoute'] ?? self::getCachedProductListingRouteService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ResolveCriteriaProductListingRoute'])) {
            return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ResolveCriteriaProductListingRoute'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ResolveCriteriaProductListingRoute'])) {
            return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ResolveCriteriaProductListingRoute'];
        }
        $c = ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Processor\\CompositeListingProcessor'] ?? self::getCompositeListingProcessorService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ResolveCriteriaProductListingRoute'])) {
            return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ResolveCriteriaProductListingRoute'];
        }

        return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ResolveCriteriaProductListingRoute'] = new \Shopware\Core\Content\Product\SalesChannel\Listing\ResolveCriteriaProductListingRoute($a, $b, $c);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\ProductListRoute' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\ProductListRoute
     */
    protected static function getProductListRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/AbstractProductListRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/ProductListRoute.php';

        return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\ProductListRoute'] = new \Shopware\Core\Content\Product\SalesChannel\ProductListRoute(($container->services['sales_channel.product.repository'] ?? self::getSalesChannel_Product_RepositoryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\Review\CachedProductReviewRoute' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Review\CachedProductReviewRoute
     */
    protected static function getCachedProductReviewRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Review/AbstractProductReviewRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Review/CachedProductReviewRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Review/ProductReviewRoute.php';

        $a = ($container->services['product_review.repository'] ?? self::getProductReview_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\CachedProductReviewRoute'])) {
            return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\CachedProductReviewRoute'];
        }
        $b = ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? self::getCacheTracerService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\CachedProductReviewRoute'])) {
            return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\CachedProductReviewRoute'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\CachedProductReviewRoute'])) {
            return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\CachedProductReviewRoute'];
        }

        return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\CachedProductReviewRoute'] = new \Shopware\Core\Content\Product\SalesChannel\Review\CachedProductReviewRoute(new \Shopware\Core\Content\Product\SalesChannel\Review\ProductReviewRoute($a), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator()), $b, $c, []);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\Review\ProductReviewSaveRoute' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Review\ProductReviewSaveRoute
     */
    protected static function getProductReviewSaveRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Review/AbstractProductReviewSaveRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Review/ProductReviewSaveRoute.php';

        return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\ProductReviewSaveRoute'] = new \Shopware\Core\Content\Product\SalesChannel\Review\ProductReviewSaveRoute(($container->services['product_review.repository'] ?? self::getProductReview_RepositoryService($container)), ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\SalesChannelProductDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\SalesChannelProductDefinition
     */
    protected static function getSalesChannelProductDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\SalesChannelProductDefinition'] = $instance = new \Shopware\Core\Content\Product\SalesChannel\SalesChannelProductDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\Search\CachedProductSearchRoute' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Search\CachedProductSearchRoute
     */
    protected static function getCachedProductSearchRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Search/AbstractProductSearchRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Search/CachedProductSearchRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Search/ProductSearchRoute.php';

        return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Search\\CachedProductSearchRoute'] = new \Shopware\Core\Content\Product\SalesChannel\Search\CachedProductSearchRoute(new \Shopware\Core\Content\Product\SalesChannel\Search\ProductSearchRoute(($container->privates['Shopware\\Elasticsearch\\Product\\ProductSearchBuilder'] ?? self::getProductSearchBuilderService($container)), ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingLoader'] ?? self::getProductListingLoaderService($container))), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator()), ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? self::getCacheTracerService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), []);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\Search\ResolvedCriteriaProductSearchRoute' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Search\ResolvedCriteriaProductSearchRoute
     */
    protected static function getResolvedCriteriaProductSearchRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Search/AbstractProductSearchRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Search/ResolvedCriteriaProductSearchRoute.php';

        return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Search\\ResolvedCriteriaProductSearchRoute'] = new \Shopware\Core\Content\Product\SalesChannel\Search\ResolvedCriteriaProductSearchRoute(($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Search\\CachedProductSearchRoute'] ?? self::getCachedProductSearchRouteService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\RequestCriteriaBuilder'] ?? self::getRequestCriteriaBuilderService($container)), ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Processor\\CompositeListingProcessor'] ?? self::getCompositeListingProcessorService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingDefinition
     */
    protected static function getProductSortingDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Sorting/ProductSortingDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingDefinition'] = $instance = new \Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingHydrator
     */
    protected static function getProductSortingHydratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Sorting/ProductSortingHydrator.php';

        return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingHydrator'] = new \Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingHydrator($container);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingTranslationDefinition
     */
    protected static function getProductSortingTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Sorting/ProductSortingTranslationDefinition.php';

        $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingTranslationDefinition'] = $instance = new \Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Product\SalesChannel\Suggest\CachedProductSuggestRoute' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Suggest\CachedProductSuggestRoute
     */
    protected static function getCachedProductSuggestRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Suggest/AbstractProductSuggestRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Suggest/CachedProductSuggestRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Suggest/ProductSuggestRoute.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        return $container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Suggest\\CachedProductSuggestRoute'] = new \Shopware\Core\Content\Product\SalesChannel\Suggest\CachedProductSuggestRoute(new \Shopware\Core\Content\Product\SalesChannel\Suggest\ProductSuggestRoute(($container->privates['Shopware\\Elasticsearch\\Product\\ProductSearchBuilder'] ?? self::getProductSearchBuilderService($container)), $a, ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingLoader'] ?? self::getProductListingLoaderService($container)), ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Processor\\CompositeListingProcessor'] ?? self::getCompositeListingProcessorService($container))), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator()), ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? self::getCacheTracerService($container)), $a, []);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Property\Aggregate\PropertyGroupOptionTranslation\PropertyGroupOptionTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Property\Aggregate\PropertyGroupOptionTranslation\PropertyGroupOptionTranslationDefinition
     */
    protected static function getPropertyGroupOptionTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Property/Aggregate/PropertyGroupOptionTranslation/PropertyGroupOptionTranslationDefinition.php';

        $container->services['Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOptionTranslation\\PropertyGroupOptionTranslationDefinition'] = $instance = new \Shopware\Core\Content\Property\Aggregate\PropertyGroupOptionTranslation\PropertyGroupOptionTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Property\Aggregate\PropertyGroupOption\PropertyGroupOptionDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Property\Aggregate\PropertyGroupOption\PropertyGroupOptionDefinition
     */
    protected static function getPropertyGroupOptionDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Property/Aggregate/PropertyGroupOption/PropertyGroupOptionDefinition.php';

        $container->services['Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOption\\PropertyGroupOptionDefinition'] = $instance = new \Shopware\Core\Content\Property\Aggregate\PropertyGroupOption\PropertyGroupOptionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Property\Aggregate\PropertyGroupOption\PropertyGroupOptionHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Property\Aggregate\PropertyGroupOption\PropertyGroupOptionHydrator
     */
    protected static function getPropertyGroupOptionHydratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Property/Aggregate/PropertyGroupOption/PropertyGroupOptionHydrator.php';

        return $container->services['Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOption\\PropertyGroupOptionHydrator'] = new \Shopware\Core\Content\Property\Aggregate\PropertyGroupOption\PropertyGroupOptionHydrator($container);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Property\Aggregate\PropertyGroupTranslation\PropertyGroupTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Property\Aggregate\PropertyGroupTranslation\PropertyGroupTranslationDefinition
     */
    protected static function getPropertyGroupTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Property/Aggregate/PropertyGroupTranslation/PropertyGroupTranslationDefinition.php';

        $container->services['Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupTranslation\\PropertyGroupTranslationDefinition'] = $instance = new \Shopware\Core\Content\Property\Aggregate\PropertyGroupTranslation\PropertyGroupTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Property\PropertyGroupDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Property\PropertyGroupDefinition
     */
    protected static function getPropertyGroupDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Property/PropertyGroupDefinition.php';

        $container->services['Shopware\\Core\\Content\\Property\\PropertyGroupDefinition'] = $instance = new \Shopware\Core\Content\Property\PropertyGroupDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Property\PropertyGroupHydrator' shared service.
     *
     * @return \Shopware\Core\Content\Property\PropertyGroupHydrator
     */
    protected static function getPropertyGroupHydratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Property/PropertyGroupHydrator.php';

        return $container->services['Shopware\\Core\\Content\\Property\\PropertyGroupHydrator'] = new \Shopware\Core\Content\Property\PropertyGroupHydrator($container);
    }

    /**
     * Gets the public 'Shopware\Core\Content\Rule\Aggregate\RuleCondition\RuleConditionDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Rule\Aggregate\RuleCondition\RuleConditionDefinition
     */
    protected static function getRuleConditionDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Rule/Aggregate/RuleCondition/RuleConditionDefinition.php';

        $container->services['Shopware\\Core\\Content\\Rule\\Aggregate\\RuleCondition\\RuleConditionDefinition'] = $instance = new \Shopware\Core\Content\Rule\Aggregate\RuleCondition\RuleConditionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Rule\Aggregate\RuleTag\RuleTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Rule\Aggregate\RuleTag\RuleTagDefinition
     */
    protected static function getRuleTagDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Rule/Aggregate/RuleTag/RuleTagDefinition.php';

        $container->services['Shopware\\Core\\Content\\Rule\\Aggregate\\RuleTag\\RuleTagDefinition'] = $instance = new \Shopware\Core\Content\Rule\Aggregate\RuleTag\RuleTagDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Rule\RuleDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Rule\RuleDefinition
     */
    protected static function getRuleDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Content\\Rule\\RuleDefinition'] = $instance = new \Shopware\Core\Content\Rule\RuleDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Seo\Api\SeoActionController' shared service.
     *
     * @return \Shopware\Core\Content\Seo\Api\SeoActionController
     */
    protected static function getSeoActionControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/Api/SeoActionController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/Validation/SeoUrlDataValidationFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/Validation/SeoUrlValidationFactory.php';

        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container));

        $container->services['Shopware\\Core\\Content\\Seo\\Api\\SeoActionController'] = $instance = new \Shopware\Core\Content\Seo\Api\SeoActionController(($container->privates['Shopware\\Core\\Content\\Seo\\SeoUrlGenerator'] ?? self::getSeoUrlGeneratorService($container)), ($container->privates['Shopware\\Core\\Content\\Seo\\SeoUrlPersister'] ?? self::getSeoUrlPersisterService($container)), $a, ($container->privates['Shopware\\Core\\Content\\Seo\\SeoUrlRoute\\SeoUrlRouteRegistry'] ?? self::getSeoUrlRouteRegistryService($container)), new \Shopware\Core\Content\Seo\Validation\SeoUrlValidationFactory(), ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)), ($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\RequestCriteriaBuilder'] ?? self::getRequestCriteriaBuilderService($container)), $a);

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Seo\EmptyPathInfoResolver' shared service.
     *
     * @return \Shopware\Core\Content\Seo\EmptyPathInfoResolver
     */
    protected static function getEmptyPathInfoResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/AbstractSeoResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/EmptyPathInfoResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoResolver.php';

        return $container->services['Shopware\\Core\\Content\\Seo\\EmptyPathInfoResolver'] = new \Shopware\Core\Content\Seo\EmptyPathInfoResolver(new \Shopware\Core\Content\Seo\SeoResolver(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container))));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Seo\Entity\Dbal\SeoUrlAssociationFieldResolver' shared service.
     *
     * @return \Shopware\Core\Content\Seo\Entity\Dbal\SeoUrlAssociationFieldResolver
     */
    protected static function getSeoUrlAssociationFieldResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldResolver/AbstractFieldResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/Entity/Dbal/SeoUrlAssociationFieldResolver.php';

        return $container->services['Shopware\\Core\\Content\\Seo\\Entity\\Dbal\\SeoUrlAssociationFieldResolver'] = new \Shopware\Core\Content\Seo\Entity\Dbal\SeoUrlAssociationFieldResolver(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityDefinitionQueryHelper()));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Seo\Entity\Serializer\SeoUrlFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Content\Seo\Entity\Serializer\SeoUrlFieldSerializer
     */
    protected static function getSeoUrlFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/OneToManyAssociationFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/Entity/Serializer/SeoUrlFieldSerializer.php';

        return $container->services['Shopware\\Core\\Content\\Seo\\Entity\\Serializer\\SeoUrlFieldSerializer'] = new \Shopware\Core\Content\Seo\Entity\Serializer\SeoUrlFieldSerializer(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\WriteCommandExtractor'] ?? self::getWriteCommandExtractorService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Seo\MainCategory\MainCategoryDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Seo\MainCategory\MainCategoryDefinition
     */
    protected static function getMainCategoryDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/MainCategory/MainCategoryDefinition.php';

        $container->services['Shopware\\Core\\Content\\Seo\\MainCategory\\MainCategoryDefinition'] = $instance = new \Shopware\Core\Content\Seo\MainCategory\MainCategoryDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Seo\MainCategory\SalesChannel\SalesChannelMainCategoryDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Seo\MainCategory\SalesChannel\SalesChannelMainCategoryDefinition
     */
    protected static function getSalesChannelMainCategoryDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/MainCategory/MainCategoryDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/MainCategory/SalesChannel/SalesChannelMainCategoryDefinition.php';

        $container->services['Shopware\\Core\\Content\\Seo\\MainCategory\\SalesChannel\\SalesChannelMainCategoryDefinition'] = $instance = new \Shopware\Core\Content\Seo\MainCategory\SalesChannel\SalesChannelMainCategoryDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Seo\SalesChannel\SeoUrlRoute' shared service.
     *
     * @return \Shopware\Core\Content\Seo\SalesChannel\SeoUrlRoute
     */
    protected static function getSeoUrlRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SalesChannel/AbstractSeoUrlRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SalesChannel/SeoUrlRoute.php';

        return $container->services['Shopware\\Core\\Content\\Seo\\SalesChannel\\SeoUrlRoute'] = new \Shopware\Core\Content\Seo\SalesChannel\SeoUrlRoute(($container->services['sales_channel.seo_url.repository'] ?? self::getSalesChannel_SeoUrl_RepositoryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Seo\SeoUrlPlaceholderHandlerInterface' shared service.
     *
     * @return \Shopware\Core\Content\Seo\SeoUrlPlaceholderHandler
     */
    protected static function getSeoUrlPlaceholderHandlerInterfaceService($container)
    {
        return $container->services['Shopware\\Core\\Content\\Seo\\SeoUrlPlaceholderHandlerInterface'] = new \Shopware\Core\Content\Seo\SeoUrlPlaceholderHandler(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->privates['router.default'] ?? self::getRouter_DefaultService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Content\Seo\SeoUrlTemplate\SeoUrlTemplateDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Seo\SeoUrlTemplate\SeoUrlTemplateDefinition
     */
    protected static function getSeoUrlTemplateDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlTemplate/SeoUrlTemplateDefinition.php';

        $container->services['Shopware\\Core\\Content\\Seo\\SeoUrlTemplate\\SeoUrlTemplateDefinition'] = $instance = new \Shopware\Core\Content\Seo\SeoUrlTemplate\SeoUrlTemplateDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Seo\SeoUrl\SalesChannel\SalesChannelSeoUrlDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Seo\SeoUrl\SalesChannel\SalesChannelSeoUrlDefinition
     */
    protected static function getSalesChannelSeoUrlDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Content\\Seo\\SeoUrl\\SalesChannel\\SalesChannelSeoUrlDefinition'] = $instance = new \Shopware\Core\Content\Seo\SeoUrl\SalesChannel\SalesChannelSeoUrlDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Seo\SeoUrl\SeoUrlDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Seo\SeoUrl\SeoUrlDefinition
     */
    protected static function getSeoUrlDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Content\\Seo\\SeoUrl\\SeoUrlDefinition'] = $instance = new \Shopware\Core\Content\Seo\SeoUrl\SeoUrlDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Content\Sitemap\SalesChannel\CachedSitemapRoute' shared service.
     *
     * @return \Shopware\Core\Content\Sitemap\SalesChannel\CachedSitemapRoute
     */
    protected static function getCachedSitemapRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/SalesChannel/AbstractSitemapRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/SalesChannel/CachedSitemapRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/SalesChannel/SitemapRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Service/SitemapListerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Service/SitemapLister.php';

        $a = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        return $container->services['Shopware\\Core\\Content\\Sitemap\\SalesChannel\\CachedSitemapRoute'] = new \Shopware\Core\Content\Sitemap\SalesChannel\CachedSitemapRoute(new \Shopware\Core\Content\Sitemap\SalesChannel\SitemapRoute(new \Shopware\Core\Content\Sitemap\Service\SitemapLister(($container->services['shopware.filesystem.sitemap'] ?? self::getShopware_Filesystem_SitemapService($container)), ($container->privates['shopware.asset.sitemap'] ?? self::getShopware_Asset_SitemapService($container))), $a, ($container->privates['Shopware\\Core\\Content\\Sitemap\\Service\\SitemapExporter'] ?? self::getSitemapExporterService($container))), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator()), ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? self::getCacheTracerService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), [], $a);
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Adapter\Asset\AssetPackageService' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Asset\AssetPackageService
     *
     * @deprecated Since shopware/core 6.6.0.0: tag:v6.6.0 - The Shopware\Core\Framework\Adapter\Asset\AssetPackageService service will be removed in v6.6.0.0
     */
    protected static function getAssetPackageServiceService($container)
    {
        trigger_deprecation('shopware/core', '6.6.0.0', 'tag:v6.6.0 - The Shopware\\Core\\Framework\\Adapter\\Asset\\AssetPackageService service will be removed in v6.6.0.0');

        return $container->services['Shopware\\Core\\Framework\\Adapter\\Asset\\AssetPackageService'] = new \Shopware\Core\Framework\Adapter\Asset\AssetPackageService();
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Adapter\Cache\CacheIdLoader' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Cache\CacheIdLoader
     */
    protected static function getCacheIdLoaderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/CacheIdLoader.php';

        return $container->services['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheIdLoader'] = new \Shopware\Core\Framework\Adapter\Cache\CacheIdLoader(($container->privates['Shopware\\Core\\Framework\\Adapter\\Storage\\AbstractKeyValueStorage'] ?? self::getAbstractKeyValueStorageService($container)), ($container->privates['cache.messenger.restart_workers_signal'] ?? self::getCache_Messenger_RestartWorkersSignalService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Adapter\Cache\Script\Facade\CacheInvalidatorFacadeHookFactory' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Cache\Script\Facade\CacheInvalidatorFacadeHookFactory
     */
    protected static function getCacheInvalidatorFacadeHookFactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Execution/Awareness/HookServiceFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/Script/Facade/CacheInvalidatorFacadeHookFactory.php';

        return $container->services['Shopware\\Core\\Framework\\Adapter\\Cache\\Script\\Facade\\CacheInvalidatorFacadeHookFactory'] = new \Shopware\Core\Framework\Adapter\Cache\Script\Facade\CacheInvalidatorFacadeHookFactory(($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] ?? self::getCacheInvalidatorService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Adapter\Twig\AppTemplateIterator' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Twig\AppTemplateIterator
     */
    protected static function getAppTemplateIteratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/AppTemplateIterator.php';

        return $container->services['Shopware\\Core\\Framework\\Adapter\\Twig\\AppTemplateIterator'] = new \Shopware\Core\Framework\Adapter\Twig\AppTemplateIterator(($container->services['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateIterator'] ?? self::getTemplateIteratorService($container)), ($container->services['app_template.repository'] ?? self::getAppTemplate_RepositoryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Adapter\Twig\TemplateFinder' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Twig\TemplateFinder
     */
    protected static function getTemplateFinderService($container)
    {
        $a = ($container->services['twig'] ?? self::getTwigService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder'])) {
            return $container->services['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder'];
        }

        return $container->services['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder'] = new \Shopware\Core\Framework\Adapter\Twig\TemplateFinder($a, ($container->privates['twig.loader.chain'] ?? self::getTwig_Loader_ChainService($container)), ($container->targetDir.''.'/twig'), new \Shopware\Core\Framework\Adapter\Twig\NamespaceHierarchy\NamespaceHierarchyBuilder(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\NamespaceHierarchy\\BundleHierarchyBuilder'] ?? self::getBundleHierarchyBuilderService($container));
            yield 1 => ($container->privates['Shopware\\Storefront\\Theme\\Twig\\ThemeNamespaceHierarchyBuilder'] ?? self::getThemeNamespaceHierarchyBuilderService($container));
        }, 2)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateScopeDetector'] ?? self::getTemplateScopeDetectorService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Adapter\Twig\TemplateIterator' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Twig\TemplateIterator
     */
    protected static function getTemplateIteratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/TemplateIterator.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bundle/TemplateIterator.php';

        return $container->services['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateIterator'] = new \Shopware\Core\Framework\Adapter\Twig\TemplateIterator(new \Symfony\Bundle\TwigBundle\TemplateIterator(($container->services['kernel'] ?? $container->get('kernel', 1)), [(\dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Resources/views/Email') => 'email'], (\dirname(__DIR__, 4).'/templates'), []), $container->parameters['kernel.bundles']);
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Api\Acl\AclCriteriaValidator' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Acl\AclCriteriaValidator
     */
    protected static function getAclCriteriaValidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Acl/AclCriteriaValidator.php';

        return $container->services['Shopware\\Core\\Framework\\Api\\Acl\\AclCriteriaValidator'] = new \Shopware\Core\Framework\Api\Acl\AclCriteriaValidator(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Api\Acl\Role\AclRoleDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Acl\Role\AclRoleDefinition
     */
    protected static function getAclRoleDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Acl/Role/AclRoleDefinition.php';

        $container->services['Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclRoleDefinition'] = $instance = new \Shopware\Core\Framework\Api\Acl\Role\AclRoleDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Api\Acl\Role\AclUserRoleDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Acl\Role\AclUserRoleDefinition
     */
    protected static function getAclUserRoleDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Acl/Role/AclUserRoleDefinition.php';

        $container->services['Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclUserRoleDefinition'] = $instance = new \Shopware\Core\Framework\Api\Acl\Role\AclUserRoleDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Api\Controller\AccessKeyController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\AccessKeyController
     */
    protected static function getAccessKeyControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/AccessKeyController.php';

        $container->services['Shopware\\Core\\Framework\\Api\\Controller\\AccessKeyController'] = $instance = new \Shopware\Core\Framework\Api\Controller\AccessKeyController();

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Api\Controller\AclController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\AclController
     */
    protected static function getAclControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/AclController.php';

        $container->services['Shopware\\Core\\Framework\\Api\\Controller\\AclController'] = $instance = new \Shopware\Core\Framework\Api\Controller\AclController(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['router'] ?? self::getRouterService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Api\Controller\ApiController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\ApiController
     */
    protected static function getApiControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/ApiController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/RequestCriteriaBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/Parser/AggregationParser.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityProtection/EntityProtectionValidator.php';

        $container->services['Shopware\\Core\\Framework\\Api\\Controller\\ApiController'] = $instance = new \Shopware\Core\Framework\Api\Controller\ApiController(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->privates['serializer'] ?? self::getSerializerService($container)), new \Shopware\Core\Framework\DataAbstractionLayer\Search\RequestCriteriaBuilder(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Parser\\AggregationParser'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Search\Parser\AggregationParser()), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\ApiCriteriaValidator'] ?? self::getApiCriteriaValidatorService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\CriteriaArrayConverter'] ?? self::getCriteriaArrayConverterService($container)), NULL), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityProtection\\EntityProtectionValidator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\EntityProtection\EntityProtectionValidator()), ($container->services['Shopware\\Core\\Framework\\Api\\Acl\\AclCriteriaValidator'] ?? self::getAclCriteriaValidatorService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Api\Controller\AuthController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\AuthController
     */
    protected static function getAuthControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/AuthController.php';

        $container->services['Shopware\\Core\\Framework\\Api\\Controller\\AuthController'] = $instance = new \Shopware\Core\Framework\Api\Controller\AuthController(($container->privates['shopware.api.authorization_server'] ?? self::getShopware_Api_AuthorizationServerService($container)), ($container->privates['Symfony\\Bridge\\PsrHttpMessage\\Factory\\PsrHttpFactory'] ?? self::getPsrHttpFactoryService($container)), ($container->privates['shopware.rate_limiter'] ?? self::getShopware_RateLimiterService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Api\Controller\CacheController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\CacheController
     */
    protected static function getCacheControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/CacheController.php';

        $container->services['Shopware\\Core\\Framework\\Api\\Controller\\CacheController'] = $instance = new \Shopware\Core\Framework\Api\Controller\CacheController(($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'] ?? self::getCacheClearerService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\CacheWarmer'] ?? self::getCacheWarmer2Service($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'] ?? self::getEntityIndexerRegistryService($container)));

        $instance->setContainer((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'http_kernel' => ['services', 'http_kernel', 'getHttpKernelService', false],
            'parameter_bag' => ['privates', 'parameter_bag', 'getParameterBagService', false],
            'request_stack' => ['services', 'request_stack', 'getRequestStackService', false],
            'router' => ['services', 'router', 'getRouterService', false],
            'serializer' => ['privates', 'serializer', 'getSerializerService', false],
            'twig' => ['services', 'twig', 'getTwigService', false],
        ], [
            'http_kernel' => '?',
            'parameter_bag' => '?',
            'request_stack' => '?',
            'router' => '?',
            'serializer' => '?',
            'twig' => '?',
        ]))->withContext('Shopware\\Core\\Framework\\Api\\Controller\\CacheController', $container));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Api\Controller\CustomSnippetFormatController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\CustomSnippetFormatController
     */
    protected static function getCustomSnippetFormatControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/CustomSnippetFormatController.php';

        return $container->services['Shopware\\Core\\Framework\\Api\\Controller\\CustomSnippetFormatController'] = new \Shopware\Core\Framework\Api\Controller\CustomSnippetFormatController(($container->services['Shopware\\Core\\Framework\\Plugin\\KernelPluginCollection'] ?? self::getKernelPluginCollectionService($container)), ($container->services['twig'] ?? self::getTwigService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Api\Controller\FallbackController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\FallbackController
     */
    protected static function getFallbackControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/FallbackController.php';

        $container->services['Shopware\\Core\\Framework\\Api\\Controller\\FallbackController'] = $instance = new \Shopware\Core\Framework\Api\Controller\FallbackController();

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Api\Controller\IndexingController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\IndexingController
     */
    protected static function getIndexingControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/IndexingController.php';

        $container->services['Shopware\\Core\\Framework\\Api\\Controller\\IndexingController'] = $instance = new \Shopware\Core\Framework\Api\Controller\IndexingController(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'] ?? self::getEntityIndexerRegistryService($container)), ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Api\Controller\InfoController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\InfoController
     */
    protected static function getInfoControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/InfoController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Service/AppUrlVerifier.php';

        $a = ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container));

        $container->services['Shopware\\Core\\Framework\\Api\\Controller\\InfoController'] = $instance = new \Shopware\Core\Framework\Api\Controller\InfoController(($container->privates['Shopware\\Core\\Framework\\Api\\ApiDefinition\\DefinitionService'] ?? self::getDefinitionServiceService($container)), ($container->privates['parameter_bag'] ??= new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($container)), ($container->services['kernel'] ?? $container->get('kernel', 1)), ($container->privates['assets.packages'] ?? self::getAssets_PackagesService($container)), ($container->services['Shopware\\Core\\Framework\\Event\\BusinessEventCollector'] ?? self::getBusinessEventCollectorService($container)), ($container->services['shopware.increment.gateway.registry'] ?? self::getShopware_Increment_Gateway_RegistryService($container)), $a, new \Shopware\Core\Maintenance\System\Service\AppUrlVerifier(new \GuzzleHttp\Client(), $a, 'dev', $container->getEnv('bool:APP_URL_CHECK_DISABLED')), ($container->privates['Shopware\\Core\\Content\\Flow\\Api\\FlowActionCollector'] ?? self::getFlowActionCollectorService($container)), true, $container->parameters['shopware.security.csp_templates']);

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Api\Controller\IntegrationController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\IntegrationController
     */
    protected static function getIntegrationControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/IntegrationController.php';

        $container->services['Shopware\\Core\\Framework\\Api\\Controller\\IntegrationController'] = $instance = new \Shopware\Core\Framework\Api\Controller\IntegrationController(($container->services['integration.repository'] ?? self::getIntegration_RepositoryService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Api\Controller\SalesChannelProxyController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\SalesChannelProxyController
     */
    protected static function getSalesChannelProxyControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/SalesChannelProxyController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/ApiOrderCartService.php';

        $a = ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'] ?? self::getSalesChannelContextPersisterService($container));
        $b = ($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? self::getCartServiceService($container));

        $container->services['Shopware\\Core\\Framework\\Api\\Controller\\SalesChannelProxyController'] = $instance = new \Shopware\Core\Framework\Api\Controller\SalesChannelProxyController(($container->services['kernel'] ?? $container->get('kernel', 1)), ($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container)), ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)), $a, ($container->privates['Shopware\\Core\\Framework\\Routing\\SalesChannelRequestContextResolver'] ?? self::getSalesChannelRequestContextResolverService($container)), ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? self::getSalesChannelContextServiceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), new \Shopware\Core\Checkout\Cart\ApiOrderCartService($b, $a), ($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartOrderRoute'] ?? self::getCartOrderRouteService($container)), $b, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Api\Controller\SyncController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\SyncController
     */
    protected static function getSyncControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/SyncController.php';

        $container->services['Shopware\\Core\\Framework\\Api\\Controller\\SyncController'] = $instance = new \Shopware\Core\Framework\Api\Controller\SyncController(($container->services['Shopware\\Core\\Framework\\Api\\Sync\\SyncService'] ?? self::getSyncServiceService($container)), ($container->privates['serializer'] ?? self::getSerializerService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Api\Controller\UserController' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Controller\UserController
     */
    protected static function getUserControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/UserController.php';

        $container->services['Shopware\\Core\\Framework\\Api\\Controller\\UserController'] = $instance = new \Shopware\Core\Framework\Api\Controller\UserController(($container->services['user.repository'] ?? self::getUser_RepositoryService($container)), ($container->services['acl_user_role.repository'] ?? self::getAclUserRole_RepositoryService($container)), ($container->services['acl_role.repository'] ?? self::getAclRole_RepositoryService($container)), ($container->services['user_access_key.repository'] ?? self::getUserAccessKey_RepositoryService($container)), ($container->services['Shopware\\Core\\System\\User\\UserDefinition'] ?? self::getUserDefinitionService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Api\Sync\SyncService' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Sync\SyncService
     */
    protected static function getSyncServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Sync/SyncServiceInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Sync/SyncService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Sync/SyncFkResolver.php';

        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? self::getEntityWriterService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\Api\\Sync\\SyncService'])) {
            return $container->services['Shopware\\Core\\Framework\\Api\\Sync\\SyncService'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\Api\\Sync\\SyncService'])) {
            return $container->services['Shopware\\Core\\Framework\\Api\\Sync\\SyncService'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\Api\\Sync\\SyncService'])) {
            return $container->services['Shopware\\Core\\Framework\\Api\\Sync\\SyncService'];
        }
        $d = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container));

        return $container->services['Shopware\\Core\\Framework\\Api\\Sync\\SyncService'] = new \Shopware\Core\Framework\Api\Sync\SyncService($a, $b, $d, $c, ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\RequestCriteriaBuilder'] ?? self::getRequestCriteriaBuilderService($container)), new \Shopware\Core\Framework\Api\Sync\SyncFkResolver($d, new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Content\\Product\\Api\\ProductNumberFkResolver'] ?? self::getProductNumberFkResolverService($container));
        }, 1)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\Aggregate\ActionButtonTranslation\ActionButtonTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\ActionButtonTranslation\ActionButtonTranslationDefinition
     */
    protected static function getActionButtonTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/ActionButtonTranslation/ActionButtonTranslationDefinition.php';

        $container->services['Shopware\\Core\\Framework\\App\\Aggregate\\ActionButtonTranslation\\ActionButtonTranslationDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\ActionButtonTranslation\ActionButtonTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\Aggregate\ActionButton\ActionButtonDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\ActionButton\ActionButtonDefinition
     */
    protected static function getActionButtonDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/ActionButton/ActionButtonDefinition.php';

        $container->services['Shopware\\Core\\Framework\\App\\Aggregate\\ActionButton\\ActionButtonDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\ActionButton\ActionButtonDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\Aggregate\AppPaymentMethod\AppPaymentMethodDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\AppPaymentMethod\AppPaymentMethodDefinition
     */
    protected static function getAppPaymentMethodDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Framework\\App\\Aggregate\\AppPaymentMethod\\AppPaymentMethodDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\AppPaymentMethod\AppPaymentMethodDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\Aggregate\AppScriptConditionTranslation\AppScriptConditionTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\AppScriptConditionTranslation\AppScriptConditionTranslationDefinition
     */
    protected static function getAppScriptConditionTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/AppScriptConditionTranslation/AppScriptConditionTranslationDefinition.php';

        $container->services['Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptConditionTranslation\\AppScriptConditionTranslationDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\AppScriptConditionTranslation\AppScriptConditionTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\Aggregate\AppScriptCondition\AppScriptConditionDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\AppScriptCondition\AppScriptConditionDefinition
     */
    protected static function getAppScriptConditionDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/AppScriptCondition/AppScriptConditionDefinition.php';

        $container->services['Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptCondition\\AppScriptConditionDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\AppScriptCondition\AppScriptConditionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\Aggregate\AppShippingMethod\AppShippingMethodDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\AppShippingMethod\AppShippingMethodDefinition
     */
    protected static function getAppShippingMethodDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/AppShippingMethod/AppShippingMethodDefinition.php';

        $container->services['Shopware\\Core\\Framework\\App\\Aggregate\\AppShippingMethod\\AppShippingMethodDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\AppShippingMethod\AppShippingMethodDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\Aggregate\AppTranslation\AppTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\AppTranslation\AppTranslationDefinition
     */
    protected static function getAppTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/AppTranslation/AppTranslationDefinition.php';

        $container->services['Shopware\\Core\\Framework\\App\\Aggregate\\AppTranslation\\AppTranslationDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\AppTranslation\AppTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\Aggregate\CmsBlockTranslation\AppCmsBlockTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\CmsBlockTranslation\AppCmsBlockTranslationDefinition
     */
    protected static function getAppCmsBlockTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/CmsBlockTranslation/AppCmsBlockTranslationDefinition.php';

        $container->services['Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlockTranslation\\AppCmsBlockTranslationDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\CmsBlockTranslation\AppCmsBlockTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\Aggregate\CmsBlock\AppCmsBlockDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\CmsBlock\AppCmsBlockDefinition
     */
    protected static function getAppCmsBlockDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/CmsBlock/AppCmsBlockDefinition.php';

        $container->services['Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlock\\AppCmsBlockDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\CmsBlock\AppCmsBlockDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\Aggregate\FlowActionTranslation\AppFlowActionTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\FlowActionTranslation\AppFlowActionTranslationDefinition
     */
    protected static function getAppFlowActionTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/FlowActionTranslation/AppFlowActionTranslationDefinition.php';

        $container->services['Shopware\\Core\\Framework\\App\\Aggregate\\FlowActionTranslation\\AppFlowActionTranslationDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\FlowActionTranslation\AppFlowActionTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\Aggregate\FlowAction\AppFlowActionDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\FlowAction\AppFlowActionDefinition
     */
    protected static function getAppFlowActionDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/FlowAction/AppFlowActionDefinition.php';

        $container->services['Shopware\\Core\\Framework\\App\\Aggregate\\FlowAction\\AppFlowActionDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\FlowAction\AppFlowActionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\Aggregate\FlowEvent\AppFlowEventDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\FlowEvent\AppFlowEventDefinition
     */
    protected static function getAppFlowEventDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/FlowEvent/AppFlowEventDefinition.php';

        $container->services['Shopware\\Core\\Framework\\App\\Aggregate\\FlowEvent\\AppFlowEventDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\FlowEvent\AppFlowEventDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\Api\AppActionController' shared service.
     *
     * @return \Shopware\Core\Framework\App\Api\AppActionController
     */
    protected static function getAppActionControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Api/AppActionController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ActionButton/ActionButtonLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ActionButton/AppActionLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Manifest/ModuleLoader.php';

        $a = ($container->services['app_action_button.repository'] ?? self::getAppActionButton_RepositoryService($container));
        $b = ($container->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'] ?? self::getShopIdProviderService($container));

        $container->services['Shopware\\Core\\Framework\\App\\Api\\AppActionController'] = $instance = new \Shopware\Core\Framework\App\Api\AppActionController(new \Shopware\Core\Framework\App\ActionButton\ActionButtonLoader($a), new \Shopware\Core\Framework\App\ActionButton\AppActionLoader($container->getEnv('APP_URL'), $a, $b), ($container->privates['Shopware\\Core\\Framework\\App\\ActionButton\\Executor'] ?? self::getExecutorService($container)), new \Shopware\Core\Framework\App\Manifest\ModuleLoader(($container->services['app.repository'] ?? self::getApp_RepositoryService($container)), $b, ($container->privates['Shopware\\Core\\Framework\\App\\Hmac\\QuerySigner'] ?? self::getQuerySignerService($container))));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\Api\AppCmsController' shared service.
     *
     * @return \Shopware\Core\Framework\App\Api\AppCmsController
     */
    protected static function getAppCmsControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Api/AppCmsController.php';

        $container->services['Shopware\\Core\\Framework\\App\\Api\\AppCmsController'] = $instance = new \Shopware\Core\Framework\App\Api\AppCmsController(($container->services['app_cms_block.repository'] ?? self::getAppCmsBlock_RepositoryService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\Api\AppJWTGenerateRoute' shared service.
     *
     * @return \Shopware\Core\Framework\App\Api\AppJWTGenerateRoute
     */
    protected static function getAppJWTGenerateRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Api/AppJWTGenerateRoute.php';

        return $container->services['Shopware\\Core\\Framework\\App\\Api\\AppJWTGenerateRoute'] = new \Shopware\Core\Framework\App\Api\AppJWTGenerateRoute(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'] ?? self::getShopIdProviderService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\Api\AppUrlChangeController' shared service.
     *
     * @return \Shopware\Core\Framework\App\Api\AppUrlChangeController
     */
    protected static function getAppUrlChangeControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Api/AppUrlChangeController.php';

        $container->services['Shopware\\Core\\Framework\\App\\Api\\AppUrlChangeController'] = $instance = new \Shopware\Core\Framework\App\Api\AppUrlChangeController(($container->services['Shopware\\Core\\Framework\\App\\AppUrlChangeResolver\\Resolver'] ?? self::getResolverService($container)), ($container->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'] ?? self::getShopIdProviderService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\AppDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\AppDefinition
     */
    protected static function getAppDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Framework\\App\\AppDefinition'] = $instance = new \Shopware\Core\Framework\App\AppDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\AppLocaleProvider' shared service.
     *
     * @return \Shopware\Core\Framework\App\AppLocaleProvider
     */
    protected static function getAppLocaleProviderService($container)
    {
        $a = ($container->services['user.repository'] ?? self::getUser_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\App\\AppLocaleProvider'])) {
            return $container->services['Shopware\\Core\\Framework\\App\\AppLocaleProvider'];
        }

        return $container->services['Shopware\\Core\\Framework\\App\\AppLocaleProvider'] = new \Shopware\Core\Framework\App\AppLocaleProvider($a, ($container->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'] ?? self::getLanguageLocaleCodeProviderService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\AppUrlChangeResolver\Resolver' shared service.
     *
     * @return \Shopware\Core\Framework\App\AppUrlChangeResolver\Resolver
     */
    protected static function getResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/AppUrlChangeResolver/Resolver.php';

        return $container->services['Shopware\\Core\\Framework\\App\\AppUrlChangeResolver\\Resolver'] = new \Shopware\Core\Framework\App\AppUrlChangeResolver\Resolver(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Framework\\App\\AppUrlChangeResolver\\MoveShopPermanentlyStrategy'] ?? self::getMoveShopPermanentlyStrategyService($container));
            yield 1 => ($container->privates['Shopware\\Core\\Framework\\App\\AppUrlChangeResolver\\ReinstallAppsStrategy'] ?? self::getReinstallAppsStrategyService($container));
            yield 2 => ($container->privates['Shopware\\Core\\Framework\\App\\AppUrlChangeResolver\\UninstallAppsStrategy'] ?? self::getUninstallAppsStrategyService($container));
        }, 3));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\FlowAction\AppFlowActionProvider' shared service.
     *
     * @return \Shopware\Core\Framework\App\FlowAction\AppFlowActionProvider
     */
    protected static function getAppFlowActionProviderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/FlowAction/AppFlowActionProvider.php';

        return $container->services['Shopware\\Core\\Framework\\App\\FlowAction\\AppFlowActionProvider'] = new \Shopware\Core\Framework\App\FlowAction\AppFlowActionProvider(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\Webhook\\BusinessEventEncoder'] ?? self::getBusinessEventEncoderService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\StringTemplateRenderer'] ?? self::getStringTemplateRendererService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\Flow\Action\AppFlowActionProvider' shared service.
     *
     * @return \Shopware\Core\Framework\App\Flow\Action\AppFlowActionProvider
     */
    protected static function getAppFlowActionProvider2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Flow/Action/AppFlowActionProvider.php';

        return $container->services['Shopware\\Core\\Framework\\App\\Flow\\Action\\AppFlowActionProvider'] = new \Shopware\Core\Framework\App\Flow\Action\AppFlowActionProvider(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\Webhook\\BusinessEventEncoder'] ?? self::getBusinessEventEncoderService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\StringTemplateRenderer'] ?? self::getStringTemplateRendererService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\ShopId\ShopIdProvider' shared service.
     *
     * @return \Shopware\Core\Framework\App\ShopId\ShopIdProvider
     */
    protected static function getShopIdProviderService($container)
    {
        $a = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'])) {
            return $container->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'];
        }
        $b = ($container->services['app.repository'] ?? self::getApp_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'])) {
            return $container->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'];
        }

        return $container->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'] = new \Shopware\Core\Framework\App\ShopId\ShopIdProvider($a, $b);
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\Template\TemplateDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Template\TemplateDefinition
     */
    protected static function getTemplateDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Template/TemplateDefinition.php';

        $container->services['Shopware\\Core\\Framework\\App\\Template\\TemplateDefinition'] = $instance = new \Shopware\Core\Framework\App\Template\TemplateDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\App\Template\TemplateStateService' shared service.
     *
     * @return \Shopware\Core\Framework\App\Template\TemplateStateService
     */
    protected static function getTemplateStateServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Template/TemplateStateService.php';

        $a = ($container->services['app_template.repository'] ?? self::getAppTemplate_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\App\\Template\\TemplateStateService'])) {
            return $container->services['Shopware\\Core\\Framework\\App\\Template\\TemplateStateService'];
        }

        return $container->services['Shopware\\Core\\Framework\\App\\Template\\TemplateStateService'] = new \Shopware\Core\Framework\App\Template\TemplateStateService($a);
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator
     */
    protected static function getEntityCacheKeyGeneratorService($container)
    {
        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator();
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityHydrator' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityHydrator
     */
    protected static function getEntityHydratorService($container)
    {
        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityHydrator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityHydrator($container);
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\ConfigJsonFieldAccessorBuilder' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\ConfigJsonFieldAccessorBuilder
     */
    protected static function getConfigJsonFieldAccessorBuilderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/FieldAccessorBuilderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/JsonFieldAccessorBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/ConfigJsonFieldAccessorBuilder.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldAccessorBuilder\\ConfigJsonFieldAccessorBuilder'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\ConfigJsonFieldAccessorBuilder(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\CustomFieldsAccessorBuilder' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\CustomFieldsAccessorBuilder
     */
    protected static function getCustomFieldsAccessorBuilderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/FieldAccessorBuilderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/JsonFieldAccessorBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/CustomFieldsAccessorBuilder.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldAccessorBuilder\\CustomFieldsAccessorBuilder'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\CustomFieldsAccessorBuilder(($container->privates['Shopware\\Core\\System\\CustomField\\CustomFieldService'] ?? self::getCustomFieldServiceService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\DefaultFieldAccessorBuilder' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\DefaultFieldAccessorBuilder
     */
    protected static function getDefaultFieldAccessorBuilderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/FieldAccessorBuilderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/DefaultFieldAccessorBuilder.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldAccessorBuilder\\DefaultFieldAccessorBuilder'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\DefaultFieldAccessorBuilder();
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\JsonFieldAccessorBuilder' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\JsonFieldAccessorBuilder
     */
    protected static function getJsonFieldAccessorBuilderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/FieldAccessorBuilderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/JsonFieldAccessorBuilder.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldAccessorBuilder\\JsonFieldAccessorBuilder'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\JsonFieldAccessorBuilder(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\PriceFieldAccessorBuilder' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\PriceFieldAccessorBuilder
     */
    protected static function getPriceFieldAccessorBuilderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/FieldAccessorBuilderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldAccessorBuilder/PriceFieldAccessorBuilder.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldAccessorBuilder\\PriceFieldAccessorBuilder'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldAccessorBuilder\PriceFieldAccessorBuilder(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\ManyToManyAssociationFieldResolver' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\ManyToManyAssociationFieldResolver
     */
    protected static function getManyToManyAssociationFieldResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldResolver/AbstractFieldResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldResolver/ManyToManyAssociationFieldResolver.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldResolver\\ManyToManyAssociationFieldResolver'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\ManyToManyAssociationFieldResolver();
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\ManyToOneAssociationFieldResolver' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\ManyToOneAssociationFieldResolver
     */
    protected static function getManyToOneAssociationFieldResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldResolver/AbstractFieldResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldResolver/ManyToOneAssociationFieldResolver.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldResolver\\ManyToOneAssociationFieldResolver'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\ManyToOneAssociationFieldResolver(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityDefinitionQueryHelper()), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\OneToManyAssociationFieldResolver' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\OneToManyAssociationFieldResolver
     */
    protected static function getOneToManyAssociationFieldResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldResolver/AbstractFieldResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldResolver/OneToManyAssociationFieldResolver.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldResolver\\OneToManyAssociationFieldResolver'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\OneToManyAssociationFieldResolver();
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\TranslationFieldResolver' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\TranslationFieldResolver
     */
    protected static function getTranslationFieldResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldResolver/AbstractFieldResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/FieldResolver/TranslationFieldResolver.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\FieldResolver\\TranslationFieldResolver'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\TranslationFieldResolver(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\JoinGroupBuilder' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\JoinGroupBuilder
     */
    protected static function getJoinGroupBuilderService($container)
    {
        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\JoinGroupBuilder'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\JoinGroupBuilder();
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\DefinitionInstanceRegistry' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\DefinitionInstanceRegistry
     */
    protected static function getDefinitionInstanceRegistryService($container)
    {
        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] = new \Shopware\Core\Framework\DataAbstractionLayer\DefinitionInstanceRegistry($container, ['log_entry' => 'Shopware\\Core\\Framework\\Log\\LogEntryDefinition', 'acl_role' => 'Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclRoleDefinition', 'acl_user_role' => 'Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclUserRoleDefinition', 'app' => 'Shopware\\Core\\Framework\\App\\AppDefinition', 'app_translation' => 'Shopware\\Core\\Framework\\App\\Aggregate\\AppTranslation\\AppTranslationDefinition', 'app_action_button' => 'Shopware\\Core\\Framework\\App\\Aggregate\\ActionButton\\ActionButtonDefinition', 'app_action_button_translation' => 'Shopware\\Core\\Framework\\App\\Aggregate\\ActionButtonTranslation\\ActionButtonTranslationDefinition', 'app_template' => 'Shopware\\Core\\Framework\\App\\Template\\TemplateDefinition', 'app_payment_method' => 'Shopware\\Core\\Framework\\App\\Aggregate\\AppPaymentMethod\\AppPaymentMethodDefinition', 'app_script_condition' => 'Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptCondition\\AppScriptConditionDefinition', 'app_script_condition_translation' => 'Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptConditionTranslation\\AppScriptConditionTranslationDefinition', 'app_cms_block' => 'Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlock\\AppCmsBlockDefinition', 'app_cms_block_translation' => 'Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlockTranslation\\AppCmsBlockTranslationDefinition', 'app_flow_action' => 'Shopware\\Core\\Framework\\App\\Aggregate\\FlowAction\\AppFlowActionDefinition', 'app_flow_action_translation' => 'Shopware\\Core\\Framework\\App\\Aggregate\\FlowActionTranslation\\AppFlowActionTranslationDefinition', 'app_flow_event' => 'Shopware\\Core\\Framework\\App\\Aggregate\\FlowEvent\\AppFlowEventDefinition', 'app_shipping_method' => 'Shopware\\Core\\Framework\\App\\Aggregate\\AppShippingMethod\\AppShippingMethodDefinition', 'custom_field' => 'Shopware\\Core\\System\\CustomField\\CustomFieldDefinition', 'custom_field_set' => 'Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSet\\CustomFieldSetDefinition', 'custom_field_set_relation' => 'Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSetRelation\\CustomFieldSetRelationDefinition', 'version' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\VersionDefinition', 'version_commit' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommit\\VersionCommitDefinition', 'version_commit_data' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommitData\\VersionCommitDataDefinition', 'plugin' => 'Shopware\\Core\\Framework\\Plugin\\PluginDefinition', 'plugin_translation' => 'Shopware\\Core\\Framework\\Plugin\\Aggregate\\PluginTranslation\\PluginTranslationDefinition', 'scheduled_task' => 'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\ScheduledTaskDefinition', 'script' => 'Shopware\\Core\\Framework\\Script\\ScriptDefinition', 'language' => 'Shopware\\Core\\System\\Language\\LanguageDefinition', 'seo_url' => 'Shopware\\Core\\Content\\Seo\\SeoUrl\\SeoUrlDefinition', 'seo_url_template' => 'Shopware\\Core\\Content\\Seo\\SeoUrlTemplate\\SeoUrlTemplateDefinition', 'main_category' => 'Shopware\\Core\\Content\\Seo\\MainCategory\\MainCategoryDefinition', 'webhook' => 'Shopware\\Core\\Framework\\Webhook\\WebhookDefinition', 'webhook_event_log' => 'Shopware\\Core\\Framework\\Webhook\\EventLog\\WebhookEventLogDefinition', 'sales_channel' => 'Shopware\\Core\\System\\SalesChannel\\SalesChannelDefinition', 'sales_channel_translation' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTranslation\\SalesChannelTranslationDefinition', 'sales_channel_country' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCountry\\SalesChannelCountryDefinition', 'sales_channel_currency' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCurrency\\SalesChannelCurrencyDefinition', 'sales_channel_domain' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelDomain\\SalesChannelDomainDefinition', 'sales_channel_language' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelLanguage\\SalesChannelLanguageDefinition', 'sales_channel_payment_method' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelPaymentMethod\\SalesChannelPaymentMethodDefinition', 'sales_channel_shipping_method' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelShippingMethod\\SalesChannelShippingMethodDefinition', 'sales_channel_type' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelType\\SalesChannelTypeDefinition', 'sales_channel_type_translation' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTypeTranslation\\SalesChannelTypeTranslationDefinition', 'sales_channel_analytics' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelAnalytics\\SalesChannelAnalyticsDefinition', 'country' => 'Shopware\\Core\\System\\Country\\CountryDefinition', 'country_state' => 'Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\CountryStateDefinition', 'country_state_translation' => 'Shopware\\Core\\System\\Country\\Aggregate\\CountryStateTranslation\\CountryStateTranslationDefinition', 'country_translation' => 'Shopware\\Core\\System\\Country\\Aggregate\\CountryTranslation\\CountryTranslationDefinition', 'currency' => 'Shopware\\Core\\System\\Currency\\CurrencyDefinition', 'currency_country_rounding' => 'Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyCountryRounding\\CurrencyCountryRoundingDefinition', 'currency_translation' => 'Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyTranslation\\CurrencyTranslationDefinition', 'custom_entity' => 'Shopware\\Core\\System\\CustomEntity\\CustomEntityDefinition', 'locale' => 'Shopware\\Core\\System\\Locale\\LocaleDefinition', 'locale_translation' => 'Shopware\\Core\\System\\Locale\\Aggregate\\LocaleTranslation\\LocaleTranslationDefinition', 'snippet_set' => 'Shopware\\Core\\System\\Snippet\\Aggregate\\SnippetSet\\SnippetSetDefinition', 'snippet' => 'Shopware\\Core\\System\\Snippet\\SnippetDefinition', 'salutation' => 'Shopware\\Core\\System\\Salutation\\SalutationDefinition', 'salutation_translation' => 'Shopware\\Core\\System\\Salutation\\Aggregate\\SalutationTranslation\\SalutationTranslationDefinition', 'tax' => 'Shopware\\Core\\System\\Tax\\TaxDefinition', 'tax_rule' => 'Shopware\\Core\\System\\Tax\\Aggregate\\TaxRule\\TaxRuleDefinition', 'tax_rule_type' => 'Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleType\\TaxRuleTypeDefinition', 'tax_rule_type_translation' => 'Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleTypeTranslation\\TaxRuleTypeTranslationDefinition', 'tax_provider' => 'Shopware\\Core\\System\\TaxProvider\\TaxProviderDefinition', 'tax_provider_translation' => 'Shopware\\Core\\System\\TaxProvider\\Aggregate\\TaxProviderTranslation\\TaxProviderTranslationDefinition', 'unit' => 'Shopware\\Core\\System\\Unit\\UnitDefinition', 'unit_translation' => 'Shopware\\Core\\System\\Unit\\Aggregate\\UnitTranslation\\UnitTranslationDefinition', 'user' => 'Shopware\\Core\\System\\User\\UserDefinition', 'user_config' => 'Shopware\\Core\\System\\User\\Aggregate\\UserConfig\\UserConfigDefinition', 'user_access_key' => 'Shopware\\Core\\System\\User\\Aggregate\\UserAccessKey\\UserAccessKeyDefinition', 'user_recovery' => 'Shopware\\Core\\System\\User\\Aggregate\\UserRecovery\\UserRecoveryDefinition', 'integration' => 'Shopware\\Core\\System\\Integration\\IntegrationDefinition', 'integration_role' => 'Shopware\\Core\\System\\Integration\\Aggregate\\IntegrationRole\\IntegrationRoleDefinition', 'state_machine' => 'Shopware\\Core\\System\\StateMachine\\StateMachineDefinition', 'state_machine_translation' => 'Shopware\\Core\\System\\StateMachine\\StateMachineTranslationDefinition', 'state_machine_state' => 'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateDefinition', 'state_machine_state_translation' => 'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateTranslationDefinition', 'state_machine_transition' => 'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineTransition\\StateMachineTransitionDefinition', 'state_machine_history' => 'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineHistory\\StateMachineHistoryDefinition', 'system_config' => 'Shopware\\Core\\System\\SystemConfig\\SystemConfigDefinition', 'number_range' => 'Shopware\\Core\\System\\NumberRange\\NumberRangeDefinition', 'number_range_sales_channel' => 'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeSalesChannel\\NumberRangeSalesChannelDefinition', 'number_range_state' => 'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeState\\NumberRangeStateDefinition', 'number_range_type' => 'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeType\\NumberRangeTypeDefinition', 'number_range_type_translation' => 'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTypeTranslation\\NumberRangeTypeTranslationDefinition', 'number_range_translation' => 'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTranslation\\NumberRangeTranslationDefinition', 'tag' => 'Shopware\\Core\\System\\Tag\\TagDefinition', 'category' => 'Shopware\\Core\\Content\\Category\\CategoryDefinition', 'category_translation' => 'Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTranslation\\CategoryTranslationDefinition', 'category_tag' => 'Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTag\\CategoryTagDefinition', 'media' => 'Shopware\\Core\\Content\\Media\\MediaDefinition', 'media_default_folder' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaDefaultFolder\\MediaDefaultFolderDefinition', 'media_thumbnail' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnail\\MediaThumbnailDefinition', 'media_translation' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaTranslation\\MediaTranslationDefinition', 'media_folder' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolder\\MediaFolderDefinition', 'media_thumbnail_size' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnailSize\\MediaThumbnailSizeDefinition', 'media_folder_configuration' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfiguration\\MediaFolderConfigurationDefinition', 'media_folder_configuration_media_thumbnail_size' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfigurationMediaThumbnailSize\\MediaFolderConfigurationMediaThumbnailSizeDefinition', 'media_tag' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaTag\\MediaTagDefinition', 'product' => 'Shopware\\Core\\Content\\Product\\ProductDefinition', 'product_stream_mapping' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductStreamMapping\\ProductStreamMappingDefinition', 'product_category' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategory\\ProductCategoryDefinition', 'product_custom_field_set' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCustomFieldSet\\ProductCustomFieldSetDefinition', 'product_tag' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductTag\\ProductTagDefinition', 'product_configurator_setting' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductConfiguratorSetting\\ProductConfiguratorSettingDefinition', 'product_price' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductPrice\\ProductPriceDefinition', 'product_property' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductProperty\\ProductPropertyDefinition', 'product_search_keyword' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchKeyword\\ProductSearchKeywordDefinition', 'product_keyword_dictionary' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductKeywordDictionary\\ProductKeywordDictionaryDefinition', 'product_review' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductReview\\ProductReviewDefinition', 'product_manufacturer' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturer\\ProductManufacturerDefinition', 'product_manufacturer_translation' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturerTranslation\\ProductManufacturerTranslationDefinition', 'product_media' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductMedia\\ProductMediaDefinition', 'product_download' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductDownload\\ProductDownloadDefinition', 'product_translation' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductTranslation\\ProductTranslationDefinition', 'product_option' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductOption\\ProductOptionDefinition', 'product_category_tree' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategoryTree\\ProductCategoryTreeDefinition', 'product_cross_selling' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSelling\\ProductCrossSellingDefinition', 'product_cross_selling_translation' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingTranslation\\ProductCrossSellingTranslationDefinition', 'product_cross_selling_assigned_products' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingAssignedProducts\\ProductCrossSellingAssignedProductsDefinition', 'product_feature_set' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSet\\ProductFeatureSetDefinition', 'product_feature_set_translation' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSetTranslation\\ProductFeatureSetTranslationDefinition', 'product_sorting' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingDefinition', 'product_sorting_translation' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingTranslationDefinition', 'product_search_config' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfig\\ProductSearchConfigDefinition', 'product_search_config_field' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfigField\\ProductSearchConfigFieldDefinition', 'product_visibility' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductVisibility\\ProductVisibilityDefinition', 'delivery_time' => 'Shopware\\Core\\System\\DeliveryTime\\DeliveryTimeDefinition', 'newsletter_recipient' => 'Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipient\\NewsletterRecipientDefinition', 'newsletter_recipient_tag' => 'Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipientTag\\NewsletterRecipientTagDefinition', 'rule' => 'Shopware\\Core\\Content\\Rule\\RuleDefinition', 'rule_condition' => 'Shopware\\Core\\Content\\Rule\\Aggregate\\RuleCondition\\RuleConditionDefinition', 'rule_tag' => 'Shopware\\Core\\Content\\Rule\\Aggregate\\RuleTag\\RuleTagDefinition', 'product_stream' => 'Shopware\\Core\\Content\\ProductStream\\ProductStreamDefinition', 'product_stream_translation' => 'Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamTranslation\\ProductStreamTranslationDefinition', 'product_stream_filter' => 'Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamFilter\\ProductStreamFilterDefinition', 'product_export' => 'Shopware\\Core\\Content\\ProductExport\\ProductExportDefinition', 'property_group' => 'Shopware\\Core\\Content\\Property\\PropertyGroupDefinition', 'property_group_option' => 'Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOption\\PropertyGroupOptionDefinition', 'property_group_option_translation' => 'Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOptionTranslation\\PropertyGroupOptionTranslationDefinition', 'property_group_translation' => 'Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupTranslation\\PropertyGroupTranslationDefinition', 'cms_page' => 'Shopware\\Core\\Content\\Cms\\CmsPageDefinition', 'cms_page_translation' => 'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsPageTranslation\\CmsPageTranslationDefinition', 'cms_section' => 'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSection\\CmsSectionDefinition', 'cms_block' => 'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsBlock\\CmsBlockDefinition', 'cms_slot' => 'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlot\\CmsSlotDefinition', 'cms_slot_translation' => 'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlotTranslation\\CmsSlotTranslationDefinition', 'mail_template' => 'Shopware\\Core\\Content\\MailTemplate\\MailTemplateDefinition', 'mail_template_translation' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTranslation\\MailTemplateTranslationDefinition', 'mail_template_type' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateType\\MailTemplateTypeDefinition', 'mail_template_type_translation' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTypeTranslation\\MailTemplateTypeTranslationDefinition', 'mail_template_media' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateMedia\\MailTemplateMediaDefinition', 'mail_header_footer' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooter\\MailHeaderFooterDefinition', 'mail_header_footer_translation' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooterTranslation\\MailHeaderFooterTranslationDefinition', 'delivery_time_translation' => 'Shopware\\Core\\System\\DeliveryTime\\Aggregate\\DeliveryTimeTranslation\\DeliveryTimeTranslationDefinition', 'import_export_profile' => 'Shopware\\Core\\Content\\ImportExport\\ImportExportProfileDefinition', 'import_export_log' => 'Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportLog\\ImportExportLogDefinition', 'import_export_file' => 'Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportFile\\ImportExportFileDefinition', 'import_export_profile_translation' => 'Shopware\\Core\\Content\\ImportExport\\ImportExportProfileTranslationDefinition', 'landing_page' => 'Shopware\\Core\\Content\\LandingPage\\LandingPageDefinition', 'landing_page_translation' => 'Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTranslation\\LandingPageTranslationDefinition', 'landing_page_tag' => 'Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTag\\LandingPageTagDefinition', 'landing_page_sales_channel' => 'Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageSalesChannel\\LandingPageSalesChannelDefinition', 'flow' => 'Shopware\\Core\\Content\\Flow\\FlowDefinition', 'flow_sequence' => 'Shopware\\Core\\Content\\Flow\\Aggregate\\FlowSequence\\FlowSequenceDefinition', 'flow_template' => 'Shopware\\Core\\Content\\Flow\\Aggregate\\FlowTemplate\\FlowTemplateDefinition', 'customer' => 'Shopware\\Core\\Checkout\\Customer\\CustomerDefinition', 'customer_group_translation' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupTranslation\\CustomerGroupTranslationDefinition', 'customer_address' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerAddress\\CustomerAddressDefinition', 'customer_recovery' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerRecovery\\CustomerRecoveryDefinition', 'customer_group' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroup\\CustomerGroupDefinition', 'customer_group_registration_sales_channels' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupRegistrationSalesChannel\\CustomerGroupRegistrationSalesChannelDefinition', 'customer_tag' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerTag\\CustomerTagDefinition', 'customer_wishlist' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlist\\CustomerWishlistDefinition', 'customer_wishlist_product' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlistProduct\\CustomerWishlistProductDefinition', 'document' => 'Shopware\\Core\\Checkout\\Document\\DocumentDefinition', 'document_type' => 'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentType\\DocumentTypeDefinition', 'document_type_translation' => 'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentTypeTranslation\\DocumentTypeTranslationDefinition', 'document_base_config' => 'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfig\\DocumentBaseConfigDefinition', 'document_base_config_sales_channel' => 'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfigSalesChannel\\DocumentBaseConfigSalesChannelDefinition', 'order' => 'Shopware\\Core\\Checkout\\Order\\OrderDefinition', 'order_address' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderAddress\\OrderAddressDefinition', 'order_customer' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderCustomer\\OrderCustomerDefinition', 'order_delivery' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDelivery\\OrderDeliveryDefinition', 'order_delivery_position' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDeliveryPosition\\OrderDeliveryPositionDefinition', 'order_line_item' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItem\\OrderLineItemDefinition', 'order_line_item_download' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItemDownload\\OrderLineItemDownloadDefinition', 'order_tag' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTag\\OrderTagDefinition', 'order_transaction' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionDefinition', 'order_transaction_capture' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCapture\\OrderTransactionCaptureDefinition', 'order_transaction_capture_refund' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefund\\OrderTransactionCaptureRefundDefinition', 'order_transaction_capture_refund_position' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefundPosition\\OrderTransactionCaptureRefundPositionDefinition', 'payment_method' => 'Shopware\\Core\\Checkout\\Payment\\PaymentMethodDefinition', 'payment_method_translation' => 'Shopware\\Core\\Checkout\\Payment\\Aggregate\\PaymentMethodTranslation\\PaymentMethodTranslationDefinition', 'promotion' => 'Shopware\\Core\\Checkout\\Promotion\\PromotionDefinition', 'promotion_sales_channel' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSalesChannel\\PromotionSalesChannelDefinition', 'promotion_individual_code' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionIndividualCode\\PromotionIndividualCodeDefinition', 'promotion_discount' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscount\\PromotionDiscountDefinition', 'promotion_discount_rule' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountRule\\PromotionDiscountRuleDefinition', 'promotion_setgroup' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroup\\PromotionSetGroupDefinition', 'promotion_setgroup_rule' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroupRule\\PromotionSetGroupRuleDefinition', 'promotion_order_rule' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionOrderRule\\PromotionOrderRuleDefinition', 'promotion_persona_customer' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaCustomer\\PromotionPersonaCustomerDefinition', 'promotion_persona_rule' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaRule\\PromotionPersonaRuleDefinition', 'promotion_cart_rule' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionCartRule\\PromotionCartRuleDefinition', 'promotion_translation' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionTranslation\\PromotionTranslationDefinition', 'promotion_discount_prices' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountPrice\\PromotionDiscountPriceDefinition', 'shipping_method' => 'Shopware\\Core\\Checkout\\Shipping\\ShippingMethodDefinition', 'shipping_method_tag' => 'Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTag\\ShippingMethodTagDefinition', 'shipping_method_price' => 'Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodPrice\\ShippingMethodPriceDefinition', 'shipping_method_translation' => 'Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTranslation\\ShippingMethodTranslationDefinition', 'app_administration_snippet' => 'Shopware\\Administration\\Snippet\\AppAdministrationSnippetDefinition', 'notification' => 'Shopware\\Administration\\Notification\\NotificationDefinition', 'theme' => 'Shopware\\Storefront\\Theme\\ThemeDefinition', 'theme_translation' => 'Shopware\\Storefront\\Theme\\Aggregate\\ThemeTranslationDefinition', 'theme_sales_channel' => 'Shopware\\Storefront\\Theme\\Aggregate\\ThemeSalesChannelDefinition', 'theme_media' => 'Shopware\\Storefront\\Theme\\Aggregate\\ThemeMediaDefinition', 'theme_child' => 'Shopware\\Storefront\\Theme\\Aggregate\\ThemeChildDefinition'], ['log_entry' => 'log_entry.repository', 'acl_role' => 'acl_role.repository', 'acl_user_role' => 'acl_user_role.repository', 'app' => 'app.repository', 'app_translation' => 'app_translation.repository', 'app_action_button' => 'app_action_button.repository', 'app_action_button_translation' => 'app_action_button_translation.repository', 'app_template' => 'app_template.repository', 'app_payment_method' => 'app_payment_method.repository', 'app_script_condition' => 'app_script_condition.repository', 'app_script_condition_translation' => 'app_script_condition_translation.repository', 'app_cms_block' => 'app_cms_block.repository', 'app_cms_block_translation' => 'app_cms_block_translation.repository', 'app_flow_action' => 'app_flow_action.repository', 'app_flow_action_translation' => 'app_flow_action_translation.repository', 'app_flow_event' => 'app_flow_event.repository', 'app_shipping_method' => 'app_shipping_method.repository', 'custom_field' => 'custom_field.repository', 'custom_field_set' => 'custom_field_set.repository', 'custom_field_set_relation' => 'custom_field_set_relation.repository', 'version' => 'version.repository', 'version_commit' => 'version_commit.repository', 'version_commit_data' => 'version_commit_data.repository', 'plugin' => 'plugin.repository', 'plugin_translation' => 'plugin_translation.repository', 'scheduled_task' => 'scheduled_task.repository', 'script' => 'script.repository', 'language' => 'language.repository', 'seo_url' => 'seo_url.repository', 'seo_url_template' => 'seo_url_template.repository', 'main_category' => 'main_category.repository', 'webhook' => 'webhook.repository', 'webhook_event_log' => 'webhook_event_log.repository', 'sales_channel' => 'sales_channel.repository', 'sales_channel_translation' => 'sales_channel_translation.repository', 'sales_channel_country' => 'sales_channel_country.repository', 'sales_channel_currency' => 'sales_channel_currency.repository', 'sales_channel_domain' => 'sales_channel_domain.repository', 'sales_channel_language' => 'sales_channel_language.repository', 'sales_channel_payment_method' => 'sales_channel_payment_method.repository', 'sales_channel_shipping_method' => 'sales_channel_shipping_method.repository', 'sales_channel_type' => 'sales_channel_type.repository', 'sales_channel_type_translation' => 'sales_channel_type_translation.repository', 'sales_channel_analytics' => 'sales_channel_analytics.repository', 'country' => 'country.repository', 'country_state' => 'country_state.repository', 'country_state_translation' => 'country_state_translation.repository', 'country_translation' => 'country_translation.repository', 'currency' => 'currency.repository', 'currency_country_rounding' => 'currency_country_rounding.repository', 'currency_translation' => 'currency_translation.repository', 'custom_entity' => 'custom_entity.repository', 'locale' => 'locale.repository', 'locale_translation' => 'locale_translation.repository', 'snippet_set' => 'snippet_set.repository', 'snippet' => 'snippet.repository', 'salutation' => 'salutation.repository', 'salutation_translation' => 'salutation_translation.repository', 'tax' => 'tax.repository', 'tax_rule' => 'tax_rule.repository', 'tax_rule_type' => 'tax_rule_type.repository', 'tax_rule_type_translation' => 'tax_rule_type_translation.repository', 'tax_provider' => 'tax_provider.repository', 'tax_provider_translation' => 'tax_provider_translation.repository', 'unit' => 'unit.repository', 'unit_translation' => 'unit_translation.repository', 'user' => 'user.repository', 'user_config' => 'user_config.repository', 'user_access_key' => 'user_access_key.repository', 'user_recovery' => 'user_recovery.repository', 'integration' => 'integration.repository', 'integration_role' => 'integration_role.repository', 'state_machine' => 'state_machine.repository', 'state_machine_translation' => 'state_machine_translation.repository', 'state_machine_state' => 'state_machine_state.repository', 'state_machine_state_translation' => 'state_machine_state_translation.repository', 'state_machine_transition' => 'state_machine_transition.repository', 'state_machine_history' => 'state_machine_history.repository', 'system_config' => 'system_config.repository', 'number_range' => 'number_range.repository', 'number_range_sales_channel' => 'number_range_sales_channel.repository', 'number_range_state' => 'number_range_state.repository', 'number_range_type' => 'number_range_type.repository', 'number_range_type_translation' => 'number_range_type_translation.repository', 'number_range_translation' => 'number_range_translation.repository', 'tag' => 'tag.repository', 'category' => 'category.repository', 'category_translation' => 'category_translation.repository', 'category_tag' => 'category_tag.repository', 'media' => 'media.repository', 'media_default_folder' => 'media_default_folder.repository', 'media_thumbnail' => 'media_thumbnail.repository', 'media_translation' => 'media_translation.repository', 'media_folder' => 'media_folder.repository', 'media_thumbnail_size' => 'media_thumbnail_size.repository', 'media_folder_configuration' => 'media_folder_configuration.repository', 'media_folder_configuration_media_thumbnail_size' => 'media_folder_configuration_media_thumbnail_size.repository', 'media_tag' => 'media_tag.repository', 'product' => 'product.repository', 'product_stream_mapping' => 'product_stream_mapping.repository', 'product_category' => 'product_category.repository', 'product_custom_field_set' => 'product_custom_field_set.repository', 'product_tag' => 'product_tag.repository', 'product_configurator_setting' => 'product_configurator_setting.repository', 'product_price' => 'product_price.repository', 'product_property' => 'product_property.repository', 'product_search_keyword' => 'product_search_keyword.repository', 'product_keyword_dictionary' => 'product_keyword_dictionary.repository', 'product_review' => 'product_review.repository', 'product_manufacturer' => 'product_manufacturer.repository', 'product_manufacturer_translation' => 'product_manufacturer_translation.repository', 'product_media' => 'product_media.repository', 'product_download' => 'product_download.repository', 'product_translation' => 'product_translation.repository', 'product_option' => 'product_option.repository', 'product_category_tree' => 'product_category_tree.repository', 'product_cross_selling' => 'product_cross_selling.repository', 'product_cross_selling_translation' => 'product_cross_selling_translation.repository', 'product_cross_selling_assigned_products' => 'product_cross_selling_assigned_products.repository', 'product_feature_set' => 'product_feature_set.repository', 'product_feature_set_translation' => 'product_feature_set_translation.repository', 'product_sorting' => 'product_sorting.repository', 'product_sorting_translation' => 'product_sorting_translation.repository', 'product_search_config' => 'product_search_config.repository', 'product_search_config_field' => 'product_search_config_field.repository', 'product_visibility' => 'product_visibility.repository', 'delivery_time' => 'delivery_time.repository', 'newsletter_recipient' => 'newsletter_recipient.repository', 'newsletter_recipient_tag' => 'newsletter_recipient_tag.repository', 'rule' => 'rule.repository', 'rule_condition' => 'rule_condition.repository', 'rule_tag' => 'rule_tag.repository', 'product_stream' => 'product_stream.repository', 'product_stream_translation' => 'product_stream_translation.repository', 'product_stream_filter' => 'product_stream_filter.repository', 'product_export' => 'product_export.repository', 'property_group' => 'property_group.repository', 'property_group_option' => 'property_group_option.repository', 'property_group_option_translation' => 'property_group_option_translation.repository', 'property_group_translation' => 'property_group_translation.repository', 'cms_page' => 'cms_page.repository', 'cms_page_translation' => 'cms_page_translation.repository', 'cms_section' => 'cms_section.repository', 'cms_block' => 'cms_block.repository', 'cms_slot' => 'cms_slot.repository', 'cms_slot_translation' => 'cms_slot_translation.repository', 'mail_template' => 'mail_template.repository', 'mail_template_translation' => 'mail_template_translation.repository', 'mail_template_type' => 'mail_template_type.repository', 'mail_template_type_translation' => 'mail_template_type_translation.repository', 'mail_template_media' => 'mail_template_media.repository', 'mail_header_footer' => 'mail_header_footer.repository', 'mail_header_footer_translation' => 'mail_header_footer_translation.repository', 'delivery_time_translation' => 'delivery_time_translation.repository', 'import_export_profile' => 'import_export_profile.repository', 'import_export_log' => 'import_export_log.repository', 'import_export_file' => 'import_export_file.repository', 'import_export_profile_translation' => 'import_export_profile_translation.repository', 'landing_page' => 'landing_page.repository', 'landing_page_translation' => 'landing_page_translation.repository', 'landing_page_tag' => 'landing_page_tag.repository', 'landing_page_sales_channel' => 'landing_page_sales_channel.repository', 'flow' => 'flow.repository', 'flow_sequence' => 'flow_sequence.repository', 'flow_template' => 'flow_template.repository', 'customer' => 'customer.repository', 'customer_group_translation' => 'customer_group_translation.repository', 'customer_address' => 'customer_address.repository', 'customer_recovery' => 'customer_recovery.repository', 'customer_group' => 'customer_group.repository', 'customer_group_registration_sales_channels' => 'customer_group_registration_sales_channels.repository', 'customer_tag' => 'customer_tag.repository', 'customer_wishlist' => 'customer_wishlist.repository', 'customer_wishlist_product' => 'customer_wishlist_product.repository', 'document' => 'document.repository', 'document_type' => 'document_type.repository', 'document_type_translation' => 'document_type_translation.repository', 'document_base_config' => 'document_base_config.repository', 'document_base_config_sales_channel' => 'document_base_config_sales_channel.repository', 'order' => 'order.repository', 'order_address' => 'order_address.repository', 'order_customer' => 'order_customer.repository', 'order_delivery' => 'order_delivery.repository', 'order_delivery_position' => 'order_delivery_position.repository', 'order_line_item' => 'order_line_item.repository', 'order_line_item_download' => 'order_line_item_download.repository', 'order_tag' => 'order_tag.repository', 'order_transaction' => 'order_transaction.repository', 'order_transaction_capture' => 'order_transaction_capture.repository', 'order_transaction_capture_refund' => 'order_transaction_capture_refund.repository', 'order_transaction_capture_refund_position' => 'order_transaction_capture_refund_position.repository', 'payment_method' => 'payment_method.repository', 'payment_method_translation' => 'payment_method_translation.repository', 'promotion' => 'promotion.repository', 'promotion_sales_channel' => 'promotion_sales_channel.repository', 'promotion_individual_code' => 'promotion_individual_code.repository', 'promotion_discount' => 'promotion_discount.repository', 'promotion_discount_rule' => 'promotion_discount_rule.repository', 'promotion_setgroup' => 'promotion_setgroup.repository', 'promotion_setgroup_rule' => 'promotion_setgroup_rule.repository', 'promotion_order_rule' => 'promotion_order_rule.repository', 'promotion_persona_customer' => 'promotion_persona_customer.repository', 'promotion_persona_rule' => 'promotion_persona_rule.repository', 'promotion_cart_rule' => 'promotion_cart_rule.repository', 'promotion_translation' => 'promotion_translation.repository', 'promotion_discount_prices' => 'promotion_discount_prices.repository', 'shipping_method' => 'shipping_method.repository', 'shipping_method_tag' => 'shipping_method_tag.repository', 'shipping_method_price' => 'shipping_method_price.repository', 'shipping_method_translation' => 'shipping_method_translation.repository', 'app_administration_snippet' => 'app_administration_snippet.repository', 'notification' => 'notification.repository', 'theme' => 'theme.repository', 'theme_translation' => 'theme_translation.repository', 'theme_sales_channel' => 'theme_sales_channel.repository', 'theme_media' => 'theme_media.repository', 'theme_child' => 'theme_child.repository']);
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Event\EntityLoadedEventFactory' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Event\EntityLoadedEventFactory
     */
    protected static function getEntityLoadedEventFactoryService($container)
    {
        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] = new \Shopware\Core\Framework\DataAbstractionLayer\Event\EntityLoadedEventFactory(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\ExtensionRegistry' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\ExtensionRegistry
     */
    protected static function getExtensionRegistryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/ExtensionRegistry.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\ExtensionRegistry'] = new \Shopware\Core\Framework\DataAbstractionLayer\ExtensionRegistry(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Administration\\Notification\\Extension\\IntegrationExtension'] ??= new \Shopware\Administration\Notification\Extension\IntegrationExtension());
            yield 1 => ($container->privates['Shopware\\Administration\\Notification\\Extension\\UserExtension'] ??= new \Shopware\Administration\Notification\Extension\UserExtension());
            yield 2 => ($container->privates['Shopware\\Storefront\\Theme\\Extension\\SalesChannelExtension'] ??= new \Shopware\Storefront\Theme\Extension\SalesChannelExtension());
            yield 3 => ($container->privates['Shopware\\Storefront\\Theme\\Extension\\LanguageExtension'] ??= new \Shopware\Storefront\Theme\Extension\LanguageExtension());
            yield 4 => ($container->privates['Shopware\\Storefront\\Theme\\Extension\\MediaExtension'] ??= new \Shopware\Storefront\Theme\Extension\MediaExtension());
        }, 5));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Facade\RepositoryFacadeHookFactory' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Facade\RepositoryFacadeHookFactory
     */
    protected static function getRepositoryFacadeHookFactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Execution/Awareness/HookServiceFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Facade/RepositoryFacadeHookFactory.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Facade\\RepositoryFacadeHookFactory'] = new \Shopware\Core\Framework\DataAbstractionLayer\Facade\RepositoryFacadeHookFactory(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Facade\\AppContextCreator'] ?? self::getAppContextCreatorService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\RequestCriteriaBuilder'] ?? self::getRequestCriteriaBuilderService($container)), ($container->services['Shopware\\Core\\Framework\\Api\\Acl\\AclCriteriaValidator'] ?? self::getAclCriteriaValidatorService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Facade\RepositoryWriterFacadeHookFactory' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Facade\RepositoryWriterFacadeHookFactory
     */
    protected static function getRepositoryWriterFacadeHookFactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Execution/Awareness/HookServiceFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Facade/RepositoryWriterFacadeHookFactory.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Facade\\RepositoryWriterFacadeHookFactory'] = new \Shopware\Core\Framework\DataAbstractionLayer\Facade\RepositoryWriterFacadeHookFactory(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Facade\\AppContextCreator'] ?? self::getAppContextCreatorService($container)), ($container->services['Shopware\\Core\\Framework\\Api\\Sync\\SyncService'] ?? self::getSyncServiceService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Facade\SalesChannelRepositoryFacadeHookFactory' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Facade\SalesChannelRepositoryFacadeHookFactory
     */
    protected static function getSalesChannelRepositoryFacadeHookFactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Execution/Awareness/HookServiceFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Facade/SalesChannelRepositoryFacadeHookFactory.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Facade\\SalesChannelRepositoryFacadeHookFactory'] = new \Shopware\Core\Framework\DataAbstractionLayer\Facade\SalesChannelRepositoryFacadeHookFactory(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\RequestCriteriaBuilder'] ?? self::getRequestCriteriaBuilderService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\BlobFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\BlobFieldSerializer
     */
    protected static function getBlobFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/BlobFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\BlobFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\BlobFieldSerializer();
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\BoolFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\BoolFieldSerializer
     */
    protected static function getBoolFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/BoolFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\BoolFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\BoolFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CalculatedPriceFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CalculatedPriceFieldSerializer
     */
    protected static function getCalculatedPriceFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/JsonFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/CalculatedPriceFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CalculatedPriceFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CalculatedPriceFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CartPriceFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CartPriceFieldSerializer
     */
    protected static function getCartPriceFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/JsonFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/CartPriceFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CartPriceFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CartPriceFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CashRoundingConfigFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CashRoundingConfigFieldSerializer
     */
    protected static function getCashRoundingConfigFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/JsonFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/CashRoundingConfigFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CashRoundingConfigFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CashRoundingConfigFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ConfigJsonFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ConfigJsonFieldSerializer
     */
    protected static function getConfigJsonFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/JsonFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/ConfigJsonFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\ConfigJsonFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ConfigJsonFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CreatedAtFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CreatedAtFieldSerializer
     */
    protected static function getCreatedAtFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/DateTimeFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/CreatedAtFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CreatedAtFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CreatedAtFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CreatedByFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CreatedByFieldSerializer
     */
    protected static function getCreatedByFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FkFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/CreatedByFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CreatedByFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CreatedByFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CronIntervalFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CronIntervalFieldSerializer
     */
    protected static function getCronIntervalFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/CronIntervalFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CronIntervalFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CronIntervalFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CustomFieldsSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CustomFieldsSerializer
     */
    protected static function getCustomFieldsSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/JsonFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/CustomFieldsSerializer.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CustomFieldsSerializer'])) {
            return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CustomFieldsSerializer'];
        }

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CustomFieldsSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\CustomFieldsSerializer(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), $a, ($container->privates['Shopware\\Core\\System\\CustomField\\CustomFieldService'] ?? self::getCustomFieldServiceService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\DateFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\DateFieldSerializer
     */
    protected static function getDateFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/DateFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\DateFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\DateFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\DateIntervalFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\DateIntervalFieldSerializer
     */
    protected static function getDateIntervalFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/DateIntervalFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\DateIntervalFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\DateIntervalFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\DateTimeFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\DateTimeFieldSerializer
     */
    protected static function getDateTimeFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/DateTimeFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\DateTimeFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\DateTimeFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\EmailFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\EmailFieldSerializer
     */
    protected static function getEmailFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/EmailFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\EmailFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\EmailFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\FkFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\FkFieldSerializer
     */
    protected static function getFkFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FkFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\FkFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\FkFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\FloatFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\FloatFieldSerializer
     */
    protected static function getFloatFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FloatFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\FloatFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\FloatFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\IdFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\IdFieldSerializer
     */
    protected static function getIdFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/IdFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\IdFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\IdFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\IntFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\IntFieldSerializer
     */
    protected static function getIntFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/IntFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\IntFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\IntFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\JsonFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\JsonFieldSerializer
     */
    protected static function getJsonFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/JsonFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\JsonFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\JsonFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ListFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ListFieldSerializer
     */
    protected static function getListFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/ListFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\ListFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ListFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\LongTextFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\LongTextFieldSerializer
     */
    protected static function getLongTextFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/LongTextFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\LongTextFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\LongTextFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->services['Shopware\\Core\\Framework\\Util\\HtmlSanitizer'] ?? self::getHtmlSanitizerService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ManyToManyAssociationFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ManyToManyAssociationFieldSerializer
     */
    protected static function getManyToManyAssociationFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/ManyToManyAssociationFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\ManyToManyAssociationFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ManyToManyAssociationFieldSerializer(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\WriteCommandExtractor'] ?? self::getWriteCommandExtractorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ManyToOneAssociationFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ManyToOneAssociationFieldSerializer
     */
    protected static function getManyToOneAssociationFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/ManyToOneAssociationFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\ManyToOneAssociationFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ManyToOneAssociationFieldSerializer(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\WriteCommandExtractor'] ?? self::getWriteCommandExtractorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\OneToManyAssociationFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\OneToManyAssociationFieldSerializer
     */
    protected static function getOneToManyAssociationFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/OneToManyAssociationFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\OneToManyAssociationFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\OneToManyAssociationFieldSerializer(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\WriteCommandExtractor'] ?? self::getWriteCommandExtractorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriteGatewayInterface'] ?? self::getEntityWriteGatewayInterfaceService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\OneToOneAssociationFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\OneToOneAssociationFieldSerializer
     */
    protected static function getOneToOneAssociationFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/OneToOneAssociationFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\OneToOneAssociationFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\OneToOneAssociationFieldSerializer(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\WriteCommandExtractor'] ?? self::getWriteCommandExtractorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PHPUnserializeFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PHPUnserializeFieldSerializer
     */
    protected static function getPHPUnserializeFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/PHPUnserializeFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\PHPUnserializeFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PHPUnserializeFieldSerializer();
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PasswordFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PasswordFieldSerializer
     */
    protected static function getPasswordFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/PasswordFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\PasswordFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PasswordFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PriceDefinitionFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PriceDefinitionFieldSerializer
     */
    protected static function getPriceDefinitionFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/JsonFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/PriceDefinitionFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\PriceDefinitionFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PriceDefinitionFieldSerializer(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->privates['Shopware\\Core\\Framework\\Rule\\Collector\\RuleConditionRegistry'] ?? self::getRuleConditionRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PriceFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PriceFieldSerializer
     */
    protected static function getPriceFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/PriceFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\PriceFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\PriceFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ReferenceVersionFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ReferenceVersionFieldSerializer
     */
    protected static function getReferenceVersionFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/ReferenceVersionFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\ReferenceVersionFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\ReferenceVersionFieldSerializer();
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\RemoteAddressFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\RemoteAddressFieldSerializer
     */
    protected static function getRemoteAddressFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/RemoteAddressFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\RemoteAddressFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\RemoteAddressFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\StateMachineStateFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\StateMachineStateFieldSerializer
     */
    protected static function getStateMachineStateFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FkFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/StateMachineStateFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\StateMachineStateFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\StateMachineStateFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\StringFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\StringFieldSerializer
     */
    protected static function getStringFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/StringFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\StringFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\StringFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->services['Shopware\\Core\\Framework\\Util\\HtmlSanitizer'] ?? self::getHtmlSanitizerService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TaxFreeConfigFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TaxFreeConfigFieldSerializer
     */
    protected static function getTaxFreeConfigFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/JsonFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/TaxFreeConfigFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\TaxFreeConfigFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TaxFreeConfigFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TimeZoneFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TimeZoneFieldSerializer
     */
    protected static function getTimeZoneFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/TimeZoneFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\TimeZoneFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TimeZoneFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TranslatedFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TranslatedFieldSerializer
     */
    protected static function getTranslatedFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/TranslatedFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\TranslatedFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TranslatedFieldSerializer();
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TranslationsAssociationFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TranslationsAssociationFieldSerializer
     */
    protected static function getTranslationsAssociationFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/TranslationsAssociationFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\TranslationsAssociationFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\TranslationsAssociationFieldSerializer(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\WriteCommandExtractor'] ?? self::getWriteCommandExtractorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriteGatewayInterface'] ?? self::getEntityWriteGatewayInterfaceService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\UpdatedAtFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\UpdatedAtFieldSerializer
     */
    protected static function getUpdatedAtFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/DateTimeFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/UpdatedAtFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\UpdatedAtFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\UpdatedAtFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\UpdatedByFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\UpdatedByFieldSerializer
     */
    protected static function getUpdatedByFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FkFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/UpdatedByFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\UpdatedByFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\UpdatedByFieldSerializer(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\VariantListingConfigFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\VariantListingConfigFieldSerializer
     */
    protected static function getVariantListingConfigFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/VariantListingConfigFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\VariantListingConfigFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\VariantListingConfigFieldSerializer(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\VersionDataPayloadFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\VersionDataPayloadFieldSerializer
     */
    protected static function getVersionDataPayloadFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/VersionDataPayloadFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\VersionDataPayloadFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\VersionDataPayloadFieldSerializer();
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\VersionFieldSerializer' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\VersionFieldSerializer
     */
    protected static function getVersionFieldSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/FieldSerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/FieldSerializer/VersionFieldSerializer.php';

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\VersionFieldSerializer'] = new \Shopware\Core\Framework\DataAbstractionLayer\FieldSerializer\VersionFieldSerializer();
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Indexing\EntityIndexerRegistry' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Indexing\EntityIndexerRegistry
     */
    protected static function getEntityIndexerRegistryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexerRegistry.php';

        $a = ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'])) {
            return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'])) {
            return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'];
        }

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'] = new \Shopware\Core\Framework\DataAbstractionLayer\Indexing\EntityIndexerRegistry(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Content\\LandingPage\\DataAbstractionLayer\\LandingPageIndexer'] ?? self::getLandingPageIndexerService($container));
            yield 1 => ($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'] ?? self::getProductIndexerService($container));
            yield 2 => ($container->privates['Shopware\\Core\\Content\\ProductStream\\DataAbstractionLayer\\ProductStreamIndexer'] ?? self::getProductStreamIndexerService($container));
            yield 3 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\DataAbstractionLayer\\CustomerIndexer'] ?? self::getCustomerIndexerService($container));
            yield 4 => ($container->privates['Shopware\\Core\\System\\SalesChannel\\DataAbstractionLayer\\SalesChannelIndexer'] ?? self::getSalesChannelIndexerService($container));
            yield 5 => ($container->privates['Shopware\\Core\\Content\\Category\\DataAbstractionLayer\\CategoryIndexer'] ?? self::getCategoryIndexerService($container));
            yield 6 => ($container->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaIndexer'] ?? self::getMediaIndexerService($container));
            yield 7 => ($container->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderConfigurationIndexer'] ?? self::getMediaFolderConfigurationIndexerService($container));
            yield 8 => ($container->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderIndexer'] ?? self::getMediaFolderIndexerService($container));
            yield 9 => ($container->privates['Shopware\\Core\\Content\\Media\\Infrastructure\\Path\\MediaPathPostUpdater'] ?? self::getMediaPathPostUpdaterService($container));
            yield 10 => ($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductStreamUpdater'] ?? self::getProductStreamUpdaterService($container));
            yield 11 => ($container->privates['Shopware\\Core\\Content\\Newsletter\\DataAbstractionLayer\\NewsletterRecipientIndexer'] ?? self::getNewsletterRecipientIndexerService($container));
            yield 12 => ($container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'] ?? self::getRuleIndexerService($container));
            yield 13 => ($container->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'] ?? self::getFlowIndexerService($container));
            yield 14 => ($container->privates['Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentMethodIndexer'] ?? self::getPaymentMethodIndexerService($container));
            yield 15 => ($container->privates['Shopware\\Core\\Checkout\\Promotion\\DataAbstractionLayer\\PromotionIndexer'] ?? self::getPromotionIndexerService($container));
            yield 16 => ($container->privates['Shopware\\Storefront\\Theme\\DataAbstractionLayer\\ThemeIndexer'] ?? self::getThemeIndexerService($container));
        }, 17), $a, $b);
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Read\EntityReaderInterface' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityReader
     */
    protected static function getEntityReaderInterfaceService($container)
    {
        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityReader(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityHydrator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityHydrator($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityDefinitionQueryHelper()), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Parser\\SqlQueryParser'] ?? self::getSqlQueryParserService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\CriteriaQueryBuilder'] ?? self::getCriteriaQueryBuilderService($container)), ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\CriteriaFieldsResolver());
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Search\EntityAggregatorInterface' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\DataAbstractionLayer\ElasticsearchEntityAggregator
     */
    protected static function getEntityAggregatorInterfaceService($container)
    {
        $a = ($container->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'] ?? self::getElasticsearchHelperService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'])) {
            return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'])) {
            return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container));

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] = new \Shopware\Elasticsearch\Framework\DataAbstractionLayer\ElasticsearchEntityAggregator($a, ($container->services['OpenSearch\\Client'] ?? self::getClientService($container)), new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityAggregator(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityDefinitionQueryHelper()), $c, ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\CriteriaQueryBuilder'] ?? self::getCriteriaQueryBuilderService($container)), $container->getEnv('bool:SHOPWARE_DBAL_TIMEZONE_SUPPORT_ENABLED'), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\SearchTermInterpreter'] ?? self::getSearchTermInterpreterService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\EntityScoreQueryBuilder'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Search\Term\EntityScoreQueryBuilder())), new \Shopware\Elasticsearch\Framework\DataAbstractionLayer\ElasticsearchEntityAggregatorHydrator($c), $b, '5s');
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Search\EntitySearcherInterface' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\DataAbstractionLayer\ElasticsearchEntitySearcher
     */
    protected static function getEntitySearcherInterfaceService($container)
    {
        $a = ($container->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'] ?? self::getElasticsearchHelperService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'])) {
            return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'])) {
            return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'];
        }

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] = new \Shopware\Elasticsearch\Framework\DataAbstractionLayer\ElasticsearchEntitySearcher(($container->services['OpenSearch\\Client'] ?? self::getClientService($container)), new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntitySearcher(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityDefinitionQueryHelper()), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\CriteriaQueryBuilder'] ?? self::getCriteriaQueryBuilderService($container))), $a, ($container->privates['Shopware\\Elasticsearch\\Framework\\DataAbstractionLayer\\CriteriaParser'] ?? self::getCriteriaParserService($container)), new \Shopware\Elasticsearch\Framework\DataAbstractionLayer\ElasticsearchEntitySearchHydrator(), $b, '5s');
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\VersionManager' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\VersionManager
     */
    protected static function getVersionManagerService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? self::getEntityWriterService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'])) {
            return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'])) {
            return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriteGatewayInterface'] ?? self::getEntityWriteGatewayInterfaceService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'])) {
            return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'])) {
            return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'];
        }
        $e = ($container->privates['serializer'] ?? self::getSerializerService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'])) {
            return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'];
        }

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] = new \Shopware\Core\Framework\DataAbstractionLayer\VersionManager($a, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $b, $c, $d, $e, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommit\\VersionCommitDefinition'] ?? self::getVersionCommitDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommitData\\VersionCommitDataDefinition'] ?? self::getVersionCommitDataDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\VersionDefinition'] ?? self::getVersionDefinitionService($container)), ($container->privates['lock.default.factory'] ?? self::getLock_Default_FactoryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommitData\VersionCommitDataDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommitData\VersionCommitDataDefinition
     */
    protected static function getVersionCommitDataDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommitData\\VersionCommitDataDefinition'] = $instance = new \Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommitData\VersionCommitDataDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommit\VersionCommitDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommit\VersionCommitDefinition
     */
    protected static function getVersionCommitDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommit\\VersionCommitDefinition'] = $instance = new \Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommit\VersionCommitDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Version\VersionDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Version\VersionDefinition
     */
    protected static function getVersionDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\VersionDefinition'] = $instance = new \Shopware\Core\Framework\DataAbstractionLayer\Version\VersionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Write\EntityWriteGatewayInterface' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityWriteGateway
     */
    protected static function getEntityWriteGatewayInterfaceService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriteGatewayInterface'])) {
            return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriteGatewayInterface'];
        }

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriteGatewayInterface'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityWriteGateway(125, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $a, new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\ExceptionHandlerRegistry(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\TechnicalNameExceptionHandler'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\TechnicalNameExceptionHandler());
            yield 1 => ($container->privates['Shopware\\Core\\System\\Language\\LanguageExceptionHandler'] ??= new \Shopware\Core\System\Language\LanguageExceptionHandler());
            yield 2 => ($container->privates['Shopware\\Core\\System\\SalesChannel\\SalesChannelExceptionHandler'] ??= new \Shopware\Core\System\SalesChannel\SalesChannelExceptionHandler());
            yield 3 => ($container->privates['Shopware\\Core\\Content\\Category\\DataAbstractionLayer\\CategoryNonExistentExceptionHandler'] ??= new \Shopware\Core\Content\Category\DataAbstractionLayer\CategoryNonExistentExceptionHandler());
            yield 4 => ($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductExceptionHandler'] ??= new \Shopware\Core\Content\Product\DataAbstractionLayer\ProductExceptionHandler());
            yield 5 => ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingExceptionHandler'] ??= new \Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingExceptionHandler());
            yield 6 => ($container->privates['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfigField\\ProductSearchConfigFieldExceptionHandler'] ??= new \Shopware\Core\Content\Product\Aggregate\ProductSearchConfigField\ProductSearchConfigFieldExceptionHandler());
            yield 7 => ($container->privates['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfig\\ProductSearchConfigExceptionHandler'] ??= new \Shopware\Core\Content\Product\Aggregate\ProductSearchConfig\ProductSearchConfigExceptionHandler());
            yield 8 => ($container->privates['Shopware\\Core\\Content\\Newsletter\\NewsletterExceptionHandler'] ??= new \Shopware\Core\Content\Newsletter\NewsletterExceptionHandler());
            yield 9 => ($container->privates['Shopware\\Core\\Content\\ProductExport\\DataAbstractionLayer\\ProductExportExceptionHandler'] ??= new \Shopware\Core\Content\ProductExport\DataAbstractionLayer\ProductExportExceptionHandler());
            yield 10 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\DataAbstractionLayer\\CustomerWishlistProductExceptionHandler'] ??= new \Shopware\Core\Checkout\Customer\DataAbstractionLayer\CustomerWishlistProductExceptionHandler());
            yield 11 => ($container->privates['Shopware\\Core\\Checkout\\Order\\OrderExceptionHandler'] ??= new \Shopware\Core\Checkout\Order\OrderExceptionHandler());
            yield 12 => ($container->privates['Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodPrice\\ShippingMethodPriceExceptionHandler'] ??= new \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodPrice\ShippingMethodPriceExceptionHandler());
            yield 13 => ($container->privates['Shopware\\Storefront\\Theme\\DataAbstractionLayer\\ThemeExceptionHandler'] ??= new \Shopware\Storefront\Theme\DataAbstractionLayer\ThemeExceptionHandler());
        }, 14)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\DataAbstractionLayer\Write\EntityWriter' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Write\EntityWriter
     */
    protected static function getEntityWriterService($container)
    {
        $a = ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\WriteCommandExtractor'] ?? self::getWriteCommandExtractorService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'])) {
            return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriteGatewayInterface'] ?? self::getEntityWriteGatewayInterfaceService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'])) {
            return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'];
        }
        $c = ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container));
        $d = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container));

        return $container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] = new \Shopware\Core\Framework\DataAbstractionLayer\Write\EntityWriter($a, new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityForeignKeyResolver($c, ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityDefinitionQueryHelper())), $b, ($container->privates['Shopware\\Core\\System\\Language\\CachedLanguageLoader'] ?? self::getCachedLanguageLoaderService($container)), $d, new \Shopware\Core\Framework\DataAbstractionLayer\Write\EntityWriteResultFactory($d, $c));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Event\BusinessEventCollector' shared service.
     *
     * @return \Shopware\Core\Framework\Event\BusinessEventCollector
     */
    protected static function getBusinessEventCollectorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Event/BusinessEventCollector.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\Event\\BusinessEventCollector'])) {
            return $container->services['Shopware\\Core\\Framework\\Event\\BusinessEventCollector'];
        }

        return $container->services['Shopware\\Core\\Framework\\Event\\BusinessEventCollector'] = new \Shopware\Core\Framework\Event\BusinessEventCollector(($container->services['Shopware\\Core\\Framework\\Event\\BusinessEventRegistry'] ?? self::getBusinessEventRegistryService($container)), $a, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Event\BusinessEventRegistry' shared service.
     *
     * @return \Shopware\Core\Framework\Event\BusinessEventRegistry
     */
    protected static function getBusinessEventRegistryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Event/BusinessEventRegistry.php';

        $container->services['Shopware\\Core\\Framework\\Event\\BusinessEventRegistry'] = $instance = new \Shopware\Core\Framework\Event\BusinessEventRegistry();

        $instance->addClasses(['Shopware\\Core\\Checkout\\Customer\\Event\\CustomerBeforeLoginEvent', 'Shopware\\Core\\Checkout\\Customer\\Event\\CustomerLoginEvent', 'Shopware\\Core\\Checkout\\Customer\\Event\\CustomerLogoutEvent', 'Shopware\\Core\\Checkout\\Customer\\Event\\CustomerDeletedEvent', 'Shopware\\Core\\System\\User\\Recovery\\UserRecoveryRequestEvent', 'Shopware\\Core\\Checkout\\Customer\\Event\\CustomerChangedPaymentMethodEvent', 'Shopware\\Core\\Checkout\\Cart\\Event\\CheckoutOrderPlacedEvent', 'Shopware\\Core\\Checkout\\Order\\Event\\OrderPaymentMethodChangedEvent', 'Shopware\\Core\\Checkout\\Customer\\Event\\CustomerAccountRecoverRequestEvent', 'Shopware\\Core\\Checkout\\Customer\\Event\\CustomerDoubleOptInRegistrationEvent', 'Shopware\\Core\\Checkout\\Customer\\Event\\CustomerGroupRegistrationAccepted', 'Shopware\\Core\\Checkout\\Customer\\Event\\CustomerGroupRegistrationDeclined', 'Shopware\\Core\\Checkout\\Customer\\Event\\CustomerRegisterEvent', 'Shopware\\Core\\Checkout\\Customer\\Event\\DoubleOptInGuestOrderEvent', 'Shopware\\Core\\Checkout\\Customer\\Event\\GuestCustomerRegisterEvent', 'Shopware\\Core\\Content\\ContactForm\\Event\\ContactFormEvent', 'Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\Event\\ReviewFormEvent', 'Shopware\\Core\\Content\\MailTemplate\\Service\\Event\\MailBeforeSentEvent', 'Shopware\\Core\\Content\\MailTemplate\\Service\\Event\\MailBeforeValidateEvent', 'Shopware\\Core\\Content\\MailTemplate\\Service\\Event\\MailSentEvent', 'Shopware\\Core\\Content\\Newsletter\\Event\\NewsletterConfirmEvent', 'Shopware\\Core\\Content\\Newsletter\\Event\\NewsletterRegisterEvent', 'Shopware\\Core\\Content\\Newsletter\\Event\\NewsletterUnsubscribeEvent', 'Shopware\\Core\\Content\\ProductExport\\Event\\ProductExportLoggingEvent']);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Increment\Controller\IncrementApiController' shared service.
     *
     * @return \Shopware\Core\Framework\Increment\Controller\IncrementApiController
     */
    protected static function getIncrementApiControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Increment/Controller/IncrementApiController.php';

        return $container->services['Shopware\\Core\\Framework\\Increment\\Controller\\IncrementApiController'] = new \Shopware\Core\Framework\Increment\Controller\IncrementApiController(($container->services['shopware.increment.gateway.registry'] ?? self::getShopware_Increment_Gateway_RegistryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Log\LogEntryDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Log\LogEntryDefinition
     */
    protected static function getLogEntryDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Log/LogEntryDefinition.php';

        $container->services['Shopware\\Core\\Framework\\Log\\LogEntryDefinition'] = $instance = new \Shopware\Core\Framework\Log\LogEntryDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\MessageQueue\Api\ConsumeMessagesController' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\Api\ConsumeMessagesController
     */
    protected static function getConsumeMessagesControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/Api/ConsumeMessagesController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/Subscriber/EarlyReturnMessagesListener.php';

        $container->services['Shopware\\Core\\Framework\\MessageQueue\\Api\\ConsumeMessagesController'] = $instance = new \Shopware\Core\Framework\MessageQueue\Api\ConsumeMessagesController(($container->privates['messenger.receiver_locator'] ?? self::getMessenger_ReceiverLocatorService($container)), ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container)), ($container->privates['messenger.listener.stop_worker_on_restart_signal_listener'] ?? self::getMessenger_Listener_StopWorkerOnRestartSignalListenerService($container)), new \Shopware\Core\Framework\MessageQueue\Subscriber\EarlyReturnMessagesListener(), ($container->privates['Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\MessageQueueStatsSubscriber'] ?? self::getMessageQueueStatsSubscriberService($container)), 'v65', '128M', 20, ($container->privates['lock.default.factory'] ?? self::getLock_Default_FactoryService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\MessageQueue\Api\ScheduledTaskController' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\Api\ScheduledTaskController
     */
    protected static function getScheduledTaskControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/Api/ScheduledTaskController.php';

        $container->services['Shopware\\Core\\Framework\\MessageQueue\\Api\\ScheduledTaskController'] = $instance = new \Shopware\Core\Framework\MessageQueue\Api\ScheduledTaskController(($container->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Scheduler\\TaskScheduler'] ?? self::getTaskSchedulerService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\MessageQueue\ScheduledTask\ScheduledTaskDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\ScheduledTask\ScheduledTaskDefinition
     */
    protected static function getScheduledTaskDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/ScheduledTaskDefinition.php';

        $container->services['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\ScheduledTaskDefinition'] = $instance = new \Shopware\Core\Framework\MessageQueue\ScheduledTask\ScheduledTaskDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Migration\IndexerQueuer' shared service.
     *
     * @return \Shopware\Core\Framework\Migration\IndexerQueuer
     */
    protected static function getIndexerQueuerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/IndexerQueuer.php';

        return $container->services['Shopware\\Core\\Framework\\Migration\\IndexerQueuer'] = new \Shopware\Core\Framework\Migration\IndexerQueuer(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Migration\MigrationCollectionLoader' shared service.
     *
     * @return \Shopware\Core\Framework\Migration\MigrationCollectionLoader
     */
    protected static function getMigrationCollectionLoaderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/MigrationCollectionLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/MigrationRuntime.php';

        $a = ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container));
        $b = ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container));

        return $container->services['Shopware\\Core\\Framework\\Migration\\MigrationCollectionLoader'] = new \Shopware\Core\Framework\Migration\MigrationCollectionLoader($a, new \Shopware\Core\Framework\Migration\MigrationRuntime($a, $b), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource.core'] ??= new \Shopware\Core\Framework\Migration\MigrationSource('core'));
            yield 1 => ($container->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource.core.V6_3'] ?? self::getMigrationSource_Core_V63Service($container));
            yield 2 => ($container->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource.core.V6_4'] ?? self::getMigrationSource_Core_V64Service($container));
            yield 3 => ($container->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource.core.V6_5'] ?? self::getMigrationSource_Core_V65Service($container));
            yield 4 => ($container->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource.core.V6_6'] ?? self::getMigrationSource_Core_V66Service($container));
            yield 5 => ($container->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource.core.V6_7'] ?? self::getMigrationSource_Core_V67Service($container));
            yield 6 => ($container->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource.null'] ??= new \Shopware\Core\Framework\Migration\MigrationSource('null', []));
            yield 7 => ($container->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource_Framework'] ??= new \Shopware\Core\Framework\Migration\MigrationSource('Framework', [(\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration') => 'Shopware\\Core\\Framework\\Migration']));
            yield 8 => ($container->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource_Administration'] ??= new \Shopware\Core\Framework\Migration\MigrationSource('Administration', [(\dirname(__DIR__, 4).'/vendor/shopware/administration/Migration') => 'Shopware\\Administration\\Migration']));
            yield 9 => ($container->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource_Elasticsearch'] ??= new \Shopware\Core\Framework\Migration\MigrationSource('Elasticsearch', [(\dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Migration') => 'Shopware\\Elasticsearch\\Migration']));
            yield 10 => ($container->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource_Storefront'] ??= new \Shopware\Core\Framework\Migration\MigrationSource('Storefront', [(\dirname(__DIR__, 4).'/vendor/shopware/storefront/Migration') => 'Shopware\\Storefront\\Migration']));
        }, 11), $b);
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Plugin\Aggregate\PluginTranslation\PluginTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Aggregate\PluginTranslation\PluginTranslationDefinition
     */
    protected static function getPluginTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Aggregate/PluginTranslation/PluginTranslationDefinition.php';

        $container->services['Shopware\\Core\\Framework\\Plugin\\Aggregate\\PluginTranslation\\PluginTranslationDefinition'] = $instance = new \Shopware\Core\Framework\Plugin\Aggregate\PluginTranslation\PluginTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Plugin\KernelPluginCollection' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\KernelPluginCollection
     */
    protected static function getKernelPluginCollectionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/KernelPluginCollection.php';

        return $container->services['Shopware\\Core\\Framework\\Plugin\\KernelPluginCollection'] = ($container->services['Shopware\\Core\\Framework\\Plugin\\KernelPluginLoader\\KernelPluginLoader'] ?? self::getKernelPluginLoaderService($container))->getPluginInstances();
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Plugin\KernelPluginLoader\KernelPluginLoader' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\KernelPluginLoader\KernelPluginLoader
     */
    protected static function getKernelPluginLoaderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ContainerAwareInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Bundle/BundleInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/ContainerAwareTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Bundle/Bundle.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/KernelPluginLoader/KernelPluginLoader.php';

        return $container->services['Shopware\\Core\\Framework\\Plugin\\KernelPluginLoader\\KernelPluginLoader'] = ($container->services['kernel'] ?? $container->get('kernel', 1))->getPluginLoader();
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Plugin\PluginDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\PluginDefinition
     */
    protected static function getPluginDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/PluginDefinition.php';

        $container->services['Shopware\\Core\\Framework\\Plugin\\PluginDefinition'] = $instance = new \Shopware\Core\Framework\Plugin\PluginDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Plugin\Util\PluginIdProvider' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Util\PluginIdProvider
     */
    protected static function getPluginIdProviderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Util/PluginIdProvider.php';

        return $container->services['Shopware\\Core\\Framework\\Plugin\\Util\\PluginIdProvider'] = new \Shopware\Core\Framework\Plugin\Util\PluginIdProvider(($container->services['plugin.repository'] ?? self::getPlugin_RepositoryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Routing\CanonicalRedirectService' shared service.
     *
     * @return \Shopware\Core\Framework\Routing\CanonicalRedirectService
     */
    protected static function getCanonicalRedirectServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/CanonicalRedirectService.php';

        return $container->services['Shopware\\Core\\Framework\\Routing\\CanonicalRedirectService'] = new \Shopware\Core\Framework\Routing\CanonicalRedirectService(($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Routing\Facade\RequestFacadeFactory' shared service.
     *
     * @return \Shopware\Core\Framework\Routing\Facade\RequestFacadeFactory
     */
    protected static function getRequestFacadeFactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Execution/Awareness/HookServiceFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/Facade/RequestFacadeFactory.php';

        return $container->services['Shopware\\Core\\Framework\\Routing\\Facade\\RequestFacadeFactory'] = new \Shopware\Core\Framework\Routing\Facade\RequestFacadeFactory(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Routing\RequestTransformerInterface' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Routing\RequestTransformer
     */
    protected static function getRequestTransformerInterfaceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/RequestTransformerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Routing/RequestTransformer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/RequestTransformer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Routing/AbstractDomainLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Routing/CachedDomainLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Routing/DomainLoader.php';

        return $container->services['Shopware\\Core\\Framework\\Routing\\RequestTransformerInterface'] = new \Shopware\Storefront\Framework\Routing\RequestTransformer(new \Shopware\Core\Framework\Routing\RequestTransformer(), ($container->services['Shopware\\Core\\Content\\Seo\\EmptyPathInfoResolver'] ?? self::getEmptyPathInfoResolverService($container)), $container->getParameter('shopware.routing.registered_api_prefixes'), new \Shopware\Storefront\Framework\Routing\CachedDomainLoader(new \Shopware\Storefront\Framework\Routing\DomainLoader(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container))), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container))));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Rule\Api\RuleConfigController' shared service.
     *
     * @return \Shopware\Core\Framework\Rule\Api\RuleConfigController
     */
    protected static function getRuleConfigControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Rule/Api/RuleConfigController.php';

        $container->services['Shopware\\Core\\Framework\\Rule\\Api\\RuleConfigController'] = $instance = new \Shopware\Core\Framework\Rule\Api\RuleConfigController(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Framework\\Rule\\Container\\AndRule'] ??= new \Shopware\Core\Framework\Rule\Container\AndRule());
            yield 1 => ($container->privates['Shopware\\Core\\Framework\\Rule\\Container\\NotRule'] ??= new \Shopware\Core\Framework\Rule\Container\NotRule());
            yield 2 => ($container->privates['Shopware\\Core\\Framework\\Rule\\Container\\OrRule'] ??= new \Shopware\Core\Framework\Rule\Container\OrRule());
            yield 3 => ($container->privates['Shopware\\Core\\Framework\\Rule\\Container\\XorRule'] ??= new \Shopware\Core\Framework\Rule\Container\XorRule());
            yield 4 => ($container->privates['Shopware\\Core\\Framework\\Rule\\Container\\MatchAllLineItemsRule'] ??= new \Shopware\Core\Framework\Rule\Container\MatchAllLineItemsRule());
            yield 5 => ($container->privates['Shopware\\Core\\Framework\\Rule\\ScriptRule'] ??= new \Shopware\Core\Framework\Rule\ScriptRule());
            yield 6 => ($container->privates['Shopware\\Core\\Framework\\Rule\\DateRangeRule'] ??= new \Shopware\Core\Framework\Rule\DateRangeRule());
            yield 7 => ($container->privates['Shopware\\Core\\Framework\\Rule\\SimpleRule'] ??= new \Shopware\Core\Framework\Rule\SimpleRule());
            yield 8 => ($container->privates['Shopware\\Core\\Framework\\Rule\\SalesChannelRule'] ??= new \Shopware\Core\Framework\Rule\SalesChannelRule());
            yield 9 => ($container->privates['Shopware\\Core\\Framework\\Rule\\TimeRangeRule'] ??= new \Shopware\Core\Framework\Rule\TimeRangeRule());
            yield 10 => ($container->privates['Shopware\\Core\\Framework\\Rule\\WeekdayRule'] ??= new \Shopware\Core\Framework\Rule\WeekdayRule());
            yield 11 => ($container->privates['Shopware\\Core\\System\\Language\\Rule\\LanguageRule'] ??= new \Shopware\Core\System\Language\Rule\LanguageRule());
            yield 12 => ($container->privates['Shopware\\Core\\System\\Currency\\Rule\\CurrencyRule'] ??= new \Shopware\Core\System\Currency\Rule\CurrencyRule());
            yield 13 => ($container->privates['Shopware\\Core\\Content\\Flow\\Rule\\OrderTagRule'] ??= new \Shopware\Core\Content\Flow\Rule\OrderTagRule());
            yield 14 => ($container->privates['Shopware\\Core\\Content\\Flow\\Rule\\OrderTrackingCodeRule'] ??= new \Shopware\Core\Content\Flow\Rule\OrderTrackingCodeRule());
            yield 15 => ($container->privates['Shopware\\Core\\Content\\Flow\\Rule\\OrderDeliveryStatusRule'] ??= new \Shopware\Core\Content\Flow\Rule\OrderDeliveryStatusRule());
            yield 16 => ($container->privates['Shopware\\Core\\Content\\Flow\\Rule\\OrderCreatedByAdminRule'] ??= new \Shopware\Core\Content\Flow\Rule\OrderCreatedByAdminRule());
            yield 17 => ($container->privates['Shopware\\Core\\Content\\Flow\\Rule\\OrderTransactionStatusRule'] ??= new \Shopware\Core\Content\Flow\Rule\OrderTransactionStatusRule());
            yield 18 => ($container->privates['Shopware\\Core\\Content\\Flow\\Rule\\OrderStatusRule'] ??= new \Shopware\Core\Content\Flow\Rule\OrderStatusRule());
            yield 19 => ($container->privates['Shopware\\Core\\Content\\Flow\\Rule\\OrderCustomFieldRule'] ??= new \Shopware\Core\Content\Flow\Rule\OrderCustomFieldRule());
            yield 20 => ($container->privates['Shopware\\Core\\Content\\Flow\\Rule\\OrderDocumentTypeRule'] ??= new \Shopware\Core\Content\Flow\Rule\OrderDocumentTypeRule());
            yield 21 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartAmountRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\CartAmountRule());
            yield 22 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartPositionPriceRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\CartPositionPriceRule());
            yield 23 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\GoodsCountRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\GoodsCountRule());
            yield 24 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\GoodsPriceRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\GoodsPriceRule());
            yield 25 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemOfTypeRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemOfTypeRule());
            yield 26 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemRule());
            yield 27 => ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionLineItemRule'] ??= new \Shopware\Core\Checkout\Promotion\Rule\PromotionLineItemRule());
            yield 28 => ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionCodeOfTypeRule'] ??= new \Shopware\Core\Checkout\Promotion\Rule\PromotionCodeOfTypeRule());
            yield 29 => ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionValueRule'] ??= new \Shopware\Core\Checkout\Promotion\Rule\PromotionValueRule());
            yield 30 => ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionsInCartCountRule'] ??= new \Shopware\Core\Checkout\Promotion\Rule\PromotionsInCartCountRule());
            yield 31 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemTotalPriceRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemTotalPriceRule());
            yield 32 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemUnitPriceRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemUnitPriceRule());
            yield 33 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemWithQuantityRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemWithQuantityRule());
            yield 34 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemWrapperRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemWrapperRule());
            yield 35 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartShippingCostRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\CartShippingCostRule());
            yield 36 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartWeightRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\CartWeightRule());
            yield 37 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartVolumeRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\CartVolumeRule());
            yield 38 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartHasDeliveryFreeItemRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\CartHasDeliveryFreeItemRule());
            yield 39 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingCountryRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\BillingCountryRule());
            yield 40 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingStreetRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\BillingStreetRule());
            yield 41 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingZipCodeRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\BillingZipCodeRule());
            yield 42 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerGroupRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\CustomerGroupRule());
            yield 43 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerTagRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\CustomerTagRule());
            yield 44 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerNumberRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\CustomerNumberRule());
            yield 45 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\DifferentAddressesRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\DifferentAddressesRule());
            yield 46 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\EmailRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\EmailRule());
            yield 47 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsNewCustomerRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\IsNewCustomerRule());
            yield 48 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsActiveRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\IsActiveRule());
            yield 49 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\LastNameRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\LastNameRule());
            yield 50 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsCompanyRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\IsCompanyRule());
            yield 51 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartTaxDisplayRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\CartTaxDisplayRule());
            yield 52 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartTotalPurchasePriceRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\CartTotalPurchasePriceRule());
            yield 53 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsGuestCustomerRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\IsGuestCustomerRule());
            yield 54 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsNewsletterRecipientRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\IsNewsletterRecipientRule());
            yield 55 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingCountryRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\ShippingCountryRule());
            yield 56 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingStreetRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\ShippingStreetRule());
            yield 57 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingCityRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\BillingCityRule());
            yield 58 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingCityRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\ShippingCityRule());
            yield 59 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingStateRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\BillingStateRule());
            yield 60 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingStateRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\ShippingStateRule());
            yield 61 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingZipCodeRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\ShippingZipCodeRule());
            yield 62 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerLoggedInRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\CustomerLoggedInRule());
            yield 63 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemsInCartCountRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemsInCartCountRule());
            yield 64 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\NumberOfReviewsRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\NumberOfReviewsRule());
            yield 65 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\OrderCountRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\OrderCountRule());
            yield 66 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\DaysSinceLastOrderRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\DaysSinceLastOrderRule());
            yield 67 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemTagRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemTagRule());
            yield 68 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\AlwaysValidRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\AlwaysValidRule());
            yield 69 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemPropertyRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemPropertyRule());
            yield 70 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemIsNewRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemIsNewRule());
            yield 71 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemOfManufacturerRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemOfManufacturerRule());
            yield 72 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemPurchasePriceRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemPurchasePriceRule());
            yield 73 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemCreationDateRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemCreationDateRule());
            yield 74 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemReleaseDateRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemReleaseDateRule());
            yield 75 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemClearanceSaleRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemClearanceSaleRule());
            yield 76 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemPromotedRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemPromotedRule());
            yield 77 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemInCategoryRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemInCategoryRule());
            yield 78 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemInProductStreamRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemInProductStreamRule());
            yield 79 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemTaxationRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemTaxationRule());
            yield 80 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionWidthRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemDimensionWidthRule());
            yield 81 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionHeightRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemDimensionHeightRule());
            yield 82 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionLengthRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemDimensionLengthRule());
            yield 83 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionWeightRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemDimensionWeightRule());
            yield 84 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionVolumeRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemDimensionVolumeRule());
            yield 85 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemListPriceRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemListPriceRule());
            yield 86 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemListPriceRatioRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemListPriceRatioRule());
            yield 87 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemCustomFieldRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemCustomFieldRule());
            yield 88 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemStockRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemStockRule());
            yield 89 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemActualStockRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemActualStockRule());
            yield 90 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\PaymentMethodRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\PaymentMethodRule());
            yield 91 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\ShippingMethodRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\ShippingMethodRule());
            yield 92 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemGoodsTotalRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemGoodsTotalRule());
            yield 93 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\OrderTotalAmountRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\OrderTotalAmountRule());
            yield 94 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerCustomFieldRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\CustomerCustomFieldRule());
            yield 95 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerBirthdayRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\CustomerBirthdayRule());
            yield 96 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerCreatedByAdminRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\CustomerCreatedByAdminRule());
            yield 97 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemProductStatesRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemProductStatesRule());
            yield 98 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerAgeRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\CustomerAgeRule());
            yield 99 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerSalutationRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\CustomerSalutationRule());
            yield 100 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\DaysSinceLastLoginRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\DaysSinceLastLoginRule());
            yield 101 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\DaysSinceFirstLoginRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\DaysSinceFirstLoginRule());
            yield 102 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\AffiliateCodeRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\AffiliateCodeRule());
            yield 103 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CampaignCodeRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\CampaignCodeRule());
            yield 104 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerDefaultPaymentMethodRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\CustomerDefaultPaymentMethodRule());
            yield 105 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemPropertyValueRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemPropertyValueRule());
            yield 106 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemVariantValueRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemVariantValueRule());
        }, 107));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Script\Api\ScriptApiRoute' shared service.
     *
     * @return \Shopware\Core\Framework\Script\Api\ScriptApiRoute
     */
    protected static function getScriptApiRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Api/ScriptApiRoute.php';

        return $container->services['Shopware\\Core\\Framework\\Script\\Api\\ScriptApiRoute'] = new \Shopware\Core\Framework\Script\Api\ScriptApiRoute(($container->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'] ?? self::getScriptExecutorService($container)), ($container->privates['Shopware\\Core\\Framework\\Script\\Execution\\ScriptLoader'] ?? self::getScriptLoaderService($container)), ($container->privates['Shopware\\Core\\Framework\\Script\\Api\\ScriptResponseEncoder'] ?? self::getScriptResponseEncoderService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Script\Api\ScriptResponseFactoryFacadeHookFactory' shared service.
     *
     * @return \Shopware\Core\Framework\Script\Api\ScriptResponseFactoryFacadeHookFactory
     */
    protected static function getScriptResponseFactoryFacadeHookFactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Execution/Awareness/HookServiceFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Api/ScriptResponseFactoryFacadeHookFactory.php';

        return $container->services['Shopware\\Core\\Framework\\Script\\Api\\ScriptResponseFactoryFacadeHookFactory'] = new \Shopware\Core\Framework\Script\Api\ScriptResponseFactoryFacadeHookFactory(($container->services['router'] ?? self::getRouterService($container)), ($container->services['Shopware\\Storefront\\Controller\\ScriptController'] ?? self::getScriptControllerService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Script\Api\ScriptStoreApiRoute' shared service.
     *
     * @return \Shopware\Core\Framework\Script\Api\ScriptStoreApiRoute
     */
    protected static function getScriptStoreApiRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Api/ScriptStoreApiRoute.php';

        return $container->services['Shopware\\Core\\Framework\\Script\\Api\\ScriptStoreApiRoute'] = new \Shopware\Core\Framework\Script\Api\ScriptStoreApiRoute(($container->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'] ?? self::getScriptExecutorService($container)), ($container->privates['Shopware\\Core\\Framework\\Script\\Api\\ScriptResponseEncoder'] ?? self::getScriptResponseEncoderService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Script\Execution\ScriptExecutor' shared service.
     *
     * @return \Shopware\Core\Framework\Script\Execution\ScriptExecutor
     */
    protected static function getScriptExecutorService($container)
    {
        $a = ($container->privates['Shopware\\Core\\Framework\\Script\\Execution\\ScriptLoader'] ?? self::getScriptLoaderService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'])) {
            return $container->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'];
        }
        $b = ($container->privates['twig.extension.trans'] ?? self::getTwig_Extension_TransService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'])) {
            return $container->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'];
        }

        return $container->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'] = new \Shopware\Core\Framework\Script\Execution\ScriptExecutor($a, ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), ($container->privates['Shopware\\Core\\Framework\\Script\\Debugging\\ScriptTraces'] ??= new \Shopware\Core\Framework\Script\Debugging\ScriptTraces()), $container, $b, '6.5.7.3');
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Script\ScriptDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Script\ScriptDefinition
     */
    protected static function getScriptDefinitionService($container)
    {
        $container->services['Shopware\\Core\\Framework\\Script\\ScriptDefinition'] = $instance = new \Shopware\Core\Framework\Script\ScriptDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Store\Api\ExtensionStoreActionsController' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Api\ExtensionStoreActionsController
     */
    protected static function getExtensionStoreActionsControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Api/ExtensionStoreActionsController.php';

        $container->services['Shopware\\Core\\Framework\\Store\\Api\\ExtensionStoreActionsController'] = $instance = new \Shopware\Core\Framework\Store\Api\ExtensionStoreActionsController(($container->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLifecycleService'] ?? self::getExtensionLifecycleServiceService($container)), ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionDownloader'] ?? self::getExtensionDownloaderService($container)), ($container->privates['Shopware\\Core\\Framework\\Plugin\\PluginService'] ?? self::getPluginServiceService($container)), ($container->privates['Shopware\\Core\\Framework\\Plugin\\PluginManagementService'] ?? self::getPluginManagementServiceService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Store\Api\ExtensionStoreDataController' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Api\ExtensionStoreDataController
     */
    protected static function getExtensionStoreDataControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Api/ExtensionStoreDataController.php';

        $container->services['Shopware\\Core\\Framework\\Store\\Api\\ExtensionStoreDataController'] = $instance = new \Shopware\Core\Framework\Store\Api\ExtensionStoreDataController(($container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'] ?? self::getAbstractExtensionDataProviderService($container)), ($container->services['user.repository'] ?? self::getUser_RepositoryService($container)), ($container->services['language.repository'] ?? self::getLanguage_RepositoryService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Store\Api\ExtensionStoreLicensesController' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Api\ExtensionStoreLicensesController
     */
    protected static function getExtensionStoreLicensesControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Api/ExtensionStoreLicensesController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/AbstractExtensionStoreLicensesService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/ExtensionStoreLicensesService.php';

        $container->services['Shopware\\Core\\Framework\\Store\\Api\\ExtensionStoreLicensesController'] = $instance = new \Shopware\Core\Framework\Store\Api\ExtensionStoreLicensesController(new \Shopware\Core\Framework\Store\Services\ExtensionStoreLicensesService(($container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'] ?? self::getStoreClientService($container))));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Store\Api\FirstRunWizardController' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Api\FirstRunWizardController
     */
    protected static function getFirstRunWizardControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Api/FirstRunWizardController.php';

        $container->services['Shopware\\Core\\Framework\\Store\\Api\\FirstRunWizardController'] = $instance = new \Shopware\Core\Framework\Store\Api\FirstRunWizardController(($container->privates['Shopware\\Core\\Framework\\Store\\Services\\FirstRunWizardService'] ?? self::getFirstRunWizardServiceService($container)), ($container->services['plugin.repository'] ?? self::getPlugin_RepositoryService($container)), ($container->services['app.repository'] ?? self::getApp_RepositoryService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Store\Api\StoreController' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Api\StoreController
     */
    protected static function getStoreControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Api/StoreController.php';

        $container->services['Shopware\\Core\\Framework\\Store\\Api\\StoreController'] = $instance = new \Shopware\Core\Framework\Store\Api\StoreController(($container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'] ?? self::getStoreClientService($container)), ($container->services['user.repository'] ?? self::getUser_RepositoryService($container)), ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'] ?? self::getAbstractExtensionDataProviderService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Store\Authentication\StoreRequestOptionsProvider' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Authentication\StoreRequestOptionsProvider
     */
    protected static function getStoreRequestOptionsProviderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Authentication/AbstractStoreRequestOptionsProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Authentication/StoreRequestOptionsProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/InstanceService.php';

        $a = ($container->services['user.repository'] ?? self::getUser_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\Store\\Authentication\\StoreRequestOptionsProvider'])) {
            return $container->services['Shopware\\Core\\Framework\\Store\\Authentication\\StoreRequestOptionsProvider'];
        }
        $b = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\Store\\Authentication\\StoreRequestOptionsProvider'])) {
            return $container->services['Shopware\\Core\\Framework\\Store\\Authentication\\StoreRequestOptionsProvider'];
        }

        return $container->services['Shopware\\Core\\Framework\\Store\\Authentication\\StoreRequestOptionsProvider'] = new \Shopware\Core\Framework\Store\Authentication\StoreRequestOptionsProvider($a, $b, ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\InstanceService'] ??= new \Shopware\Core\Framework\Store\Services\InstanceService('6.5.7.3', $container->getEnv('INSTANCE_ID'))), ($container->privates['Shopware\\Core\\Framework\\Store\\Authentication\\LocaleProvider'] ?? self::getLocaleProviderService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Store\Services\ShopSecretInvalidMiddleware' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\ShopSecretInvalidMiddleware
     */
    protected static function getShopSecretInvalidMiddlewareService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/MiddlewareInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/ShopSecretInvalidMiddleware.php';

        $a = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->services['Shopware\\Core\\Framework\\Store\\Services\\ShopSecretInvalidMiddleware'])) {
            return $container->services['Shopware\\Core\\Framework\\Store\\Services\\ShopSecretInvalidMiddleware'];
        }

        return $container->services['Shopware\\Core\\Framework\\Store\\Services\\ShopSecretInvalidMiddleware'] = new \Shopware\Core\Framework\Store\Services\ShopSecretInvalidMiddleware(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $a);
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Store\Services\StoreSessionExpiredMiddleware' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\StoreSessionExpiredMiddleware
     */
    protected static function getStoreSessionExpiredMiddlewareService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/MiddlewareInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/StoreSessionExpiredMiddleware.php';

        return $container->services['Shopware\\Core\\Framework\\Store\\Services\\StoreSessionExpiredMiddleware'] = new \Shopware\Core\Framework\Store\Services\StoreSessionExpiredMiddleware(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Store\Services\VerifyResponseSignatureMiddleware' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\VerifyResponseSignatureMiddleware
     */
    protected static function getVerifyResponseSignatureMiddlewareService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/MiddlewareInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/VerifyResponseSignatureMiddleware.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/OpenSSLVerifier.php';

        return $container->services['Shopware\\Core\\Framework\\Store\\Services\\VerifyResponseSignatureMiddleware'] = new \Shopware\Core\Framework\Store\Services\VerifyResponseSignatureMiddleware(new \Shopware\Core\Framework\Store\Services\OpenSSLVerifier([(\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/public.key')]));
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Update\Api\UpdateController' shared service.
     *
     * @return \Shopware\Core\Framework\Update\Api\UpdateController
     */
    protected static function getUpdateControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Update/Api/UpdateController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Update/Services/ApiClient.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Update/Checkers/WriteableCheck.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Update/Services/Filesystem.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Update/Checkers/LicenseCheck.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Update/Services/ExtensionCompatibility.php';

        $a = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));
        $b = ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'] ?? self::getStoreClientService($container));

        $container->services['Shopware\\Core\\Framework\\Update\\Api\\UpdateController'] = $instance = new \Shopware\Core\Framework\Update\Api\UpdateController(new \Shopware\Core\Framework\Update\Services\ApiClient(($container->privates['http_client.uri_template'] ?? self::getHttpClient_UriTemplateService($container)), true, '6.5.7.3', \dirname(__DIR__, 4)), new \Shopware\Core\Framework\Update\Checkers\WriteableCheck(new \Shopware\Core\Framework\Update\Services\Filesystem(), \dirname(__DIR__, 4)), new \Shopware\Core\Framework\Update\Checkers\LicenseCheck($a, $b), new \Shopware\Core\Framework\Update\Services\ExtensionCompatibility($b, ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'] ?? self::getAbstractExtensionDataProviderService($container))), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), $a, ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLifecycleService'] ?? self::getExtensionLifecycleServiceService($container)), '6.5.7.3', $container->getEnv('bool:SHOPWARE_DISABLE_UPDATE_CHECK'));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Util\HtmlSanitizer' shared service.
     *
     * @return \Shopware\Core\Framework\Util\HtmlSanitizer
     */
    protected static function getHtmlSanitizerService($container)
    {
        return $container->services['Shopware\\Core\\Framework\\Util\\HtmlSanitizer'] = new \Shopware\Core\Framework\Util\HtmlSanitizer($container->targetDir.'', true, $container->parameters['shopware.html_sanitizer.sets'], $container->parameters['shopware.html_sanitizer.fields'], true);
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Webhook\EventLog\WebhookEventLogDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Webhook\EventLog\WebhookEventLogDefinition
     */
    protected static function getWebhookEventLogDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/EventLog/WebhookEventLogDefinition.php';

        $container->services['Shopware\\Core\\Framework\\Webhook\\EventLog\\WebhookEventLogDefinition'] = $instance = new \Shopware\Core\Framework\Webhook\EventLog\WebhookEventLogDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Framework\Webhook\WebhookDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Webhook\WebhookDefinition
     */
    protected static function getWebhookDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/WebhookDefinition.php';

        $container->services['Shopware\\Core\\Framework\\Webhook\\WebhookDefinition'] = $instance = new \Shopware\Core\Framework\Webhook\WebhookDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\Maintenance\SalesChannel\Service\SalesChannelCreator' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\SalesChannel\Service\SalesChannelCreator
     */
    protected static function getSalesChannelCreatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/SalesChannel/Service/SalesChannelCreator.php';

        return $container->services['Shopware\\Core\\Maintenance\\SalesChannel\\Service\\SalesChannelCreator'] = new \Shopware\Core\Maintenance\SalesChannel\Service\SalesChannelCreator(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container)), ($container->services['payment_method.repository'] ?? self::getPaymentMethod_RepositoryService($container)), ($container->services['shipping_method.repository'] ?? self::getShippingMethod_RepositoryService($container)), ($container->services['country.repository'] ?? self::getCountry_RepositoryService($container)), ($container->services['category.repository'] ?? self::getCategory_RepositoryService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Maintenance\User\Service\UserProvisioner' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\User\Service\UserProvisioner
     */
    protected static function getUserProvisionerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/User/Service/UserProvisioner.php';

        return $container->services['Shopware\\Core\\Maintenance\\User\\Service\\UserProvisioner'] = new \Shopware\Core\Maintenance\User\Service\UserProvisioner(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\Profiling\Profiler' shared service.
     *
     * @return \Shopware\Core\Profiling\Profiler
     */
    protected static function getProfilerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Profiling/Profiler.php';

        return $container->services['Shopware\\Core\\Profiling\\Profiler'] = new \Shopware\Core\Profiling\Profiler(new RewindableGenerator(function () use ($container) {
            yield 'Symfony' => ($container->privates['Shopware\\Core\\Profiling\\Integration\\Stopwatch'] ?? self::getStopwatchService($container));
            yield 'Tideways' => ($container->privates['Shopware\\Core\\Profiling\\Integration\\Tideways'] ??= new \Shopware\Core\Profiling\Integration\Tideways());
            yield 'Datadog' => ($container->privates['Shopware\\Core\\Profiling\\Integration\\Datadog'] ??= new \Shopware\Core\Profiling\Integration\Datadog());
        }, 3), $container->parameters['shopware.profiler.integrations']);
    }

    /**
     * Gets the public 'Shopware\Core\System\Country\Aggregate\CountryStateTranslation\CountryStateTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Country\Aggregate\CountryStateTranslation\CountryStateTranslationDefinition
     */
    protected static function getCountryStateTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/Aggregate/CountryStateTranslation/CountryStateTranslationDefinition.php';

        $container->services['Shopware\\Core\\System\\Country\\Aggregate\\CountryStateTranslation\\CountryStateTranslationDefinition'] = $instance = new \Shopware\Core\System\Country\Aggregate\CountryStateTranslation\CountryStateTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Country\Aggregate\CountryState\CountryStateDefinition' shared service.
     *
     * @return \Shopware\Core\System\Country\Aggregate\CountryState\CountryStateDefinition
     */
    protected static function getCountryStateDefinitionService($container)
    {
        $container->services['Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\CountryStateDefinition'] = $instance = new \Shopware\Core\System\Country\Aggregate\CountryState\CountryStateDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Country\Aggregate\CountryState\SalesChannel\SalesChannelCountryStateDefinition' shared service.
     *
     * @return \Shopware\Core\System\Country\Aggregate\CountryState\SalesChannel\SalesChannelCountryStateDefinition
     */
    protected static function getSalesChannelCountryStateDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/Aggregate/CountryState/SalesChannel/SalesChannelCountryStateDefinition.php';

        $container->services['Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\SalesChannel\\SalesChannelCountryStateDefinition'] = $instance = new \Shopware\Core\System\Country\Aggregate\CountryState\SalesChannel\SalesChannelCountryStateDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Country\Aggregate\CountryTranslation\CountryTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Country\Aggregate\CountryTranslation\CountryTranslationDefinition
     */
    protected static function getCountryTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/Aggregate/CountryTranslation/CountryTranslationDefinition.php';

        $container->services['Shopware\\Core\\System\\Country\\Aggregate\\CountryTranslation\\CountryTranslationDefinition'] = $instance = new \Shopware\Core\System\Country\Aggregate\CountryTranslation\CountryTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Country\CountryDefinition' shared service.
     *
     * @return \Shopware\Core\System\Country\CountryDefinition
     */
    protected static function getCountryDefinitionService($container)
    {
        $container->services['Shopware\\Core\\System\\Country\\CountryDefinition'] = $instance = new \Shopware\Core\System\Country\CountryDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Country\SalesChannel\CachedCountryRoute' shared service.
     *
     * @return \Shopware\Core\System\Country\SalesChannel\CachedCountryRoute
     */
    protected static function getCachedCountryRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/SalesChannel/AbstractCountryRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/SalesChannel/CachedCountryRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/SalesChannel/CountryRoute.php';

        return $container->services['Shopware\\Core\\System\\Country\\SalesChannel\\CachedCountryRoute'] = new \Shopware\Core\System\Country\SalesChannel\CachedCountryRoute(new \Shopware\Core\System\Country\SalesChannel\CountryRoute(($container->services['sales_channel.country.repository'] ?? self::getSalesChannel_Country_RepositoryService($container))), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator()), ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? self::getCacheTracerService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), []);
    }

    /**
     * Gets the public 'Shopware\Core\System\Country\SalesChannel\CachedCountryStateRoute' shared service.
     *
     * @return \Shopware\Core\System\Country\SalesChannel\CachedCountryStateRoute
     */
    protected static function getCachedCountryStateRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/SalesChannel/AbstractCountryStateRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/SalesChannel/CachedCountryStateRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/SalesChannel/CountryStateRoute.php';

        return $container->services['Shopware\\Core\\System\\Country\\SalesChannel\\CachedCountryStateRoute'] = new \Shopware\Core\System\Country\SalesChannel\CachedCountryStateRoute(new \Shopware\Core\System\Country\SalesChannel\CountryStateRoute(($container->services['country_state.repository'] ?? self::getCountryState_RepositoryService($container))), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator()), ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? self::getCacheTracerService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), []);
    }

    /**
     * Gets the public 'Shopware\Core\System\Country\SalesChannel\SalesChannelCountryDefinition' shared service.
     *
     * @return \Shopware\Core\System\Country\SalesChannel\SalesChannelCountryDefinition
     */
    protected static function getSalesChannelCountryDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/SalesChannel/SalesChannelCountryDefinition.php';

        $container->services['Shopware\\Core\\System\\Country\\SalesChannel\\SalesChannelCountryDefinition'] = $instance = new \Shopware\Core\System\Country\SalesChannel\SalesChannelCountryDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Currency\Aggregate\CurrencyCountryRounding\CurrencyCountryRoundingDefinition' shared service.
     *
     * @return \Shopware\Core\System\Currency\Aggregate\CurrencyCountryRounding\CurrencyCountryRoundingDefinition
     */
    protected static function getCurrencyCountryRoundingDefinitionService($container)
    {
        $container->services['Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyCountryRounding\\CurrencyCountryRoundingDefinition'] = $instance = new \Shopware\Core\System\Currency\Aggregate\CurrencyCountryRounding\CurrencyCountryRoundingDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Currency\Aggregate\CurrencyTranslation\CurrencyTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Currency\Aggregate\CurrencyTranslation\CurrencyTranslationDefinition
     */
    protected static function getCurrencyTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Currency/Aggregate/CurrencyTranslation/CurrencyTranslationDefinition.php';

        $container->services['Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyTranslation\\CurrencyTranslationDefinition'] = $instance = new \Shopware\Core\System\Currency\Aggregate\CurrencyTranslation\CurrencyTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Currency\CurrencyDefinition' shared service.
     *
     * @return \Shopware\Core\System\Currency\CurrencyDefinition
     */
    protected static function getCurrencyDefinitionService($container)
    {
        $container->services['Shopware\\Core\\System\\Currency\\CurrencyDefinition'] = $instance = new \Shopware\Core\System\Currency\CurrencyDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Currency\CurrencyFormatter' shared service.
     *
     * @return \Shopware\Core\System\Currency\CurrencyFormatter
     */
    protected static function getCurrencyFormatterService($container)
    {
        return $container->services['Shopware\\Core\\System\\Currency\\CurrencyFormatter'] = new \Shopware\Core\System\Currency\CurrencyFormatter(($container->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'] ?? self::getLanguageLocaleCodeProviderService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\System\Currency\SalesChannel\CachedCurrencyRoute' shared service.
     *
     * @return \Shopware\Core\System\Currency\SalesChannel\CachedCurrencyRoute
     */
    protected static function getCachedCurrencyRouteService($container)
    {
        $a = ($container->services['sales_channel.currency.repository'] ?? self::getSalesChannel_Currency_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\System\\Currency\\SalesChannel\\CachedCurrencyRoute'])) {
            return $container->services['Shopware\\Core\\System\\Currency\\SalesChannel\\CachedCurrencyRoute'];
        }
        $b = ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? self::getCacheTracerService($container));

        if (isset($container->services['Shopware\\Core\\System\\Currency\\SalesChannel\\CachedCurrencyRoute'])) {
            return $container->services['Shopware\\Core\\System\\Currency\\SalesChannel\\CachedCurrencyRoute'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\System\\Currency\\SalesChannel\\CachedCurrencyRoute'])) {
            return $container->services['Shopware\\Core\\System\\Currency\\SalesChannel\\CachedCurrencyRoute'];
        }

        return $container->services['Shopware\\Core\\System\\Currency\\SalesChannel\\CachedCurrencyRoute'] = new \Shopware\Core\System\Currency\SalesChannel\CachedCurrencyRoute(new \Shopware\Core\System\Currency\SalesChannel\CurrencyRoute($a), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator()), $b, $c, []);
    }

    /**
     * Gets the public 'Shopware\Core\System\Currency\SalesChannel\SalesChannelCurrencyDefinition' shared service.
     *
     * @return \Shopware\Core\System\Currency\SalesChannel\SalesChannelCurrencyDefinition
     */
    protected static function getSalesChannelCurrencyDefinitionService($container)
    {
        $container->services['Shopware\\Core\\System\\Currency\\SalesChannel\\SalesChannelCurrencyDefinition'] = $instance = new \Shopware\Core\System\Currency\SalesChannel\SalesChannelCurrencyDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\CustomEntity\Api\CustomEntityApiController' shared service.
     *
     * @return \Shopware\Core\System\CustomEntity\Api\CustomEntityApiController
     */
    protected static function getCustomEntityApiControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Controller/ApiController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomEntity/Api/CustomEntityApiController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityProtection/EntityProtectionValidator.php';

        $container->services['Shopware\\Core\\System\\CustomEntity\\Api\\CustomEntityApiController'] = $instance = new \Shopware\Core\System\CustomEntity\Api\CustomEntityApiController(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->privates['serializer'] ?? self::getSerializerService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\RequestCriteriaBuilder'] ?? self::getRequestCriteriaBuilderService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityProtection\\EntityProtectionValidator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\EntityProtection\EntityProtectionValidator()), ($container->services['Shopware\\Core\\Framework\\Api\\Acl\\AclCriteriaValidator'] ?? self::getAclCriteriaValidatorService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\CustomEntity\CustomEntityDefinition' shared service.
     *
     * @return \Shopware\Core\System\CustomEntity\CustomEntityDefinition
     */
    protected static function getCustomEntityDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomEntity/CustomEntityDefinition.php';

        $container->services['Shopware\\Core\\System\\CustomEntity\\CustomEntityDefinition'] = $instance = new \Shopware\Core\System\CustomEntity\CustomEntityDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\CustomEntity\CustomEntityRegistrar' shared service.
     *
     * @return \Shopware\Core\System\CustomEntity\CustomEntityRegistrar
     */
    protected static function getCustomEntityRegistrarService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomEntity/CustomEntityRegistrar.php';

        return $container->services['Shopware\\Core\\System\\CustomEntity\\CustomEntityRegistrar'] = new \Shopware\Core\System\CustomEntity\CustomEntityRegistrar($container);
    }

    /**
     * Gets the public 'Shopware\Core\System\CustomEntity\Schema\CustomEntitySchemaUpdater' shared service.
     *
     * @return \Shopware\Core\System\CustomEntity\Schema\CustomEntitySchemaUpdater
     */
    protected static function getCustomEntitySchemaUpdaterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomEntity/Schema/CustomEntitySchemaUpdater.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomEntity/Schema/SchemaUpdater.php';

        return $container->services['Shopware\\Core\\System\\CustomEntity\\Schema\\CustomEntitySchemaUpdater'] = new \Shopware\Core\System\CustomEntity\Schema\CustomEntitySchemaUpdater(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['lock.default.factory'] ?? self::getLock_Default_FactoryService($container)), new \Shopware\Core\System\CustomEntity\Schema\SchemaUpdater());
    }

    /**
     * Gets the public 'Shopware\Core\System\CustomField\Aggregate\CustomFieldSetRelation\CustomFieldSetRelationDefinition' shared service.
     *
     * @return \Shopware\Core\System\CustomField\Aggregate\CustomFieldSetRelation\CustomFieldSetRelationDefinition
     */
    protected static function getCustomFieldSetRelationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomField/Aggregate/CustomFieldSetRelation/CustomFieldSetRelationDefinition.php';

        $container->services['Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSetRelation\\CustomFieldSetRelationDefinition'] = $instance = new \Shopware\Core\System\CustomField\Aggregate\CustomFieldSetRelation\CustomFieldSetRelationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\CustomField\Aggregate\CustomFieldSet\CustomFieldSetDefinition' shared service.
     *
     * @return \Shopware\Core\System\CustomField\Aggregate\CustomFieldSet\CustomFieldSetDefinition
     */
    protected static function getCustomFieldSetDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomField/Aggregate/CustomFieldSet/CustomFieldSetDefinition.php';

        $container->services['Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSet\\CustomFieldSetDefinition'] = $instance = new \Shopware\Core\System\CustomField\Aggregate\CustomFieldSet\CustomFieldSetDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\CustomField\Api\CustomFieldSetActionController' shared service.
     *
     * @return \Shopware\Core\System\CustomField\Api\CustomFieldSetActionController
     */
    protected static function getCustomFieldSetActionControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomField/Api/CustomFieldSetActionController.php';

        $container->services['Shopware\\Core\\System\\CustomField\\Api\\CustomFieldSetActionController'] = $instance = new \Shopware\Core\System\CustomField\Api\CustomFieldSetActionController(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\CustomField\CustomFieldDefinition' shared service.
     *
     * @return \Shopware\Core\System\CustomField\CustomFieldDefinition
     */
    protected static function getCustomFieldDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomField/CustomFieldDefinition.php';

        $container->services['Shopware\\Core\\System\\CustomField\\CustomFieldDefinition'] = $instance = new \Shopware\Core\System\CustomField\CustomFieldDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\DeliveryTime\Aggregate\DeliveryTimeTranslation\DeliveryTimeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\DeliveryTime\Aggregate\DeliveryTimeTranslation\DeliveryTimeTranslationDefinition
     */
    protected static function getDeliveryTimeTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/DeliveryTime/Aggregate/DeliveryTimeTranslation/DeliveryTimeTranslationDefinition.php';

        $container->services['Shopware\\Core\\System\\DeliveryTime\\Aggregate\\DeliveryTimeTranslation\\DeliveryTimeTranslationDefinition'] = $instance = new \Shopware\Core\System\DeliveryTime\Aggregate\DeliveryTimeTranslation\DeliveryTimeTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\DeliveryTime\DeliveryTimeDefinition' shared service.
     *
     * @return \Shopware\Core\System\DeliveryTime\DeliveryTimeDefinition
     */
    protected static function getDeliveryTimeDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/DeliveryTime/DeliveryTimeDefinition.php';

        $container->services['Shopware\\Core\\System\\DeliveryTime\\DeliveryTimeDefinition'] = $instance = new \Shopware\Core\System\DeliveryTime\DeliveryTimeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Integration\Aggregate\IntegrationRole\IntegrationRoleDefinition' shared service.
     *
     * @return \Shopware\Core\System\Integration\Aggregate\IntegrationRole\IntegrationRoleDefinition
     */
    protected static function getIntegrationRoleDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Integration/Aggregate/IntegrationRole/IntegrationRoleDefinition.php';

        $container->services['Shopware\\Core\\System\\Integration\\Aggregate\\IntegrationRole\\IntegrationRoleDefinition'] = $instance = new \Shopware\Core\System\Integration\Aggregate\IntegrationRole\IntegrationRoleDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Integration\IntegrationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Integration\IntegrationDefinition
     */
    protected static function getIntegrationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Integration/IntegrationDefinition.php';

        $container->services['Shopware\\Core\\System\\Integration\\IntegrationDefinition'] = $instance = new \Shopware\Core\System\Integration\IntegrationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Language\LanguageDefinition' shared service.
     *
     * @return \Shopware\Core\System\Language\LanguageDefinition
     */
    protected static function getLanguageDefinitionService($container)
    {
        $container->services['Shopware\\Core\\System\\Language\\LanguageDefinition'] = $instance = new \Shopware\Core\System\Language\LanguageDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Language\SalesChannel\CachedLanguageRoute' shared service.
     *
     * @return \Shopware\Core\System\Language\SalesChannel\CachedLanguageRoute
     */
    protected static function getCachedLanguageRouteService($container)
    {
        $a = ($container->services['sales_channel.language.repository'] ?? self::getSalesChannel_Language_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\System\\Language\\SalesChannel\\CachedLanguageRoute'])) {
            return $container->services['Shopware\\Core\\System\\Language\\SalesChannel\\CachedLanguageRoute'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\System\\Language\\SalesChannel\\CachedLanguageRoute'])) {
            return $container->services['Shopware\\Core\\System\\Language\\SalesChannel\\CachedLanguageRoute'];
        }

        return $container->services['Shopware\\Core\\System\\Language\\SalesChannel\\CachedLanguageRoute'] = new \Shopware\Core\System\Language\SalesChannel\CachedLanguageRoute(new \Shopware\Core\System\Language\SalesChannel\LanguageRoute($a), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator()), ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? self::getCacheTracerService($container)), $b, []);
    }

    /**
     * Gets the public 'Shopware\Core\System\Language\SalesChannel\SalesChannelLanguageDefinition' shared service.
     *
     * @return \Shopware\Core\System\Language\SalesChannel\SalesChannelLanguageDefinition
     */
    protected static function getSalesChannelLanguageDefinitionService($container)
    {
        $container->services['Shopware\\Core\\System\\Language\\SalesChannel\\SalesChannelLanguageDefinition'] = $instance = new \Shopware\Core\System\Language\SalesChannel\SalesChannelLanguageDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Locale\Aggregate\LocaleTranslation\LocaleTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Locale\Aggregate\LocaleTranslation\LocaleTranslationDefinition
     */
    protected static function getLocaleTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Locale/Aggregate/LocaleTranslation/LocaleTranslationDefinition.php';

        $container->services['Shopware\\Core\\System\\Locale\\Aggregate\\LocaleTranslation\\LocaleTranslationDefinition'] = $instance = new \Shopware\Core\System\Locale\Aggregate\LocaleTranslation\LocaleTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Locale\LocaleDefinition' shared service.
     *
     * @return \Shopware\Core\System\Locale\LocaleDefinition
     */
    protected static function getLocaleDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Locale/LocaleDefinition.php';

        $container->services['Shopware\\Core\\System\\Locale\\LocaleDefinition'] = $instance = new \Shopware\Core\System\Locale\LocaleDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\NumberRange\Aggregate\NumberRangeSalesChannel\NumberRangeSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Aggregate\NumberRangeSalesChannel\NumberRangeSalesChannelDefinition
     */
    protected static function getNumberRangeSalesChannelDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Aggregate/NumberRangeSalesChannel/NumberRangeSalesChannelDefinition.php';

        $container->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeSalesChannel\\NumberRangeSalesChannelDefinition'] = $instance = new \Shopware\Core\System\NumberRange\Aggregate\NumberRangeSalesChannel\NumberRangeSalesChannelDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\NumberRange\Aggregate\NumberRangeState\NumberRangeStateDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Aggregate\NumberRangeState\NumberRangeStateDefinition
     */
    protected static function getNumberRangeStateDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Aggregate/NumberRangeState/NumberRangeStateDefinition.php';

        $container->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeState\\NumberRangeStateDefinition'] = $instance = new \Shopware\Core\System\NumberRange\Aggregate\NumberRangeState\NumberRangeStateDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\NumberRange\Aggregate\NumberRangeTranslation\NumberRangeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Aggregate\NumberRangeTranslation\NumberRangeTranslationDefinition
     */
    protected static function getNumberRangeTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Aggregate/NumberRangeTranslation/NumberRangeTranslationDefinition.php';

        $container->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTranslation\\NumberRangeTranslationDefinition'] = $instance = new \Shopware\Core\System\NumberRange\Aggregate\NumberRangeTranslation\NumberRangeTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\NumberRange\Aggregate\NumberRangeTypeTranslation\NumberRangeTypeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Aggregate\NumberRangeTypeTranslation\NumberRangeTypeTranslationDefinition
     */
    protected static function getNumberRangeTypeTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Aggregate/NumberRangeTypeTranslation/NumberRangeTypeTranslationDefinition.php';

        $container->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTypeTranslation\\NumberRangeTypeTranslationDefinition'] = $instance = new \Shopware\Core\System\NumberRange\Aggregate\NumberRangeTypeTranslation\NumberRangeTypeTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\NumberRange\Aggregate\NumberRangeType\NumberRangeTypeDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Aggregate\NumberRangeType\NumberRangeTypeDefinition
     */
    protected static function getNumberRangeTypeDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Aggregate/NumberRangeType/NumberRangeTypeDefinition.php';

        $container->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeType\\NumberRangeTypeDefinition'] = $instance = new \Shopware\Core\System\NumberRange\Aggregate\NumberRangeType\NumberRangeTypeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\NumberRange\Api\NumberRangeController' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Api\NumberRangeController
     */
    protected static function getNumberRangeControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Api/NumberRangeController.php';

        $container->services['Shopware\\Core\\System\\NumberRange\\Api\\NumberRangeController'] = $instance = new \Shopware\Core\System\NumberRange\Api\NumberRangeController(($container->services['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface'] ?? self::getNumberRangeValueGeneratorInterfaceService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\NumberRange\NumberRangeDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\NumberRangeDefinition
     */
    protected static function getNumberRangeDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/NumberRangeDefinition.php';

        $container->services['Shopware\\Core\\System\\NumberRange\\NumberRangeDefinition'] = $instance = new \Shopware\Core\System\NumberRange\NumberRangeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\NumberRange\ValueGenerator\NumberRangeValueGeneratorInterface' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\ValueGenerator\NumberRangeValueGenerator
     */
    protected static function getNumberRangeValueGeneratorInterfaceService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface'])) {
            return $container->services['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface'];
        }

        return $container->services['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface'] = new \Shopware\Core\System\NumberRange\ValueGenerator\NumberRangeValueGenerator(new \Shopware\Core\System\NumberRange\ValueGenerator\Pattern\ValueGeneratorPatternRegistry(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\Pattern\\ValueGeneratorPatternIncrement'] ?? self::getValueGeneratorPatternIncrementService($container));
            yield 1 => ($container->privates['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\Pattern\\ValueGeneratorPatternDate'] ??= new \Shopware\Core\System\NumberRange\ValueGenerator\Pattern\ValueGeneratorPatternDate());
        }, 2)), $a, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\System\SalesChannel\Aggregate\SalesChannelAnalytics\SalesChannelAnalyticsDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelAnalytics\SalesChannelAnalyticsDefinition
     */
    protected static function getSalesChannelAnalyticsDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelAnalytics/SalesChannelAnalyticsDefinition.php';

        $container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelAnalytics\\SalesChannelAnalyticsDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelAnalytics\SalesChannelAnalyticsDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCountry\SalesChannelCountryDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCountry\SalesChannelCountryDefinition
     */
    protected static function getSalesChannelCountryDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelCountry/SalesChannelCountryDefinition.php';

        $container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCountry\\SalesChannelCountryDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCountry\SalesChannelCountryDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCurrency\SalesChannelCurrencyDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCurrency\SalesChannelCurrencyDefinition
     */
    protected static function getSalesChannelCurrencyDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelCurrency/SalesChannelCurrencyDefinition.php';

        $container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCurrency\\SalesChannelCurrencyDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCurrency\SalesChannelCurrencyDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\SalesChannel\Aggregate\SalesChannelDomain\SalesChannelDomainDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelDomain\SalesChannelDomainDefinition
     */
    protected static function getSalesChannelDomainDefinitionService($container)
    {
        $container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelDomain\\SalesChannelDomainDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelDomain\SalesChannelDomainDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\SalesChannel\Aggregate\SalesChannelLanguage\SalesChannelLanguageDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelLanguage\SalesChannelLanguageDefinition
     */
    protected static function getSalesChannelLanguageDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelLanguage/SalesChannelLanguageDefinition.php';

        $container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelLanguage\\SalesChannelLanguageDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelLanguage\SalesChannelLanguageDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\SalesChannel\Aggregate\SalesChannelPaymentMethod\SalesChannelPaymentMethodDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelPaymentMethod\SalesChannelPaymentMethodDefinition
     */
    protected static function getSalesChannelPaymentMethodDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelPaymentMethod/SalesChannelPaymentMethodDefinition.php';

        $container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelPaymentMethod\\SalesChannelPaymentMethodDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelPaymentMethod\SalesChannelPaymentMethodDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\SalesChannel\Aggregate\SalesChannelShippingMethod\SalesChannelShippingMethodDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelShippingMethod\SalesChannelShippingMethodDefinition
     */
    protected static function getSalesChannelShippingMethodDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelShippingMethod/SalesChannelShippingMethodDefinition.php';

        $container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelShippingMethod\\SalesChannelShippingMethodDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelShippingMethod\SalesChannelShippingMethodDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTranslation\SalesChannelTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTranslation\SalesChannelTranslationDefinition
     */
    protected static function getSalesChannelTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelTranslation/SalesChannelTranslationDefinition.php';

        $container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTranslation\\SalesChannelTranslationDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTranslation\SalesChannelTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTypeTranslation\SalesChannelTypeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTypeTranslation\SalesChannelTypeTranslationDefinition
     */
    protected static function getSalesChannelTypeTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelTypeTranslation/SalesChannelTypeTranslationDefinition.php';

        $container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTypeTranslation\\SalesChannelTypeTranslationDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTypeTranslation\SalesChannelTypeTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\SalesChannel\Aggregate\SalesChannelType\SalesChannelTypeDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelType\SalesChannelTypeDefinition
     */
    protected static function getSalesChannelTypeDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelType/SalesChannelTypeDefinition.php';

        $container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelType\\SalesChannelTypeDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelType\SalesChannelTypeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\SalesChannel\Context\SalesChannelContextFactory' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Context\CachedSalesChannelContextFactory
     */
    protected static function getSalesChannelContextFactoryService($container)
    {
        $a = ($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $b = ($container->services['customer_group.repository'] ?? self::getCustomerGroup_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $c = ($container->services['customer_address.repository'] ?? self::getCustomerAddress_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $d = ($container->services['payment_method.repository'] ?? self::getPaymentMethod_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $e = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $f = ($container->services['currency_country_rounding.repository'] ?? self::getCurrencyCountryRounding_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $g = ($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $h = ($container->services['currency.repository'] ?? self::getCurrency_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $i = ($container->services['country.repository'] ?? self::getCountry_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $j = ($container->services['tax.repository'] ?? self::getTax_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $k = ($container->services['shipping_method.repository'] ?? self::getShippingMethod_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $l = ($container->services['country_state.repository'] ?? self::getCountryState_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $m = ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? self::getCacheTracerService($container));

        if (isset($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'])) {
            return $container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'];
        }
        $n = ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container));

        return $container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] = new \Shopware\Core\System\SalesChannel\Context\CachedSalesChannelContextFactory(new \Shopware\Core\System\SalesChannel\Context\SalesChannelContextFactory($a, $b, $c, $d, ($container->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\TaxDetector'] ??= new \Shopware\Core\Checkout\Cart\Tax\TaxDetector()), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\System\\Tax\\TaxRuleType\\EntireCountryRuleTypeFilter'] ??= new \Shopware\Core\System\Tax\TaxRuleType\EntireCountryRuleTypeFilter());
            yield 1 => ($container->privates['Shopware\\Core\\System\\Tax\\TaxRuleType\\IndividualStatesRuleTypeFilter'] ??= new \Shopware\Core\System\Tax\TaxRuleType\IndividualStatesRuleTypeFilter());
            yield 2 => ($container->privates['Shopware\\Core\\System\\Tax\\TaxRuleType\\ZipCodeRangeRuleTypeFilter'] ??= new \Shopware\Core\System\Tax\TaxRuleType\ZipCodeRangeRuleTypeFilter());
            yield 3 => ($container->privates['Shopware\\Core\\System\\Tax\\TaxRuleType\\ZipCodeRuleTypeFilter'] ??= new \Shopware\Core\System\Tax\TaxRuleType\ZipCodeRuleTypeFilter());
        }, 4), $e, $f, new \Shopware\Core\System\SalesChannel\Context\CachedBaseContextFactory(new \Shopware\Core\System\SalesChannel\Context\BaseContextFactory($g, $h, $b, $i, $j, $d, $k, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $l, $f), $n, $m)), $n, $m);
    }

    /**
     * Gets the public 'Shopware\Core\System\SalesChannel\Entity\SalesChannelDefinitionInstanceRegistry' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelDefinitionInstanceRegistry
     */
    protected static function getSalesChannelDefinitionInstanceRegistryService($container)
    {
        return $container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelDefinitionInstanceRegistry('sales_channel_definition.', $container, ['log_entry' => 'Shopware\\Core\\Framework\\Log\\LogEntryDefinition', 'acl_role' => 'Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclRoleDefinition', 'acl_user_role' => 'Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclUserRoleDefinition', 'app' => 'Shopware\\Core\\Framework\\App\\AppDefinition', 'app_translation' => 'Shopware\\Core\\Framework\\App\\Aggregate\\AppTranslation\\AppTranslationDefinition', 'app_action_button' => 'Shopware\\Core\\Framework\\App\\Aggregate\\ActionButton\\ActionButtonDefinition', 'app_action_button_translation' => 'Shopware\\Core\\Framework\\App\\Aggregate\\ActionButtonTranslation\\ActionButtonTranslationDefinition', 'app_template' => 'Shopware\\Core\\Framework\\App\\Template\\TemplateDefinition', 'app_payment_method' => 'Shopware\\Core\\Framework\\App\\Aggregate\\AppPaymentMethod\\AppPaymentMethodDefinition', 'app_script_condition' => 'Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptCondition\\AppScriptConditionDefinition', 'app_script_condition_translation' => 'Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptConditionTranslation\\AppScriptConditionTranslationDefinition', 'app_cms_block' => 'Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlock\\AppCmsBlockDefinition', 'app_cms_block_translation' => 'Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlockTranslation\\AppCmsBlockTranslationDefinition', 'app_flow_action' => 'Shopware\\Core\\Framework\\App\\Aggregate\\FlowAction\\AppFlowActionDefinition', 'app_flow_action_translation' => 'Shopware\\Core\\Framework\\App\\Aggregate\\FlowActionTranslation\\AppFlowActionTranslationDefinition', 'app_flow_event' => 'Shopware\\Core\\Framework\\App\\Aggregate\\FlowEvent\\AppFlowEventDefinition', 'app_shipping_method' => 'Shopware\\Core\\Framework\\App\\Aggregate\\AppShippingMethod\\AppShippingMethodDefinition', 'custom_field' => 'Shopware\\Core\\System\\CustomField\\CustomFieldDefinition', 'custom_field_set' => 'Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSet\\CustomFieldSetDefinition', 'custom_field_set_relation' => 'Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSetRelation\\CustomFieldSetRelationDefinition', 'version' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\VersionDefinition', 'version_commit' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommit\\VersionCommitDefinition', 'version_commit_data' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommitData\\VersionCommitDataDefinition', 'plugin' => 'Shopware\\Core\\Framework\\Plugin\\PluginDefinition', 'plugin_translation' => 'Shopware\\Core\\Framework\\Plugin\\Aggregate\\PluginTranslation\\PluginTranslationDefinition', 'scheduled_task' => 'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\ScheduledTaskDefinition', 'script' => 'Shopware\\Core\\Framework\\Script\\ScriptDefinition', 'language' => 'Shopware\\Core\\System\\Language\\SalesChannel\\SalesChannelLanguageDefinition', 'seo_url' => 'Shopware\\Core\\Content\\Seo\\SeoUrl\\SalesChannel\\SalesChannelSeoUrlDefinition', 'seo_url_template' => 'Shopware\\Core\\Content\\Seo\\SeoUrlTemplate\\SeoUrlTemplateDefinition', 'main_category' => 'Shopware\\Core\\Content\\Seo\\MainCategory\\SalesChannel\\SalesChannelMainCategoryDefinition', 'webhook' => 'Shopware\\Core\\Framework\\Webhook\\WebhookDefinition', 'webhook_event_log' => 'Shopware\\Core\\Framework\\Webhook\\EventLog\\WebhookEventLogDefinition', 'sales_channel' => 'Shopware\\Core\\System\\SalesChannel\\SalesChannelDefinition', 'sales_channel_translation' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTranslation\\SalesChannelTranslationDefinition', 'sales_channel_country' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCountry\\SalesChannelCountryDefinition', 'sales_channel_currency' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCurrency\\SalesChannelCurrencyDefinition', 'sales_channel_domain' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelDomain\\SalesChannelDomainDefinition', 'sales_channel_language' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelLanguage\\SalesChannelLanguageDefinition', 'sales_channel_payment_method' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelPaymentMethod\\SalesChannelPaymentMethodDefinition', 'sales_channel_shipping_method' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelShippingMethod\\SalesChannelShippingMethodDefinition', 'sales_channel_type' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelType\\SalesChannelTypeDefinition', 'sales_channel_type_translation' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTypeTranslation\\SalesChannelTypeTranslationDefinition', 'sales_channel_analytics' => 'Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelAnalytics\\SalesChannelAnalyticsDefinition', 'country' => 'Shopware\\Core\\System\\Country\\SalesChannel\\SalesChannelCountryDefinition', 'country_state' => 'Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\SalesChannel\\SalesChannelCountryStateDefinition', 'country_state_translation' => 'Shopware\\Core\\System\\Country\\Aggregate\\CountryStateTranslation\\CountryStateTranslationDefinition', 'country_translation' => 'Shopware\\Core\\System\\Country\\Aggregate\\CountryTranslation\\CountryTranslationDefinition', 'currency' => 'Shopware\\Core\\System\\Currency\\SalesChannel\\SalesChannelCurrencyDefinition', 'currency_country_rounding' => 'Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyCountryRounding\\CurrencyCountryRoundingDefinition', 'currency_translation' => 'Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyTranslation\\CurrencyTranslationDefinition', 'custom_entity' => 'Shopware\\Core\\System\\CustomEntity\\CustomEntityDefinition', 'locale' => 'Shopware\\Core\\System\\Locale\\LocaleDefinition', 'locale_translation' => 'Shopware\\Core\\System\\Locale\\Aggregate\\LocaleTranslation\\LocaleTranslationDefinition', 'snippet_set' => 'Shopware\\Core\\System\\Snippet\\Aggregate\\SnippetSet\\SnippetSetDefinition', 'snippet' => 'Shopware\\Core\\System\\Snippet\\SnippetDefinition', 'salutation' => 'Shopware\\Core\\System\\Salutation\\SalesChannel\\SalesChannelSalutationDefinition', 'salutation_translation' => 'Shopware\\Core\\System\\Salutation\\Aggregate\\SalutationTranslation\\SalutationTranslationDefinition', 'tax' => 'Shopware\\Core\\System\\Tax\\TaxDefinition', 'tax_rule' => 'Shopware\\Core\\System\\Tax\\Aggregate\\TaxRule\\TaxRuleDefinition', 'tax_rule_type' => 'Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleType\\TaxRuleTypeDefinition', 'tax_rule_type_translation' => 'Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleTypeTranslation\\TaxRuleTypeTranslationDefinition', 'tax_provider' => 'Shopware\\Core\\System\\TaxProvider\\TaxProviderDefinition', 'tax_provider_translation' => 'Shopware\\Core\\System\\TaxProvider\\Aggregate\\TaxProviderTranslation\\TaxProviderTranslationDefinition', 'unit' => 'Shopware\\Core\\System\\Unit\\UnitDefinition', 'unit_translation' => 'Shopware\\Core\\System\\Unit\\Aggregate\\UnitTranslation\\UnitTranslationDefinition', 'user' => 'Shopware\\Core\\System\\User\\UserDefinition', 'user_config' => 'Shopware\\Core\\System\\User\\Aggregate\\UserConfig\\UserConfigDefinition', 'user_access_key' => 'Shopware\\Core\\System\\User\\Aggregate\\UserAccessKey\\UserAccessKeyDefinition', 'user_recovery' => 'Shopware\\Core\\System\\User\\Aggregate\\UserRecovery\\UserRecoveryDefinition', 'integration' => 'Shopware\\Core\\System\\Integration\\IntegrationDefinition', 'integration_role' => 'Shopware\\Core\\System\\Integration\\Aggregate\\IntegrationRole\\IntegrationRoleDefinition', 'state_machine' => 'Shopware\\Core\\System\\StateMachine\\StateMachineDefinition', 'state_machine_translation' => 'Shopware\\Core\\System\\StateMachine\\StateMachineTranslationDefinition', 'state_machine_state' => 'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateDefinition', 'state_machine_state_translation' => 'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateTranslationDefinition', 'state_machine_transition' => 'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineTransition\\StateMachineTransitionDefinition', 'state_machine_history' => 'Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineHistory\\StateMachineHistoryDefinition', 'system_config' => 'Shopware\\Core\\System\\SystemConfig\\SystemConfigDefinition', 'number_range' => 'Shopware\\Core\\System\\NumberRange\\NumberRangeDefinition', 'number_range_sales_channel' => 'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeSalesChannel\\NumberRangeSalesChannelDefinition', 'number_range_state' => 'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeState\\NumberRangeStateDefinition', 'number_range_type' => 'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeType\\NumberRangeTypeDefinition', 'number_range_type_translation' => 'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTypeTranslation\\NumberRangeTypeTranslationDefinition', 'number_range_translation' => 'Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTranslation\\NumberRangeTranslationDefinition', 'tag' => 'Shopware\\Core\\System\\Tag\\TagDefinition', 'category' => 'Shopware\\Core\\Content\\Category\\SalesChannel\\SalesChannelCategoryDefinition', 'category_translation' => 'Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTranslation\\CategoryTranslationDefinition', 'category_tag' => 'Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTag\\CategoryTagDefinition', 'media' => 'Shopware\\Core\\Content\\Media\\MediaDefinition', 'media_default_folder' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaDefaultFolder\\MediaDefaultFolderDefinition', 'media_thumbnail' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnail\\MediaThumbnailDefinition', 'media_translation' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaTranslation\\MediaTranslationDefinition', 'media_folder' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolder\\MediaFolderDefinition', 'media_thumbnail_size' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnailSize\\MediaThumbnailSizeDefinition', 'media_folder_configuration' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfiguration\\MediaFolderConfigurationDefinition', 'media_folder_configuration_media_thumbnail_size' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfigurationMediaThumbnailSize\\MediaFolderConfigurationMediaThumbnailSizeDefinition', 'media_tag' => 'Shopware\\Core\\Content\\Media\\Aggregate\\MediaTag\\MediaTagDefinition', 'product' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\SalesChannelProductDefinition', 'product_stream_mapping' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductStreamMapping\\ProductStreamMappingDefinition', 'product_category' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategory\\ProductCategoryDefinition', 'product_custom_field_set' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCustomFieldSet\\ProductCustomFieldSetDefinition', 'product_tag' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductTag\\ProductTagDefinition', 'product_configurator_setting' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductConfiguratorSetting\\ProductConfiguratorSettingDefinition', 'product_price' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductPrice\\ProductPriceDefinition', 'product_property' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductProperty\\ProductPropertyDefinition', 'product_search_keyword' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchKeyword\\ProductSearchKeywordDefinition', 'product_keyword_dictionary' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductKeywordDictionary\\ProductKeywordDictionaryDefinition', 'product_review' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductReview\\ProductReviewDefinition', 'product_manufacturer' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturer\\ProductManufacturerDefinition', 'product_manufacturer_translation' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturerTranslation\\ProductManufacturerTranslationDefinition', 'product_media' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductMedia\\ProductMediaDefinition', 'product_download' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductDownload\\ProductDownloadDefinition', 'product_translation' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductTranslation\\ProductTranslationDefinition', 'product_option' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductOption\\ProductOptionDefinition', 'product_category_tree' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategoryTree\\ProductCategoryTreeDefinition', 'product_cross_selling' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSelling\\ProductCrossSellingDefinition', 'product_cross_selling_translation' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingTranslation\\ProductCrossSellingTranslationDefinition', 'product_cross_selling_assigned_products' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingAssignedProducts\\ProductCrossSellingAssignedProductsDefinition', 'product_feature_set' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSet\\ProductFeatureSetDefinition', 'product_feature_set_translation' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSetTranslation\\ProductFeatureSetTranslationDefinition', 'product_sorting' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingDefinition', 'product_sorting_translation' => 'Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingTranslationDefinition', 'product_search_config' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfig\\ProductSearchConfigDefinition', 'product_search_config_field' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfigField\\ProductSearchConfigFieldDefinition', 'product_visibility' => 'Shopware\\Core\\Content\\Product\\Aggregate\\ProductVisibility\\ProductVisibilityDefinition', 'delivery_time' => 'Shopware\\Core\\System\\DeliveryTime\\DeliveryTimeDefinition', 'newsletter_recipient' => 'Shopware\\Core\\Content\\Newsletter\\SalesChannel\\SalesChannelNewsletterRecipientDefinition', 'newsletter_recipient_tag' => 'Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipientTag\\NewsletterRecipientTagDefinition', 'rule' => 'Shopware\\Core\\Content\\Rule\\RuleDefinition', 'rule_condition' => 'Shopware\\Core\\Content\\Rule\\Aggregate\\RuleCondition\\RuleConditionDefinition', 'rule_tag' => 'Shopware\\Core\\Content\\Rule\\Aggregate\\RuleTag\\RuleTagDefinition', 'product_stream' => 'Shopware\\Core\\Content\\ProductStream\\ProductStreamDefinition', 'product_stream_translation' => 'Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamTranslation\\ProductStreamTranslationDefinition', 'product_stream_filter' => 'Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamFilter\\ProductStreamFilterDefinition', 'product_export' => 'Shopware\\Core\\Content\\ProductExport\\ProductExportDefinition', 'property_group' => 'Shopware\\Core\\Content\\Property\\PropertyGroupDefinition', 'property_group_option' => 'Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOption\\PropertyGroupOptionDefinition', 'property_group_option_translation' => 'Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOptionTranslation\\PropertyGroupOptionTranslationDefinition', 'property_group_translation' => 'Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupTranslation\\PropertyGroupTranslationDefinition', 'cms_page' => 'Shopware\\Core\\Content\\Cms\\CmsPageDefinition', 'cms_page_translation' => 'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsPageTranslation\\CmsPageTranslationDefinition', 'cms_section' => 'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSection\\CmsSectionDefinition', 'cms_block' => 'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsBlock\\CmsBlockDefinition', 'cms_slot' => 'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlot\\CmsSlotDefinition', 'cms_slot_translation' => 'Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlotTranslation\\CmsSlotTranslationDefinition', 'mail_template' => 'Shopware\\Core\\Content\\MailTemplate\\MailTemplateDefinition', 'mail_template_translation' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTranslation\\MailTemplateTranslationDefinition', 'mail_template_type' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateType\\MailTemplateTypeDefinition', 'mail_template_type_translation' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTypeTranslation\\MailTemplateTypeTranslationDefinition', 'mail_template_media' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateMedia\\MailTemplateMediaDefinition', 'mail_header_footer' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooter\\MailHeaderFooterDefinition', 'mail_header_footer_translation' => 'Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooterTranslation\\MailHeaderFooterTranslationDefinition', 'delivery_time_translation' => 'Shopware\\Core\\System\\DeliveryTime\\Aggregate\\DeliveryTimeTranslation\\DeliveryTimeTranslationDefinition', 'import_export_profile' => 'Shopware\\Core\\Content\\ImportExport\\ImportExportProfileDefinition', 'import_export_log' => 'Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportLog\\ImportExportLogDefinition', 'import_export_file' => 'Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportFile\\ImportExportFileDefinition', 'import_export_profile_translation' => 'Shopware\\Core\\Content\\ImportExport\\ImportExportProfileTranslationDefinition', 'landing_page' => 'Shopware\\Core\\Content\\LandingPage\\SalesChannel\\SalesChannelLandingPageDefinition', 'landing_page_translation' => 'Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTranslation\\LandingPageTranslationDefinition', 'landing_page_tag' => 'Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTag\\LandingPageTagDefinition', 'landing_page_sales_channel' => 'Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageSalesChannel\\LandingPageSalesChannelDefinition', 'flow' => 'Shopware\\Core\\Content\\Flow\\FlowDefinition', 'flow_sequence' => 'Shopware\\Core\\Content\\Flow\\Aggregate\\FlowSequence\\FlowSequenceDefinition', 'flow_template' => 'Shopware\\Core\\Content\\Flow\\Aggregate\\FlowTemplate\\FlowTemplateDefinition', 'customer' => 'Shopware\\Core\\Checkout\\Customer\\CustomerDefinition', 'customer_group_translation' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupTranslation\\CustomerGroupTranslationDefinition', 'customer_address' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerAddress\\CustomerAddressDefinition', 'customer_recovery' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerRecovery\\CustomerRecoveryDefinition', 'customer_group' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroup\\CustomerGroupDefinition', 'customer_group_registration_sales_channels' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupRegistrationSalesChannel\\CustomerGroupRegistrationSalesChannelDefinition', 'customer_tag' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerTag\\CustomerTagDefinition', 'customer_wishlist' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlist\\CustomerWishlistDefinition', 'customer_wishlist_product' => 'Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlistProduct\\CustomerWishlistProductDefinition', 'document' => 'Shopware\\Core\\Checkout\\Document\\DocumentDefinition', 'document_type' => 'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentType\\DocumentTypeDefinition', 'document_type_translation' => 'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentTypeTranslation\\DocumentTypeTranslationDefinition', 'document_base_config' => 'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfig\\DocumentBaseConfigDefinition', 'document_base_config_sales_channel' => 'Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfigSalesChannel\\DocumentBaseConfigSalesChannelDefinition', 'order' => 'Shopware\\Core\\Checkout\\Order\\OrderDefinition', 'order_address' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderAddress\\OrderAddressDefinition', 'order_customer' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderCustomer\\OrderCustomerDefinition', 'order_delivery' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDelivery\\OrderDeliveryDefinition', 'order_delivery_position' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDeliveryPosition\\OrderDeliveryPositionDefinition', 'order_line_item' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItem\\OrderLineItemDefinition', 'order_line_item_download' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItemDownload\\OrderLineItemDownloadDefinition', 'order_tag' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTag\\OrderTagDefinition', 'order_transaction' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionDefinition', 'order_transaction_capture' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCapture\\OrderTransactionCaptureDefinition', 'order_transaction_capture_refund' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefund\\OrderTransactionCaptureRefundDefinition', 'order_transaction_capture_refund_position' => 'Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefundPosition\\OrderTransactionCaptureRefundPositionDefinition', 'payment_method' => 'Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SalesChannelPaymentMethodDefinition', 'payment_method_translation' => 'Shopware\\Core\\Checkout\\Payment\\Aggregate\\PaymentMethodTranslation\\PaymentMethodTranslationDefinition', 'promotion' => 'Shopware\\Core\\Checkout\\Promotion\\PromotionDefinition', 'promotion_sales_channel' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSalesChannel\\PromotionSalesChannelDefinition', 'promotion_individual_code' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionIndividualCode\\PromotionIndividualCodeDefinition', 'promotion_discount' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscount\\PromotionDiscountDefinition', 'promotion_discount_rule' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountRule\\PromotionDiscountRuleDefinition', 'promotion_setgroup' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroup\\PromotionSetGroupDefinition', 'promotion_setgroup_rule' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroupRule\\PromotionSetGroupRuleDefinition', 'promotion_order_rule' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionOrderRule\\PromotionOrderRuleDefinition', 'promotion_persona_customer' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaCustomer\\PromotionPersonaCustomerDefinition', 'promotion_persona_rule' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaRule\\PromotionPersonaRuleDefinition', 'promotion_cart_rule' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionCartRule\\PromotionCartRuleDefinition', 'promotion_translation' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionTranslation\\PromotionTranslationDefinition', 'promotion_discount_prices' => 'Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountPrice\\PromotionDiscountPriceDefinition', 'shipping_method' => 'Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SalesChannelShippingMethodDefinition', 'shipping_method_tag' => 'Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTag\\ShippingMethodTagDefinition', 'shipping_method_price' => 'Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodPrice\\ShippingMethodPriceDefinition', 'shipping_method_translation' => 'Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTranslation\\ShippingMethodTranslationDefinition', 'app_administration_snippet' => 'Shopware\\Administration\\Snippet\\AppAdministrationSnippetDefinition', 'notification' => 'Shopware\\Administration\\Notification\\NotificationDefinition', 'theme' => 'Shopware\\Storefront\\Theme\\ThemeDefinition', 'theme_translation' => 'Shopware\\Storefront\\Theme\\Aggregate\\ThemeTranslationDefinition', 'theme_sales_channel' => 'Shopware\\Storefront\\Theme\\Aggregate\\ThemeSalesChannelDefinition', 'theme_media' => 'Shopware\\Storefront\\Theme\\Aggregate\\ThemeMediaDefinition', 'theme_child' => 'Shopware\\Storefront\\Theme\\Aggregate\\ThemeChildDefinition'], ['language' => 'sales_channel.language.repository', 'seo_url' => 'sales_channel.seo_url.repository', 'main_category' => 'sales_channel.main_category.repository', 'country' => 'sales_channel.country.repository', 'country_state' => 'sales_channel.country_state.repository', 'currency' => 'sales_channel.currency.repository', 'salutation' => 'sales_channel.salutation.repository', 'category' => 'sales_channel.category.repository', 'product' => 'sales_channel.product.repository', 'newsletter_recipient' => 'sales_channel.newsletter_recipient.repository', 'landing_page' => 'sales_channel.landing_page.repository', 'payment_method' => 'sales_channel.payment_method.repository', 'shipping_method' => 'sales_channel.shipping_method.repository']);
    }

    /**
     * Gets the public 'Shopware\Core\System\SalesChannel\SalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\SalesChannelDefinition
     */
    protected static function getSalesChannelDefinitionService($container)
    {
        $container->services['Shopware\\Core\\System\\SalesChannel\\SalesChannelDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\SalesChannelDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\SalesChannel\SalesChannel\ContextRoute' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\SalesChannel\ContextRoute
     */
    protected static function getContextRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/SalesChannel/AbstractContextRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/SalesChannel/ContextRoute.php';

        return $container->services['Shopware\\Core\\System\\SalesChannel\\SalesChannel\\ContextRoute'] = new \Shopware\Core\System\SalesChannel\SalesChannel\ContextRoute();
    }

    /**
     * Gets the public 'Shopware\Core\System\SalesChannel\SalesChannel\ContextSwitchRoute' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\SalesChannel\ContextSwitchRoute
     */
    protected static function getContextSwitchRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/SalesChannel/AbstractContextSwitchRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/SalesChannel/ContextSwitchRoute.php';

        return $container->services['Shopware\\Core\\System\\SalesChannel\\SalesChannel\\ContextSwitchRoute'] = new \Shopware\Core\System\SalesChannel\SalesChannel\ContextSwitchRoute(($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)), ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'] ?? self::getSalesChannelContextPersisterService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\System\SalesChannel\SalesChannel\StoreApiInfoController' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\SalesChannel\StoreApiInfoController
     */
    protected static function getStoreApiInfoControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/SalesChannel/StoreApiInfoController.php';

        return $container->services['Shopware\\Core\\System\\SalesChannel\\SalesChannel\\StoreApiInfoController'] = new \Shopware\Core\System\SalesChannel\SalesChannel\StoreApiInfoController(($container->privates['Shopware\\Core\\Framework\\Api\\ApiDefinition\\DefinitionService'] ?? self::getDefinitionServiceService($container)), ($container->services['twig'] ?? self::getTwigService($container)), $container->parameters['shopware.security.csp_templates']);
    }

    /**
     * Gets the public 'Shopware\Core\System\Salutation\Aggregate\SalutationTranslation\SalutationTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Salutation\Aggregate\SalutationTranslation\SalutationTranslationDefinition
     */
    protected static function getSalutationTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Salutation/Aggregate/SalutationTranslation/SalutationTranslationDefinition.php';

        $container->services['Shopware\\Core\\System\\Salutation\\Aggregate\\SalutationTranslation\\SalutationTranslationDefinition'] = $instance = new \Shopware\Core\System\Salutation\Aggregate\SalutationTranslation\SalutationTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Salutation\SalesChannel\CachedSalutationRoute' shared service.
     *
     * @return \Shopware\Core\System\Salutation\SalesChannel\CachedSalutationRoute
     */
    protected static function getCachedSalutationRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Salutation/SalesChannel/AbstractSalutationRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Salutation/SalesChannel/CachedSalutationRoute.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Salutation/SalesChannel/SalutationRoute.php';

        $a = ($container->services['sales_channel.salutation.repository'] ?? self::getSalesChannel_Salutation_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'])) {
            return $container->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'];
        }
        $b = ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? self::getCacheTracerService($container));

        if (isset($container->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'])) {
            return $container->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'])) {
            return $container->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'];
        }

        return $container->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'] = new \Shopware\Core\System\Salutation\SalesChannel\CachedSalutationRoute(new \Shopware\Core\System\Salutation\SalesChannel\SalutationRoute($a), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator()), $b, $c, []);
    }

    /**
     * Gets the public 'Shopware\Core\System\Salutation\SalesChannel\SalesChannelSalutationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Salutation\SalesChannel\SalesChannelSalutationDefinition
     */
    protected static function getSalesChannelSalutationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Salutation/SalutationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Salutation/SalesChannel/SalesChannelSalutationDefinition.php';

        $container->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\SalesChannelSalutationDefinition'] = $instance = new \Shopware\Core\System\Salutation\SalesChannel\SalesChannelSalutationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Salutation\SalutationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Salutation\SalutationDefinition
     */
    protected static function getSalutationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Salutation/SalutationDefinition.php';

        $container->services['Shopware\\Core\\System\\Salutation\\SalutationDefinition'] = $instance = new \Shopware\Core\System\Salutation\SalutationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Snippet\Aggregate\SnippetSet\SnippetSetDefinition' shared service.
     *
     * @return \Shopware\Core\System\Snippet\Aggregate\SnippetSet\SnippetSetDefinition
     */
    protected static function getSnippetSetDefinitionService($container)
    {
        $container->services['Shopware\\Core\\System\\Snippet\\Aggregate\\SnippetSet\\SnippetSetDefinition'] = $instance = new \Shopware\Core\System\Snippet\Aggregate\SnippetSet\SnippetSetDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Snippet\Api\SnippetController' shared service.
     *
     * @return \Shopware\Core\System\Snippet\Api\SnippetController
     */
    protected static function getSnippetControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/Api/SnippetController.php';

        $container->services['Shopware\\Core\\System\\Snippet\\Api\\SnippetController'] = $instance = new \Shopware\Core\System\Snippet\Api\SnippetController(($container->privates['Shopware\\Core\\System\\Snippet\\SnippetService'] ?? self::getSnippetServiceService($container)), ($container->services['Shopware\\Core\\System\\Snippet\\Files\\SnippetFileCollection'] ?? self::getSnippetFileCollectionService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Snippet\Files\SnippetFileCollection' shared service.
     *
     * @return \Shopware\Core\System\Snippet\Files\SnippetFileCollection
     */
    protected static function getSnippetFileCollectionService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['Shopware\\Core\\System\\Snippet\\Files\\SnippetFileCollection'] = $container->createProxy('SnippetFileCollectionProxy5c898b8', static fn () => \SnippetFileCollectionProxy5c898b8::createLazyProxy(static fn () => self::getSnippetFileCollectionService($container, false)));
        }

        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/Files/SnippetFileCollectionFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/Files/SnippetFileLoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/Files/SnippetFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/Files/AppSnippetFileLoader.php';

        return (new \Shopware\Core\System\Snippet\Files\SnippetFileCollectionFactory(new \Shopware\Core\System\Snippet\Files\SnippetFileLoader(($container->services['kernel'] ?? $container->get('kernel', 1)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), new \Shopware\Core\System\Snippet\Files\AppSnippetFileLoader(\dirname(__DIR__, 4)), ($container->privates['Shopware\\Core\\Framework\\App\\ActiveAppsLoader'] ?? self::getActiveAppsLoaderService($container)))))->createSnippetFileCollection();
    }

    /**
     * Gets the public 'Shopware\Core\System\Snippet\Filter\SnippetFilterFactory' shared service.
     *
     * @return \Shopware\Core\System\Snippet\Filter\SnippetFilterFactory
     */
    protected static function getSnippetFilterFactoryService($container)
    {
        return $container->services['Shopware\\Core\\System\\Snippet\\Filter\\SnippetFilterFactory'] = new \Shopware\Core\System\Snippet\Filter\SnippetFilterFactory(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\System\\Snippet\\Filter\\AuthorFilter'] ??= new \Shopware\Core\System\Snippet\Filter\AuthorFilter());
            yield 1 => ($container->privates['Shopware\\Core\\System\\Snippet\\Filter\\AddedFilter'] ??= new \Shopware\Core\System\Snippet\Filter\AddedFilter());
            yield 2 => ($container->privates['Shopware\\Core\\System\\Snippet\\Filter\\EditedFilter'] ??= new \Shopware\Core\System\Snippet\Filter\EditedFilter());
            yield 3 => ($container->privates['Shopware\\Core\\System\\Snippet\\Filter\\EmptySnippetFilter'] ??= new \Shopware\Core\System\Snippet\Filter\EmptySnippetFilter());
            yield 4 => ($container->privates['Shopware\\Core\\System\\Snippet\\Filter\\NamespaceFilter'] ??= new \Shopware\Core\System\Snippet\Filter\NamespaceFilter());
            yield 5 => ($container->privates['Shopware\\Core\\System\\Snippet\\Filter\\TermFilter'] ??= new \Shopware\Core\System\Snippet\Filter\TermFilter());
            yield 6 => ($container->privates['Shopware\\Core\\System\\Snippet\\Filter\\TranslationKeyFilter'] ??= new \Shopware\Core\System\Snippet\Filter\TranslationKeyFilter());
        }, 7));
    }

    /**
     * Gets the public 'Shopware\Core\System\Snippet\SnippetDefinition' shared service.
     *
     * @return \Shopware\Core\System\Snippet\SnippetDefinition
     */
    protected static function getSnippetDefinitionService($container)
    {
        $container->services['Shopware\\Core\\System\\Snippet\\SnippetDefinition'] = $instance = new \Shopware\Core\System\Snippet\SnippetDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\StateMachine\Aggregation\StateMachineHistory\StateMachineHistoryDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\Aggregation\StateMachineHistory\StateMachineHistoryDefinition
     */
    protected static function getStateMachineHistoryDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/Aggregation/StateMachineHistory/StateMachineHistoryDefinition.php';

        $container->services['Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineHistory\\StateMachineHistoryDefinition'] = $instance = new \Shopware\Core\System\StateMachine\Aggregation\StateMachineHistory\StateMachineHistoryDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateDefinition
     */
    protected static function getStateMachineStateDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/Aggregation/StateMachineState/StateMachineStateDefinition.php';

        $container->services['Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateDefinition'] = $instance = new \Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateTranslationDefinition
     */
    protected static function getStateMachineStateTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/Aggregation/StateMachineState/StateMachineStateTranslationDefinition.php';

        $container->services['Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateTranslationDefinition'] = $instance = new \Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\StateMachine\Aggregation\StateMachineTransition\StateMachineTransitionDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\Aggregation\StateMachineTransition\StateMachineTransitionDefinition
     */
    protected static function getStateMachineTransitionDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/Aggregation/StateMachineTransition/StateMachineTransitionDefinition.php';

        $container->services['Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineTransition\\StateMachineTransitionDefinition'] = $instance = new \Shopware\Core\System\StateMachine\Aggregation\StateMachineTransition\StateMachineTransitionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\StateMachine\Api\StateMachineActionController' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\Api\StateMachineActionController
     */
    protected static function getStateMachineActionControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/Api/StateMachineActionController.php';

        $container->services['Shopware\\Core\\System\\StateMachine\\Api\\StateMachineActionController'] = $instance = new \Shopware\Core\System\StateMachine\Api\StateMachineActionController(($container->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'] ?? self::getStateMachineRegistryService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\StateMachine\StateMachineDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\StateMachineDefinition
     */
    protected static function getStateMachineDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/StateMachineDefinition.php';

        $container->services['Shopware\\Core\\System\\StateMachine\\StateMachineDefinition'] = $instance = new \Shopware\Core\System\StateMachine\StateMachineDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\StateMachine\StateMachineTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\StateMachineTranslationDefinition
     */
    protected static function getStateMachineTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/StateMachineTranslationDefinition.php';

        $container->services['Shopware\\Core\\System\\StateMachine\\StateMachineTranslationDefinition'] = $instance = new \Shopware\Core\System\StateMachine\StateMachineTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\SystemConfig\Api\SystemConfigController' shared service.
     *
     * @return \Shopware\Core\System\SystemConfig\Api\SystemConfigController
     */
    protected static function getSystemConfigControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/Api/SystemConfigController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/Validation/SystemConfigValidator.php';

        $a = ($container->privates['Shopware\\Core\\System\\SystemConfig\\Service\\ConfigurationService'] ?? self::getConfigurationServiceService($container));

        $container->services['Shopware\\Core\\System\\SystemConfig\\Api\\SystemConfigController'] = $instance = new \Shopware\Core\System\SystemConfig\Api\SystemConfigController($a, ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), new \Shopware\Core\System\SystemConfig\Validation\SystemConfigValidator($a, ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container))));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\SystemConfig\Facade\SystemConfigFacadeHookFactory' shared service.
     *
     * @return \Shopware\Core\System\SystemConfig\Facade\SystemConfigFacadeHookFactory
     */
    protected static function getSystemConfigFacadeHookFactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Execution/Awareness/HookServiceFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/Facade/SystemConfigFacadeHookFactory.php';

        return $container->services['Shopware\\Core\\System\\SystemConfig\\Facade\\SystemConfigFacadeHookFactory'] = new \Shopware\Core\System\SystemConfig\Facade\SystemConfigFacadeHookFactory(($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\System\SystemConfig\SystemConfigDefinition' shared service.
     *
     * @return \Shopware\Core\System\SystemConfig\SystemConfigDefinition
     */
    protected static function getSystemConfigDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/SystemConfigDefinition.php';

        $container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigDefinition'] = $instance = new \Shopware\Core\System\SystemConfig\SystemConfigDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\SystemConfig\SystemConfigService' shared service.
     *
     * @return \Shopware\Core\System\SystemConfig\SystemConfigService
     */
    protected static function getSystemConfigServiceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] = $container->createProxy('SystemConfigServiceGhostBa5c9a6', static fn () => \SystemConfigServiceGhostBa5c9a6::createLazyGhost(static fn ($proxy) => self::getSystemConfigServiceService($container, $proxy)));
        }

        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/AbstractSystemConfigLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/MemoizedSystemConfigLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/CachedSystemConfigLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/SystemConfigLoader.php';

        $a = ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container));

        return ($lazyLoad->__construct($a, ($container->privates['Shopware\\Core\\System\\SystemConfig\\Util\\ConfigReader'] ??= new \Shopware\Core\System\SystemConfig\Util\ConfigReader()), new \Shopware\Core\System\SystemConfig\MemoizedSystemConfigLoader(new \Shopware\Core\System\SystemConfig\CachedSystemConfigLoader(new \Shopware\Core\System\SystemConfig\SystemConfigLoader($a, ($container->services['kernel'] ?? $container->get('kernel', 1))), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container))), ($container->privates['Shopware\\Core\\System\\SystemConfig\\Store\\MemoizedSystemConfigStore'] ??= new \Shopware\Core\System\SystemConfig\Store\MemoizedSystemConfigStore())), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), true) && false ?: $lazyLoad);
    }

    /**
     * Gets the public 'Shopware\Core\System\Tag\Service\FilterTagIdsService' shared service.
     *
     * @return \Shopware\Core\System\Tag\Service\FilterTagIdsService
     */
    protected static function getFilterTagIdsServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Tag/Service/FilterTagIdsService.php';

        return $container->services['Shopware\\Core\\System\\Tag\\Service\\FilterTagIdsService'] = new \Shopware\Core\System\Tag\Service\FilterTagIdsService(($container->services['Shopware\\Core\\System\\Tag\\TagDefinition'] ?? self::getTagDefinitionService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\CriteriaQueryBuilder'] ?? self::getCriteriaQueryBuilderService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\System\Tag\TagDefinition' shared service.
     *
     * @return \Shopware\Core\System\Tag\TagDefinition
     */
    protected static function getTagDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Tag/TagDefinition.php';

        $container->services['Shopware\\Core\\System\\Tag\\TagDefinition'] = $instance = new \Shopware\Core\System\Tag\TagDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\TaxProvider\Aggregate\TaxProviderTranslation\TaxProviderTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\TaxProvider\Aggregate\TaxProviderTranslation\TaxProviderTranslationDefinition
     */
    protected static function getTaxProviderTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/TaxProvider/Aggregate/TaxProviderTranslation/TaxProviderTranslationDefinition.php';

        $container->services['Shopware\\Core\\System\\TaxProvider\\Aggregate\\TaxProviderTranslation\\TaxProviderTranslationDefinition'] = $instance = new \Shopware\Core\System\TaxProvider\Aggregate\TaxProviderTranslation\TaxProviderTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\TaxProvider\TaxProviderDefinition' shared service.
     *
     * @return \Shopware\Core\System\TaxProvider\TaxProviderDefinition
     */
    protected static function getTaxProviderDefinitionService($container)
    {
        $container->services['Shopware\\Core\\System\\TaxProvider\\TaxProviderDefinition'] = $instance = new \Shopware\Core\System\TaxProvider\TaxProviderDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Tax\Aggregate\TaxRuleTypeTranslation\TaxRuleTypeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Tax\Aggregate\TaxRuleTypeTranslation\TaxRuleTypeTranslationDefinition
     */
    protected static function getTaxRuleTypeTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Tax/Aggregate/TaxRuleTypeTranslation/TaxRuleTypeTranslationDefinition.php';

        $container->services['Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleTypeTranslation\\TaxRuleTypeTranslationDefinition'] = $instance = new \Shopware\Core\System\Tax\Aggregate\TaxRuleTypeTranslation\TaxRuleTypeTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Tax\Aggregate\TaxRuleType\TaxRuleTypeDefinition' shared service.
     *
     * @return \Shopware\Core\System\Tax\Aggregate\TaxRuleType\TaxRuleTypeDefinition
     */
    protected static function getTaxRuleTypeDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Tax/Aggregate/TaxRuleType/TaxRuleTypeDefinition.php';

        $container->services['Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleType\\TaxRuleTypeDefinition'] = $instance = new \Shopware\Core\System\Tax\Aggregate\TaxRuleType\TaxRuleTypeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Tax\Aggregate\TaxRule\TaxRuleDefinition' shared service.
     *
     * @return \Shopware\Core\System\Tax\Aggregate\TaxRule\TaxRuleDefinition
     */
    protected static function getTaxRuleDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Tax/Aggregate/TaxRule/TaxRuleDefinition.php';

        $container->services['Shopware\\Core\\System\\Tax\\Aggregate\\TaxRule\\TaxRuleDefinition'] = $instance = new \Shopware\Core\System\Tax\Aggregate\TaxRule\TaxRuleDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Tax\TaxDefinition' shared service.
     *
     * @return \Shopware\Core\System\Tax\TaxDefinition
     */
    protected static function getTaxDefinitionService($container)
    {
        $container->services['Shopware\\Core\\System\\Tax\\TaxDefinition'] = $instance = new \Shopware\Core\System\Tax\TaxDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Unit\Aggregate\UnitTranslation\UnitTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Unit\Aggregate\UnitTranslation\UnitTranslationDefinition
     */
    protected static function getUnitTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Unit/Aggregate/UnitTranslation/UnitTranslationDefinition.php';

        $container->services['Shopware\\Core\\System\\Unit\\Aggregate\\UnitTranslation\\UnitTranslationDefinition'] = $instance = new \Shopware\Core\System\Unit\Aggregate\UnitTranslation\UnitTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\Unit\UnitDefinition' shared service.
     *
     * @return \Shopware\Core\System\Unit\UnitDefinition
     */
    protected static function getUnitDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Unit/UnitDefinition.php';

        $container->services['Shopware\\Core\\System\\Unit\\UnitDefinition'] = $instance = new \Shopware\Core\System\Unit\UnitDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\UsageData\Api\ConsentController' shared service.
     *
     * @return \Shopware\Core\System\UsageData\Api\ConsentController
     */
    protected static function getConsentControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/UsageData/Api/ConsentController.php';

        $container->services['Shopware\\Core\\System\\UsageData\\Api\\ConsentController'] = $instance = new \Shopware\Core\System\UsageData\Api\ConsentController(($container->privates['Shopware\\Core\\System\\UsageData\\Consent\\ConsentService'] ?? self::getConsentServiceService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\UsageData\Services\IntegrationChangedService' shared service.
     *
     * @return \Shopware\Core\System\UsageData\Services\IntegrationChangedService
     */
    protected static function getIntegrationChangedServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/UsageData/Services/IntegrationChangedService.php';

        $a = ($container->services['integration.repository'] ?? self::getIntegration_RepositoryService($container));

        if (isset($container->services['Shopware\\Core\\System\\UsageData\\Services\\IntegrationChangedService'])) {
            return $container->services['Shopware\\Core\\System\\UsageData\\Services\\IntegrationChangedService'];
        }
        $b = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->services['Shopware\\Core\\System\\UsageData\\Services\\IntegrationChangedService'])) {
            return $container->services['Shopware\\Core\\System\\UsageData\\Services\\IntegrationChangedService'];
        }
        $c = ($container->privates['Shopware\\Core\\System\\UsageData\\Consent\\ConsentService'] ?? self::getConsentServiceService($container));

        if (isset($container->services['Shopware\\Core\\System\\UsageData\\Services\\IntegrationChangedService'])) {
            return $container->services['Shopware\\Core\\System\\UsageData\\Services\\IntegrationChangedService'];
        }

        return $container->services['Shopware\\Core\\System\\UsageData\\Services\\IntegrationChangedService'] = new \Shopware\Core\System\UsageData\Services\IntegrationChangedService($a, $b, $c, ($container->privates['Shopware\\Core\\System\\UsageData\\Services\\ShopIdProvider'] ?? self::getShopIdProvider2Service($container)), ($container->privates['Shopware\\Core\\System\\UsageData\\Services\\EntityDispatchService'] ?? self::getEntityDispatchServiceService($container)));
    }

    /**
     * Gets the public 'Shopware\Core\System\User\Aggregate\UserAccessKey\UserAccessKeyDefinition' shared service.
     *
     * @return \Shopware\Core\System\User\Aggregate\UserAccessKey\UserAccessKeyDefinition
     */
    protected static function getUserAccessKeyDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/User/Aggregate/UserAccessKey/UserAccessKeyDefinition.php';

        $container->services['Shopware\\Core\\System\\User\\Aggregate\\UserAccessKey\\UserAccessKeyDefinition'] = $instance = new \Shopware\Core\System\User\Aggregate\UserAccessKey\UserAccessKeyDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\User\Aggregate\UserConfig\UserConfigDefinition' shared service.
     *
     * @return \Shopware\Core\System\User\Aggregate\UserConfig\UserConfigDefinition
     */
    protected static function getUserConfigDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/User/Aggregate/UserConfig/UserConfigDefinition.php';

        $container->services['Shopware\\Core\\System\\User\\Aggregate\\UserConfig\\UserConfigDefinition'] = $instance = new \Shopware\Core\System\User\Aggregate\UserConfig\UserConfigDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\User\Aggregate\UserRecovery\UserRecoveryDefinition' shared service.
     *
     * @return \Shopware\Core\System\User\Aggregate\UserRecovery\UserRecoveryDefinition
     */
    protected static function getUserRecoveryDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/User/Aggregate/UserRecovery/UserRecoveryDefinition.php';

        $container->services['Shopware\\Core\\System\\User\\Aggregate\\UserRecovery\\UserRecoveryDefinition'] = $instance = new \Shopware\Core\System\User\Aggregate\UserRecovery\UserRecoveryDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\User\Api\UserRecoveryController' shared service.
     *
     * @return \Shopware\Core\System\User\Api\UserRecoveryController
     */
    protected static function getUserRecoveryControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/User/Api/UserRecoveryController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/User/Recovery/UserRecoveryService.php';

        $container->services['Shopware\\Core\\System\\User\\Api\\UserRecoveryController'] = $instance = new \Shopware\Core\System\User\Api\UserRecoveryController(new \Shopware\Core\System\User\Recovery\UserRecoveryService(($container->services['user_recovery.repository'] ?? self::getUserRecovery_RepositoryService($container)), ($container->services['user.repository'] ?? self::getUser_RepositoryService($container)), ($container->services['router'] ?? self::getRouterService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? self::getSalesChannelContextServiceService($container)), ($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container))), ($container->privates['shopware.rate_limiter'] ?? self::getShopware_RateLimiterService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\User\Api\UserValidationController' shared service.
     *
     * @return \Shopware\Core\System\User\Api\UserValidationController
     */
    protected static function getUserValidationControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/User/Api/UserValidationController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/User/Service/UserValidationService.php';

        $container->services['Shopware\\Core\\System\\User\\Api\\UserValidationController'] = $instance = new \Shopware\Core\System\User\Api\UserValidationController(new \Shopware\Core\System\User\Service\UserValidationService(($container->services['user.repository'] ?? self::getUser_RepositoryService($container))));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Core\System\User\UserDefinition' shared service.
     *
     * @return \Shopware\Core\System\User\UserDefinition
     */
    protected static function getUserDefinitionService($container)
    {
        $container->services['Shopware\\Core\\System\\User\\UserDefinition'] = $instance = new \Shopware\Core\System\User\UserDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Elasticsearch\Admin\AdminElasticsearchHelper' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\AdminElasticsearchHelper
     */
    protected static function getAdminElasticsearchHelperService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/AdminElasticsearchHelper.php';

        return $container->services['Shopware\\Elasticsearch\\Admin\\AdminElasticsearchHelper'] = new \Shopware\Elasticsearch\Admin\AdminElasticsearchHelper($container->getEnv('bool:SHOPWARE_ADMIN_ES_ENABLED'), $container->getEnv('bool:SHOPWARE_ADMIN_ES_REFRESH_INDICES'), $container->getEnv('string:SHOPWARE_ADMIN_ES_INDEX_PREFIX'));
    }

    /**
     * Gets the public 'Shopware\Elasticsearch\Admin\AdminSearchController' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\AdminSearchController
     */
    protected static function getAdminSearchController2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/AdminSearchController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/AdminElasticsearchHelper.php';

        return $container->services['Shopware\\Elasticsearch\\Admin\\AdminSearchController'] = new \Shopware\Elasticsearch\Admin\AdminSearchController(($container->privates['Shopware\\Elasticsearch\\Admin\\AdminSearcher'] ?? self::getAdminSearcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->privates['Shopware\\Core\\Framework\\Api\\Serializer\\JsonEntityEncoder'] ?? self::getJsonEntityEncoderService($container)), ($container->services['Shopware\\Elasticsearch\\Admin\\AdminElasticsearchHelper'] ??= new \Shopware\Elasticsearch\Admin\AdminElasticsearchHelper($container->getEnv('bool:SHOPWARE_ADMIN_ES_ENABLED'), $container->getEnv('bool:SHOPWARE_ADMIN_ES_REFRESH_INDICES'), $container->getEnv('string:SHOPWARE_ADMIN_ES_INDEX_PREFIX'))));
    }

    /**
     * Gets the public 'Shopware\Elasticsearch\Framework\ElasticsearchHelper' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\ElasticsearchHelper
     */
    protected static function getElasticsearchHelperService($container)
    {
        $a = ($container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchRegistry'] ?? self::getElasticsearchRegistryService($container));

        if (isset($container->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'])) {
            return $container->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'];
        }

        return $container->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'] = new \Shopware\Elasticsearch\Framework\ElasticsearchHelper('dev', $container->getEnv('bool:SHOPWARE_ES_ENABLED'), $container->getEnv('bool:SHOPWARE_ES_INDEXING_ENABLED'), $container->getEnv('string:SHOPWARE_ES_INDEX_PREFIX'), $container->getEnv('string:SHOPWARE_ES_THROW_EXCEPTION'), ($container->services['OpenSearch\\Client'] ?? self::getClientService($container)), $a, ($container->privates['Shopware\\Elasticsearch\\Framework\\DataAbstractionLayer\\CriteriaParser'] ?? self::getCriteriaParserService($container)), ($container->services['monolog.logger.elasticsearch'] ?? self::getMonolog_Logger_ElasticsearchService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Storage\\AbstractKeyValueStorage'] ?? self::getAbstractKeyValueStorageService($container)));
    }

    /**
     * Gets the public 'Shopware\Elasticsearch\Framework\Indexing\CreateAliasTaskHandler' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Indexing\CreateAliasTaskHandler
     */
    protected static function getCreateAliasTaskHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageSubscriberInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/ScheduledTaskHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Indexing/CreateAliasTaskHandler.php';

        $a = ($container->services['scheduled_task.repository'] ?? self::getScheduledTask_RepositoryService($container));

        if (isset($container->services['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler'])) {
            return $container->services['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler'];
        }
        $b = ($container->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'] ?? self::getElasticsearchHelperService($container));

        if (isset($container->services['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler'])) {
            return $container->services['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler'])) {
            return $container->services['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler'];
        }

        return $container->services['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler'] = new \Shopware\Elasticsearch\Framework\Indexing\CreateAliasTaskHandler($a, ($container->services['OpenSearch\\Client'] ?? self::getClientService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $b, $container->parameters['elasticsearch.index.config'], $c, ($container->privates['Shopware\\Core\\Framework\\Adapter\\Storage\\AbstractKeyValueStorage'] ?? self::getAbstractKeyValueStorageService($container)));
    }

    /**
     * Gets the public 'Shopware\Elasticsearch\Product\EsProductDefinition' shared service.
     *
     * @return \Shopware\Elasticsearch\Product\EsProductDefinition
     */
    protected static function getEsProductDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/AbstractElasticsearchDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Product/EsProductDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/ElasticsearchFieldBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/ElasticsearchIndexingUtils.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/ElasticsearchFieldMapper.php';

        $a = ($container->privates['Shopware\\Elasticsearch\\Product\\AbstractProductSearchQueryBuilder'] ?? self::getAbstractProductSearchQueryBuilderService($container));

        if (isset($container->services['Shopware\\Elasticsearch\\Product\\EsProductDefinition'])) {
            return $container->services['Shopware\\Elasticsearch\\Product\\EsProductDefinition'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['Shopware\\Elasticsearch\\Product\\EsProductDefinition'])) {
            return $container->services['Shopware\\Elasticsearch\\Product\\EsProductDefinition'];
        }
        $c = ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container));
        $d = new \Shopware\Elasticsearch\Framework\ElasticsearchIndexingUtils($c, $b, ($container->privates['parameter_bag'] ??= new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($container)));

        return $container->services['Shopware\\Elasticsearch\\Product\\EsProductDefinition'] = new \Shopware\Elasticsearch\Product\EsProductDefinition(($container->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? self::getProductDefinitionService($container)), $c, $a, new \Shopware\Elasticsearch\Framework\ElasticsearchFieldBuilder(($container->privates['Shopware\\Core\\System\\Language\\CachedLanguageLoader'] ?? self::getCachedLanguageLoaderService($container)), $d, $container->parameters['elasticsearch.language_analyzer_mapping']), new \Shopware\Elasticsearch\Framework\ElasticsearchFieldMapper($d));
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\AccountOrderController' shared service.
     *
     * @return \Shopware\Storefront\Controller\AccountOrderController
     */
    protected static function getAccountOrderControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/AccountOrderController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Account/Order/AccountOrderPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Account/Order/AccountEditOrderPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Account/Order/AccountOrderDetailPageLoader.php';

        $a = ($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? self::getGenericPageLoaderService($container));
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));
        $c = ($container->services['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderRoute'] ?? self::getOrderRouteService($container));
        $d = ($container->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'] ?? self::getOrderServiceService($container));

        $container->services['Shopware\\Storefront\\Controller\\AccountOrderController'] = $instance = new \Shopware\Storefront\Controller\AccountOrderController(new \Shopware\Storefront\Page\Account\Order\AccountOrderPageLoader($a, $b, $c, ($container->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'] ?? self::getAccountServiceService($container))), new \Shopware\Storefront\Page\Account\Order\AccountEditOrderPageLoader($a, $b, $c, ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\RequestCriteriaBuilder'] ?? self::getRequestCriteriaBuilderService($container)), ($container->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SortedPaymentMethodRoute'] ?? self::getSortedPaymentMethodRouteService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'] ?? self::getOrderConverterService($container)), $d), ($container->services['Shopware\\Core\\System\\SalesChannel\\SalesChannel\\ContextSwitchRoute'] ?? self::getContextSwitchRouteService($container)), ($container->services['Shopware\\Core\\Checkout\\Order\\SalesChannel\\CancelOrderRoute'] ?? self::getCancelOrderRouteService($container)), ($container->services['Shopware\\Core\\Checkout\\Order\\SalesChannel\\SetPaymentOrderRoute'] ?? self::getSetPaymentOrderRouteService($container)), ($container->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\HandlePaymentMethodRoute'] ?? self::getHandlePaymentMethodRouteService($container)), $b, new \Shopware\Storefront\Page\Account\Order\AccountOrderDetailPageLoader($a, $b, $c), $c, ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? self::getSalesChannelContextServiceService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), $d);

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\AccountPaymentController' shared service.
     *
     * @return \Shopware\Storefront\Controller\AccountPaymentController
     */
    protected static function getAccountPaymentControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/AccountPaymentController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Account/PaymentMethod/AccountPaymentMethodPageLoader.php';

        $container->services['Shopware\\Storefront\\Controller\\AccountPaymentController'] = $instance = new \Shopware\Storefront\Controller\AccountPaymentController(new \Shopware\Storefront\Page\Account\PaymentMethod\AccountPaymentMethodPageLoader(($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? self::getGenericPageLoaderService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container))), ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangePaymentMethodRoute'] ?? self::getChangePaymentMethodRouteService($container)));

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\AccountProfileController' shared service.
     *
     * @return \Shopware\Storefront\Controller\AccountProfileController
     */
    protected static function getAccountProfileControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/AccountProfileController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Account/Overview/AccountOverviewPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Account/Profile/AccountProfilePageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Salutation/AbstractSalutationsSorter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Salutation/SalutationSorter.php';

        $a = ($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? self::getGenericPageLoaderService($container));
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        $container->services['Shopware\\Storefront\\Controller\\AccountProfileController'] = $instance = new \Shopware\Storefront\Controller\AccountProfileController(new \Shopware\Storefront\Page\Account\Overview\AccountOverviewPageLoader($a, $b, ($container->services['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderRoute'] ?? self::getOrderRouteService($container)), ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\CustomerRoute'] ?? self::getCustomerRouteService($container)), ($container->privates['Shopware\\Storefront\\Pagelet\\Newsletter\\Account\\NewsletterAccountPageletLoader'] ?? self::getNewsletterAccountPageletLoaderService($container))), new \Shopware\Storefront\Page\Account\Profile\AccountProfilePageLoader($a, $b, ($container->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'] ?? self::getCachedSalutationRouteService($container)), ($container->privates['Shopware\\Core\\System\\Salutation\\AbstractSalutationsSorter'] ??= new \Shopware\Core\System\Salutation\SalutationSorter())), ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangeCustomerProfileRoute'] ?? self::getChangeCustomerProfileRouteService($container)), ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangePasswordRoute'] ?? self::getChangePasswordRouteService($container)), ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangeEmailRoute'] ?? self::getChangeEmailRouteService($container)), ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\DeleteCustomerRoute'] ?? self::getDeleteCustomerRouteService($container)), ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)));

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\AddressController' shared service.
     *
     * @return \Shopware\Storefront\Controller\AddressController
     */
    protected static function getAddressControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/AddressController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Address/Listing/AddressListingPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Address/Detail/AddressDetailPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Salutation/AbstractSalutationsSorter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Salutation/SalutationSorter.php';

        $a = ($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? self::getGenericPageLoaderService($container));
        $b = ($container->services['Shopware\\Core\\System\\Country\\SalesChannel\\CachedCountryRoute'] ?? self::getCachedCountryRouteService($container));
        $c = ($container->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'] ?? self::getCachedSalutationRouteService($container));
        $d = ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ListAddressRoute'] ?? self::getListAddressRouteService($container));
        $e = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        $container->services['Shopware\\Storefront\\Controller\\AddressController'] = $instance = new \Shopware\Storefront\Controller\AddressController(new \Shopware\Storefront\Page\Address\Listing\AddressListingPageLoader($a, $b, $c, $d, $e, ($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? self::getCartServiceService($container))), new \Shopware\Storefront\Page\Address\Detail\AddressDetailPageLoader($a, $b, $c, $e, $d, ($container->privates['Shopware\\Core\\System\\Salutation\\AbstractSalutationsSorter'] ??= new \Shopware\Core\System\Salutation\SalutationSorter())), ($container->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'] ?? self::getAccountServiceService($container)), $d, ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\UpsertAddressRoute'] ?? self::getUpsertAddressRouteService($container)), ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\DeleteAddressRoute'] ?? self::getDeleteAddressRouteService($container)), ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ChangeCustomerProfileRoute'] ?? self::getChangeCustomerProfileRouteService($container)));

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\Api\CaptchaController' shared service.
     *
     * @return \Shopware\Storefront\Controller\Api\CaptchaController
     */
    protected static function getCaptchaControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/Api/CaptchaController.php';

        $container->services['Shopware\\Storefront\\Controller\\Api\\CaptchaController'] = $instance = new \Shopware\Storefront\Controller\Api\CaptchaController(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Storefront\\Framework\\Captcha\\HoneypotCaptcha'] ?? self::getHoneypotCaptchaService($container));
            yield 1 => ($container->privates['Shopware\\Storefront\\Framework\\Captcha\\BasicCaptcha'] ?? self::getBasicCaptchaService($container));
            yield 2 => ($container->privates['Shopware\\Storefront\\Framework\\Captcha\\GoogleReCaptchaV2'] ?? self::getGoogleReCaptchaV2Service($container));
            yield 3 => ($container->privates['Shopware\\Storefront\\Framework\\Captcha\\GoogleReCaptchaV3'] ?? self::getGoogleReCaptchaV3Service($container));
        }, 4));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\AppController' shared service.
     *
     * @return \Shopware\Storefront\Controller\AppController
     */
    protected static function getAppControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/AppController.php';

        return $container->services['Shopware\\Storefront\\Controller\\AppController'] = new \Shopware\Storefront\Controller\AppController(($container->services['Shopware\\Core\\Framework\\App\\Api\\AppJWTGenerateRoute'] ?? self::getAppJWTGenerateRouteService($container)));
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\AuthController' shared service.
     *
     * @return \Shopware\Storefront\Controller\AuthController
     */
    protected static function getAuthController2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/AuthController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Account/RecoverPassword/AccountRecoverPasswordPageLoader.php';

        $container->services['Shopware\\Storefront\\Controller\\AuthController'] = $instance = new \Shopware\Storefront\Controller\AuthController(($container->privates['Shopware\\Storefront\\Page\\Account\\Login\\AccountLoginPageLoader'] ?? self::getAccountLoginPageLoaderService($container)), ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SendPasswordRecoveryMailRoute'] ?? self::getSendPasswordRecoveryMailRouteService($container)), ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ResetPasswordRoute'] ?? self::getResetPasswordRouteService($container)), ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\LoginRoute'] ?? self::getLoginRouteService($container)), ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\LogoutRoute'] ?? self::getLogoutRouteService($container)), ($container->privates['Shopware\\Storefront\\Checkout\\Cart\\SalesChannel\\StorefrontCartFacade'] ?? self::getStorefrontCartFacadeService($container)), new \Shopware\Storefront\Page\Account\RecoverPassword\AccountRecoverPasswordPageLoader(($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? self::getGenericPageLoaderService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\CustomerRecoveryIsExpiredRoute'] ?? self::getCustomerRecoveryIsExpiredRouteService($container))), ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? self::getSalesChannelContextServiceService($container)));

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\CaptchaController' shared service.
     *
     * @return \Shopware\Storefront\Controller\CaptchaController
     */
    protected static function getCaptchaController2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/CaptchaController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Captcha/AbstractBasicCaptchaPageletLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Captcha/BasicCaptchaPageletLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Captcha/BasicCaptcha/AbstractBasicCaptchaGenerator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Captcha/BasicCaptcha/BasicCaptchaGenerator.php';

        $container->services['Shopware\\Storefront\\Controller\\CaptchaController'] = $instance = new \Shopware\Storefront\Controller\CaptchaController(new \Shopware\Storefront\Pagelet\Captcha\BasicCaptchaPageletLoader(($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), new \Shopware\Storefront\Framework\Captcha\BasicCaptcha\BasicCaptchaGenerator(), ($container->privates['Shopware\\Core\\Content\\Category\\Service\\NavigationLoader'] ?? self::getNavigationLoaderService($container))), ($container->privates['Shopware\\Storefront\\Framework\\Captcha\\BasicCaptcha'] ?? self::getBasicCaptchaService($container)));

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\CartLineItemController' shared service.
     *
     * @return \Shopware\Storefront\Controller\CartLineItemController
     */
    protected static function getCartLineItemControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/CartLineItemController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionItemBuilder.php';

        $container->services['Shopware\\Storefront\\Controller\\CartLineItemController'] = $instance = new \Shopware\Storefront\Controller\CartLineItemController(($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? self::getCartServiceService($container)), ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionItemBuilder'] ??= new \Shopware\Core\Checkout\Promotion\Cart\PromotionItemBuilder()), ($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\ProductLineItemFactory'] ?? self::getProductLineItemFactoryService($container)), ($container->services['Shopware\\Core\\Framework\\Util\\HtmlSanitizer'] ?? self::getHtmlSanitizerService($container)), ($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\ProductListRoute'] ?? self::getProductListRouteService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryRegistry'] ?? self::getLineItemFactoryRegistryService($container)));

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\CheckoutController' shared service.
     *
     * @return \Shopware\Storefront\Controller\CheckoutController
     */
    protected static function getCheckoutControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/CheckoutController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Checkout/Cart/CheckoutCartPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Checkout/Confirm/CheckoutConfirmPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Checkout/Finish/CheckoutFinishPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Checkout/Offcanvas/OffcanvasCartPageLoader.php';

        $a = ($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? self::getGenericPageLoaderService($container));
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));
        $c = ($container->privates['Shopware\\Storefront\\Checkout\\Cart\\SalesChannel\\StorefrontCartFacade'] ?? self::getStorefrontCartFacadeService($container));
        $d = ($container->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SortedPaymentMethodRoute'] ?? self::getSortedPaymentMethodRouteService($container));
        $e = ($container->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SortedShippingMethodRoute'] ?? self::getSortedShippingMethodRouteService($container));

        $container->services['Shopware\\Storefront\\Controller\\CheckoutController'] = $instance = new \Shopware\Storefront\Controller\CheckoutController(($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? self::getCartServiceService($container)), new \Shopware\Storefront\Page\Checkout\Cart\CheckoutCartPageLoader($a, $b, $c, $d, $e, ($container->services['Shopware\\Core\\System\\Country\\SalesChannel\\CachedCountryRoute'] ?? self::getCachedCountryRouteService($container))), new \Shopware\Storefront\Page\Checkout\Confirm\CheckoutConfirmPageLoader($b, $c, $e, $d, $a, ($container->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\AddressValidationFactory'] ?? self::getAddressValidationFactoryService($container)), ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container))), new \Shopware\Storefront\Page\Checkout\Finish\CheckoutFinishPageLoader($b, $a, ($container->services['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderRoute'] ?? self::getOrderRouteService($container))), ($container->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'] ?? self::getOrderServiceService($container)), ($container->privates['Shopware\\Core\\Checkout\\Payment\\PaymentService'] ?? self::getPaymentServiceService($container)), new \Shopware\Storefront\Page\Checkout\Offcanvas\OffcanvasCartPageLoader($b, $c, $a, $e), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\LogoutRoute'] ?? self::getLogoutRouteService($container)), ($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartLoadRoute'] ?? self::getCartLoadRouteService($container)));

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\CmsController' shared service.
     *
     * @return \Shopware\Storefront\Controller\CmsController
     */
    protected static function getCmsControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/CmsController.php';

        $container->services['Shopware\\Storefront\\Controller\\CmsController'] = $instance = new \Shopware\Storefront\Controller\CmsController(($container->services['Shopware\\Core\\Content\\Cms\\SalesChannel\\CmsRoute'] ?? self::getCmsRouteService($container)), ($container->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CachedCategoryRoute'] ?? self::getCachedCategoryRouteService($container)), ($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ResolveCriteriaProductListingRoute'] ?? self::getResolveCriteriaProductListingRouteService($container)), ($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Detail\\CachedProductDetailRoute'] ?? self::getCachedProductDetailRouteService($container)), ($container->services['Shopware\\Storefront\\Page\\Product\\Review\\ProductReviewLoader'] ?? self::getProductReviewLoaderService($container)), ($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\FindVariant\\FindProductVariantRoute'] ?? self::getFindProductVariantRouteService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)));

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\ContextController' shared service.
     *
     * @return \Shopware\Storefront\Controller\ContextController
     */
    protected static function getContextControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/ContextController.php';

        $container->services['Shopware\\Storefront\\Controller\\ContextController'] = $instance = new \Shopware\Storefront\Controller\ContextController(($container->services['Shopware\\Core\\System\\SalesChannel\\SalesChannel\\ContextSwitchRoute'] ?? self::getContextSwitchRouteService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->privates['router.default'] ?? self::getRouter_DefaultService($container)));

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\CookieController' shared service.
     *
     * @return \Shopware\Storefront\Controller\CookieController
     */
    protected static function getCookieControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/CookieController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cookie/CookieProviderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cookie/AppCookieProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cookie/CookieProvider.php';

        $container->services['Shopware\\Storefront\\Controller\\CookieController'] = $instance = new \Shopware\Storefront\Controller\CookieController(new \Shopware\Storefront\Framework\Cookie\AppCookieProvider(new \Shopware\Storefront\Framework\Cookie\CookieProvider(), ($container->services['app.repository'] ?? self::getApp_RepositoryService($container))), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)));

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\CountryStateController' shared service.
     *
     * @return \Shopware\Storefront\Controller\CountryStateController
     */
    protected static function getCountryStateControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/CountryStateController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Country/CountryStateDataPageletLoader.php';

        $container->services['Shopware\\Storefront\\Controller\\CountryStateController'] = $instance = new \Shopware\Storefront\Controller\CountryStateController(new \Shopware\Storefront\Pagelet\Country\CountryStateDataPageletLoader(($container->services['Shopware\\Core\\System\\Country\\SalesChannel\\CachedCountryStateRoute'] ?? self::getCachedCountryStateRouteService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container))));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\DocumentController' shared service.
     *
     * @return \Shopware\Storefront\Controller\DocumentController
     */
    protected static function getDocumentController2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/DocumentController.php';

        $container->services['Shopware\\Storefront\\Controller\\DocumentController'] = $instance = new \Shopware\Storefront\Controller\DocumentController(($container->services['Shopware\\Core\\Checkout\\Document\\SalesChannel\\DocumentRoute'] ?? self::getDocumentRouteService($container)));

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\DownloadController' shared service.
     *
     * @return \Shopware\Storefront\Controller\DownloadController
     */
    protected static function getDownloadControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/DownloadController.php';

        $container->services['Shopware\\Storefront\\Controller\\DownloadController'] = $instance = new \Shopware\Storefront\Controller\DownloadController(($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\DownloadRoute'] ?? self::getDownloadRouteService($container)));

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\ErrorController' shared service.
     *
     * @return \Shopware\Storefront\Controller\ErrorController
     */
    protected static function getErrorControllerService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['Shopware\\Storefront\\Controller\\ErrorController'] = $container->createProxy('ErrorControllerGhost79ad257', static fn () => \ErrorControllerGhost79ad257::createLazyGhost(static fn ($proxy) => self::getErrorControllerService($container, $proxy)));
        }

        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Twig/ErrorTemplateResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Navigation/Error/ErrorPageLoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Navigation/Error/ErrorPageLoader.php';

        $a = ($container->services['twig'] ?? self::getTwigService($container));

        $instance = ($lazyLoad->__construct(new \Shopware\Storefront\Framework\Twig\ErrorTemplateResolver($a), ($container->privates['Shopware\\Storefront\\Pagelet\\Header\\HeaderPageletLoader'] ?? self::getHeaderPageletLoaderService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), new \Shopware\Storefront\Page\Navigation\Error\ErrorPageLoader(($container->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'] ?? self::getSalesChannelCmsPageLoaderService($container)), ($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? self::getGenericPageLoaderService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container))), ($container->privates['Shopware\\Storefront\\Pagelet\\Footer\\FooterPageletLoader'] ?? self::getFooterPageletLoaderService($container))) && false ?: $lazyLoad);

        $instance->setContainer($container);
        $instance->setTwig($a);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\FormController' shared service.
     *
     * @return \Shopware\Storefront\Controller\FormController
     */
    protected static function getFormControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/FormController.php';

        $container->services['Shopware\\Storefront\\Controller\\FormController'] = $instance = new \Shopware\Storefront\Controller\FormController(($container->services['Shopware\\Core\\Content\\ContactForm\\SalesChannel\\ContactFormRoute'] ?? self::getContactFormRouteService($container)), ($container->services['Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterSubscribeRoute'] ?? self::getNewsletterSubscribeRouteService($container)), ($container->services['Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterUnsubscribeRoute'] ?? self::getNewsletterUnsubscribeRouteService($container)));

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\LandingPageController' shared service.
     *
     * @return \Shopware\Storefront\Controller\LandingPageController
     */
    protected static function getLandingPageControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/LandingPageController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/LandingPage/LandingPageLoader.php';

        $container->services['Shopware\\Storefront\\Controller\\LandingPageController'] = $instance = new \Shopware\Storefront\Controller\LandingPageController(new \Shopware\Storefront\Page\LandingPage\LandingPageLoader(($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? self::getGenericPageLoaderService($container)), ($container->services['Shopware\\Core\\Content\\LandingPage\\SalesChannel\\CachedLandingPageRoute'] ?? self::getCachedLandingPageRouteService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container))));

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\MaintenanceController' shared service.
     *
     * @return \Shopware\Storefront\Controller\MaintenanceController
     */
    protected static function getMaintenanceControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/MaintenanceController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Maintenance/MaintenancePageLoader.php';

        $container->services['Shopware\\Storefront\\Controller\\MaintenanceController'] = $instance = new \Shopware\Storefront\Controller\MaintenanceController(($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), new \Shopware\Storefront\Page\Maintenance\MaintenancePageLoader(($container->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'] ?? self::getSalesChannelCmsPageLoaderService($container)), ($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? self::getGenericPageLoaderService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container))), ($container->privates['Shopware\\Storefront\\Framework\\Routing\\MaintenanceModeResolver'] ?? self::getMaintenanceModeResolver2Service($container)));

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\NavigationController' shared service.
     *
     * @return \Shopware\Storefront\Controller\NavigationController
     */
    protected static function getNavigationControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/NavigationController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Navigation/NavigationPageLoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Navigation/NavigationPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Menu/Offcanvas/MenuOffcanvasPageletLoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Menu/Offcanvas/MenuOffcanvasPageletLoader.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        $container->services['Shopware\\Storefront\\Controller\\NavigationController'] = $instance = new \Shopware\Storefront\Controller\NavigationController(new \Shopware\Storefront\Page\Navigation\NavigationPageLoader(($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? self::getGenericPageLoaderService($container)), $a, ($container->services['Shopware\\Core\\Content\\Category\\SalesChannel\\CachedCategoryRoute'] ?? self::getCachedCategoryRouteService($container)), ($container->services['Shopware\\Core\\Content\\Seo\\SeoUrlPlaceholderHandlerInterface'] ?? self::getSeoUrlPlaceholderHandlerInterfaceService($container))), new \Shopware\Storefront\Pagelet\Menu\Offcanvas\MenuOffcanvasPageletLoader($a, ($container->privates['Shopware\\Core\\Content\\Category\\Service\\NavigationLoader'] ?? self::getNavigationLoaderService($container))));

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\NewsletterController' shared service.
     *
     * @return \Shopware\Storefront\Controller\NewsletterController
     */
    protected static function getNewsletterControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/NewsletterController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Newsletter/Subscribe/NewsletterSubscribePageLoader.php';

        $container->services['Shopware\\Storefront\\Controller\\NewsletterController'] = $instance = new \Shopware\Storefront\Controller\NewsletterController(new \Shopware\Storefront\Page\Newsletter\Subscribe\NewsletterSubscribePageLoader(($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? self::getGenericPageLoaderService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container))), ($container->services['Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterConfirmRoute'] ?? self::getNewsletterConfirmRouteService($container)), ($container->privates['Shopware\\Storefront\\Pagelet\\Newsletter\\Account\\NewsletterAccountPageletLoader'] ?? self::getNewsletterAccountPageletLoaderService($container)));

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\ProductController' shared service.
     *
     * @return \Shopware\Storefront\Controller\ProductController
     */
    protected static function getProductControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/ProductController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Product/ProductPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Product/QuickView/MinimalQuickViewPageLoader.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));
        $b = ($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Detail\\CachedProductDetailRoute'] ?? self::getCachedProductDetailRouteService($container));
        $c = ($container->services['Shopware\\Storefront\\Page\\Product\\Review\\ProductReviewLoader'] ?? self::getProductReviewLoaderService($container));

        $container->services['Shopware\\Storefront\\Controller\\ProductController'] = $instance = new \Shopware\Storefront\Controller\ProductController(new \Shopware\Storefront\Page\Product\ProductPageLoader(($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? self::getGenericPageLoaderService($container)), $a, $b, $c, ($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'] ?? self::getCachedProductCrossSellingRouteService($container))), ($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\FindVariant\\FindProductVariantRoute'] ?? self::getFindProductVariantRouteService($container)), new \Shopware\Storefront\Page\Product\QuickView\MinimalQuickViewPageLoader($a, $b), ($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\ProductReviewSaveRoute'] ?? self::getProductReviewSaveRouteService($container)), ($container->services['Shopware\\Core\\Content\\Seo\\SeoUrlPlaceholderHandlerInterface'] ?? self::getSeoUrlPlaceholderHandlerInterfaceService($container)), $c, ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)));

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\RegisterController' shared service.
     *
     * @return \Shopware\Storefront\Controller\RegisterController
     */
    protected static function getRegisterControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/RegisterController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Account/CustomerGroupRegistration/AbstractCustomerGroupRegistrationPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Account/CustomerGroupRegistration/CustomerGroupRegistrationPageLoader.php';

        $a = ($container->privates['Shopware\\Storefront\\Page\\Account\\Login\\AccountLoginPageLoader'] ?? self::getAccountLoginPageLoaderService($container));

        $container->services['Shopware\\Storefront\\Controller\\RegisterController'] = $instance = new \Shopware\Storefront\Controller\RegisterController($a, ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\RegisterRoute'] ?? self::getRegisterRouteService($container)), ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\RegisterConfirmRoute'] ?? self::getRegisterConfirmRouteService($container)), ($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? self::getCartServiceService($container)), ($container->services['Shopware\\Storefront\\Page\\Checkout\\Register\\CheckoutRegisterPageLoader'] ?? self::getCheckoutRegisterPageLoaderService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container)), new \Shopware\Storefront\Page\Account\CustomerGroupRegistration\CustomerGroupRegistrationPageLoader($a, ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\CustomerGroupRegistrationSettingsRoute'] ?? self::getCustomerGroupRegistrationSettingsRouteService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container))), ($container->services['sales_channel_domain.repository'] ?? self::getSalesChannelDomain_RepositoryService($container)));

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\ScriptController' shared service.
     *
     * @return \Shopware\Storefront\Controller\ScriptController
     */
    protected static function getScriptControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/ScriptController.php';

        $container->services['Shopware\\Storefront\\Controller\\ScriptController'] = $instance = new \Shopware\Storefront\Controller\ScriptController(($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? self::getGenericPageLoaderService($container)), ($container->privates['Shopware\\Core\\Framework\\Script\\Api\\ScriptResponseEncoder'] ?? self::getScriptResponseEncoderService($container)));

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\SearchController' shared service.
     *
     * @return \Shopware\Storefront\Controller\SearchController
     */
    protected static function getSearchControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/SearchController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Suggest/SuggestPageLoader.php';

        $container->services['Shopware\\Storefront\\Controller\\SearchController'] = $instance = new \Shopware\Storefront\Controller\SearchController(($container->services['Shopware\\Storefront\\Page\\Search\\SearchPageLoader'] ?? self::getSearchPageLoaderService($container)), new \Shopware\Storefront\Page\Suggest\SuggestPageLoader(($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Suggest\\CachedProductSuggestRoute'] ?? self::getCachedProductSuggestRouteService($container)), ($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? self::getGenericPageLoaderService($container))), ($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Search\\ResolvedCriteriaProductSearchRoute'] ?? self::getResolvedCriteriaProductSearchRouteService($container)));

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\SitemapController' shared service.
     *
     * @return \Shopware\Storefront\Controller\SitemapController
     */
    protected static function getSitemapControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/SitemapController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Sitemap/SitemapPageLoader.php';

        $container->services['Shopware\\Storefront\\Controller\\SitemapController'] = $instance = new \Shopware\Storefront\Controller\SitemapController(new \Shopware\Storefront\Page\Sitemap\SitemapPageLoader(($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Content\\Sitemap\\SalesChannel\\CachedSitemapRoute'] ?? self::getCachedSitemapRouteService($container))));

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\VerificationHashController' shared service.
     *
     * @return \Shopware\Storefront\Controller\VerificationHashController
     */
    protected static function getVerificationHashControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/VerificationHashController.php';

        $container->services['Shopware\\Storefront\\Controller\\VerificationHashController'] = $instance = new \Shopware\Storefront\Controller\VerificationHashController(($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\WellKnownController' shared service.
     *
     * @return \Shopware\Storefront\Controller\WellKnownController
     */
    protected static function getWellKnownControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/WellKnownController.php';

        $container->services['Shopware\\Storefront\\Controller\\WellKnownController'] = $instance = new \Shopware\Storefront\Controller\WellKnownController();

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Controller\WishlistController' shared service.
     *
     * @return \Shopware\Storefront\Controller\WishlistController
     */
    protected static function getWishlistControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Controller/WishlistController.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Wishlist/WishlistPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Wishlist/GuestWishlistPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Wishlist/GuestWishlistPageletLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/AbstractProductCloseoutFilterFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/ProductCloseoutFilterFactory.php';

        $a = ($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? self::getGenericPageLoaderService($container));
        $b = ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\LoadWishlistRoute'] ?? self::getLoadWishlistRouteService($container));
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        $container->services['Shopware\\Storefront\\Controller\\WishlistController'] = $instance = new \Shopware\Storefront\Controller\WishlistController(new \Shopware\Storefront\Page\Wishlist\WishlistPageLoader($a, $b, $c), $b, ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AddWishlistProductRoute'] ?? self::getAddWishlistProductRouteService($container)), ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\RemoveWishlistProductRoute'] ?? self::getRemoveWishlistProductRouteService($container)), ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\MergeWishlistProductRoute'] ?? self::getMergeWishlistProductRouteService($container)), new \Shopware\Storefront\Page\Wishlist\GuestWishlistPageLoader($a, $c), new \Shopware\Storefront\Pagelet\Wishlist\GuestWishlistPageletLoader(($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\ProductListRoute'] ?? self::getProductListRouteService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), $c, ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\ProductCloseoutFilterFactory'] ??= new \Shopware\Core\Content\Product\SalesChannel\ProductCloseoutFilterFactory())), $c);

        $instance->setContainer($container);
        $instance->setTwig(($container->services['twig'] ?? self::getTwigService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Framework\Cache\CacheStore' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Cache\CacheStore
     */
    protected static function getCacheStoreService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/HttpCache/StoreInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheStore.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheStateValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheStateValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/AbstractHttpCacheKeyGenerator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/HttpCacheKeyGenerator.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        return $container->services['Shopware\\Storefront\\Framework\\Cache\\CacheStore'] = new \Shopware\Storefront\Framework\Cache\CacheStore(($container->privates['cache.http'] ?? self::getCache_HttpService($container)), new \Shopware\Storefront\Framework\Cache\CacheStateValidator($container->parameters['shopware.cache.invalidation.http_cache']), $a, ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? self::getCacheTracerService($container)), new \Shopware\Storefront\Framework\Cache\HttpCacheKeyGenerator('7290e2c16fdac46b1cf04202326f2e4f', $a, $container->parameters['storefront.http_cache.ignored_url_parameters']), ($container->privates['Shopware\\Storefront\\Framework\\Routing\\MaintenanceModeResolver'] ?? self::getMaintenanceModeResolver2Service($container)), $container->parameters['session.storage.options']);
    }

    /**
     * Gets the public 'Shopware\Storefront\Framework\Media\StorefrontMediaValidatorRegistry' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Media\StorefrontMediaValidatorRegistry
     */
    protected static function getStorefrontMediaValidatorRegistryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Media/StorefrontMediaValidatorRegistry.php';

        return $container->services['Shopware\\Storefront\\Framework\\Media\\StorefrontMediaValidatorRegistry'] = new \Shopware\Storefront\Framework\Media\StorefrontMediaValidatorRegistry(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Storefront\\Framework\\Media\\Validator\\StorefrontMediaImageValidator'] ??= new \Shopware\Storefront\Framework\Media\Validator\StorefrontMediaImageValidator());
            yield 1 => ($container->privates['Shopware\\Storefront\\Framework\\Media\\Validator\\StorefrontMediaDocumentValidator'] ??= new \Shopware\Storefront\Framework\Media\Validator\StorefrontMediaDocumentValidator());
        }, 2));
    }

    /**
     * Gets the public 'Shopware\Storefront\Page\Checkout\Register\CheckoutRegisterPageLoader' shared autowired service.
     *
     * @return \Shopware\Storefront\Page\Checkout\Register\CheckoutRegisterPageLoader
     */
    protected static function getCheckoutRegisterPageLoaderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Checkout/Register/CheckoutRegisterPageLoader.php';

        return $container->services['Shopware\\Storefront\\Page\\Checkout\\Register\\CheckoutRegisterPageLoader'] = new \Shopware\Storefront\Page\Checkout\Register\CheckoutRegisterPageLoader(($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? self::getGenericPageLoaderService($container)), ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\ListAddressRoute'] ?? self::getListAddressRouteService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? self::getCartServiceService($container)), ($container->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'] ?? self::getCachedSalutationRouteService($container)), ($container->services['Shopware\\Core\\System\\Country\\SalesChannel\\CachedCountryRoute'] ?? self::getCachedCountryRouteService($container)));
    }

    /**
     * Gets the public 'Shopware\Storefront\Page\Product\Review\ProductReviewLoader' shared service.
     *
     * @return \Shopware\Storefront\Page\Product\Review\ProductReviewLoader
     */
    protected static function getProductReviewLoaderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Product/Review/ProductReviewLoader.php';

        return $container->services['Shopware\\Storefront\\Page\\Product\\Review\\ProductReviewLoader'] = new \Shopware\Storefront\Page\Product\Review\ProductReviewLoader(($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\CachedProductReviewRoute'] ?? self::getCachedProductReviewRouteService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)));
    }

    /**
     * Gets the public 'Shopware\Storefront\Page\Search\SearchPageLoader' shared autowired service.
     *
     * @return \Shopware\Storefront\Page\Search\SearchPageLoader
     */
    protected static function getSearchPageLoaderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Search/SearchPageLoader.php';

        return $container->services['Shopware\\Storefront\\Page\\Search\\SearchPageLoader'] = new \Shopware\Storefront\Page\Search\SearchPageLoader(($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? self::getGenericPageLoaderService($container)), ($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Search\\ResolvedCriteriaProductSearchRoute'] ?? self::getResolvedCriteriaProductSearchRouteService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)));
    }

    /**
     * Gets the public 'Shopware\Storefront\Theme\Aggregate\ThemeChildDefinition' shared service.
     *
     * @return \Shopware\Storefront\Theme\Aggregate\ThemeChildDefinition
     */
    protected static function getThemeChildDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Aggregate/ThemeChildDefinition.php';

        $container->services['Shopware\\Storefront\\Theme\\Aggregate\\ThemeChildDefinition'] = $instance = new \Shopware\Storefront\Theme\Aggregate\ThemeChildDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Theme\Aggregate\ThemeMediaDefinition' shared service.
     *
     * @return \Shopware\Storefront\Theme\Aggregate\ThemeMediaDefinition
     */
    protected static function getThemeMediaDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Aggregate/ThemeMediaDefinition.php';

        $container->services['Shopware\\Storefront\\Theme\\Aggregate\\ThemeMediaDefinition'] = $instance = new \Shopware\Storefront\Theme\Aggregate\ThemeMediaDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Theme\Aggregate\ThemeSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Storefront\Theme\Aggregate\ThemeSalesChannelDefinition
     */
    protected static function getThemeSalesChannelDefinitionService($container)
    {
        $container->services['Shopware\\Storefront\\Theme\\Aggregate\\ThemeSalesChannelDefinition'] = $instance = new \Shopware\Storefront\Theme\Aggregate\ThemeSalesChannelDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Theme\Aggregate\ThemeTranslationDefinition' shared service.
     *
     * @return \Shopware\Storefront\Theme\Aggregate\ThemeTranslationDefinition
     */
    protected static function getThemeTranslationDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Aggregate/ThemeTranslationDefinition.php';

        $container->services['Shopware\\Storefront\\Theme\\Aggregate\\ThemeTranslationDefinition'] = $instance = new \Shopware\Storefront\Theme\Aggregate\ThemeTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Theme\Controller\ThemeController' shared service.
     *
     * @return \Shopware\Storefront\Theme\Controller\ThemeController
     */
    protected static function getThemeControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Controller/ThemeController.php';

        $container->services['Shopware\\Storefront\\Theme\\Controller\\ThemeController'] = $instance = new \Shopware\Storefront\Theme\Controller\ThemeController(($container->privates['Shopware\\Storefront\\Theme\\ThemeService'] ?? self::getThemeServiceService($container)));

        $instance->setContainer($container);

        return $instance;
    }

    /**
     * Gets the public 'Shopware\Storefront\Theme\SalesChannelThemeLoader' shared service.
     *
     * @return \Shopware\Storefront\Theme\SalesChannelThemeLoader
     */
    protected static function getSalesChannelThemeLoaderService($container)
    {
        return $container->services['Shopware\\Storefront\\Theme\\SalesChannelThemeLoader'] = new \Shopware\Storefront\Theme\SalesChannelThemeLoader(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the public 'Shopware\Storefront\Theme\StorefrontPluginRegistry' shared service.
     *
     * @return \Shopware\Storefront\Theme\StorefrontPluginRegistry
     */
    protected static function getStorefrontPluginRegistryService($container)
    {
        return $container->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] = new \Shopware\Storefront\Theme\StorefrontPluginRegistry(($container->services['kernel'] ?? $container->get('kernel', 1)), ($container->privates['Shopware\\Storefront\\Theme\\StorefrontPluginConfiguration\\StorefrontPluginConfigurationFactory'] ??= new \Shopware\Storefront\Theme\StorefrontPluginConfiguration\StorefrontPluginConfigurationFactory(\dirname(__DIR__, 4))), ($container->privates['Shopware\\Core\\Framework\\App\\ActiveAppsLoader'] ?? self::getActiveAppsLoaderService($container)));
    }

    /**
     * Gets the public 'Shopware\Storefront\Theme\ThemeDefinition' shared service.
     *
     * @return \Shopware\Storefront\Theme\ThemeDefinition
     */
    protected static function getThemeDefinitionService($container)
    {
        $container->services['Shopware\\Storefront\\Theme\\ThemeDefinition'] = $instance = new \Shopware\Storefront\Theme\ThemeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'Symfony\Bundle\FrameworkBundle\Controller\RedirectController' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Controller\RedirectController
     */
    protected static function getRedirectControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Controller/RedirectController.php';

        $a = ($container->privates['router.request_context'] ?? self::getRouter_RequestContextService($container));

        return $container->services['Symfony\\Bundle\\FrameworkBundle\\Controller\\RedirectController'] = new \Symfony\Bundle\FrameworkBundle\Controller\RedirectController(($container->services['router'] ?? self::getRouterService($container)), $a->getHttpPort(), $a->getHttpsPort());
    }

    /**
     * Gets the public 'Symfony\Bundle\FrameworkBundle\Controller\TemplateController' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Controller\TemplateController
     */
    protected static function getTemplateControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Controller/TemplateController.php';

        return $container->services['Symfony\\Bundle\\FrameworkBundle\\Controller\\TemplateController'] = new \Symfony\Bundle\FrameworkBundle\Controller\TemplateController(($container->services['twig'] ?? self::getTwigService($container)));
    }

    /**
     * Gets the public 'acl_role.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getAclRole_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['acl_role.repository'])) {
            return $container->services['acl_role.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['acl_role.repository'])) {
            return $container->services['acl_role.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['acl_role.repository'])) {
            return $container->services['acl_role.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['acl_role.repository'])) {
            return $container->services['acl_role.repository'];
        }

        return $container->services['acl_role.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclRoleDefinition'] ?? self::getAclRoleDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'acl_user_role.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getAclUserRole_RepositoryService($container)
    {
        return $container->services['acl_user_role.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclUserRoleDefinition'] ?? self::getAclUserRoleDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'admin.openSearch.client' shared service.
     *
     * @return \Shopware\Elasticsearch\Profiler\ClientProfiler
     */
    protected static function getAdmin_OpenSearch_ClientService($container)
    {
        return $container->services['admin.openSearch.client'] = new \Shopware\Elasticsearch\Profiler\ClientProfiler(($container->privates['shopware.es.profiled.adminClient.inner'] ?? self::getShopware_Es_Profiled_AdminClient_InnerService($container)));
    }

    /**
     * Gets the public 'administration.filesystem.private' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected static function getAdministration_Filesystem_PrivateService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $container->services['administration.filesystem.private'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)), 'plugins/administration');
    }

    /**
     * Gets the public 'administration.filesystem.public' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected static function getAdministration_Filesystem_PublicService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $container->services['administration.filesystem.public'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($container->services['shopware.filesystem.public'] ?? self::getShopware_Filesystem_PublicService($container)), 'plugins/administration');
    }

    /**
     * Gets the public 'app.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getApp_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['app.repository'])) {
            return $container->services['app.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['app.repository'])) {
            return $container->services['app.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['app.repository'])) {
            return $container->services['app.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['app.repository'])) {
            return $container->services['app.repository'];
        }

        return $container->services['app.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\App\\AppDefinition'] ?? self::getAppDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'app_action_button.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getAppActionButton_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['app_action_button.repository'])) {
            return $container->services['app_action_button.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['app_action_button.repository'])) {
            return $container->services['app_action_button.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['app_action_button.repository'])) {
            return $container->services['app_action_button.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['app_action_button.repository'])) {
            return $container->services['app_action_button.repository'];
        }

        return $container->services['app_action_button.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\ActionButton\\ActionButtonDefinition'] ?? self::getActionButtonDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'app_action_button_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getAppActionButtonTranslation_RepositoryService($container)
    {
        return $container->services['app_action_button_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\ActionButtonTranslation\\ActionButtonTranslationDefinition'] ?? self::getActionButtonTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'app_administration_snippet.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getAppAdministrationSnippet_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['app_administration_snippet.repository'])) {
            return $container->services['app_administration_snippet.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['app_administration_snippet.repository'])) {
            return $container->services['app_administration_snippet.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['app_administration_snippet.repository'])) {
            return $container->services['app_administration_snippet.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['app_administration_snippet.repository'])) {
            return $container->services['app_administration_snippet.repository'];
        }

        return $container->services['app_administration_snippet.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Administration\\Snippet\\AppAdministrationSnippetDefinition'] ?? self::getAppAdministrationSnippetDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'app_cms_block.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getAppCmsBlock_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['app_cms_block.repository'])) {
            return $container->services['app_cms_block.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['app_cms_block.repository'])) {
            return $container->services['app_cms_block.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['app_cms_block.repository'])) {
            return $container->services['app_cms_block.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['app_cms_block.repository'])) {
            return $container->services['app_cms_block.repository'];
        }

        return $container->services['app_cms_block.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlock\\AppCmsBlockDefinition'] ?? self::getAppCmsBlockDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'app_cms_block_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getAppCmsBlockTranslation_RepositoryService($container)
    {
        return $container->services['app_cms_block_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlockTranslation\\AppCmsBlockTranslationDefinition'] ?? self::getAppCmsBlockTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'app_flow_action.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getAppFlowAction_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['app_flow_action.repository'])) {
            return $container->services['app_flow_action.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['app_flow_action.repository'])) {
            return $container->services['app_flow_action.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['app_flow_action.repository'])) {
            return $container->services['app_flow_action.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['app_flow_action.repository'])) {
            return $container->services['app_flow_action.repository'];
        }

        return $container->services['app_flow_action.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\FlowAction\\AppFlowActionDefinition'] ?? self::getAppFlowActionDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'app_flow_action_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getAppFlowActionTranslation_RepositoryService($container)
    {
        return $container->services['app_flow_action_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\FlowActionTranslation\\AppFlowActionTranslationDefinition'] ?? self::getAppFlowActionTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'app_flow_event.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getAppFlowEvent_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['app_flow_event.repository'])) {
            return $container->services['app_flow_event.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['app_flow_event.repository'])) {
            return $container->services['app_flow_event.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['app_flow_event.repository'])) {
            return $container->services['app_flow_event.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['app_flow_event.repository'])) {
            return $container->services['app_flow_event.repository'];
        }

        return $container->services['app_flow_event.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\FlowEvent\\AppFlowEventDefinition'] ?? self::getAppFlowEventDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'app_payment_method.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getAppPaymentMethod_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['app_payment_method.repository'])) {
            return $container->services['app_payment_method.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['app_payment_method.repository'])) {
            return $container->services['app_payment_method.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['app_payment_method.repository'])) {
            return $container->services['app_payment_method.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['app_payment_method.repository'])) {
            return $container->services['app_payment_method.repository'];
        }

        return $container->services['app_payment_method.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\AppPaymentMethod\\AppPaymentMethodDefinition'] ?? self::getAppPaymentMethodDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'app_script_condition.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getAppScriptCondition_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['app_script_condition.repository'])) {
            return $container->services['app_script_condition.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['app_script_condition.repository'])) {
            return $container->services['app_script_condition.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['app_script_condition.repository'])) {
            return $container->services['app_script_condition.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['app_script_condition.repository'])) {
            return $container->services['app_script_condition.repository'];
        }

        return $container->services['app_script_condition.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptCondition\\AppScriptConditionDefinition'] ?? self::getAppScriptConditionDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'app_script_condition_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getAppScriptConditionTranslation_RepositoryService($container)
    {
        return $container->services['app_script_condition_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptConditionTranslation\\AppScriptConditionTranslationDefinition'] ?? self::getAppScriptConditionTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'app_shipping_method.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getAppShippingMethod_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['app_shipping_method.repository'])) {
            return $container->services['app_shipping_method.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['app_shipping_method.repository'])) {
            return $container->services['app_shipping_method.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['app_shipping_method.repository'])) {
            return $container->services['app_shipping_method.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['app_shipping_method.repository'])) {
            return $container->services['app_shipping_method.repository'];
        }

        return $container->services['app_shipping_method.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\AppShippingMethod\\AppShippingMethodDefinition'] ?? self::getAppShippingMethodDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'app_template.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getAppTemplate_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['app_template.repository'])) {
            return $container->services['app_template.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['app_template.repository'])) {
            return $container->services['app_template.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['app_template.repository'])) {
            return $container->services['app_template.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['app_template.repository'])) {
            return $container->services['app_template.repository'];
        }

        return $container->services['app_template.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\App\\Template\\TemplateDefinition'] ?? self::getTemplateDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'app_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getAppTranslation_RepositoryService($container)
    {
        return $container->services['app_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\AppTranslation\\AppTranslationDefinition'] ?? self::getAppTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'cache.app' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected static function getCache_AppService($container)
    {
        $container->services['cache.app'] = $instance = new \Symfony\Component\Cache\Adapter\ArrayAdapter(0);

        $instance->setLogger(($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));

        return $instance;
    }

    /**
     * Gets the public 'cache.app_clearer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer
     */
    protected static function getCache_AppClearerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheClearer/CacheClearerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheClearer/Psr6CacheClearer.php';

        return $container->services['cache.app_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer(['cache.app' => ($container->services['cache.app'] ?? self::getCache_AppService($container)), 'cache.messenger.restart_workers_signal' => ($container->privates['cache.messenger.restart_workers_signal'] ?? self::getCache_Messenger_RestartWorkersSignalService($container)), 'cache.rate_limiter' => ($container->privates['cache.rate_limiter'] ?? self::getCache_RateLimiterService($container)), 'cache.object' => ($container->privates['.cache.object.inner'] ?? self::get_Cache_Object_InnerService($container)), 'cache.http' => ($container->privates['.cache.http.inner'] ?? self::get_Cache_Http_InnerService($container)), 'cache.tags' => ($container->privates['cache.tags'] ?? self::getCache_TagsService($container))]);
    }

    /**
     * Gets the public 'cache.global_clearer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer
     */
    protected static function getCache_GlobalClearerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheClearer/CacheClearerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheClearer/Psr6CacheClearer.php';

        return $container->services['cache.global_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer(['cache.app' => ($container->services['cache.app'] ?? self::getCache_AppService($container)), 'cache.system' => ($container->services['cache.system'] ?? self::getCache_SystemService($container)), 'cache.annotations' => ($container->privates['cache.annotations'] ?? self::getCache_AnnotationsService($container)), 'cache.messenger.restart_workers_signal' => ($container->privates['cache.messenger.restart_workers_signal'] ?? self::getCache_Messenger_RestartWorkersSignalService($container)), 'cache.rate_limiter' => ($container->privates['cache.rate_limiter'] ?? self::getCache_RateLimiterService($container)), 'cache.object' => ($container->privates['.cache.object.inner'] ?? self::get_Cache_Object_InnerService($container)), 'cache.http' => ($container->privates['.cache.http.inner'] ?? self::get_Cache_Http_InnerService($container)), 'cache.tags' => ($container->privates['cache.tags'] ?? self::getCache_TagsService($container)), 'cache.validator_expression_language' => ($container->services['cache.validator_expression_language'] ?? self::getCache_ValidatorExpressionLanguageService($container))]);
    }

    /**
     * Gets the public 'cache.system' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getCache_SystemService($container)
    {
        return $container->services['cache.system'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('VOZ9gyKDXg', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));
    }

    /**
     * Gets the public 'cache.system_clearer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer
     */
    protected static function getCache_SystemClearerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheClearer/CacheClearerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheClearer/Psr6CacheClearer.php';

        return $container->services['cache.system_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\Psr6CacheClearer(['cache.system' => ($container->services['cache.system'] ?? self::getCache_SystemService($container)), 'cache.annotations' => ($container->privates['cache.annotations'] ?? self::getCache_AnnotationsService($container)), 'cache.validator_expression_language' => ($container->services['cache.validator_expression_language'] ?? self::getCache_ValidatorExpressionLanguageService($container))]);
    }

    /**
     * Gets the public 'cache.validator_expression_language' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getCache_ValidatorExpressionLanguageService($container)
    {
        return $container->services['cache.validator_expression_language'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('dnBPp6qa5Q', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));
    }

    /**
     * Gets the public 'cache_warmer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate
     */
    protected static function getCacheWarmerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheWarmer/CacheWarmerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheWarmer/CacheWarmerAggregate.php';

        return $container->services['cache_warmer'] = new \Symfony\Component\HttpKernel\CacheWarmer\CacheWarmerAggregate(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['config_builder.warmer'] ?? self::getConfigBuilder_WarmerService($container));
            yield 1 => ($container->privates['translation.warmer'] ?? self::getTranslation_WarmerService($container));
            yield 2 => ($container->privates['router.cache_warmer'] ?? self::getRouter_CacheWarmerService($container));
            yield 3 => ($container->privates['annotations.cache_warmer'] ?? self::getAnnotations_CacheWarmerService($container));
            yield 4 => ($container->privates['serializer.mapping.cache_warmer'] ?? self::getSerializer_Mapping_CacheWarmerService($container));
            yield 5 => ($container->privates['validator.mapping.cache_warmer'] ?? self::getValidator_Mapping_CacheWarmerService($container));
        }, 6), true, ($container->targetDir.''.'/Shopware_Core_KernelDevDebugContainerDeprecations.log'));
    }

    /**
     * Gets the public 'category.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCategory_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['category.repository'])) {
            return $container->services['category.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['category.repository'])) {
            return $container->services['category.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['category.repository'])) {
            return $container->services['category.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['category.repository'])) {
            return $container->services['category.repository'];
        }

        return $container->services['category.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Category\\CategoryDefinition'] ?? self::getCategoryDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'category_tag.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCategoryTag_RepositoryService($container)
    {
        return $container->services['category_tag.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTag\\CategoryTagDefinition'] ?? self::getCategoryTagDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'category_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCategoryTranslation_RepositoryService($container)
    {
        return $container->services['category_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTranslation\\CategoryTranslationDefinition'] ?? self::getCategoryTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'checkout.filesystem.private' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected static function getCheckout_Filesystem_PrivateService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $container->services['checkout.filesystem.private'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)), 'plugins/checkout');
    }

    /**
     * Gets the public 'checkout.filesystem.public' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected static function getCheckout_Filesystem_PublicService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $container->services['checkout.filesystem.public'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($container->services['shopware.filesystem.public'] ?? self::getShopware_Filesystem_PublicService($container)), 'plugins/checkout');
    }

    /**
     * Gets the public 'cms_block.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCmsBlock_RepositoryService($container)
    {
        return $container->services['cms_block.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsBlock\\CmsBlockDefinition'] ?? self::getCmsBlockDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'cms_page.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCmsPage_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['cms_page.repository'])) {
            return $container->services['cms_page.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['cms_page.repository'])) {
            return $container->services['cms_page.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['cms_page.repository'])) {
            return $container->services['cms_page.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['cms_page.repository'])) {
            return $container->services['cms_page.repository'];
        }

        return $container->services['cms_page.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Cms\\CmsPageDefinition'] ?? self::getCmsPageDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'cms_page_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCmsPageTranslation_RepositoryService($container)
    {
        return $container->services['cms_page_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsPageTranslation\\CmsPageTranslationDefinition'] ?? self::getCmsPageTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'cms_section.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCmsSection_RepositoryService($container)
    {
        return $container->services['cms_section.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSection\\CmsSectionDefinition'] ?? self::getCmsSectionDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'cms_slot.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCmsSlot_RepositoryService($container)
    {
        return $container->services['cms_slot.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlot\\CmsSlotDefinition'] ?? self::getCmsSlotDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'cms_slot_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCmsSlotTranslation_RepositoryService($container)
    {
        return $container->services['cms_slot_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlotTranslation\\CmsSlotTranslationDefinition'] ?? self::getCmsSlotTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'console.command_loader' shared service.
     *
     * @return \Symfony\Component\Console\CommandLoader\ContainerCommandLoader
     */
    protected static function getConsole_CommandLoaderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/CommandLoader/CommandLoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/CommandLoader/ContainerCommandLoader.php';

        return $container->services['console.command_loader'] = new \Symfony\Component\Console\CommandLoader\ContainerCommandLoader(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Shopware\\Core\\Framework\\Migration\\Command\\CreateMigrationCommand' => ['privates', '.Shopware\\Core\\Framework\\Migration\\Command\\CreateMigrationCommand.lazy', 'getCreateMigrationCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Migration\\Command\\RefreshMigrationCommand' => ['privates', '.Shopware\\Core\\Framework\\Migration\\Command\\RefreshMigrationCommand.lazy', 'getRefreshMigrationCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Migration\\Command\\MigrationCommand' => ['privates', '.Shopware\\Core\\Framework\\Migration\\Command\\MigrationCommand.lazy', 'getMigrationCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Demodata\\PersonalData\\CleanPersonalDataCommand' => ['privates', '.Shopware\\Core\\Framework\\Demodata\\PersonalData\\CleanPersonalDataCommand.lazy', 'getCleanPersonalDataCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Migration\\Command\\MigrationDestructiveCommand' => ['privates', '.Shopware\\Core\\Framework\\Migration\\Command\\MigrationDestructiveCommand.lazy', 'getMigrationDestructiveCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCreateCommand' => ['privates', '.Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCreateCommand.lazy', 'getChangelogCreateCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogReleaseCommand' => ['privates', '.Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogReleaseCommand.lazy', 'getChangelogReleaseCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogChangeCommand' => ['privates', '.Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogChangeCommand.lazy', 'getChangelogChangeCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCheckCommand' => ['privates', '.Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCheckCommand.lazy', 'getChangelogCheckCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Feature\\Command\\FeatureDumpCommand' => ['privates', '.Shopware\\Core\\Framework\\Feature\\Command\\FeatureDumpCommand.lazy', 'getFeatureDumpCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Adapter\\Command\\S3FilesystemVisibilityCommand' => ['privates', '.Shopware\\Core\\Framework\\Adapter\\Command\\S3FilesystemVisibilityCommand.lazy', 'getS3FilesystemVisibilityCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Api\\Command\\DumpSchemaCommand' => ['privates', '.Shopware\\Core\\Framework\\Api\\Command\\DumpSchemaCommand.lazy', 'getDumpSchemaCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Api\\Command\\DumpClassSchemaCommand' => ['privates', '.Shopware\\Core\\Framework\\Api\\Command\\DumpClassSchemaCommand.lazy', 'getDumpClassSchemaCommand_LazyService', false],
            'Shopware\\Core\\Framework\\App\\Command\\RefreshAppCommand' => ['privates', '.Shopware\\Core\\Framework\\App\\Command\\RefreshAppCommand.lazy', 'getRefreshAppCommand_LazyService', false],
            'Shopware\\Core\\Framework\\App\\Command\\InstallAppCommand' => ['privates', '.Shopware\\Core\\Framework\\App\\Command\\InstallAppCommand.lazy', 'getInstallAppCommand_LazyService', false],
            'Shopware\\Core\\Framework\\App\\Command\\UninstallAppCommand' => ['privates', '.Shopware\\Core\\Framework\\App\\Command\\UninstallAppCommand.lazy', 'getUninstallAppCommand_LazyService', false],
            'Shopware\\Core\\Framework\\App\\Command\\ActivateAppCommand' => ['privates', '.Shopware\\Core\\Framework\\App\\Command\\ActivateAppCommand.lazy', 'getActivateAppCommand_LazyService', false],
            'Shopware\\Core\\Framework\\App\\Command\\DeactivateAppCommand' => ['privates', '.Shopware\\Core\\Framework\\App\\Command\\DeactivateAppCommand.lazy', 'getDeactivateAppCommand_LazyService', false],
            'Shopware\\Core\\Framework\\App\\Command\\CreateAppCommand' => ['privates', '.Shopware\\Core\\Framework\\App\\Command\\CreateAppCommand.lazy', 'getCreateAppCommand_LazyService', false],
            'Shopware\\Core\\Framework\\App\\Command\\ValidateAppCommand' => ['privates', '.Shopware\\Core\\Framework\\App\\Command\\ValidateAppCommand.lazy', 'getValidateAppCommand_LazyService', false],
            'Shopware\\Core\\Framework\\App\\Command\\ResolveAppUrlChangeCommand' => ['privates', '.Shopware\\Core\\Framework\\App\\Command\\ResolveAppUrlChangeCommand.lazy', 'getResolveAppUrlChangeCommand_LazyService', false],
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateSchemaCommand' => ['privates', '.Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateSchemaCommand.lazy', 'getCreateSchemaCommand_LazyService', false],
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateEntitiesCommand' => ['privates', '.Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateEntitiesCommand.lazy', 'getCreateEntitiesCommand_LazyService', false],
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateHydratorCommand' => ['privates', '.Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateHydratorCommand.lazy', 'getCreateHydratorCommand_LazyService', false],
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand' => ['privates', '.Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand.lazy', 'getRefreshIndexCommand_LazyService', false],
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\DataAbstractionLayerValidateCommand' => ['privates', '.Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\DataAbstractionLayerValidateCommand.lazy', 'getDataAbstractionLayerValidateCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Demodata\\Command\\DemodataCommand' => ['privates', '.Shopware\\Core\\Framework\\Demodata\\Command\\DemodataCommand.lazy', 'getDemodataCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Event\\Command\\DebugDumpBusinessEventsCommand' => ['privates', '.Shopware\\Core\\Framework\\Event\\Command\\DebugDumpBusinessEventsCommand.lazy', 'getDebugDumpBusinessEventsCommand_LazyService', false],
            'console.command.assets_install' => ['privates', '.console.command.assets_install.lazy', 'get_Console_Command_AssetsInstall_LazyService', false],
            'Shopware\\Core\\Framework\\Plugin\\Command\\BundleDumpCommand' => ['privates', '.Shopware\\Core\\Framework\\Plugin\\Command\\BundleDumpCommand.lazy', 'getBundleDumpCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Plugin\\Command\\PluginRefreshCommand' => ['privates', '.Shopware\\Core\\Framework\\Plugin\\Command\\PluginRefreshCommand.lazy', 'getPluginRefreshCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Plugin\\Command\\PluginListCommand' => ['privates', '.Shopware\\Core\\Framework\\Plugin\\Command\\PluginListCommand.lazy', 'getPluginListCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Plugin\\Command\\PluginZipImportCommand' => ['privates', '.Shopware\\Core\\Framework\\Plugin\\Command\\PluginZipImportCommand.lazy', 'getPluginZipImportCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginInstallCommand' => ['privates', '.Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginInstallCommand.lazy', 'getPluginInstallCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginActivateCommand' => ['privates', '.Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginActivateCommand.lazy', 'getPluginActivateCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUpdateCommand' => ['privates', '.Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUpdateCommand.lazy', 'getPluginUpdateCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginDeactivateCommand' => ['privates', '.Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginDeactivateCommand.lazy', 'getPluginDeactivateCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUninstallCommand' => ['privates', '.Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUninstallCommand.lazy', 'getPluginUninstallCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUpdateAllCommand' => ['privates', '.Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUpdateAllCommand.lazy', 'getPluginUpdateAllCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Plugin\\Command\\PluginCreateCommand' => ['privates', '.Shopware\\Core\\Framework\\Plugin\\Command\\PluginCreateCommand.lazy', 'getPluginCreateCommand_LazyService', false],
            'Shopware\\Core\\Framework\\MessageQueue\\Command\\RegisterScheduledTasksCommand' => ['privates', '.Shopware\\Core\\Framework\\MessageQueue\\Command\\RegisterScheduledTasksCommand.lazy', 'getRegisterScheduledTasksCommand_LazyService', false],
            'Shopware\\Core\\Framework\\MessageQueue\\Command\\ScheduledTaskRunner' => ['privates', '.Shopware\\Core\\Framework\\MessageQueue\\Command\\ScheduledTaskRunner.lazy', 'getScheduledTaskRunner_LazyService', false],
            'Shopware\\Core\\Framework\\MessageQueue\\Command\\ListScheduledTaskCommand' => ['privates', '.Shopware\\Core\\Framework\\MessageQueue\\Command\\ListScheduledTaskCommand.lazy', 'getListScheduledTaskCommand_LazyService', false],
            'Shopware\\Core\\Framework\\MessageQueue\\Command\\RunSingleScheduledTaskCommand' => ['privates', '.Shopware\\Core\\Framework\\MessageQueue\\Command\\RunSingleScheduledTaskCommand.lazy', 'getRunSingleScheduledTaskCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Store\\Command\\StoreDownloadCommand' => ['privates', '.Shopware\\Core\\Framework\\Store\\Command\\StoreDownloadCommand.lazy', 'getStoreDownloadCommand_LazyService', false],
            'Shopware\\Core\\Framework\\Store\\Command\\StoreLoginCommand' => ['privates', '.Shopware\\Core\\Framework\\Store\\Command\\StoreLoginCommand.lazy', 'getStoreLoginCommand_LazyService', false],
            'Shopware\\Core\\System\\Snippet\\Command\\ValidateSnippetsCommand' => ['privates', '.Shopware\\Core\\System\\Snippet\\Command\\ValidateSnippetsCommand.lazy', 'getValidateSnippetsCommand_LazyService', false],
            'Shopware\\Core\\System\\StateMachine\\Command\\WorkflowDumpCommand' => ['privates', '.Shopware\\Core\\System\\StateMachine\\Command\\WorkflowDumpCommand.lazy', 'getWorkflowDumpCommand_LazyService', false],
            'Shopware\\Core\\System\\SystemConfig\\Command\\ConfigGet' => ['privates', '.Shopware\\Core\\System\\SystemConfig\\Command\\ConfigGet.lazy', 'getConfigGet_LazyService', false],
            'Shopware\\Core\\System\\SystemConfig\\Command\\ConfigSet' => ['privates', '.Shopware\\Core\\System\\SystemConfig\\Command\\ConfigSet.lazy', 'getConfigSet_LazyService', false],
            'Shopware\\Core\\System\\NumberRange\\Command\\MigrateIncrementStorageCommand' => ['privates', '.Shopware\\Core\\System\\NumberRange\\Command\\MigrateIncrementStorageCommand.lazy', 'getMigrateIncrementStorageCommand_LazyService', false],
            'Shopware\\Core\\Content\\Media\\Commands\\GenerateThumbnailsCommand' => ['privates', '.Shopware\\Core\\Content\\Media\\Commands\\GenerateThumbnailsCommand.lazy', 'getGenerateThumbnailsCommand_LazyService', false],
            'Shopware\\Core\\Content\\Media\\Commands\\GenerateMediaTypesCommand' => ['privates', '.Shopware\\Core\\Content\\Media\\Commands\\GenerateMediaTypesCommand.lazy', 'getGenerateMediaTypesCommand_LazyService', false],
            'Shopware\\Core\\Content\\Media\\Commands\\DeleteNotUsedMediaCommand' => ['privates', '.Shopware\\Core\\Content\\Media\\Commands\\DeleteNotUsedMediaCommand.lazy', 'getDeleteNotUsedMediaCommand_LazyService', false],
            'Shopware\\Core\\Content\\Media\\Infrastructure\\Command\\UpdatePathCommand' => ['privates', '.Shopware\\Core\\Content\\Media\\Infrastructure\\Command\\UpdatePathCommand.lazy', 'getUpdatePathCommand_LazyService', false],
            'Shopware\\Core\\Content\\ProductExport\\Command\\ProductExportGenerateCommand' => ['privates', '.Shopware\\Core\\Content\\ProductExport\\Command\\ProductExportGenerateCommand.lazy', 'getProductExportGenerateCommand_LazyService', false],
            'Shopware\\Core\\Content\\ImportExport\\Command\\DeleteExpiredFilesCommand' => ['privates', '.Shopware\\Core\\Content\\ImportExport\\Command\\DeleteExpiredFilesCommand.lazy', 'getDeleteExpiredFilesCommand_LazyService', false],
            'Shopware\\Core\\Content\\ImportExport\\Command\\ImportEntityCommand' => ['privates', '.Shopware\\Core\\Content\\ImportExport\\Command\\ImportEntityCommand.lazy', 'getImportEntityCommand_LazyService', false],
            'Shopware\\Core\\Content\\Sitemap\\Commands\\SitemapGenerateCommand' => ['privates', '.Shopware\\Core\\Content\\Sitemap\\Commands\\SitemapGenerateCommand.lazy', 'getSitemapGenerateCommand_LazyService', false],
            'Shopware\\Core\\Checkout\\Cart\\Command\\CartMigrateCommand' => ['privates', '.Shopware\\Core\\Checkout\\Cart\\Command\\CartMigrateCommand.lazy', 'getCartMigrateCommand_LazyService', false],
            'Shopware\\Core\\Checkout\\Customer\\Command\\DeleteUnusedGuestCustomersCommand' => ['privates', '.Shopware\\Core\\Checkout\\Customer\\Command\\DeleteUnusedGuestCustomersCommand.lazy', 'getDeleteUnusedGuestCustomersCommand_LazyService', false],
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemInstallCommand' => ['privates', '.Shopware\\Core\\Maintenance\\System\\Command\\SystemInstallCommand.lazy', 'getSystemInstallCommand_LazyService', false],
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemIsInstalledCommand' => ['privates', '.Shopware\\Core\\Maintenance\\System\\Command\\SystemIsInstalledCommand.lazy', 'getSystemIsInstalledCommand_LazyService', false],
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateJwtSecretCommand' => ['privates', '.Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateJwtSecretCommand.lazy', 'getSystemGenerateJwtSecretCommand_LazyService', false],
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateAppSecretCommand' => ['privates', '.Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateAppSecretCommand.lazy', 'getSystemGenerateAppSecretCommand_LazyService', false],
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemSetupCommand' => ['privates', '.Shopware\\Core\\Maintenance\\System\\Command\\SystemSetupCommand.lazy', 'getSystemSetupCommand_LazyService', false],
            'Symfony\\Component\\Dotenv\\Command\\DotenvDumpCommand' => ['privates', '.Symfony\\Component\\Dotenv\\Command\\DotenvDumpCommand.lazy', 'getDotenvDumpCommand_LazyService', false],
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdatePrepareCommand' => ['privates', '.Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdatePrepareCommand.lazy', 'getSystemUpdatePrepareCommand_LazyService', false],
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdateFinishCommand' => ['privates', '.Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdateFinishCommand.lazy', 'getSystemUpdateFinishCommand_LazyService', false],
            'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelUpdateDomainCommand' => ['privates', '.Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelUpdateDomainCommand.lazy', 'getSalesChannelUpdateDomainCommand_LazyService', false],
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemConfigureShopCommand' => ['privates', '.Shopware\\Core\\Maintenance\\System\\Command\\SystemConfigureShopCommand.lazy', 'getSystemConfigureShopCommand_LazyService', false],
            'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelCreateCommand' => ['privates', '.Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelCreateCommand.lazy', 'getSalesChannelCreateCommand_LazyService', false],
            'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelListCommand' => ['privates', '.Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelListCommand.lazy', 'getSalesChannelListCommand_LazyService', false],
            'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceEnableCommand' => ['privates', '.Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceEnableCommand.lazy', 'getSalesChannelMaintenanceEnableCommand_LazyService', false],
            'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceDisableCommand' => ['privates', '.Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceDisableCommand.lazy', 'getSalesChannelMaintenanceDisableCommand_LazyService', false],
            'Shopware\\Core\\Maintenance\\User\\Command\\UserCreateCommand' => ['privates', '.Shopware\\Core\\Maintenance\\User\\Command\\UserCreateCommand.lazy', 'getUserCreateCommand_LazyService', false],
            'Shopware\\Core\\Maintenance\\User\\Command\\UserChangePasswordCommand' => ['privates', '.Shopware\\Core\\Maintenance\\User\\Command\\UserChangePasswordCommand.lazy', 'getUserChangePasswordCommand_LazyService', false],
            'Shopware\\Administration\\Command\\DeleteAdminFilesAfterBuildCommand' => ['privates', '.Shopware\\Administration\\Command\\DeleteAdminFilesAfterBuildCommand.lazy', 'getDeleteAdminFilesAfterBuildCommand_LazyService', false],
            'Shopware\\Administration\\Command\\DeleteExtensionLocalPublicFilesCommand' => ['privates', '.Shopware\\Administration\\Command\\DeleteExtensionLocalPublicFilesCommand.lazy', 'getDeleteExtensionLocalPublicFilesCommand_LazyService', false],
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchIndexingCommand' => ['privates', '.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchIndexingCommand.lazy', 'getElasticsearchIndexingCommand_LazyService', false],
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchTestAnalyzerCommand' => ['privates', '.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchTestAnalyzerCommand.lazy', 'getElasticsearchTestAnalyzerCommand_LazyService', false],
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchStatusCommand' => ['privates', '.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchStatusCommand.lazy', 'getElasticsearchStatusCommand_LazyService', false],
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchResetCommand' => ['privates', '.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchResetCommand.lazy', 'getElasticsearchResetCommand_LazyService', false],
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchUpdateMappingCommand' => ['privates', '.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchUpdateMappingCommand.lazy', 'getElasticsearchUpdateMappingCommand_LazyService', false],
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCreateAliasCommand' => ['privates', '.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCreateAliasCommand.lazy', 'getElasticsearchCreateAliasCommand_LazyService', false],
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCleanIndicesCommand' => ['privates', '.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCleanIndicesCommand.lazy', 'getElasticsearchCleanIndicesCommand_LazyService', false],
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand' => ['privates', '.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand.lazy', 'getElasticsearchAdminIndexingCommand_LazyService', false],
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminResetCommand' => ['privates', '.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminResetCommand.lazy', 'getElasticsearchAdminResetCommand_LazyService', false],
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminTestCommand' => ['privates', '.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminTestCommand.lazy', 'getElasticsearchAdminTestCommand_LazyService', false],
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminUpdateMappingCommand' => ['privates', '.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminUpdateMappingCommand.lazy', 'getElasticsearchAdminUpdateMappingCommand_LazyService', false],
            'Shopware\\Storefront\\Framework\\Command\\HttpCacheWarmUpCommand' => ['privates', '.Shopware\\Storefront\\Framework\\Command\\HttpCacheWarmUpCommand.lazy', 'getHttpCacheWarmUpCommand_LazyService', false],
            'Shopware\\Storefront\\Framework\\Command\\SalesChannelCreateStorefrontCommand' => ['privates', '.Shopware\\Storefront\\Framework\\Command\\SalesChannelCreateStorefrontCommand.lazy', 'getSalesChannelCreateStorefrontCommand_LazyService', false],
            'Shopware\\Storefront\\Theme\\Command\\ThemeCreateCommand' => ['privates', '.Shopware\\Storefront\\Theme\\Command\\ThemeCreateCommand.lazy', 'getThemeCreateCommand_LazyService', false],
            'Shopware\\Storefront\\Theme\\Command\\ThemeChangeCommand' => ['privates', '.Shopware\\Storefront\\Theme\\Command\\ThemeChangeCommand.lazy', 'getThemeChangeCommand_LazyService', false],
            'Shopware\\Storefront\\Theme\\Command\\ThemeCompileCommand' => ['privates', '.Shopware\\Storefront\\Theme\\Command\\ThemeCompileCommand.lazy', 'getThemeCompileCommand_LazyService', false],
            'Shopware\\Storefront\\Theme\\Command\\ThemeDumpCommand' => ['privates', '.Shopware\\Storefront\\Theme\\Command\\ThemeDumpCommand.lazy', 'getThemeDumpCommand_LazyService', false],
            'Shopware\\Storefront\\Theme\\Command\\ThemeRefreshCommand' => ['privates', '.Shopware\\Storefront\\Theme\\Command\\ThemeRefreshCommand.lazy', 'getThemeRefreshCommand_LazyService', false],
            'Shopware\\Storefront\\Theme\\Command\\ThemePrepareIconsCommand' => ['privates', '.Shopware\\Storefront\\Theme\\Command\\ThemePrepareIconsCommand.lazy', 'getThemePrepareIconsCommand_LazyService', false],
            'console.command.about' => ['privates', '.console.command.about.lazy', 'get_Console_Command_About_LazyService', false],
            'console.command.cache_clear' => ['privates', '.console.command.cache_clear.lazy', 'get_Console_Command_CacheClear_LazyService', false],
            'console.command.cache_pool_clear' => ['privates', '.console.command.cache_pool_clear.lazy', 'get_Console_Command_CachePoolClear_LazyService', false],
            'console.command.cache_pool_prune' => ['privates', '.console.command.cache_pool_prune.lazy', 'get_Console_Command_CachePoolPrune_LazyService', false],
            'console.command.cache_pool_invalidate_tags' => ['privates', '.console.command.cache_pool_invalidate_tags.lazy', 'get_Console_Command_CachePoolInvalidateTags_LazyService', false],
            'console.command.cache_pool_delete' => ['privates', '.console.command.cache_pool_delete.lazy', 'get_Console_Command_CachePoolDelete_LazyService', false],
            'console.command.cache_pool_list' => ['privates', '.console.command.cache_pool_list.lazy', 'get_Console_Command_CachePoolList_LazyService', false],
            'console.command.cache_warmup' => ['privates', '.console.command.cache_warmup.lazy', 'get_Console_Command_CacheWarmup_LazyService', false],
            'console.command.config_debug' => ['privates', '.console.command.config_debug.lazy', 'get_Console_Command_ConfigDebug_LazyService', false],
            'console.command.config_dump_reference' => ['privates', '.console.command.config_dump_reference.lazy', 'get_Console_Command_ConfigDumpReference_LazyService', false],
            'console.command.container_debug' => ['privates', '.console.command.container_debug.lazy', 'get_Console_Command_ContainerDebug_LazyService', false],
            'console.command.container_lint' => ['privates', '.console.command.container_lint.lazy', 'get_Console_Command_ContainerLint_LazyService', false],
            'console.command.debug_autowiring' => ['privates', '.console.command.debug_autowiring.lazy', 'get_Console_Command_DebugAutowiring_LazyService', false],
            'console.command.dotenv_debug' => ['privates', '.console.command.dotenv_debug.lazy', 'get_Console_Command_DotenvDebug_LazyService', false],
            'console.command.event_dispatcher_debug' => ['privates', '.console.command.event_dispatcher_debug.lazy', 'get_Console_Command_EventDispatcherDebug_LazyService', false],
            'console.command.messenger_consume_messages' => ['privates', '.console.command.messenger_consume_messages.lazy', 'get_Console_Command_MessengerConsumeMessages_LazyService', false],
            'console.command.messenger_setup_transports' => ['privates', '.console.command.messenger_setup_transports.lazy', 'get_Console_Command_MessengerSetupTransports_LazyService', false],
            'console.command.messenger_debug' => ['privates', '.console.command.messenger_debug.lazy', 'get_Console_Command_MessengerDebug_LazyService', false],
            'console.command.messenger_stop_workers' => ['privates', '.console.command.messenger_stop_workers.lazy', 'get_Console_Command_MessengerStopWorkers_LazyService', false],
            'console.command.messenger_failed_messages_retry' => ['privates', '.console.command.messenger_failed_messages_retry.lazy', 'get_Console_Command_MessengerFailedMessagesRetry_LazyService', false],
            'console.command.messenger_failed_messages_show' => ['privates', '.console.command.messenger_failed_messages_show.lazy', 'get_Console_Command_MessengerFailedMessagesShow_LazyService', false],
            'console.command.messenger_failed_messages_remove' => ['privates', '.console.command.messenger_failed_messages_remove.lazy', 'get_Console_Command_MessengerFailedMessagesRemove_LazyService', false],
            'console.command.messenger_stats' => ['privates', '.console.command.messenger_stats.lazy', 'get_Console_Command_MessengerStats_LazyService', false],
            'console.command.router_debug' => ['privates', '.console.command.router_debug.lazy', 'get_Console_Command_RouterDebug_LazyService', false],
            'console.command.router_match' => ['privates', '.console.command.router_match.lazy', 'get_Console_Command_RouterMatch_LazyService', false],
            'console.command.serializer_debug' => ['privates', '.console.command.serializer_debug.lazy', 'get_Console_Command_SerializerDebug_LazyService', false],
            'console.command.translation_debug' => ['privates', '.console.command.translation_debug.lazy', 'get_Console_Command_TranslationDebug_LazyService', false],
            'console.command.translation_extract' => ['privates', '.console.command.translation_extract.lazy', 'get_Console_Command_TranslationExtract_LazyService', false],
            'console.command.validator_debug' => ['privates', '.console.command.validator_debug.lazy', 'get_Console_Command_ValidatorDebug_LazyService', false],
            'console.command.translation_pull' => ['privates', '.console.command.translation_pull.lazy', 'get_Console_Command_TranslationPull_LazyService', false],
            'console.command.translation_push' => ['privates', '.console.command.translation_push.lazy', 'get_Console_Command_TranslationPush_LazyService', false],
            'console.command.xliff_lint' => ['privates', '.console.command.xliff_lint.lazy', 'get_Console_Command_XliffLint_LazyService', false],
            'console.command.yaml_lint' => ['privates', '.console.command.yaml_lint.lazy', 'get_Console_Command_YamlLint_LazyService', false],
            'console.command.secrets_set' => ['privates', '.console.command.secrets_set.lazy', 'get_Console_Command_SecretsSet_LazyService', false],
            'console.command.secrets_remove' => ['privates', '.console.command.secrets_remove.lazy', 'get_Console_Command_SecretsRemove_LazyService', false],
            'console.command.secrets_generate_key' => ['privates', '.console.command.secrets_generate_key.lazy', 'get_Console_Command_SecretsGenerateKey_LazyService', false],
            'console.command.secrets_list' => ['privates', '.console.command.secrets_list.lazy', 'get_Console_Command_SecretsList_LazyService', false],
            'console.command.secrets_decrypt_to_local' => ['privates', '.console.command.secrets_decrypt_to_local.lazy', 'get_Console_Command_SecretsDecryptToLocal_LazyService', false],
            'console.command.secrets_encrypt_from_local' => ['privates', '.console.command.secrets_encrypt_from_local.lazy', 'get_Console_Command_SecretsEncryptFromLocal_LazyService', false],
            'console.command.mailer_test' => ['privates', '.console.command.mailer_test.lazy', 'get_Console_Command_MailerTest_LazyService', false],
            'twig.command.debug' => ['privates', '.twig.command.debug.lazy', 'get_Twig_Command_Debug_LazyService', false],
            'twig.command.lint' => ['privates', '.twig.command.lint.lazy', 'get_Twig_Command_Lint_LazyService', false],
            'var_dumper.command.server_dump' => ['privates', '.var_dumper.command.server_dump.lazy', 'get_VarDumper_Command_ServerDump_LazyService', false],
            'monolog.command.server_log' => ['privates', '.monolog.command.server_log.lazy', 'get_Monolog_Command_ServerLog_LazyService', false],
        ], [
            'Shopware\\Core\\Framework\\Migration\\Command\\CreateMigrationCommand' => '?',
            'Shopware\\Core\\Framework\\Migration\\Command\\RefreshMigrationCommand' => '?',
            'Shopware\\Core\\Framework\\Migration\\Command\\MigrationCommand' => '?',
            'Shopware\\Core\\Framework\\Demodata\\PersonalData\\CleanPersonalDataCommand' => '?',
            'Shopware\\Core\\Framework\\Migration\\Command\\MigrationDestructiveCommand' => '?',
            'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCreateCommand' => '?',
            'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogReleaseCommand' => '?',
            'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogChangeCommand' => '?',
            'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCheckCommand' => '?',
            'Shopware\\Core\\Framework\\Feature\\Command\\FeatureDumpCommand' => '?',
            'Shopware\\Core\\Framework\\Adapter\\Command\\S3FilesystemVisibilityCommand' => '?',
            'Shopware\\Core\\Framework\\Api\\Command\\DumpSchemaCommand' => '?',
            'Shopware\\Core\\Framework\\Api\\Command\\DumpClassSchemaCommand' => '?',
            'Shopware\\Core\\Framework\\App\\Command\\RefreshAppCommand' => '?',
            'Shopware\\Core\\Framework\\App\\Command\\InstallAppCommand' => '?',
            'Shopware\\Core\\Framework\\App\\Command\\UninstallAppCommand' => '?',
            'Shopware\\Core\\Framework\\App\\Command\\ActivateAppCommand' => '?',
            'Shopware\\Core\\Framework\\App\\Command\\DeactivateAppCommand' => '?',
            'Shopware\\Core\\Framework\\App\\Command\\CreateAppCommand' => '?',
            'Shopware\\Core\\Framework\\App\\Command\\ValidateAppCommand' => '?',
            'Shopware\\Core\\Framework\\App\\Command\\ResolveAppUrlChangeCommand' => '?',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateSchemaCommand' => '?',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateEntitiesCommand' => '?',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateHydratorCommand' => '?',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand' => '?',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\DataAbstractionLayerValidateCommand' => '?',
            'Shopware\\Core\\Framework\\Demodata\\Command\\DemodataCommand' => '?',
            'Shopware\\Core\\Framework\\Event\\Command\\DebugDumpBusinessEventsCommand' => '?',
            'console.command.assets_install' => '?',
            'Shopware\\Core\\Framework\\Plugin\\Command\\BundleDumpCommand' => '?',
            'Shopware\\Core\\Framework\\Plugin\\Command\\PluginRefreshCommand' => '?',
            'Shopware\\Core\\Framework\\Plugin\\Command\\PluginListCommand' => '?',
            'Shopware\\Core\\Framework\\Plugin\\Command\\PluginZipImportCommand' => '?',
            'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginInstallCommand' => '?',
            'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginActivateCommand' => '?',
            'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUpdateCommand' => '?',
            'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginDeactivateCommand' => '?',
            'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUninstallCommand' => '?',
            'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUpdateAllCommand' => '?',
            'Shopware\\Core\\Framework\\Plugin\\Command\\PluginCreateCommand' => '?',
            'Shopware\\Core\\Framework\\MessageQueue\\Command\\RegisterScheduledTasksCommand' => '?',
            'Shopware\\Core\\Framework\\MessageQueue\\Command\\ScheduledTaskRunner' => '?',
            'Shopware\\Core\\Framework\\MessageQueue\\Command\\ListScheduledTaskCommand' => '?',
            'Shopware\\Core\\Framework\\MessageQueue\\Command\\RunSingleScheduledTaskCommand' => '?',
            'Shopware\\Core\\Framework\\Store\\Command\\StoreDownloadCommand' => '?',
            'Shopware\\Core\\Framework\\Store\\Command\\StoreLoginCommand' => '?',
            'Shopware\\Core\\System\\Snippet\\Command\\ValidateSnippetsCommand' => '?',
            'Shopware\\Core\\System\\StateMachine\\Command\\WorkflowDumpCommand' => '?',
            'Shopware\\Core\\System\\SystemConfig\\Command\\ConfigGet' => '?',
            'Shopware\\Core\\System\\SystemConfig\\Command\\ConfigSet' => '?',
            'Shopware\\Core\\System\\NumberRange\\Command\\MigrateIncrementStorageCommand' => '?',
            'Shopware\\Core\\Content\\Media\\Commands\\GenerateThumbnailsCommand' => '?',
            'Shopware\\Core\\Content\\Media\\Commands\\GenerateMediaTypesCommand' => '?',
            'Shopware\\Core\\Content\\Media\\Commands\\DeleteNotUsedMediaCommand' => '?',
            'Shopware\\Core\\Content\\Media\\Infrastructure\\Command\\UpdatePathCommand' => '?',
            'Shopware\\Core\\Content\\ProductExport\\Command\\ProductExportGenerateCommand' => '?',
            'Shopware\\Core\\Content\\ImportExport\\Command\\DeleteExpiredFilesCommand' => '?',
            'Shopware\\Core\\Content\\ImportExport\\Command\\ImportEntityCommand' => '?',
            'Shopware\\Core\\Content\\Sitemap\\Commands\\SitemapGenerateCommand' => '?',
            'Shopware\\Core\\Checkout\\Cart\\Command\\CartMigrateCommand' => '?',
            'Shopware\\Core\\Checkout\\Customer\\Command\\DeleteUnusedGuestCustomersCommand' => '?',
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemInstallCommand' => '?',
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemIsInstalledCommand' => '?',
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateJwtSecretCommand' => '?',
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateAppSecretCommand' => '?',
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemSetupCommand' => '?',
            'Symfony\\Component\\Dotenv\\Command\\DotenvDumpCommand' => '?',
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdatePrepareCommand' => '?',
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdateFinishCommand' => '?',
            'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelUpdateDomainCommand' => '?',
            'Shopware\\Core\\Maintenance\\System\\Command\\SystemConfigureShopCommand' => '?',
            'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelCreateCommand' => '?',
            'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelListCommand' => '?',
            'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceEnableCommand' => '?',
            'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceDisableCommand' => '?',
            'Shopware\\Core\\Maintenance\\User\\Command\\UserCreateCommand' => '?',
            'Shopware\\Core\\Maintenance\\User\\Command\\UserChangePasswordCommand' => '?',
            'Shopware\\Administration\\Command\\DeleteAdminFilesAfterBuildCommand' => '?',
            'Shopware\\Administration\\Command\\DeleteExtensionLocalPublicFilesCommand' => '?',
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchIndexingCommand' => '?',
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchTestAnalyzerCommand' => '?',
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchStatusCommand' => '?',
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchResetCommand' => '?',
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchUpdateMappingCommand' => '?',
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCreateAliasCommand' => '?',
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCleanIndicesCommand' => '?',
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand' => '?',
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminResetCommand' => '?',
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminTestCommand' => '?',
            'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminUpdateMappingCommand' => '?',
            'Shopware\\Storefront\\Framework\\Command\\HttpCacheWarmUpCommand' => '?',
            'Shopware\\Storefront\\Framework\\Command\\SalesChannelCreateStorefrontCommand' => '?',
            'Shopware\\Storefront\\Theme\\Command\\ThemeCreateCommand' => '?',
            'Shopware\\Storefront\\Theme\\Command\\ThemeChangeCommand' => '?',
            'Shopware\\Storefront\\Theme\\Command\\ThemeCompileCommand' => '?',
            'Shopware\\Storefront\\Theme\\Command\\ThemeDumpCommand' => '?',
            'Shopware\\Storefront\\Theme\\Command\\ThemeRefreshCommand' => '?',
            'Shopware\\Storefront\\Theme\\Command\\ThemePrepareIconsCommand' => '?',
            'console.command.about' => '?',
            'console.command.cache_clear' => '?',
            'console.command.cache_pool_clear' => '?',
            'console.command.cache_pool_prune' => '?',
            'console.command.cache_pool_invalidate_tags' => '?',
            'console.command.cache_pool_delete' => '?',
            'console.command.cache_pool_list' => '?',
            'console.command.cache_warmup' => '?',
            'console.command.config_debug' => '?',
            'console.command.config_dump_reference' => '?',
            'console.command.container_debug' => '?',
            'console.command.container_lint' => '?',
            'console.command.debug_autowiring' => '?',
            'console.command.dotenv_debug' => '?',
            'console.command.event_dispatcher_debug' => '?',
            'console.command.messenger_consume_messages' => '?',
            'console.command.messenger_setup_transports' => '?',
            'console.command.messenger_debug' => '?',
            'console.command.messenger_stop_workers' => '?',
            'console.command.messenger_failed_messages_retry' => '?',
            'console.command.messenger_failed_messages_show' => '?',
            'console.command.messenger_failed_messages_remove' => '?',
            'console.command.messenger_stats' => '?',
            'console.command.router_debug' => '?',
            'console.command.router_match' => '?',
            'console.command.serializer_debug' => '?',
            'console.command.translation_debug' => '?',
            'console.command.translation_extract' => '?',
            'console.command.validator_debug' => '?',
            'console.command.translation_pull' => '?',
            'console.command.translation_push' => '?',
            'console.command.xliff_lint' => '?',
            'console.command.yaml_lint' => '?',
            'console.command.secrets_set' => '?',
            'console.command.secrets_remove' => '?',
            'console.command.secrets_generate_key' => '?',
            'console.command.secrets_list' => '?',
            'console.command.secrets_decrypt_to_local' => '?',
            'console.command.secrets_encrypt_from_local' => '?',
            'console.command.mailer_test' => '?',
            'twig.command.debug' => '?',
            'twig.command.lint' => '?',
            'var_dumper.command.server_dump' => '?',
            'monolog.command.server_log' => '?',
        ]), ['database:create-migration' => 'Shopware\\Core\\Framework\\Migration\\Command\\CreateMigrationCommand', 'database:refresh-migration' => 'Shopware\\Core\\Framework\\Migration\\Command\\RefreshMigrationCommand', 'database:migrate' => 'Shopware\\Core\\Framework\\Migration\\Command\\MigrationCommand', 'database:clean-personal-data' => 'Shopware\\Core\\Framework\\Demodata\\PersonalData\\CleanPersonalDataCommand', 'database:migrate-destructive' => 'Shopware\\Core\\Framework\\Migration\\Command\\MigrationDestructiveCommand', 'changelog:create' => 'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCreateCommand', 'changelog:release' => 'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogReleaseCommand', 'changelog:change' => 'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogChangeCommand', 'changelog:check' => 'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCheckCommand', 'feature:dump' => 'Shopware\\Core\\Framework\\Feature\\Command\\FeatureDumpCommand', 'administration:dump:features' => 'Shopware\\Core\\Framework\\Feature\\Command\\FeatureDumpCommand', 's3:set-visibility' => 'Shopware\\Core\\Framework\\Adapter\\Command\\S3FilesystemVisibilityCommand', 'framework:schema' => 'Shopware\\Core\\Framework\\Api\\Command\\DumpSchemaCommand', 'framework:dump:class:schema' => 'Shopware\\Core\\Framework\\Api\\Command\\DumpClassSchemaCommand', 'app:refresh' => 'Shopware\\Core\\Framework\\App\\Command\\RefreshAppCommand', 'app:update' => 'Shopware\\Core\\Framework\\App\\Command\\RefreshAppCommand', 'app:install' => 'Shopware\\Core\\Framework\\App\\Command\\InstallAppCommand', 'app:uninstall' => 'Shopware\\Core\\Framework\\App\\Command\\UninstallAppCommand', 'app:activate' => 'Shopware\\Core\\Framework\\App\\Command\\ActivateAppCommand', 'app:deactivate' => 'Shopware\\Core\\Framework\\App\\Command\\DeactivateAppCommand', 'app:create' => 'Shopware\\Core\\Framework\\App\\Command\\CreateAppCommand', 'app:validate' => 'Shopware\\Core\\Framework\\App\\Command\\ValidateAppCommand', 'app:url-change:resolve' => 'Shopware\\Core\\Framework\\App\\Command\\ResolveAppUrlChangeCommand', 'dal:create:schema' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateSchemaCommand', 'dal:create:entities' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateEntitiesCommand', 'dal:create:hydrators' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateHydratorCommand', 'dal:refresh:index' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand', 'dal:validate' => 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\DataAbstractionLayerValidateCommand', 'framework:demodata' => 'Shopware\\Core\\Framework\\Demodata\\Command\\DemodataCommand', 'debug:business-events' => 'Shopware\\Core\\Framework\\Event\\Command\\DebugDumpBusinessEventsCommand', 'assets:install' => 'console.command.assets_install', 'bundle:dump' => 'Shopware\\Core\\Framework\\Plugin\\Command\\BundleDumpCommand', 'administration:dump:plugins' => 'Shopware\\Core\\Framework\\Plugin\\Command\\BundleDumpCommand', 'administration:dump:bundles' => 'Shopware\\Core\\Framework\\Plugin\\Command\\BundleDumpCommand', 'plugin:refresh' => 'Shopware\\Core\\Framework\\Plugin\\Command\\PluginRefreshCommand', 'plugin:list' => 'Shopware\\Core\\Framework\\Plugin\\Command\\PluginListCommand', 'plugin:zip-import' => 'Shopware\\Core\\Framework\\Plugin\\Command\\PluginZipImportCommand', 'plugin:install' => 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginInstallCommand', 'plugin:activate' => 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginActivateCommand', 'plugin:update' => 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUpdateCommand', 'plugin:deactivate' => 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginDeactivateCommand', 'plugin:uninstall' => 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUninstallCommand', 'plugin:update:all' => 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUpdateAllCommand', 'plugin:create' => 'Shopware\\Core\\Framework\\Plugin\\Command\\PluginCreateCommand', 'scheduled-task:register' => 'Shopware\\Core\\Framework\\MessageQueue\\Command\\RegisterScheduledTasksCommand', 'scheduled-task:run' => 'Shopware\\Core\\Framework\\MessageQueue\\Command\\ScheduledTaskRunner', 'scheduled-task:list' => 'Shopware\\Core\\Framework\\MessageQueue\\Command\\ListScheduledTaskCommand', 'scheduled-task:run-single' => 'Shopware\\Core\\Framework\\MessageQueue\\Command\\RunSingleScheduledTaskCommand', 'store:download' => 'Shopware\\Core\\Framework\\Store\\Command\\StoreDownloadCommand', 'store:login' => 'Shopware\\Core\\Framework\\Store\\Command\\StoreLoginCommand', 'snippets:validate' => 'Shopware\\Core\\System\\Snippet\\Command\\ValidateSnippetsCommand', 'state-machine:dump' => 'Shopware\\Core\\System\\StateMachine\\Command\\WorkflowDumpCommand', 'system:config:get' => 'Shopware\\Core\\System\\SystemConfig\\Command\\ConfigGet', 'system:config:set' => 'Shopware\\Core\\System\\SystemConfig\\Command\\ConfigSet', 'number-range:migrate' => 'Shopware\\Core\\System\\NumberRange\\Command\\MigrateIncrementStorageCommand', 'media:generate-thumbnails' => 'Shopware\\Core\\Content\\Media\\Commands\\GenerateThumbnailsCommand', 'media:generate-media-types' => 'Shopware\\Core\\Content\\Media\\Commands\\GenerateMediaTypesCommand', 'media:delete-unused' => 'Shopware\\Core\\Content\\Media\\Commands\\DeleteNotUsedMediaCommand', 'media:update-path' => 'Shopware\\Core\\Content\\Media\\Infrastructure\\Command\\UpdatePathCommand', 'product-export:generate' => 'Shopware\\Core\\Content\\ProductExport\\Command\\ProductExportGenerateCommand', 'import-export:delete-expired' => 'Shopware\\Core\\Content\\ImportExport\\Command\\DeleteExpiredFilesCommand', 'import:entity' => 'Shopware\\Core\\Content\\ImportExport\\Command\\ImportEntityCommand', 'sitemap:generate' => 'Shopware\\Core\\Content\\Sitemap\\Commands\\SitemapGenerateCommand', 'cart:migrate' => 'Shopware\\Core\\Checkout\\Cart\\Command\\CartMigrateCommand', 'customer:delete-unused-guests' => 'Shopware\\Core\\Checkout\\Customer\\Command\\DeleteUnusedGuestCustomersCommand', 'system:install' => 'Shopware\\Core\\Maintenance\\System\\Command\\SystemInstallCommand', 'system:is-installed' => 'Shopware\\Core\\Maintenance\\System\\Command\\SystemIsInstalledCommand', 'system:generate-jwt-secret' => 'Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateJwtSecretCommand', 'system:generate-app-secret' => 'Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateAppSecretCommand', 'system:setup' => 'Shopware\\Core\\Maintenance\\System\\Command\\SystemSetupCommand', 'dotenv:dump' => 'Symfony\\Component\\Dotenv\\Command\\DotenvDumpCommand', 'system:update:prepare' => 'Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdatePrepareCommand', 'system:update:finish' => 'Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdateFinishCommand', 'sales-channel:update:domain' => 'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelUpdateDomainCommand', 'system:configure-shop' => 'Shopware\\Core\\Maintenance\\System\\Command\\SystemConfigureShopCommand', 'sales-channel:create' => 'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelCreateCommand', 'sales-channel:list' => 'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelListCommand', 'sales-channel:maintenance:enable' => 'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceEnableCommand', 'sales-channel:maintenance:disable' => 'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceDisableCommand', 'user:create' => 'Shopware\\Core\\Maintenance\\User\\Command\\UserCreateCommand', 'user:change-password' => 'Shopware\\Core\\Maintenance\\User\\Command\\UserChangePasswordCommand', 'administration:delete-files-after-build' => 'Shopware\\Administration\\Command\\DeleteAdminFilesAfterBuildCommand', 'administration:delete-extension-local-public-files' => 'Shopware\\Administration\\Command\\DeleteExtensionLocalPublicFilesCommand', 'es:index' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchIndexingCommand', 'es:test:analyzer' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchTestAnalyzerCommand', 'es:status' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchStatusCommand', 'es:reset' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchResetCommand', 'es:mapping:update' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchUpdateMappingCommand', 'es:create:alias' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCreateAliasCommand', 'es:index:cleanup' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCleanIndicesCommand', 'es:admin:index' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand', 'es:admin:reset' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminResetCommand', 'es:admin:test' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminTestCommand', 'es:admin:mapping:update' => 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminUpdateMappingCommand', 'http:cache:warm:up' => 'Shopware\\Storefront\\Framework\\Command\\HttpCacheWarmUpCommand', 'sales-channel:create:storefront' => 'Shopware\\Storefront\\Framework\\Command\\SalesChannelCreateStorefrontCommand', 'theme:create' => 'Shopware\\Storefront\\Theme\\Command\\ThemeCreateCommand', 'theme:change' => 'Shopware\\Storefront\\Theme\\Command\\ThemeChangeCommand', 'theme:compile' => 'Shopware\\Storefront\\Theme\\Command\\ThemeCompileCommand', 'theme:dump' => 'Shopware\\Storefront\\Theme\\Command\\ThemeDumpCommand', 'theme:refresh' => 'Shopware\\Storefront\\Theme\\Command\\ThemeRefreshCommand', 'theme:prepare-icons' => 'Shopware\\Storefront\\Theme\\Command\\ThemePrepareIconsCommand', 'about' => 'console.command.about', 'cache:clear' => 'console.command.cache_clear', 'cache:pool:clear' => 'console.command.cache_pool_clear', 'cache:pool:prune' => 'console.command.cache_pool_prune', 'cache:pool:invalidate-tags' => 'console.command.cache_pool_invalidate_tags', 'cache:pool:delete' => 'console.command.cache_pool_delete', 'cache:pool:list' => 'console.command.cache_pool_list', 'cache:warmup' => 'console.command.cache_warmup', 'debug:config' => 'console.command.config_debug', 'config:dump-reference' => 'console.command.config_dump_reference', 'debug:container' => 'console.command.container_debug', 'lint:container' => 'console.command.container_lint', 'debug:autowiring' => 'console.command.debug_autowiring', 'debug:dotenv' => 'console.command.dotenv_debug', 'debug:event-dispatcher' => 'console.command.event_dispatcher_debug', 'messenger:consume' => 'console.command.messenger_consume_messages', 'messenger:setup-transports' => 'console.command.messenger_setup_transports', 'debug:messenger' => 'console.command.messenger_debug', 'messenger:stop-workers' => 'console.command.messenger_stop_workers', 'messenger:failed:retry' => 'console.command.messenger_failed_messages_retry', 'messenger:failed:show' => 'console.command.messenger_failed_messages_show', 'messenger:failed:remove' => 'console.command.messenger_failed_messages_remove', 'messenger:stats' => 'console.command.messenger_stats', 'debug:router' => 'console.command.router_debug', 'router:match' => 'console.command.router_match', 'debug:serializer' => 'console.command.serializer_debug', 'debug:translation' => 'console.command.translation_debug', 'translation:extract' => 'console.command.translation_extract', 'debug:validator' => 'console.command.validator_debug', 'translation:pull' => 'console.command.translation_pull', 'translation:push' => 'console.command.translation_push', 'lint:xliff' => 'console.command.xliff_lint', 'lint:yaml' => 'console.command.yaml_lint', 'secrets:set' => 'console.command.secrets_set', 'secrets:remove' => 'console.command.secrets_remove', 'secrets:generate-keys' => 'console.command.secrets_generate_key', 'secrets:list' => 'console.command.secrets_list', 'secrets:decrypt-to-local' => 'console.command.secrets_decrypt_to_local', 'secrets:encrypt-from-local' => 'console.command.secrets_encrypt_from_local', 'mailer:test' => 'console.command.mailer_test', 'debug:twig' => 'twig.command.debug', 'lint:twig' => 'twig.command.lint', 'server:dump' => 'var_dumper.command.server_dump', 'server:log' => 'monolog.command.server_log']);
    }

    /**
     * Gets the public 'container.env_var_processors_locator' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected static function getContainer_EnvVarProcessorsLocatorService($container)
    {
        return $container->services['container.env_var_processors_locator'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'base64' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'bool' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'const' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'csv' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'default' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'enum' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'file' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'float' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'int' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'json' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'key' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'not' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'query_string' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'require' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'resolve' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'shuffle' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'string' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'trim' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
            'url' => ['privates', 'container.env_var_processor', 'getContainer_EnvVarProcessorService', false],
        ], [
            'base64' => '?',
            'bool' => '?',
            'const' => '?',
            'csv' => '?',
            'default' => '?',
            'enum' => '?',
            'file' => '?',
            'float' => '?',
            'int' => '?',
            'json' => '?',
            'key' => '?',
            'not' => '?',
            'query_string' => '?',
            'require' => '?',
            'resolve' => '?',
            'shuffle' => '?',
            'string' => '?',
            'trim' => '?',
            'url' => '?',
        ]);
    }

    /**
     * Gets the public 'container.get_routing_condition_service' shared service.
     *
     * @return \Closure
     */
    protected static function getContainer_GetRoutingConditionServiceService($container)
    {
        return $container->services['container.get_routing_condition_service'] = ($container->privates['.service_locator.Xbsa8iG'] ??= new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [], []))->get(...);
    }

    /**
     * Gets the public 'content.filesystem.private' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected static function getContent_Filesystem_PrivateService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $container->services['content.filesystem.private'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)), 'plugins/content');
    }

    /**
     * Gets the public 'content.filesystem.public' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected static function getContent_Filesystem_PublicService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $container->services['content.filesystem.public'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($container->services['shopware.filesystem.public'] ?? self::getShopware_Filesystem_PublicService($container)), 'plugins/content');
    }

    /**
     * Gets the public 'country.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCountry_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['country.repository'])) {
            return $container->services['country.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['country.repository'])) {
            return $container->services['country.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['country.repository'])) {
            return $container->services['country.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['country.repository'])) {
            return $container->services['country.repository'];
        }

        return $container->services['country.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\Country\\CountryDefinition'] ?? self::getCountryDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'country_state.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCountryState_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['country_state.repository'])) {
            return $container->services['country_state.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['country_state.repository'])) {
            return $container->services['country_state.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['country_state.repository'])) {
            return $container->services['country_state.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['country_state.repository'])) {
            return $container->services['country_state.repository'];
        }

        return $container->services['country_state.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\CountryStateDefinition'] ?? self::getCountryStateDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'country_state_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCountryStateTranslation_RepositoryService($container)
    {
        return $container->services['country_state_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\Country\\Aggregate\\CountryStateTranslation\\CountryStateTranslationDefinition'] ?? self::getCountryStateTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'country_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCountryTranslation_RepositoryService($container)
    {
        return $container->services['country_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\Country\\Aggregate\\CountryTranslation\\CountryTranslationDefinition'] ?? self::getCountryTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'currency.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCurrency_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['currency.repository'])) {
            return $container->services['currency.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['currency.repository'])) {
            return $container->services['currency.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['currency.repository'])) {
            return $container->services['currency.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['currency.repository'])) {
            return $container->services['currency.repository'];
        }

        return $container->services['currency.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\Currency\\CurrencyDefinition'] ?? self::getCurrencyDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'currency_country_rounding.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCurrencyCountryRounding_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['currency_country_rounding.repository'])) {
            return $container->services['currency_country_rounding.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['currency_country_rounding.repository'])) {
            return $container->services['currency_country_rounding.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['currency_country_rounding.repository'])) {
            return $container->services['currency_country_rounding.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['currency_country_rounding.repository'])) {
            return $container->services['currency_country_rounding.repository'];
        }

        return $container->services['currency_country_rounding.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyCountryRounding\\CurrencyCountryRoundingDefinition'] ?? self::getCurrencyCountryRoundingDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'currency_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCurrencyTranslation_RepositoryService($container)
    {
        return $container->services['currency_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyTranslation\\CurrencyTranslationDefinition'] ?? self::getCurrencyTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'custom_entity.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCustomEntity_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['custom_entity.repository'])) {
            return $container->services['custom_entity.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['custom_entity.repository'])) {
            return $container->services['custom_entity.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['custom_entity.repository'])) {
            return $container->services['custom_entity.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['custom_entity.repository'])) {
            return $container->services['custom_entity.repository'];
        }

        return $container->services['custom_entity.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\CustomEntity\\CustomEntityDefinition'] ?? self::getCustomEntityDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'custom_field.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCustomField_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['custom_field.repository'])) {
            return $container->services['custom_field.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['custom_field.repository'])) {
            return $container->services['custom_field.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['custom_field.repository'])) {
            return $container->services['custom_field.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['custom_field.repository'])) {
            return $container->services['custom_field.repository'];
        }

        return $container->services['custom_field.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\CustomField\\CustomFieldDefinition'] ?? self::getCustomFieldDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'custom_field_set.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCustomFieldSet_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['custom_field_set.repository'])) {
            return $container->services['custom_field_set.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['custom_field_set.repository'])) {
            return $container->services['custom_field_set.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['custom_field_set.repository'])) {
            return $container->services['custom_field_set.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['custom_field_set.repository'])) {
            return $container->services['custom_field_set.repository'];
        }

        return $container->services['custom_field_set.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSet\\CustomFieldSetDefinition'] ?? self::getCustomFieldSetDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'custom_field_set_relation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCustomFieldSetRelation_RepositoryService($container)
    {
        return $container->services['custom_field_set_relation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSetRelation\\CustomFieldSetRelationDefinition'] ?? self::getCustomFieldSetRelationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'customer.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCustomer_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['customer.repository'])) {
            return $container->services['customer.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['customer.repository'])) {
            return $container->services['customer.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['customer.repository'])) {
            return $container->services['customer.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['customer.repository'])) {
            return $container->services['customer.repository'];
        }

        return $container->services['customer.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Customer\\CustomerDefinition'] ?? self::getCustomerDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'customer_address.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCustomerAddress_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['customer_address.repository'])) {
            return $container->services['customer_address.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['customer_address.repository'])) {
            return $container->services['customer_address.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['customer_address.repository'])) {
            return $container->services['customer_address.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['customer_address.repository'])) {
            return $container->services['customer_address.repository'];
        }

        return $container->services['customer_address.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerAddress\\CustomerAddressDefinition'] ?? self::getCustomerAddressDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'customer_group.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCustomerGroup_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['customer_group.repository'])) {
            return $container->services['customer_group.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['customer_group.repository'])) {
            return $container->services['customer_group.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['customer_group.repository'])) {
            return $container->services['customer_group.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['customer_group.repository'])) {
            return $container->services['customer_group.repository'];
        }

        return $container->services['customer_group.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroup\\CustomerGroupDefinition'] ?? self::getCustomerGroupDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'customer_group_registration_sales_channels.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCustomerGroupRegistrationSalesChannels_RepositoryService($container)
    {
        return $container->services['customer_group_registration_sales_channels.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupRegistrationSalesChannel\\CustomerGroupRegistrationSalesChannelDefinition'] ?? self::getCustomerGroupRegistrationSalesChannelDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'customer_group_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCustomerGroupTranslation_RepositoryService($container)
    {
        return $container->services['customer_group_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupTranslation\\CustomerGroupTranslationDefinition'] ?? self::getCustomerGroupTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'customer_recovery.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCustomerRecovery_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['customer_recovery.repository'])) {
            return $container->services['customer_recovery.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['customer_recovery.repository'])) {
            return $container->services['customer_recovery.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['customer_recovery.repository'])) {
            return $container->services['customer_recovery.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['customer_recovery.repository'])) {
            return $container->services['customer_recovery.repository'];
        }

        return $container->services['customer_recovery.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerRecovery\\CustomerRecoveryDefinition'] ?? self::getCustomerRecoveryDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'customer_tag.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCustomerTag_RepositoryService($container)
    {
        return $container->services['customer_tag.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerTag\\CustomerTagDefinition'] ?? self::getCustomerTagDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'customer_wishlist.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCustomerWishlist_RepositoryService($container)
    {
        return $container->services['customer_wishlist.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlist\\CustomerWishlistDefinition'] ?? self::getCustomerWishlistDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'customer_wishlist_product.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getCustomerWishlistProduct_RepositoryService($container)
    {
        return $container->services['customer_wishlist_product.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlistProduct\\CustomerWishlistProductDefinition'] ?? self::getCustomerWishlistProductDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'data_collector.dump' shared service.
     *
     * @return \Symfony\Component\HttpKernel\DataCollector\DumpDataCollector
     */
    protected static function getDataCollector_DumpService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/DataCollector/DumpDataCollector.php';

        return $container->services['data_collector.dump'] = new \Symfony\Component\HttpKernel\DataCollector\DumpDataCollector(($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)), ($container->privates['debug.file_link_formatter'] ??= new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter($container->getEnv('default::SYMFONY_IDE'))), 'UTF-8', NULL, ($container->privates['var_dumper.server_connection'] ?? self::getVarDumper_ServerConnectionService($container)));
    }

    /**
     * Gets the public 'debug.error_handler_configurator' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Debug\ErrorHandlerConfigurator
     */
    protected static function getDebug_ErrorHandlerConfiguratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Debug/ErrorHandlerConfigurator.php';

        $a = new \Symfony\Bridge\Monolog\Logger('php');
        $a->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $a->pushHandler(($container->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? self::getExcludeFlowEventHandlerService($container)));

        return $container->services['debug.error_handler_configurator'] = new \Symfony\Component\HttpKernel\Debug\ErrorHandlerConfigurator($a, NULL, -1, true, true, NULL);
    }

    /**
     * Gets the public 'delivery_time.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getDeliveryTime_RepositoryService($container)
    {
        return $container->services['delivery_time.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\DeliveryTime\\DeliveryTimeDefinition'] ?? self::getDeliveryTimeDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'delivery_time_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getDeliveryTimeTranslation_RepositoryService($container)
    {
        return $container->services['delivery_time_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\DeliveryTime\\Aggregate\\DeliveryTimeTranslation\\DeliveryTimeTranslationDefinition'] ?? self::getDeliveryTimeTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'document.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getDocument_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['document.repository'])) {
            return $container->services['document.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['document.repository'])) {
            return $container->services['document.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['document.repository'])) {
            return $container->services['document.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['document.repository'])) {
            return $container->services['document.repository'];
        }

        return $container->services['document.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Document\\DocumentDefinition'] ?? self::getDocumentDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'document_base_config.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getDocumentBaseConfig_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['document_base_config.repository'])) {
            return $container->services['document_base_config.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['document_base_config.repository'])) {
            return $container->services['document_base_config.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['document_base_config.repository'])) {
            return $container->services['document_base_config.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['document_base_config.repository'])) {
            return $container->services['document_base_config.repository'];
        }

        return $container->services['document_base_config.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfig\\DocumentBaseConfigDefinition'] ?? self::getDocumentBaseConfigDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'document_base_config_sales_channel.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getDocumentBaseConfigSalesChannel_RepositoryService($container)
    {
        return $container->services['document_base_config_sales_channel.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfigSalesChannel\\DocumentBaseConfigSalesChannelDefinition'] ?? self::getDocumentBaseConfigSalesChannelDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'document_type.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getDocumentType_RepositoryService($container)
    {
        return $container->services['document_type.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentType\\DocumentTypeDefinition'] ?? self::getDocumentTypeDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'document_type_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getDocumentTypeTranslation_RepositoryService($container)
    {
        return $container->services['document_type_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentTypeTranslation\\DocumentTypeTranslationDefinition'] ?? self::getDocumentTypeTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'elasticsearch.filesystem.private' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected static function getElasticsearch_Filesystem_PrivateService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $container->services['elasticsearch.filesystem.private'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)), 'plugins/elasticsearch');
    }

    /**
     * Gets the public 'elasticsearch.filesystem.public' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected static function getElasticsearch_Filesystem_PublicService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $container->services['elasticsearch.filesystem.public'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($container->services['shopware.filesystem.public'] ?? self::getShopware_Filesystem_PublicService($container)), 'plugins/elasticsearch');
    }

    /**
     * Gets the public 'error_controller' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ErrorController
     */
    protected static function getErrorController2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ErrorController.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/error-handler/ErrorRenderer/ErrorRendererInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/error-handler/ErrorRenderer/SerializerErrorRenderer.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/ErrorRenderer/TwigErrorRenderer.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/error-handler/ErrorRenderer/HtmlErrorRenderer.php';

        $a = ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack());

        return $container->services['error_controller'] = new \Symfony\Component\HttpKernel\Controller\ErrorController(($container->services['http_kernel'] ?? self::getHttpKernelService($container)), 'error_controller', new \Symfony\Component\ErrorHandler\ErrorRenderer\SerializerErrorRenderer(($container->privates['serializer'] ?? self::getSerializerService($container)), \Symfony\Component\ErrorHandler\ErrorRenderer\SerializerErrorRenderer::getPreferredFormat($a), new \Symfony\Bridge\Twig\ErrorRenderer\TwigErrorRenderer(($container->services['twig'] ?? self::getTwigService($container)), new \Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer(\Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer::isDebug($a, true), 'UTF-8', ($container->privates['debug.file_link_formatter'] ??= new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter($container->getEnv('default::SYMFONY_IDE'))), \dirname(__DIR__, 4), \Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer::getAndCleanOutputBuffer($a), ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container))), \Symfony\Bridge\Twig\ErrorRenderer\TwigErrorRenderer::isDebug($a, true)), \Symfony\Component\ErrorHandler\ErrorRenderer\HtmlErrorRenderer::isDebug($a, true)));
    }

    /**
     * Gets the public 'event_dispatcher' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher
     */
    protected static function getEventDispatcherService($container)
    {
        $a = ($container->privates['Shopware\\Core\\Framework\\Webhook\\WebhookDispatcher'] ?? self::getWebhookDispatcherService($container));

        if (isset($container->services['event_dispatcher'])) {
            return $container->services['event_dispatcher'];
        }
        $b = new \Symfony\Bridge\Monolog\Logger('event');
        $b->pushHandler(new \Monolog\Handler\NullHandler());

        $container->services['event_dispatcher'] = $instance = new \Symfony\Component\HttpKernel\Debug\TraceableEventDispatcher(new \Shopware\Core\Framework\Event\NestedEventDispatcher($a), ($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)), $b, ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));

        $instance->addListener('kernel.request', [#[\Closure(name: 'Shopware\\Core\\Framework\\Routing\\RouteParamsCleanupListener')] fn () => ($container->privates['Shopware\\Core\\Framework\\Routing\\RouteParamsCleanupListener'] ??= new \Shopware\Core\Framework\Routing\RouteParamsCleanupListener()), '__invoke'], 0);
        $instance->addListener('Shopware\\Core\\Content\\Category\\Event\\CategoryIndexerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateCategoryRouteByCategoryIds'], 2000);
        $instance->addListener('Shopware\\Core\\Content\\Category\\Event\\CategoryIndexerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateListingRouteByCategoryIds'], 2001);
        $instance->addListener('Shopware\\Core\\Content\\LandingPage\\Event\\LandingPageIndexerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateIndexedLandingPages'], 2000);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductIndexerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateSearch'], 2000);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductIndexerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateListings'], 2001);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductIndexerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateProductIds'], 2002);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductIndexerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateDetailRoute'], 2004);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductIndexerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateStreamsAfterIndexing'], 2005);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductIndexerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateReviewRoute'], 2006);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductNoLongerAvailableEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateSearch'], 2000);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductNoLongerAvailableEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateListings'], 2001);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductNoLongerAvailableEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateProductIds'], 2002);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductNoLongerAvailableEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateDetailRoute'], 2004);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductNoLongerAvailableEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateStreamsAfterIndexing'], 2005);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductNoLongerAvailableEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateReviewRoute'], 2006);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateCmsPageIds'], 2001);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateCurrencyRoute'], 2002);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateLanguageRoute'], 2003);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateNavigationRoute'], 2004);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidatePaymentMethodRoute'], 2005);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateProductAssignment'], 2006);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateManufacturerFilters'], 2007);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidatePropertyFilters'], 2008);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateCrossSellingRoute'], 2009);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateContext'], 2010);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateShippingMethodRoute'], 2011);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateSnippets'], 2012);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateStreamsBeforeIndexing'], 2013);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateStreamIds'], 2014);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateCountryRoute'], 2015);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateSalutationRoute'], 2016);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateInitialStateIdLoader'], 2017);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateCountryStateRoute'], 2018);
        $instance->addListener('Shopware\\Core\\Content\\Seo\\Event\\SeoUrlUpdateEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateSeoUrls'], 2000);
        $instance->addListener('Shopware\\Core\\Content\\Rule\\Event\\RuleIndexerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateRules'], 2000);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostInstallEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateRules'], 2000);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostInstallEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateConfig'], 2001);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostActivateEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateRules'], 2000);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostActivateEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateConfig'], 2001);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostUpdateEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateRules'], 2000);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostUpdateEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateConfig'], 2001);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostDeactivateEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateRules'], 2000);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostDeactivateEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateConfig'], 2001);
        $instance->addListener('Shopware\\Core\\System\\SystemConfig\\Event\\SystemConfigChangedHook', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateConfigKey'], 2000);
        $instance->addListener('Shopware\\Core\\Content\\Sitemap\\Event\\SitemapGeneratedEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateSitemap'], 2000);
        $instance->addListener('product_search_config.written', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] ?? self::getCacheInvalidationSubscriberService($container)), 'invalidateSearch'], 2002);
        $instance->addListener('media.loaded', [#[\Closure(name: 'Shopware\\Core\\Content\\Media\\Subscriber\\MediaLoadedSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaLoadedSubscriber'] ?? self::getMediaLoadedSubscriberService($container)), 'unserialize'], 100);
        $instance->addListener('media.loaded', [#[\Closure(name: 'Shopware\\Core\\Content\\Media\\Core\\Application\\MediaUrlLoader')] fn () => ($container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\MediaUrlLoader'] ?? self::getMediaUrlLoaderService($container)), 'loaded'], 20);
        $instance->addListener('partial.media.loaded', [#[\Closure(name: 'Shopware\\Core\\Content\\Media\\Core\\Application\\MediaUrlLoader')] fn () => ($container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\MediaUrlLoader'] ?? self::getMediaUrlLoaderService($container)), 'loaded'], 19);
        $instance->addListener('media.loaded', [#[\Closure(name: 'Shopware\\Core\\Content\\Media\\Core\\Application\\MediaUrlLoader')] fn () => ($container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\MediaUrlLoader'] ?? self::getMediaUrlLoaderService($container)), 'legacyPath'], 10);
        $instance->addListener('media.loaded', [#[\Closure(name: 'Shopware\\Core\\Content\\Media\\Core\\Application\\MediaUrlLoader')] fn () => ($container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\MediaUrlLoader'] ?? self::getMediaUrlLoaderService($container)), 'legacy'], 0);
        $instance->addListener('Shopware\\Core\\Content\\Media\\Core\\Event\\UpdateMediaPathEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Media\\Core\\Application\\MediaPathUpdater')] fn () => ($container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\MediaPathUpdater'] ?? self::getMediaPathUpdaterService($container)), 'updateMedia'], 0);
        $instance->addListener('Shopware\\Core\\Content\\Media\\Core\\Event\\UpdateThumbnailPathEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Media\\Core\\Application\\MediaPathUpdater')] fn () => ($container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\MediaPathUpdater'] ?? self::getMediaPathUpdaterService($container)), 'updateThumbnails'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWriteEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Product\\Stock\\AvailableStockMirrorSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Product\\Stock\\AvailableStockMirrorSubscriber'] ??= new \Shopware\Core\Content\Product\Stock\AvailableStockMirrorSubscriber()), '__invoke'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Update\\Event\\UpdatePostFinishEvent', [#[\Closure(name: 'Shopware\\Elasticsearch\\Framework\\SystemUpdateListener')] fn () => ($container->privates['Shopware\\Elasticsearch\\Framework\\SystemUpdateListener'] ?? self::getSystemUpdateListenerService($container)), '__invoke'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Twig\\TwigDateRequestListener')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Twig\\TwigDateRequestListener'] ??= new \Shopware\Storefront\Framework\Twig\TwigDateRequestListener($container)), 'onKernelRequest'], 0);
        $instance->addListener('kernel.controller', [#[\Closure(name: 'Shopware\\Core\\Framework\\Routing\\ContextResolverListener')] fn () => ($container->privates['Shopware\\Core\\Framework\\Routing\\ContextResolverListener'] ?? self::getContextResolverListenerService($container)), 'resolveContext'], -10);
        $instance->addListener('kernel.request', [#[\Closure(name: 'Shopware\\Core\\Framework\\Routing\\CoreSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Routing\\CoreSubscriber'] ?? self::getCoreSubscriberService($container)), 'initializeCspNonce'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'Shopware\\Core\\Framework\\Routing\\CoreSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Routing\\CoreSubscriber'] ?? self::getCoreSubscriberService($container)), 'setSecurityHeaders'], 0);
        $instance->addListener('kernel.controller', [#[\Closure(name: 'Shopware\\Core\\Framework\\Routing\\RouteScopeListener')] fn () => ($container->privates['Shopware\\Core\\Framework\\Routing\\RouteScopeListener'] ?? self::getRouteScopeListenerService($container)), 'checkScope'], -20);
        $instance->addListener('kernel.request', [#[\Closure(name: 'Shopware\\Core\\Framework\\Routing\\RouteEventSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Routing\\RouteEventSubscriber'] ?? self::getRouteEventSubscriberService($container)), 'request'], -10);
        $instance->addListener('kernel.response', [#[\Closure(name: 'Shopware\\Core\\Framework\\Routing\\RouteEventSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Routing\\RouteEventSubscriber'] ?? self::getRouteEventSubscriberService($container)), 'response'], -10);
        $instance->addListener('Shopware\\Storefront\\Event\\StorefrontRenderEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Routing\\RouteEventSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Routing\\RouteEventSubscriber'] ?? self::getRouteEventSubscriberService($container)), 'render'], -10);
        $instance->addListener('snippet.written', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Translation\\TranslatorCacheInvalidate')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Translation\\TranslatorCacheInvalidate'] ?? self::getTranslatorCacheInvalidateService($container)), 'invalidate'], 0);
        $instance->addListener('snippet.deleted', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Translation\\TranslatorCacheInvalidate')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Translation\\TranslatorCacheInvalidate'] ?? self::getTranslatorCacheInvalidateService($container)), 'invalidate'], 0);
        $instance->addListener('snippet_set.deleted', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Translation\\TranslatorCacheInvalidate')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Translation\\TranslatorCacheInvalidate'] ?? self::getTranslatorCacheInvalidateService($container)), 'invalidate'], 0);
        $instance->addListener('app_template.written', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Twig\\EntityTemplateLoader')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\EntityTemplateLoader'] ?? self::getEntityTemplateLoaderService($container)), 'reset'], 0);
        $instance->addListener('flow.log', [#[\Closure(name: 'Shopware\\Core\\Framework\\Log\\LoggingService')] fn () => ($container->privates['Shopware\\Core\\Framework\\Log\\LoggingService'] ?? self::getLoggingServiceService($container)), 'logFlowEvent'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Api\\Acl\\AclWriteValidator')] fn () => ($container->privates['Shopware\\Core\\Framework\\Api\\Acl\\AclWriteValidator'] ?? self::getAclWriteValidatorService($container)), 'preValidate'], 0);
        $instance->addListener('kernel.controller', [#[\Closure(name: 'Shopware\\Core\\Framework\\Api\\Acl\\AclAnnotationValidator')] fn () => ($container->privates['Shopware\\Core\\Framework\\Api\\Acl\\AclAnnotationValidator'] ?? self::getAclAnnotationValidatorService($container)), 'validate'], -20);
        $instance->addListener('Shopware\\Core\\Framework\\Api\\Acl\\Event\\CommandAclValidationEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Api\\EventListener\\Acl\\CreditOrderLineItemListener')] fn () => ($container->privates['Shopware\\Core\\Framework\\Api\\EventListener\\Acl\\CreditOrderLineItemListener'] ??= new \Shopware\Core\Framework\Api\EventListener\Acl\CreditOrderLineItemListener()), 'validate'], 0);
        $instance->addListener('kernel.controller', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheStateSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheStateSubscriber'] ?? self::getCacheStateSubscriberService($container)), 'setStates'], -21);
        $instance->addListener('Shopware\\Core\\Checkout\\Customer\\Event\\CustomerLoginEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheStateSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheStateSubscriber'] ?? self::getCacheStateSubscriberService($container)), 'login'], 0);
        $instance->addListener('Shopware\\Core\\Checkout\\Cart\\Event\\CartChangedEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheStateSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheStateSubscriber'] ?? self::getCacheStateSubscriberService($container)), 'cartChanged'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Cache\\Script\\ScriptCacheInvalidationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\Script\\ScriptCacheInvalidationSubscriber'] ?? self::getScriptCacheInvalidationSubscriberService($container)), 'executeCacheInvalidationHook'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'Shopware\\Core\\Framework\\Api\\EventListener\\CorsListener')] fn () => ($container->privates['Shopware\\Core\\Framework\\Api\\EventListener\\CorsListener'] ??= new \Shopware\Core\Framework\Api\EventListener\CorsListener()), 'onKernelRequest'], 9999);
        $instance->addListener('kernel.response', [#[\Closure(name: 'Shopware\\Core\\Framework\\Api\\EventListener\\CorsListener')] fn () => ($container->privates['Shopware\\Core\\Framework\\Api\\EventListener\\CorsListener'] ??= new \Shopware\Core\Framework\Api\EventListener\CorsListener()), 'onKernelResponse'], 9999);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'Shopware\\Core\\Framework\\Api\\EventListener\\ResponseExceptionListener')] fn () => ($container->privates['Shopware\\Core\\Framework\\Api\\EventListener\\ResponseExceptionListener'] ??= new \Shopware\Core\Framework\Api\EventListener\ResponseExceptionListener(true)), 'onKernelException'], -1);
        $instance->addListener('kernel.response', [#[\Closure(name: 'Shopware\\Core\\Framework\\Api\\EventListener\\ResponseHeaderListener')] fn () => ($container->privates['Shopware\\Core\\Framework\\Api\\EventListener\\ResponseHeaderListener'] ??= new \Shopware\Core\Framework\Api\EventListener\ResponseHeaderListener()), 'onResponse'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'Shopware\\Core\\Framework\\Api\\EventListener\\JsonRequestTransformerListener')] fn () => ($container->privates['Shopware\\Core\\Framework\\Api\\EventListener\\JsonRequestTransformerListener'] ??= new \Shopware\Core\Framework\Api\EventListener\JsonRequestTransformerListener()), 'onRequest'], 128);
        $instance->addListener('kernel.controller', [#[\Closure(name: 'Shopware\\Core\\Framework\\Api\\EventListener\\ExpectationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Api\\EventListener\\ExpectationSubscriber'] ?? self::getExpectationSubscriberService($container)), 'checkExpectations'], -21);
        $instance->addListener('kernel.controller', [#[\Closure(name: 'Shopware\\Core\\Framework\\Api\\EventListener\\Authentication\\SalesChannelAuthenticationListener')] fn () => ($container->privates['Shopware\\Core\\Framework\\Api\\EventListener\\Authentication\\SalesChannelAuthenticationListener'] ?? self::getSalesChannelAuthenticationListenerService($container)), 'validateRequest'], -2);
        $instance->addListener('kernel.request', [#[\Closure(name: 'Shopware\\Core\\Framework\\Api\\EventListener\\Authentication\\ApiAuthenticationListener')] fn () => ($container->privates['Shopware\\Core\\Framework\\Api\\EventListener\\Authentication\\ApiAuthenticationListener'] ?? self::getApiAuthenticationListenerService($container)), 'setupOAuth'], 128);
        $instance->addListener('kernel.controller', [#[\Closure(name: 'Shopware\\Core\\Framework\\Api\\EventListener\\Authentication\\ApiAuthenticationListener')] fn () => ($container->privates['Shopware\\Core\\Framework\\Api\\EventListener\\Authentication\\ApiAuthenticationListener'] ?? self::getApiAuthenticationListenerService($container)), 'validateRequest'], -2);
        $instance->addListener('user.written', [#[\Closure(name: 'Shopware\\Core\\Framework\\Api\\EventListener\\Authentication\\UserCredentialsChangedSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Api\\EventListener\\Authentication\\UserCredentialsChangedSubscriber'] ?? self::getUserCredentialsChangedSubscriberService($container)), 'onUserWritten'], 0);
        $instance->addListener('user.deleted', [#[\Closure(name: 'Shopware\\Core\\Framework\\Api\\EventListener\\Authentication\\UserCredentialsChangedSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Api\\EventListener\\Authentication\\UserCredentialsChangedSubscriber'] ?? self::getUserCredentialsChangedSubscriberService($container)), 'onUserDeleted'], 0);
        $instance->addListener('app.loaded', [#[\Closure(name: 'Shopware\\Core\\Framework\\App\\Subscriber\\AppLoadedSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\App\\Subscriber\\AppLoadedSubscriber'] ??= new \Shopware\Core\Framework\App\Subscriber\AppLoadedSubscriber()), 'unserialize'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\App\\Subscriber\\CustomFieldProtectionSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\App\\Subscriber\\CustomFieldProtectionSubscriber'] ?? self::getCustomFieldProtectionSubscriberService($container)), 'checkWrite'], 0);
        $instance->addListener('app_script_condition.loaded', [#[\Closure(name: 'Shopware\\Core\\Framework\\App\\Subscriber\\AppScriptConditionConstraintsSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\App\\Subscriber\\AppScriptConditionConstraintsSubscriber'] ??= new \Shopware\Core\Framework\App\Subscriber\AppScriptConditionConstraintsSubscriber()), 'unserialize'], 0);
        $instance->addListener('app_flow_action.loaded', [#[\Closure(name: 'Shopware\\Core\\Framework\\App\\Flow\\Action\\AppFlowActionLoadedSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\App\\Flow\\Action\\AppFlowActionLoadedSubscriber'] ??= new \Shopware\Core\Framework\App\Flow\Action\AppFlowActionLoadedSubscriber()), 'unserialize'], 0);
        $instance->addListener('custom_field.deleted', [#[\Closure(name: 'Shopware\\Core\\System\\CustomField\\CustomFieldService')] fn () => ($container->privates['Shopware\\Core\\System\\CustomField\\CustomFieldService'] ?? self::getCustomFieldServiceService($container)), 'reset'], 0);
        $instance->addListener('custom_field.written', [#[\Closure(name: 'Shopware\\Core\\System\\CustomField\\CustomFieldService')] fn () => ($container->privates['Shopware\\Core\\System\\CustomField\\CustomFieldService'] ?? self::getCustomFieldServiceService($container)), 'reset'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Event\\ProgressStartedEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand')] fn () => ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand'] ?? self::getRefreshIndexCommandService($container)), 'startProgress'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Event\\ProgressAdvancedEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand')] fn () => ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand'] ?? self::getRefreshIndexCommandService($container)), 'advanceProgress'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Event\\ProgressFinishedEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand')] fn () => ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand'] ?? self::getRefreshIndexCommandService($container)), 'finishProgress'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Update\\Event\\UpdatePostFinishEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\Subscriber\\RegisteredIndexerSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\Subscriber\\RegisteredIndexerSubscriber'] ?? self::getRegisteredIndexerSubscriberService($container)), 'runRegisteredIndexers'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Store\\Event\\FirstRunWizardFinishedEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\Subscriber\\RegisteredIndexerSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\Subscriber\\RegisteredIndexerSubscriber'] ?? self::getRegisteredIndexerSubscriberService($container)), 'runRegisteredIndexers'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\LockValidator')] fn () => ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\LockValidator'] ?? self::getLockValidatorService($container)), 'preValidate'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityProtection\\EntityProtectionValidator')] fn () => ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityProtection\\EntityProtectionValidator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\EntityProtection\EntityProtectionValidator()), 'validateWriteCommands'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntitySearchedEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityProtection\\EntityProtectionValidator')] fn () => ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\EntityProtection\\EntityProtectionValidator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\EntityProtection\EntityProtectionValidator()), 'validateEntitySearch'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\Subscriber\\EntityIndexingSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\Subscriber\\EntityIndexingSubscriber'] ?? self::getEntityIndexingSubscriberService($container)), 'refreshIndex'], 1000);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\MessageQueueStatsSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\MessageQueueStatsSubscriber'] ?? self::getMessageQueueStatsSubscriberService($container)), 'onMessageFailed'], 99);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageHandledEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\MessageQueueStatsSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\MessageQueueStatsSubscriber'] ?? self::getMessageQueueStatsSubscriberService($container)), 'onMessageHandled'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\SendMessageToTransportsEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\MessageQueueStatsSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\MessageQueueStatsSubscriber'] ?? self::getMessageQueueStatsSubscriberService($container)), 'onMessageSent'], 99);
        $instance->addListener('console.command', [#[\Closure(name: 'Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\ConsumeMessagesSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\ConsumeMessagesSubscriber'] ??= new \Shopware\Core\Framework\MessageQueue\Subscriber\ConsumeMessagesSubscriber()), 'onMessengerConsume'], 0);
        $instance->addListener('plugin.loaded', [#[\Closure(name: 'Shopware\\Core\\Framework\\Plugin\\Subscriber\\PluginLoadedSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Subscriber\\PluginLoadedSubscriber'] ??= new \Shopware\Core\Framework\Plugin\Subscriber\PluginLoadedSubscriber()), 'unserialize'], 0);
        $instance->addListener('acl_role.loaded', [#[\Closure(name: 'Shopware\\Core\\Framework\\Plugin\\Subscriber\\PluginAclPrivilegesSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Subscriber\\PluginAclPrivilegesSubscriber'] ?? self::getPluginAclPrivilegesSubscriberService($container)), 'onAclRoleLoaded'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostActivateEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\PluginLifecycleSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\PluginLifecycleSubscriber'] ?? self::getPluginLifecycleSubscriberService($container)), 'afterPluginStateChange'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostDeactivateEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\PluginLifecycleSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\PluginLifecycleSubscriber'] ?? self::getPluginLifecycleSubscriberService($container)), 'afterPluginStateChange'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostUpdateEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\PluginLifecycleSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\PluginLifecycleSubscriber'] ?? self::getPluginLifecycleSubscriberService($container)), 'afterPluginStateChange'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Compatibility\\ScheduledTaskCompatibilitySubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Compatibility\\ScheduledTaskCompatibilitySubscriber'] ??= new \Shopware\Core\Framework\MessageQueue\ScheduledTask\Compatibility\ScheduledTaskCompatibilitySubscriber()), 'addBackwardsCompatibility'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Update\\Event\\UpdatePostFinishEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\UpdatePostFinishSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\UpdatePostFinishSubscriber'] ?? self::getUpdatePostFinishSubscriberService($container)), 'updatePostFinishEvent'], 0);
        $instance->addListener('Shopware\\Core\\System\\SystemConfig\\Event\\SystemConfigChangedEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Store\\Subscriber\\LicenseHostChangedSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Store\\Subscriber\\LicenseHostChangedSubscriber'] ?? self::getLicenseHostChangedSubscriberService($container)), 'onLicenseHostChanged'], 0);
        $instance->addListener('script.written', [#[\Closure(name: 'Shopware\\Core\\Framework\\Script\\Execution\\ScriptLoader')] fn () => ($container->privates['Shopware\\Core\\Framework\\Script\\Execution\\ScriptLoader'] ?? self::getScriptLoaderService($container)), 'invalidateCache'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [#[\Closure(name: 'Shopware\\Core\\System\\Language\\LanguageValidator')] fn () => ($container->privates['Shopware\\Core\\System\\Language\\LanguageValidator'] ?? self::getLanguageValidatorService($container)), 'preValidate'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PostWriteValidationEvent', [#[\Closure(name: 'Shopware\\Core\\System\\Language\\LanguageValidator')] fn () => ($container->privates['Shopware\\Core\\System\\Language\\LanguageValidator'] ?? self::getLanguageValidatorService($container)), 'postValidate'], 0);
        $instance->addListener('language.deleted', [#[\Closure(name: 'Shopware\\Core\\System\\Language\\CachedLanguageLoader')] fn () => ($container->privates['Shopware\\Core\\System\\Language\\CachedLanguageLoader'] ?? self::getCachedLanguageLoaderService($container)), 'invalidateCache'], 0);
        $instance->addListener('language.written', [#[\Closure(name: 'Shopware\\Core\\System\\Language\\CachedLanguageLoader')] fn () => ($container->privates['Shopware\\Core\\System\\Language\\CachedLanguageLoader'] ?? self::getCachedLanguageLoaderService($container)), 'invalidateCache'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [#[\Closure(name: 'Shopware\\Core\\System\\Language\\TranslationValidator')] fn () => ($container->privates['Shopware\\Core\\System\\Language\\TranslationValidator'] ??= new \Shopware\Core\System\Language\TranslationValidator()), 'preValidate'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Update\\Event\\UpdatePostFinishEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Update\\Services\\UpdateHtaccess')] fn () => ($container->privates['Shopware\\Core\\Framework\\Update\\Services\\UpdateHtaccess'] ??= new \Shopware\Core\Framework\Update\Services\UpdateHtaccess((\dirname(__DIR__, 4).'/public/.htaccess'))), 'update'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Update\\Event\\UpdatePostFinishEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Update\\Services\\CreateCustomAppsDir')] fn () => ($container->privates['Shopware\\Core\\Framework\\Update\\Services\\CreateCustomAppsDir'] ??= new \Shopware\Core\Framework\Update\Services\CreateCustomAppsDir((\dirname(__DIR__, 4).'/custom/apps'))), 'onUpdate'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'Shopware\\Core\\Content\\Seo\\SalesChannel\\StoreApiSeoResolver')] fn () => ($container->privates['Shopware\\Core\\Content\\Seo\\SalesChannel\\StoreApiSeoResolver'] ?? self::getStoreApiSeoResolverService($container)), 'addSeoInformation'], 10000);
        $instance->addListener('webhook.written', [#[\Closure(name: 'Shopware\\Core\\Framework\\Webhook\\WebhookCacheClearer')] fn () => ($container->privates['Shopware\\Core\\Framework\\Webhook\\WebhookCacheClearer'] ?? self::getWebhookCacheClearerService($container)), 'clearWebhookCache'], 0);
        $instance->addListener('acl_role.written', [#[\Closure(name: 'Shopware\\Core\\Framework\\Webhook\\WebhookCacheClearer')] fn () => ($container->privates['Shopware\\Core\\Framework\\Webhook\\WebhookCacheClearer'] ?? self::getWebhookCacheClearerService($container)), 'clearPrivilegesCache'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [#[\Closure(name: 'Shopware\\Core\\Framework\\Webhook\\Subscriber\\RetryWebhookMessageFailedSubscriber')] fn () => ($container->privates['Shopware\\Core\\Framework\\Webhook\\Subscriber\\RetryWebhookMessageFailedSubscriber'] ?? self::getRetryWebhookMessageFailedSubscriberService($container)), 'failed'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'Shopware\\Core\\System\\SalesChannel\\Api\\StoreApiResponseListener')] fn () => ($container->privates['Shopware\\Core\\System\\SalesChannel\\Api\\StoreApiResponseListener'] ?? self::getStoreApiResponseListenerService($container)), 'encodeResponse'], 10000);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [#[\Closure(name: 'Shopware\\Core\\System\\SalesChannel\\Validation\\SalesChannelValidator')] fn () => ($container->privates['Shopware\\Core\\System\\SalesChannel\\Validation\\SalesChannelValidator'] ?? self::getSalesChannelValidatorService($container)), 'handleSalesChannelLanguageIds'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [#[\Closure(name: 'Shopware\\Core\\System\\SalesChannel\\Subscriber\\SalesChannelTypeValidator')] fn () => ($container->privates['Shopware\\Core\\System\\SalesChannel\\Subscriber\\SalesChannelTypeValidator'] ??= new \Shopware\Core\System\SalesChannel\Subscriber\SalesChannelTypeValidator()), 'preWriteValidateEvent'], 0);
        $instance->addListener('currency.loaded', [#[\Closure(name: 'Shopware\\Core\\System\\Currency\\CurrencyLoadSubscriber')] fn () => ($container->privates['Shopware\\Core\\System\\Currency\\CurrencyLoadSubscriber'] ??= new \Shopware\Core\System\Currency\CurrencyLoadSubscriber()), 'setDefault'], 0);
        $instance->addListener('currency.partial_loaded', [#[\Closure(name: 'Shopware\\Core\\System\\Currency\\CurrencyLoadSubscriber')] fn () => ($container->privates['Shopware\\Core\\System\\Currency\\CurrencyLoadSubscriber'] ??= new \Shopware\Core\System\Currency\CurrencyLoadSubscriber()), 'setDefault'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [#[\Closure(name: 'Shopware\\Core\\System\\Currency\\CurrencyValidator')] fn () => ($container->privates['Shopware\\Core\\System\\Currency\\CurrencyValidator'] ??= new \Shopware\Core\System\Currency\CurrencyValidator()), 'preValidate'], 0);
        $instance->addListener('Shopware\\Core\\System\\SystemConfig\\Event\\SystemConfigChangedEvent', [#[\Closure(name: 'Shopware\\Core\\System\\UsageData\\Subscriber\\UsageDataApprovalSubscriber')] fn () => ($container->privates['Shopware\\Core\\System\\UsageData\\Subscriber\\UsageDataApprovalSubscriber'] ?? self::getUsageDataApprovalSubscriberService($container)), 'onDataUsageApprovalChange'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityDeleteEvent', [#[\Closure(name: 'Shopware\\Core\\System\\UsageData\\Subscriber\\EntityDeleteSubscriber')] fn () => ($container->privates['Shopware\\Core\\System\\UsageData\\Subscriber\\EntityDeleteSubscriber'] ?? self::getEntityDeleteSubscriberService($container)), 'handleEntityDeleteEvent'], 0);
        $instance->addListener('custom_field.written', [#[\Closure(name: 'Shopware\\Core\\System\\Snippet\\Subscriber\\CustomFieldSubscriber')] fn () => ($container->privates['Shopware\\Core\\System\\Snippet\\Subscriber\\CustomFieldSubscriber'] ?? self::getCustomFieldSubscriberService($container)), 'customFieldIsWritten'], 0);
        $instance->addListener('custom_field.deleted', [#[\Closure(name: 'Shopware\\Core\\System\\Snippet\\Subscriber\\CustomFieldSubscriber')] fn () => ($container->privates['Shopware\\Core\\System\\Snippet\\Subscriber\\CustomFieldSubscriber'] ?? self::getCustomFieldSubscriberService($container)), 'customFieldIsDeleted'], 0);
        $instance->addListener('Shopware\\Core\\System\\SystemConfig\\Event\\SystemConfigChangedEvent', [#[\Closure(name: 'Shopware\\Core\\System\\SystemConfig\\Store\\MemoizedSystemConfigStore')] fn () => ($container->privates['Shopware\\Core\\System\\SystemConfig\\Store\\MemoizedSystemConfigStore'] ??= new \Shopware\Core\System\SystemConfig\Store\MemoizedSystemConfigStore()), 'onValueChanged'], 1500);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PostWriteValidationEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Category\\Validation\\EntryPointValidator')] fn () => ($container->privates['Shopware\\Core\\Content\\Category\\Validation\\EntryPointValidator'] ?? self::getEntryPointValidatorService($container)), 'postValidate'], 0);
        $instance->addListener('category.loaded', [#[\Closure(name: 'Shopware\\Core\\Content\\Category\\Subscriber\\CategorySubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Category\\Subscriber\\CategorySubscriber'] ?? self::getCategorySubscriberService($container)), 'entityLoaded'], 0);
        $instance->addListener('sales_channel.category.loaded', [#[\Closure(name: 'Shopware\\Core\\Content\\Category\\Subscriber\\CategorySubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Category\\Subscriber\\CategorySubscriber'] ?? self::getCategorySubscriberService($container)), 'entityLoaded'], 0);
        $instance->addListener('media_folder_configuration.loaded', [#[\Closure(name: 'Shopware\\Core\\Content\\Media\\Subscriber\\MediaFolderConfigLoadedSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaFolderConfigLoadedSubscriber'] ??= new \Shopware\Core\Content\Media\Subscriber\MediaFolderConfigLoadedSubscriber()), 'unserialize'], 10);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityDeleteEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Media\\Subscriber\\MediaDeletionSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaDeletionSubscriber'] ?? self::getMediaDeletionSubscriberService($container)), 'beforeDelete'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntitySearchedEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Media\\Subscriber\\MediaDeletionSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaDeletionSubscriber'] ?? self::getMediaDeletionSubscriberService($container)), 'securePrivateFolders'], 0);
        $instance->addListener('Shopware\\Core\\Content\\Media\\Event\\UnusedMediaSearchEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Media\\Subscriber\\CustomFieldsUnusedMediaSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Media\\Subscriber\\CustomFieldsUnusedMediaSubscriber'] ?? self::getCustomFieldsUnusedMediaSubscriberService($container)), 'removeUsedMedia'], 0);
        $instance->addListener('product.loaded', [#[\Closure(name: 'Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber'] ?? self::getProductSubscriberService($container)), 'loaded'], 0);
        $instance->addListener('product.partial_loaded', [#[\Closure(name: 'Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber'] ?? self::getProductSubscriberService($container)), 'loaded'], 0);
        $instance->addListener('sales_channel.product.loaded', [#[\Closure(name: 'Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber'] ?? self::getProductSubscriberService($container)), 'salesChannelLoaded'], 0);
        $instance->addListener('sales_channel.product.partial_loaded', [#[\Closure(name: 'Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber'] ?? self::getProductSubscriberService($container)), 'salesChannelLoaded'], 0);
        $instance->addListener('Shopware\\Core\\Checkout\\Cart\\Event\\CheckoutOrderPlacedEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StockUpdater')] fn () => ($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StockUpdater'] ?? self::getStockUpdaterService($container)), 'orderPlaced'], 0);
        $instance->addListener('Shopware\\Core\\System\\StateMachine\\Event\\StateMachineTransitionEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StockUpdater')] fn () => ($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StockUpdater'] ?? self::getStockUpdaterService($container)), 'stateChanged'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StockUpdater')] fn () => ($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StockUpdater'] ?? self::getStockUpdaterService($container)), 'triggerChangeSet'], 0);
        $instance->addListener('order_line_item.written', [#[\Closure(name: 'Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StockUpdater')] fn () => ($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StockUpdater'] ?? self::getStockUpdaterService($container)), 'lineItemWritten'], 0);
        $instance->addListener('order_line_item.deleted', [#[\Closure(name: 'Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StockUpdater')] fn () => ($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StockUpdater'] ?? self::getStockUpdaterService($container)), 'lineItemWritten'], 0);
        $instance->addListener('Shopware\\Core\\System\\StateMachine\\Event\\StateMachineTransitionEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Product\\Stock\\OrderStockSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Product\\Stock\\OrderStockSubscriber'] ?? self::getOrderStockSubscriberService($container)), 'stateChanged'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWriteEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Product\\Stock\\OrderStockSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Product\\Stock\\OrderStockSubscriber'] ?? self::getOrderStockSubscriberService($container)), 'beforeWriteOrderItems'], 0);
        $instance->addListener('sales_channel.product.loaded', [#[\Closure(name: 'Shopware\\Core\\Content\\Product\\Stock\\LoadProductStockSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Product\\Stock\\LoadProductStockSubscriber'] ?? self::getLoadProductStockSubscriberService($container)), 'salesChannelLoaded'], 0);
        $instance->addListener('sales_channel.product.partial_loaded', [#[\Closure(name: 'Shopware\\Core\\Content\\Product\\Stock\\LoadProductStockSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Product\\Stock\\LoadProductStockSubscriber'] ?? self::getLoadProductStockSubscriberService($container)), 'salesChannelLoaded'], 0);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductListingCriteriaEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'] ?? self::getProductListingFeaturesSubscriberService($container)), 'prepare'], 0);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductSearchCriteriaEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'] ?? self::getProductListingFeaturesSubscriberService($container)), 'prepare'], 0);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductSuggestCriteriaEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'] ?? self::getProductListingFeaturesSubscriberService($container)), 'prepare'], 0);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductListingResultEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'] ?? self::getProductListingFeaturesSubscriberService($container)), 'process'], 0);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductSearchResultEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'] ?? self::getProductListingFeaturesSubscriberService($container)), 'process'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Product\\Cart\\ProductLineItemCommandValidator')] fn () => ($container->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductLineItemCommandValidator'] ?? self::getProductLineItemCommandValidatorService($container)), 'preValidate'], 0);
        $instance->addListener('newsletter_recipient.deleted', [#[\Closure(name: 'Shopware\\Core\\Content\\Newsletter\\Event\\Subscriber\\NewsletterRecipientDeletedSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Newsletter\\Event\\Subscriber\\NewsletterRecipientDeletedSubscriber'] ?? self::getNewsletterRecipientDeletedSubscriberService($container)), 'onNewsletterRecipientDeleted'], 0);
        $instance->addListener('newsletter_recipient.written', [#[\Closure(name: 'Shopware\\Core\\Content\\Newsletter\\Subscriber\\NewsletterRecipientSalutationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Newsletter\\Subscriber\\NewsletterRecipientSalutationSubscriber'] ?? self::getNewsletterRecipientSalutationSubscriberService($container)), 'setDefaultSalutation'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Rule\\RuleValidator')] fn () => ($container->privates['Shopware\\Core\\Content\\Rule\\RuleValidator'] ?? self::getRuleValidatorService($container)), 'preValidate'], 0);
        $instance->addListener('rule.loaded', [#[\Closure(name: 'Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RulePayloadSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RulePayloadSubscriber'] ?? self::getRulePayloadSubscriberService($container)), 'unserialize'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostInstallEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexerSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexerSubscriber'] ?? self::getRuleIndexerSubscriberService($container)), 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostActivateEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexerSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexerSubscriber'] ?? self::getRuleIndexerSubscriberService($container)), 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostUpdateEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexerSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexerSubscriber'] ?? self::getRuleIndexerSubscriberService($container)), 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostDeactivateEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexerSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexerSubscriber'] ?? self::getRuleIndexerSubscriberService($container)), 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostUninstallEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexerSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexerSubscriber'] ?? self::getRuleIndexerSubscriberService($container)), 'refreshPlugin'], 0);
        $instance->addListener('rule.written', [#[\Closure(name: 'Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexerSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexerSubscriber'] ?? self::getRuleIndexerSubscriberService($container)), 'onRuleWritten'], 0);
        $instance->addListener('app_script_condition.written', [#[\Closure(name: 'Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RulePayloadUpdater')] fn () => ($container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RulePayloadUpdater'] ?? self::getRulePayloadUpdaterService($container)), 'updatePayloads'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleAreaUpdater')] fn () => ($container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleAreaUpdater'] ?? self::getRuleAreaUpdaterService($container)), 'triggerChangeSet'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleAreaUpdater')] fn () => ($container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleAreaUpdater'] ?? self::getRuleAreaUpdaterService($container)), 'onEntityWritten'], 0);
        $instance->addListener('product_export.written', [#[\Closure(name: 'Shopware\\Core\\Content\\ProductExport\\EventListener\\ProductExportEventListener')] fn () => ($container->privates['Shopware\\Core\\Content\\ProductExport\\EventListener\\ProductExportEventListener'] ?? self::getProductExportEventListenerService($container)), 'afterWrite'], 0);
        $instance->addListener('Shopware\\Core\\System\\SystemConfig\\Event\\BeforeSystemConfigChangedEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Cms\\Subscriber\\CmsPageDefaultChangeSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Cms\\Subscriber\\CmsPageDefaultChangeSubscriber'] ?? self::getCmsPageDefaultChangeSubscriberService($container)), 'validateChangeOfDefaultCmsPage'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityDeleteEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Cms\\Subscriber\\CmsPageDefaultChangeSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Cms\\Subscriber\\CmsPageDefaultChangeSubscriber'] ?? self::getCmsPageDefaultChangeSubscriberService($container)), 'beforeDeletion'], 0);
        $instance->addListener('Shopware\\Core\\Content\\Media\\Event\\UnusedMediaSearchEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Cms\\Subscriber\\UnusedMediaSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Cms\\Subscriber\\UnusedMediaSubscriber'] ?? self::getUnusedMediaSubscriberService($container)), 'removeUsedMedia'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\SystemDefaultValidator')] fn () => ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\SystemDefaultValidator'] ?? self::getSystemDefaultValidatorService($container)), 'preValidate'], 0);
        $instance->addListener('media.written', [#[\Closure(name: 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializerSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializerSubscriber'] ?? self::getMediaSerializerSubscriberService($container)), 'forward'], 0);
        $instance->addListener('import_export_file.deleted', [#[\Closure(name: 'Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\FileDeletedSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\FileDeletedSubscriber'] ?? self::getFileDeletedSubscriberService($container)), 'onFileDeleted'], 0);
        $instance->addListener('Shopware\\Core\\Content\\ImportExport\\Event\\EnrichExportCriteriaEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\CategoryCriteriaSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\CategoryCriteriaSubscriber'] ??= new \Shopware\Core\Content\ImportExport\Event\Subscriber\CategoryCriteriaSubscriber()), 'enrich'], 0);
        $instance->addListener('Shopware\\Core\\Content\\ImportExport\\Event\\ImportExportBeforeImportRecordEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCategoryPathsSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCategoryPathsSubscriber'] ?? self::getProductCategoryPathsSubscriberService($container)), 'categoryPathsToAssignment'], 0);
        $instance->addListener('Shopware\\Core\\Content\\ImportExport\\Event\\EnrichExportCriteriaEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCriteriaSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCriteriaSubscriber'] ??= new \Shopware\Core\Content\ImportExport\Event\Subscriber\ProductCriteriaSubscriber()), 'enrich'], 0);
        $instance->addListener('Shopware\\Core\\Content\\ImportExport\\Event\\ImportExportAfterImportRecordEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber'] ?? self::getProductVariantsSubscriberService($container)), 'onAfterImportRecord'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PostWriteValidationEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\LandingPage\\LandingPageValidator')] fn () => ($container->privates['Shopware\\Core\\Content\\LandingPage\\LandingPageValidator'] ?? self::getLandingPageValidatorService($container)), 'preValidate'], 0);
        $instance->addListener('flow.written', [#[\Closure(name: 'Shopware\\Core\\Content\\Flow\\Dispatching\\CachedFlowLoader')] fn () => ($container->services['Shopware\\Core\\Content\\Flow\\Dispatching\\CachedFlowLoader'] ?? self::getCachedFlowLoaderService($container)), 'invalidate'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostInstallEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexerSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexerSubscriber'] ?? self::getFlowIndexerSubscriberService($container)), 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostActivateEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexerSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexerSubscriber'] ?? self::getFlowIndexerSubscriberService($container)), 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostUpdateEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexerSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexerSubscriber'] ?? self::getFlowIndexerSubscriberService($container)), 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostDeactivateEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexerSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexerSubscriber'] ?? self::getFlowIndexerSubscriberService($container)), 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostUninstallEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexerSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexerSubscriber'] ?? self::getFlowIndexerSubscriberService($container)), 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\App\\Event\\AppInstalledEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexerSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexerSubscriber'] ?? self::getFlowIndexerSubscriberService($container)), 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\App\\Event\\AppUpdatedEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexerSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexerSubscriber'] ?? self::getFlowIndexerSubscriberService($container)), 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\App\\Event\\AppActivatedEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexerSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexerSubscriber'] ?? self::getFlowIndexerSubscriberService($container)), 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\App\\Event\\AppDeletedEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexerSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexerSubscriber'] ?? self::getFlowIndexerSubscriberService($container)), 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\App\\Event\\AppDeactivatedEvent', [#[\Closure(name: 'Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexerSubscriber')] fn () => ($container->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexerSubscriber'] ?? self::getFlowIndexerSubscriberService($container)), 'refreshPlugin'], 0);
        $instance->addListener('Shopware\\Core\\System\\StateMachine\\Event\\StateMachineTransitionEvent', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerMetaFieldSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerMetaFieldSubscriber'] ?? self::getCustomerMetaFieldSubscriberService($container)), 'fillCustomerMetaDataFields'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerMetaFieldSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerMetaFieldSubscriber'] ?? self::getCustomerMetaFieldSubscriberService($container)), 'deleteOrder'], 0);
        $instance->addListener('product_review.written', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Customer\\Subscriber\\ProductReviewSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\ProductReviewSubscriber'] ?? self::getProductReviewSubscriberService($container)), 'createReview'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityDeleteEvent', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Customer\\Subscriber\\ProductReviewSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\ProductReviewSubscriber'] ?? self::getProductReviewSubscriberService($container)), 'detectChangeset'], 0);
        $instance->addListener('product_review.deleted', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Customer\\Subscriber\\ProductReviewSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\ProductReviewSubscriber'] ?? self::getProductReviewSubscriberService($container)), 'onReviewDeleted'], 0);
        $instance->addListener('Shopware\\Core\\Checkout\\Customer\\Event\\CustomerLoginEvent', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerRemoteAddressSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerRemoteAddressSubscriber'] ?? self::getCustomerRemoteAddressSubscriberService($container)), 'updateRemoteAddressByLogin'], 0);
        $instance->addListener('customer.written', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerTokenSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerTokenSubscriber'] ?? self::getCustomerTokenSubscriberService($container)), 'onCustomerWritten'], 0);
        $instance->addListener('customer.deleted', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerTokenSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerTokenSubscriber'] ?? self::getCustomerTokenSubscriberService($container)), 'onCustomerDeleted'], 0);
        $instance->addListener('customer_group_translation.written', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'] ?? self::getCustomerGroupSubscriberService($container)), 'updatedCustomerGroup'], 0);
        $instance->addListener('customer_group_registration_sales_channels.written', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'] ?? self::getCustomerGroupSubscriberService($container)), 'newSalesChannelAddedToCustomerGroup'], 0);
        $instance->addListener('customer_group_translation.deleted', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'] ?? self::getCustomerGroupSubscriberService($container)), 'deleteCustomerGroup'], 0);
        $instance->addListener('customer.written', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerChangePasswordSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerChangePasswordSubscriber'] ?? self::getCustomerChangePasswordSubscriberService($container)), 'onCustomerWritten'], 0);
        $instance->addListener('customer.written', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerFlowEventsSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerFlowEventsSubscriber'] ?? self::getCustomerFlowEventsSubscriberService($container)), 'onCustomerWritten'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityDeleteEvent', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerBeforeDeleteSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerBeforeDeleteSubscriber'] ?? self::getCustomerBeforeDeleteSubscriberService($container)), 'beforeDelete'], 0);
        $instance->addListener('customer.written', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerSalutationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerSalutationSubscriber'] ?? self::getCustomerSalutationSubscriberService($container)), 'setDefaultSalutation'], 0);
        $instance->addListener('customer_address.written', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerSalutationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerSalutationSubscriber'] ?? self::getCustomerSalutationSubscriberService($container)), 'setDefaultSalutation'], 0);
        $instance->addListener('document_base_config.written', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Document\\Service\\DocumentConfigLoader')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentConfigLoader'] ?? self::getDocumentConfigLoaderService($container)), 'reset'], 0);
        $instance->addListener('state_machine.order.state_changed', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'] ?? self::getOrderStateChangeEventListenerService($container)), 'onOrderStateChange'], 0);
        $instance->addListener('state_machine.order_delivery.state_changed', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'] ?? self::getOrderStateChangeEventListenerService($container)), 'onOrderDeliveryStateChange'], 0);
        $instance->addListener('state_machine.order_transaction.state_changed', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'] ?? self::getOrderStateChangeEventListenerService($container)), 'onOrderTransactionStateChange'], 0);
        $instance->addListener('collect.business-events', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'] ?? self::getOrderStateChangeEventListenerService($container)), 'onAddStateEvents'], 0);
        $instance->addListener('order_address.written', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Order\\Subscriber\\OrderSalutationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Order\\Subscriber\\OrderSalutationSubscriber'] ?? self::getOrderSalutationSubscriberService($container)), 'setDefaultSalutation'], 0);
        $instance->addListener('order_customer.written', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Order\\Subscriber\\OrderSalutationSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Order\\Subscriber\\OrderSalutationSubscriber'] ?? self::getOrderSalutationSubscriberService($container)), 'setDefaultSalutation'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentMethodValidator')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentMethodValidator'] ?? self::getPaymentMethodValidator2Service($container)), 'validate'], 0);
        $instance->addListener('payment_method.loaded', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentHandlerIdentifierSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentHandlerIdentifierSubscriber'] ??= new \Shopware\Core\Checkout\Payment\DataAbstractionLayer\PaymentHandlerIdentifierSubscriber()), 'formatHandlerIdentifier'], 0);
        $instance->addListener('payment_method.partial_loaded', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentHandlerIdentifierSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentHandlerIdentifierSubscriber'] ??= new \Shopware\Core\Checkout\Payment\DataAbstractionLayer\PaymentHandlerIdentifierSubscriber()), 'formatHandlerIdentifier'], 0);
        $instance->addListener('payment_method.loaded', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentDistinguishableNameSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentDistinguishableNameSubscriber'] ??= new \Shopware\Core\Checkout\Payment\DataAbstractionLayer\PaymentDistinguishableNameSubscriber()), 'addDistinguishablePaymentName'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Promotion\\Validator\\PromotionValidator')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Validator\\PromotionValidator'] ?? self::getPromotionValidatorService($container)), 'preValidate'], 0);
        $instance->addListener('Shopware\\Core\\Checkout\\Cart\\Event\\BeforeLineItemAddedEvent', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Promotion\\Subscriber\\Storefront\\StorefrontCartSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Subscriber\\Storefront\\StorefrontCartSubscriber'] ?? self::getStorefrontCartSubscriberService($container)), 'onLineItemAdded'], 0);
        $instance->addListener('Shopware\\Core\\Checkout\\Cart\\Event\\BeforeLineItemRemovedEvent', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Promotion\\Subscriber\\Storefront\\StorefrontCartSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Subscriber\\Storefront\\StorefrontCartSubscriber'] ?? self::getStorefrontCartSubscriberService($container)), 'onLineItemRemoved'], 0);
        $instance->addListener('Shopware\\Core\\Checkout\\Cart\\Event\\CheckoutOrderPlacedEvent', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Promotion\\Subscriber\\Storefront\\StorefrontCartSubscriber')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Subscriber\\Storefront\\StorefrontCartSubscriber'] ?? self::getStorefrontCartSubscriberService($container)), 'resetCodes'], 0);
        $instance->addListener('Shopware\\Core\\Checkout\\Cart\\Event\\CheckoutOrderPlacedEvent', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Promotion\\Subscriber\\PromotionIndividualCodeRedeemer')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Subscriber\\PromotionIndividualCodeRedeemer'] ?? self::getPromotionIndividualCodeRedeemerService($container)), 'onOrderPlaced'], 0);
        $instance->addListener('Shopware\\Core\\Checkout\\Cart\\Event\\CheckoutOrderPlacedEvent', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Promotion\\DataAbstractionLayer\\PromotionRedemptionUpdater')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Promotion\\DataAbstractionLayer\\PromotionRedemptionUpdater'] ?? self::getPromotionRedemptionUpdaterService($container)), 'orderPlaced'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\PreWriteValidationEvent', [#[\Closure(name: 'Shopware\\Core\\Checkout\\Shipping\\Validator\\ShippingMethodValidator')] fn () => ($container->privates['Shopware\\Core\\Checkout\\Shipping\\Validator\\ShippingMethodValidator'] ?? self::getShippingMethodValidatorService($container)), 'preValidate'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Routing\\Event\\SalesChannelContextResolvedEvent', [#[\Closure(name: 'Shopware\\Core\\Profiling\\Subscriber\\ActiveRulesDataCollectorSubscriber')] fn () => ($container->privates['Shopware\\Core\\Profiling\\Subscriber\\ActiveRulesDataCollectorSubscriber'] ?? self::getActiveRulesDataCollectorSubscriberService($container)), 'onContextResolved'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Update\\Event\\UpdatePostFinishEvent', [#[\Closure(name: 'Shopware\\Administration\\Notification\\Subscriber\\UpdateSubscriber')] fn () => ($container->privates['Shopware\\Administration\\Notification\\Subscriber\\UpdateSubscriber'] ?? self::getUpdateSubscriberService($container)), 'updateFinishedDone'], -9999);
        $instance->addListener('sales_channel.deleted', [#[\Closure(name: 'Shopware\\Administration\\System\\SalesChannel\\Subscriber\\SalesChannelUserConfigSubscriber')] fn () => ($container->privates['Shopware\\Administration\\System\\SalesChannel\\Subscriber\\SalesChannelUserConfigSubscriber'] ?? self::getSalesChannelUserConfigSubscriberService($container)), 'onSalesChannelDeleted'], 0);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductIndexerEvent', [#[\Closure(name: 'Shopware\\Elasticsearch\\Product\\ProductUpdater')] fn () => ($container->privates['Shopware\\Elasticsearch\\Product\\ProductUpdater'] ?? self::getProductUpdaterService($container)), 'update'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Elasticsearch\\Product\\CustomFieldUpdater')] fn () => ($container->privates['Shopware\\Elasticsearch\\Product\\CustomFieldUpdater'] ?? self::getCustomFieldUpdaterService($container)), 'onNewCustomFieldCreated'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Event\\ProgressStartedEvent', [#[\Closure(name: 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand')] fn () => ($container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand'] ?? self::getElasticsearchAdminIndexingCommandService($container)), 'startProgress'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Event\\ProgressAdvancedEvent', [#[\Closure(name: 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand')] fn () => ($container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand'] ?? self::getElasticsearchAdminIndexingCommandService($container)), 'advanceProgress'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Event\\ProgressFinishedEvent', [#[\Closure(name: 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand')] fn () => ($container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand'] ?? self::getElasticsearchAdminIndexingCommandService($container)), 'finishProgress'], 0);
        $instance->addListener('sales_channel_language.written', [#[\Closure(name: 'Shopware\\Elasticsearch\\Product\\LanguageSubscriber')] fn () => ($container->privates['Shopware\\Elasticsearch\\Product\\LanguageSubscriber'] ?? self::getLanguageSubscriberService($container)), 'onSalesChannelWritten'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\RefreshIndexEvent', [#[\Closure(name: 'Shopware\\Elasticsearch\\Admin\\Subscriber\\RefreshIndexSubscriber')] fn () => ($container->privates['Shopware\\Elasticsearch\\Admin\\Subscriber\\RefreshIndexSubscriber'] ?? self::getRefreshIndexSubscriberService($container)), 'handled'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry')] fn () => ($container->privates['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry'] ?? self::getAdminSearchRegistryService($container)), 'refresh'], -1000);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Routing\\CachedDomainLoaderInvalidator')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Routing\\CachedDomainLoaderInvalidator'] ?? self::getCachedDomainLoaderInvalidatorService($container)), 'invalidate'], 2000);
        $instance->addListener('kernel.request', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? self::getStorefrontSubscriberService($container)), 'startSession'], 40);
        $instance->addListener('kernel.request', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? self::getStorefrontSubscriberService($container)), 'maintenanceResolver'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? self::getStorefrontSubscriberService($container)), 'customerNotLoggedInHandler'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? self::getStorefrontSubscriberService($container)), 'maintenanceResolver'], 0);
        $instance->addListener('kernel.controller', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? self::getStorefrontSubscriberService($container)), 'preventPageLoadingFromXmlHttpRequest'], -20);
        $instance->addListener('Shopware\\Core\\Checkout\\Customer\\Event\\CustomerLoginEvent', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? self::getStorefrontSubscriberService($container)), 'updateSessionAfterLogin'], 0);
        $instance->addListener('Shopware\\Core\\Checkout\\Customer\\Event\\CustomerLogoutEvent', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? self::getStorefrontSubscriberService($container)), 'updateSessionAfterLogout'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Event\\BeforeSendResponseEvent', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? self::getStorefrontSubscriberService($container)), 'setCanonicalUrl'], 0);
        $instance->addListener('Shopware\\Storefront\\Event\\StorefrontRenderEvent', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? self::getStorefrontSubscriberService($container)), 'addHreflang'], 0);
        $instance->addListener('Shopware\\Storefront\\Event\\StorefrontRenderEvent', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? self::getStorefrontSubscriberService($container)), 'addShopIdParameter'], 0);
        $instance->addListener('Shopware\\Storefront\\Event\\StorefrontRenderEvent', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? self::getStorefrontSubscriberService($container)), 'addIconSetConfig'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Routing\\Event\\SalesChannelContextResolvedEvent', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] ?? self::getStorefrontSubscriberService($container)), 'replaceContextToken'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'] ?? self::getNotFoundSubscriberService($container)), 'onError'], -100);
        $instance->addListener('Shopware\\Core\\System\\SystemConfig\\Event\\SystemConfigChangedEvent', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'] ?? self::getNotFoundSubscriberService($container)), 'onSystemConfigChanged'], 0);
        $instance->addListener('kernel.controller', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\AffiliateTracking\\AffiliateTrackingListener')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\AffiliateTracking\\AffiliateTrackingListener'] ??= new \Shopware\Storefront\Framework\AffiliateTracking\AffiliateTrackingListener()), 'checkAffiliateTracking'], -21);
        $instance->addListener('kernel.request', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Cache\\CacheResponseSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheResponseSubscriber'] ?? self::getCacheResponseSubscriberService($container)), 'addHttpCacheToCoreRoutes'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Cache\\CacheResponseSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheResponseSubscriber'] ?? self::getCacheResponseSubscriberService($container)), 'setResponseCache'], -1500);
        $instance->addListener('kernel.response', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Cache\\CacheResponseSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheResponseSubscriber'] ?? self::getCacheResponseSubscriberService($container)), 'setResponseCacheHeader'], 1500);
        $instance->addListener('Shopware\\Core\\Framework\\Event\\BeforeSendResponseEvent', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Cache\\CacheResponseSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheResponseSubscriber'] ?? self::getCacheResponseSubscriberService($container)), 'updateCacheControlForBrowser'], 0);
        $instance->addListener('kernel.controller', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Captcha\\CaptchaRouteListener')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Captcha\\CaptchaRouteListener'] ?? self::getCaptchaRouteListenerService($container)), 'validateCaptcha'], -20);
        $instance->addListener('kernel.response', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Routing\\ResponseHeaderListener')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Routing\\ResponseHeaderListener'] ??= new \Shopware\Storefront\Framework\Routing\ResponseHeaderListener()), 'onResponse'], -10);
        $instance->addListener('Shopware\\Core\\Checkout\\Cart\\Event\\CartMergedEvent', [#[\Closure(name: 'Shopware\\Storefront\\Event\\CartMergedSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Event\\CartMergedSubscriber'] ?? self::getCartMergedSubscriberService($container)), 'addCartMergedNoticeFlash'], 0);
        $instance->addListener('Shopware\\Core\\Content\\Product\\Events\\ProductIndexerEvent', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'] ?? self::getSeoUrlUpdateListenerService($container)), 'updateProductUrls'], 0);
        $instance->addListener('Shopware\\Core\\Content\\Category\\Event\\CategoryIndexerEvent', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'] ?? self::getSeoUrlUpdateListenerService($container)), 'updateCategoryUrls'], 0);
        $instance->addListener('Shopware\\Core\\Content\\LandingPage\\Event\\LandingPageIndexerEvent', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'] ?? self::getSeoUrlUpdateListenerService($container)), 'updateLandingPageUrls'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityWrittenContainerEvent', [#[\Closure(name: 'Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener')] fn () => ($container->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'] ?? self::getSeoUrlUpdateListenerService($container)), 'detectSalesChannelEntryPoints'], 0);
        $instance->addListener('Shopware\\Storefront\\Theme\\Event\\ThemeConfigChangedEvent', [#[\Closure(name: 'Shopware\\Storefront\\Theme\\CachedResolvedConfigLoaderInvalidator')] fn () => ($container->privates['Shopware\\Storefront\\Theme\\CachedResolvedConfigLoaderInvalidator'] ?? self::getCachedResolvedConfigLoaderInvalidatorService($container)), 'invalidate'], 0);
        $instance->addListener('Shopware\\Storefront\\Theme\\Event\\ThemeAssignedEvent', [#[\Closure(name: 'Shopware\\Storefront\\Theme\\CachedResolvedConfigLoaderInvalidator')] fn () => ($container->privates['Shopware\\Storefront\\Theme\\CachedResolvedConfigLoaderInvalidator'] ?? self::getCachedResolvedConfigLoaderInvalidatorService($container)), 'assigned'], 0);
        $instance->addListener('Shopware\\Storefront\\Theme\\Event\\ThemeConfigResetEvent', [#[\Closure(name: 'Shopware\\Storefront\\Theme\\CachedResolvedConfigLoaderInvalidator')] fn () => ($container->privates['Shopware\\Storefront\\Theme\\CachedResolvedConfigLoaderInvalidator'] ?? self::getCachedResolvedConfigLoaderInvalidatorService($container)), 'reset'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\App\\Event\\AppUpdatedEvent', [#[\Closure(name: 'Shopware\\Storefront\\Theme\\ThemeAppLifecycleHandler')] fn () => ($container->privates['Shopware\\Storefront\\Theme\\ThemeAppLifecycleHandler'] ?? self::getThemeAppLifecycleHandlerService($container)), 'handleAppActivationOrUpdate'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\App\\Event\\AppActivatedEvent', [#[\Closure(name: 'Shopware\\Storefront\\Theme\\ThemeAppLifecycleHandler')] fn () => ($container->privates['Shopware\\Storefront\\Theme\\ThemeAppLifecycleHandler'] ?? self::getThemeAppLifecycleHandlerService($container)), 'handleAppActivationOrUpdate'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\App\\Event\\AppDeactivatedEvent', [#[\Closure(name: 'Shopware\\Storefront\\Theme\\ThemeAppLifecycleHandler')] fn () => ($container->privates['Shopware\\Storefront\\Theme\\ThemeAppLifecycleHandler'] ?? self::getThemeAppLifecycleHandlerService($container)), 'handleUninstall'], 0);
        $instance->addListener('Shopware\\Storefront\\Theme\\Event\\ThemeConfigChangedEvent', [#[\Closure(name: 'Shopware\\Storefront\\Theme\\ConfigLoader\\StaticFileConfigDumper')] fn () => ($container->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\StaticFileConfigDumper'] ?? self::getStaticFileConfigDumperService($container)), 'dumpConfigFromEvent'], 0);
        $instance->addListener('Shopware\\Storefront\\Theme\\Event\\ThemeAssignedEvent', [#[\Closure(name: 'Shopware\\Storefront\\Theme\\ConfigLoader\\StaticFileConfigDumper')] fn () => ($container->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\StaticFileConfigDumper'] ?? self::getStaticFileConfigDumperService($container)), 'dumpConfigFromEvent'], 0);
        $instance->addListener('Shopware\\Storefront\\Theme\\Event\\ThemeConfigResetEvent', [#[\Closure(name: 'Shopware\\Storefront\\Theme\\ConfigLoader\\StaticFileConfigDumper')] fn () => ($container->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\StaticFileConfigDumper'] ?? self::getStaticFileConfigDumperService($container)), 'dumpConfigFromEvent'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostActivateEvent', [#[\Closure(name: 'Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber'] ?? self::getPluginLifecycleSubscriber2Service($container)), 'pluginPostActivate'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPreUpdateEvent', [#[\Closure(name: 'Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber'] ?? self::getPluginLifecycleSubscriber2Service($container)), 'pluginUpdate'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPreDeactivateEvent', [#[\Closure(name: 'Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber'] ?? self::getPluginLifecycleSubscriber2Service($container)), 'pluginDeactivateAndUninstall'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostDeactivationFailedEvent', [#[\Closure(name: 'Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber'] ?? self::getPluginLifecycleSubscriber2Service($container)), 'pluginPostDeactivateFailed'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPreUninstallEvent', [#[\Closure(name: 'Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber'] ?? self::getPluginLifecycleSubscriber2Service($container)), 'pluginDeactivateAndUninstall'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Plugin\\Event\\PluginPostUninstallEvent', [#[\Closure(name: 'Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber'] ?? self::getPluginLifecycleSubscriber2Service($container)), 'pluginPostUninstall'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\App\\Event\\AppDeletedEvent', [#[\Closure(name: 'Shopware\\Storefront\\Theme\\Subscriber\\AppLifecycleSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\AppLifecycleSubscriber'] ?? self::getAppLifecycleSubscriberService($container)), 'onAppDeleted'], 0);
        $instance->addListener('Shopware\\Storefront\\Theme\\Event\\ThemeCompilerEnrichScssVariablesEvent', [#[\Closure(name: 'Shopware\\Storefront\\Theme\\Subscriber\\ThemeCompilerEnrichScssVarSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\ThemeCompilerEnrichScssVarSubscriber'] ?? self::getThemeCompilerEnrichScssVarSubscriberService($container)), 'enrichExtensionVars'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'Shopware\\Storefront\\Theme\\Twig\\ThemeNamespaceHierarchyBuilder')] fn () => ($container->privates['Shopware\\Storefront\\Theme\\Twig\\ThemeNamespaceHierarchyBuilder'] ?? self::getThemeNamespaceHierarchyBuilderService($container)), 'requestEvent'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'Shopware\\Storefront\\Theme\\Twig\\ThemeNamespaceHierarchyBuilder')] fn () => ($container->privates['Shopware\\Storefront\\Theme\\Twig\\ThemeNamespaceHierarchyBuilder'] ?? self::getThemeNamespaceHierarchyBuilderService($container)), 'requestEvent'], 0);
        $instance->addListener('Shopware\\Core\\Checkout\\Document\\Event\\DocumentTemplateRendererParameterEvent', [#[\Closure(name: 'Shopware\\Storefront\\Theme\\Twig\\ThemeNamespaceHierarchyBuilder')] fn () => ($container->privates['Shopware\\Storefront\\Theme\\Twig\\ThemeNamespaceHierarchyBuilder'] ?? self::getThemeNamespaceHierarchyBuilderService($container)), 'onDocumentRendering'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Store\\Event\\FirstRunWizardFinishedEvent', [#[\Closure(name: 'Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'] ?? self::getFirstRunWizardSubscriberService($container)), 'frwFinished'], 0);
        $instance->addListener('Shopware\\Core\\Framework\\Update\\Event\\UpdatePostFinishEvent', [#[\Closure(name: 'Shopware\\Storefront\\Theme\\Subscriber\\UpdateSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\UpdateSubscriber'] ?? self::getUpdateSubscriber2Service($container)), 'updateFinished'], 0);
        $instance->addListener('Shopware\\Core\\Content\\Media\\Event\\UnusedMediaSearchEvent', [#[\Closure(name: 'Shopware\\Storefront\\Theme\\Subscriber\\UnusedMediaSubscriber')] fn () => ($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\UnusedMediaSubscriber'] ?? self::getUnusedMediaSubscriber2Service($container)), 'removeUsedMedia'], 0);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'argument_resolver.request_payload', class: 'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver')] fn () => ($container->privates['argument_resolver.request_payload'] ?? self::getArgumentResolver_RequestPayloadService($container)), 'onKernelControllerArguments'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'response_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ResponseListener')] fn () => ($container->privates['response_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8', false)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] fn () => ($container->privates['locale_listener'] ?? self::getLocaleListenerService($container)), 'setDefaultLocale'], 100);
        $instance->addListener('kernel.request', [#[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] fn () => ($container->privates['locale_listener'] ?? self::getLocaleListenerService($container)), 'onKernelRequest'], 16);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'locale_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleListener')] fn () => ($container->privates['locale_listener'] ?? self::getLocaleListenerService($container)), 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'validate_request_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ValidateRequestListener')] fn () => ($container->privates['validate_request_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener()), 'onKernelRequest'], 256);
        $instance->addListener('kernel.response', [#[\Closure(name: 'disallow_search_engine_index_response_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\DisallowRobotsIndexingListener')] fn () => ($container->privates['disallow_search_engine_index_response_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\DisallowRobotsIndexingListener()), 'onResponse'], -255);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'onControllerArguments'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'logKernelException'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'onKernelException'], -128);
        $instance->addListener('kernel.response', [#[\Closure(name: 'exception_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\ErrorListener')] fn () => ($container->privates['exception_listener'] ?? self::getExceptionListenerService($container)), 'removeCspHeader'], -128);
        $instance->addListener('kernel.controller_arguments', [#[\Closure(name: 'controller.cache_attribute_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\CacheAttributeListener')] fn () => ($container->privates['controller.cache_attribute_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener()), 'onKernelControllerArguments'], 10);
        $instance->addListener('kernel.response', [#[\Closure(name: 'controller.cache_attribute_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\CacheAttributeListener')] fn () => ($container->privates['controller.cache_attribute_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\CacheAttributeListener()), 'onKernelResponse'], -10);
        $instance->addListener('kernel.request', [#[\Closure(name: 'locale_aware_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleAwareListener')] fn () => ($container->privates['locale_aware_listener'] ?? self::getLocaleAwareListenerService($container)), 'onKernelRequest'], 15);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'locale_aware_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\LocaleAwareListener')] fn () => ($container->privates['locale_aware_listener'] ?? self::getLocaleAwareListenerService($container)), 'onKernelFinishRequest'], -15);
        $instance->addListener('console.error', [#[\Closure(name: 'console.error_listener', class: 'Symfony\\Component\\Console\\EventListener\\ErrorListener')] fn () => ($container->privates['console.error_listener'] ?? self::getConsole_ErrorListenerService($container)), 'onConsoleError'], -128);
        $instance->addListener('console.terminate', [#[\Closure(name: 'console.error_listener', class: 'Symfony\\Component\\Console\\EventListener\\ErrorListener')] fn () => ($container->privates['console.error_listener'] ?? self::getConsole_ErrorListenerService($container)), 'onConsoleTerminate'], -128);
        $instance->addListener('console.error', [#[\Closure(name: 'console.suggest_missing_package_subscriber', class: 'Symfony\\Bundle\\FrameworkBundle\\EventListener\\SuggestMissingPackageSubscriber')] fn () => ($container->privates['console.suggest_missing_package_subscriber'] ??= new \Symfony\Bundle\FrameworkBundle\EventListener\SuggestMissingPackageSubscriber()), 'onConsoleError'], 0);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [#[\Closure(name: 'mailer.envelope_listener', class: 'Symfony\\Component\\Mailer\\EventListener\\EnvelopeListener')] fn () => ($container->privates['mailer.envelope_listener'] ??= new \Symfony\Component\Mailer\EventListener\EnvelopeListener(NULL, NULL)), 'onMessage'], -255);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [#[\Closure(name: 'mailer.message_logger_listener', class: 'Symfony\\Component\\Mailer\\EventListener\\MessageLoggerListener')] fn () => ($container->privates['mailer.message_logger_listener'] ??= new \Symfony\Component\Mailer\EventListener\MessageLoggerListener()), 'onMessage'], -255);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [#[\Closure(name: 'mailer.messenger_transport_listener', class: 'Symfony\\Component\\Mailer\\EventListener\\MessengerTransportListener')] fn () => ($container->privates['mailer.messenger_transport_listener'] ??= new \Symfony\Component\Mailer\EventListener\MessengerTransportListener()), 'onMessage'], 0);
        $instance->addListener('kernel.response', [#[\Closure(name: 'esi_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\SurrogateListener')] fn () => ($container->privates['esi_listener'] ?? self::getEsiListenerService($container)), 'onKernelResponse'], 0);
        $instance->addListener('kernel.request', [#[\Closure(name: 'fragment.listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\FragmentListener')] fn () => ($container->privates['fragment.listener'] ?? self::getFragment_ListenerService($container)), 'onKernelRequest'], 48);
        $instance->addListener('kernel.request', [#[\Closure(name: 'debug.debug_handlers_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener')] fn () => ($container->privates['debug.debug_handlers_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener()), 'configure'], 2048);
        $instance->addListener('console.command', [#[\Closure(name: 'debug.debug_handlers_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\DebugHandlersListener')] fn () => ($container->privates['debug.debug_handlers_listener'] ??= new \Symfony\Component\HttpKernel\EventListener\DebugHandlersListener()), 'configure'], 2048);
        $instance->addListener('kernel.request', [#[\Closure(name: 'router_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener')] fn () => ($container->privates['router_listener'] ?? self::getRouterListenerService($container)), 'onKernelRequest'], 32);
        $instance->addListener('kernel.finish_request', [#[\Closure(name: 'router_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener')] fn () => ($container->privates['router_listener'] ?? self::getRouterListenerService($container)), 'onKernelFinishRequest'], 0);
        $instance->addListener('kernel.exception', [#[\Closure(name: 'router_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\RouterListener')] fn () => ($container->privates['router_listener'] ?? self::getRouterListenerService($container)), 'onKernelException'], -64);
        $instance->addListener('kernel.request', [#[\Closure(name: 'session_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\SessionListener')] fn () => ($container->privates['session_listener'] ?? self::getSessionListenerService($container)), 'onKernelRequest'], 128);
        $instance->addListener('kernel.response', [#[\Closure(name: 'session_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\SessionListener')] fn () => ($container->privates['session_listener'] ?? self::getSessionListenerService($container)), 'onKernelResponse'], -1000);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [#[\Closure(name: 'messenger.retry.send_failed_message_for_retry_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\SendFailedMessageForRetryListener')] fn () => ($container->privates['messenger.retry.send_failed_message_for_retry_listener'] ?? self::getMessenger_Retry_SendFailedMessageForRetryListenerService($container)), 'onMessageFailed'], 100);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [#[\Closure(name: 'messenger.failure.add_error_details_stamp_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\AddErrorDetailsStampListener')] fn () => ($container->privates['messenger.failure.add_error_details_stamp_listener'] ??= new \Symfony\Component\Messenger\EventListener\AddErrorDetailsStampListener()), 'onMessageFailed'], 200);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [#[\Closure(name: 'messenger.failure.send_failed_message_to_failure_transport_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\SendFailedMessageToFailureTransportListener')] fn () => ($container->privates['messenger.failure.send_failed_message_to_failure_transport_listener'] ?? self::getMessenger_Failure_SendFailedMessageToFailureTransportListenerService($container)), 'onMessageFailed'], -100);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerRunningEvent', [#[\Closure(name: 'messenger.listener.dispatch_pcntl_signal_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\DispatchPcntlSignalListener')] fn () => ($container->privates['messenger.listener.dispatch_pcntl_signal_listener'] ??= new \Symfony\Component\Messenger\EventListener\DispatchPcntlSignalListener()), 'onWorkerRunning'], 100);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerStartedEvent', [#[\Closure(name: 'messenger.listener.stop_worker_on_restart_signal_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\StopWorkerOnRestartSignalListener')] fn () => ($container->privates['messenger.listener.stop_worker_on_restart_signal_listener'] ?? self::getMessenger_Listener_StopWorkerOnRestartSignalListenerService($container)), 'onWorkerStarted'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerRunningEvent', [#[\Closure(name: 'messenger.listener.stop_worker_on_restart_signal_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\StopWorkerOnRestartSignalListener')] fn () => ($container->privates['messenger.listener.stop_worker_on_restart_signal_listener'] ?? self::getMessenger_Listener_StopWorkerOnRestartSignalListenerService($container)), 'onWorkerRunning'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerMessageFailedEvent', [#[\Closure(name: 'messenger.listener.stop_worker_on_stop_exception_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\StopWorkerOnCustomStopExceptionListener')] fn () => ($container->privates['messenger.listener.stop_worker_on_stop_exception_listener'] ??= new \Symfony\Component\Messenger\EventListener\StopWorkerOnCustomStopExceptionListener()), 'onMessageFailed'], 0);
        $instance->addListener('Symfony\\Component\\Messenger\\Event\\WorkerRunningEvent', [#[\Closure(name: 'messenger.listener.stop_worker_on_stop_exception_listener', class: 'Symfony\\Component\\Messenger\\EventListener\\StopWorkerOnCustomStopExceptionListener')] fn () => ($container->privates['messenger.listener.stop_worker_on_stop_exception_listener'] ??= new \Symfony\Component\Messenger\EventListener\StopWorkerOnCustomStopExceptionListener()), 'onWorkerRunning'], 0);
        $instance->addListener('kernel.view', [#[\Closure(name: 'controller.template_attribute_listener', class: 'Symfony\\Bridge\\Twig\\EventListener\\TemplateAttributeListener')] fn () => ($container->privates['controller.template_attribute_listener'] ?? self::getController_TemplateAttributeListenerService($container)), 'onKernelView'], -128);
        $instance->addListener('Symfony\\Component\\Mailer\\Event\\MessageEvent', [#[\Closure(name: 'twig.mailer.message_listener', class: 'Symfony\\Component\\Mailer\\EventListener\\MessageListener')] fn () => ($container->privates['twig.mailer.message_listener'] ?? self::getTwig_Mailer_MessageListenerService($container)), 'onMessage'], 0);
        $instance->addListener('console.command', [#[\Closure(name: 'monolog.handler.console', class: 'Symfony\\Bridge\\Monolog\\Handler\\ConsoleHandler')] fn () => ($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)), 'onCommand'], 255);
        $instance->addListener('console.terminate', [#[\Closure(name: 'monolog.handler.console', class: 'Symfony\\Bridge\\Monolog\\Handler\\ConsoleHandler')] fn () => ($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)), 'onTerminate'], -255);
        $instance->addListener('console.command', [#[\Closure(name: 'debug.dump_listener', class: 'Symfony\\Component\\HttpKernel\\EventListener\\DumpListener')] fn () => ($container->privates['debug.dump_listener'] ?? self::getDebug_DumpListenerService($container)), 'configure'], 1024);

        return $instance;
    }

    /**
     * Gets the public 'flow.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getFlow_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['flow.repository'])) {
            return $container->services['flow.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['flow.repository'])) {
            return $container->services['flow.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['flow.repository'])) {
            return $container->services['flow.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['flow.repository'])) {
            return $container->services['flow.repository'];
        }

        return $container->services['flow.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Flow\\FlowDefinition'] ?? self::getFlowDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'flow_sequence.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getFlowSequence_RepositoryService($container)
    {
        return $container->services['flow_sequence.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Flow\\Aggregate\\FlowSequence\\FlowSequenceDefinition'] ?? self::getFlowSequenceDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'flow_template.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getFlowTemplate_RepositoryService($container)
    {
        return $container->services['flow_template.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Flow\\Aggregate\\FlowTemplate\\FlowTemplateDefinition'] ?? self::getFlowTemplateDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'framework.filesystem.private' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected static function getFramework_Filesystem_PrivateService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $container->services['framework.filesystem.private'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)), 'plugins/framework');
    }

    /**
     * Gets the public 'framework.filesystem.public' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected static function getFramework_Filesystem_PublicService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $container->services['framework.filesystem.public'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($container->services['shopware.filesystem.public'] ?? self::getShopware_Filesystem_PublicService($container)), 'plugins/framework');
    }

    /**
     * Gets the public 'http_kernel' shared service.
     *
     * @return \Symfony\Component\HttpKernel\HttpKernel
     */
    protected static function getHttpKernelService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['http_kernel'])) {
            return $container->services['http_kernel'];
        }
        $b = ($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true));

        return $container->services['http_kernel'] = new \Symfony\Component\HttpKernel\HttpKernel($a, new \Symfony\Component\HttpKernel\Controller\TraceableControllerResolver(new \Symfony\Bundle\FrameworkBundle\Controller\ControllerResolver($container, ($container->privates['monolog.logger.request'] ?? self::getMonolog_Logger_RequestService($container))), $b), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), new \Symfony\Component\HttpKernel\Controller\TraceableArgumentResolver(new \Symfony\Component\HttpKernel\Controller\ArgumentResolver(new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory(), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.debug.value_resolver.Shopware\\Core\\Checkout\\Customer\\CustomerValueResolver'] ?? self::getCustomerValueResolverService($container));
            yield 1 => ($container->privates['.debug.value_resolver.Shopware\\Core\\Checkout\\Cart\\CartValueResolver'] ?? self::getCartValueResolverService($container));
            yield 2 => ($container->privates['.debug.value_resolver.Shopware\\Core\\Framework\\Routing\\QueryDataBagResolver'] ?? self::getQueryDataBagResolverService($container));
            yield 3 => ($container->privates['.debug.value_resolver.Shopware\\Core\\Framework\\Routing\\RequestDataBagResolver'] ?? self::getRequestDataBagResolverService($container));
            yield 4 => ($container->privates['.debug.value_resolver.Shopware\\Core\\Framework\\Api\\Context\\ContextValueResolver'] ?? self::getContextValueResolverService($container));
            yield 5 => ($container->privates['.debug.value_resolver.Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextValueResolver'] ?? self::getSalesChannelContextValueResolverService($container));
            yield 6 => ($container->privates['.debug.value_resolver.argument_resolver.backed_enum_resolver'] ?? self::get_Debug_ValueResolver_ArgumentResolver_BackedEnumResolverService($container));
            yield 7 => ($container->privates['.debug.value_resolver.argument_resolver.datetime'] ?? self::get_Debug_ValueResolver_ArgumentResolver_DatetimeService($container));
            yield 8 => ($container->privates['.debug.value_resolver.argument_resolver.request_attribute'] ?? self::get_Debug_ValueResolver_ArgumentResolver_RequestAttributeService($container));
            yield 9 => ($container->privates['.debug.value_resolver.Shopware\\Core\\Framework\\Api\\Response\\ResponseFactoryInterfaceValueResolver'] ?? self::getResponseFactoryInterfaceValueResolverService($container));
            yield 10 => ($container->privates['.debug.value_resolver.argument_resolver.request'] ?? self::get_Debug_ValueResolver_ArgumentResolver_RequestService($container));
            yield 11 => ($container->privates['.debug.value_resolver.argument_resolver.session'] ?? self::get_Debug_ValueResolver_ArgumentResolver_SessionService($container));
            yield 12 => ($container->privates['.debug.value_resolver.Shopware\\Core\\Framework\\Routing\\Annotation\\CriteriaValueResolver'] ?? self::getCriteriaValueResolverService($container));
            yield 13 => ($container->privates['.debug.value_resolver.argument_resolver.service'] ?? self::get_Debug_ValueResolver_ArgumentResolver_ServiceService($container));
            yield 14 => ($container->privates['.debug.value_resolver.argument_resolver.default'] ?? self::get_Debug_ValueResolver_ArgumentResolver_DefaultService($container));
            yield 15 => ($container->privates['.debug.value_resolver.argument_resolver.variadic'] ?? self::get_Debug_ValueResolver_ArgumentResolver_VariadicService($container));
            yield 16 => ($container->privates['.debug.value_resolver.argument_resolver.not_tagged_controller'] ?? self::get_Debug_ValueResolver_ArgumentResolver_NotTaggedControllerService($container));
        }, 17), new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Shopware\\Core\\Checkout\\Cart\\CartValueResolver' => ['privates', '.debug.value_resolver.Shopware\\Core\\Checkout\\Cart\\CartValueResolver', 'getCartValueResolverService', false],
            'Shopware\\Core\\Checkout\\Customer\\CustomerValueResolver' => ['privates', '.debug.value_resolver.Shopware\\Core\\Checkout\\Customer\\CustomerValueResolver', 'getCustomerValueResolverService', false],
            'Shopware\\Core\\Framework\\Api\\Context\\ContextValueResolver' => ['privates', '.debug.value_resolver.Shopware\\Core\\Framework\\Api\\Context\\ContextValueResolver', 'getContextValueResolverService', false],
            'Shopware\\Core\\Framework\\Api\\Response\\ResponseFactoryInterfaceValueResolver' => ['privates', '.debug.value_resolver.Shopware\\Core\\Framework\\Api\\Response\\ResponseFactoryInterfaceValueResolver', 'getResponseFactoryInterfaceValueResolverService', false],
            'Shopware\\Core\\Framework\\Routing\\Annotation\\CriteriaValueResolver' => ['privates', '.debug.value_resolver.Shopware\\Core\\Framework\\Routing\\Annotation\\CriteriaValueResolver', 'getCriteriaValueResolverService', false],
            'Shopware\\Core\\Framework\\Routing\\QueryDataBagResolver' => ['privates', '.debug.value_resolver.Shopware\\Core\\Framework\\Routing\\QueryDataBagResolver', 'getQueryDataBagResolverService', false],
            'Shopware\\Core\\Framework\\Routing\\RequestDataBagResolver' => ['privates', '.debug.value_resolver.Shopware\\Core\\Framework\\Routing\\RequestDataBagResolver', 'getRequestDataBagResolverService', false],
            'Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextValueResolver' => ['privates', '.debug.value_resolver.Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextValueResolver', 'getSalesChannelContextValueResolverService', false],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\BackedEnumValueResolver' => ['privates', '.debug.value_resolver.argument_resolver.backed_enum_resolver', 'get_Debug_ValueResolver_ArgumentResolver_BackedEnumResolverService', false],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DateTimeValueResolver' => ['privates', '.debug.value_resolver.argument_resolver.datetime', 'get_Debug_ValueResolver_ArgumentResolver_DatetimeService', false],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DefaultValueResolver' => ['privates', '.debug.value_resolver.argument_resolver.default', 'get_Debug_ValueResolver_ArgumentResolver_DefaultService', false],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\QueryParameterValueResolver' => ['privates', '.debug.value_resolver.argument_resolver.query_parameter_value_resolver', 'get_Debug_ValueResolver_ArgumentResolver_QueryParameterValueResolverService', false],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestAttributeValueResolver' => ['privates', '.debug.value_resolver.argument_resolver.request_attribute', 'get_Debug_ValueResolver_ArgumentResolver_RequestAttributeService', false],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver' => ['privates', '.debug.value_resolver.argument_resolver.request_payload', 'get_Debug_ValueResolver_ArgumentResolver_RequestPayloadService', false],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestValueResolver' => ['privates', '.debug.value_resolver.argument_resolver.request', 'get_Debug_ValueResolver_ArgumentResolver_RequestService', false],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\ServiceValueResolver' => ['privates', '.debug.value_resolver.argument_resolver.service', 'get_Debug_ValueResolver_ArgumentResolver_ServiceService', false],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\SessionValueResolver' => ['privates', '.debug.value_resolver.argument_resolver.session', 'get_Debug_ValueResolver_ArgumentResolver_SessionService', false],
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\VariadicValueResolver' => ['privates', '.debug.value_resolver.argument_resolver.variadic', 'get_Debug_ValueResolver_ArgumentResolver_VariadicService', false],
            'argument_resolver.not_tagged_controller' => ['privates', '.debug.value_resolver.argument_resolver.not_tagged_controller', 'get_Debug_ValueResolver_ArgumentResolver_NotTaggedControllerService', false],
        ], [
            'Shopware\\Core\\Checkout\\Cart\\CartValueResolver' => '?',
            'Shopware\\Core\\Checkout\\Customer\\CustomerValueResolver' => '?',
            'Shopware\\Core\\Framework\\Api\\Context\\ContextValueResolver' => '?',
            'Shopware\\Core\\Framework\\Api\\Response\\ResponseFactoryInterfaceValueResolver' => '?',
            'Shopware\\Core\\Framework\\Routing\\Annotation\\CriteriaValueResolver' => '?',
            'Shopware\\Core\\Framework\\Routing\\QueryDataBagResolver' => '?',
            'Shopware\\Core\\Framework\\Routing\\RequestDataBagResolver' => '?',
            'Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextValueResolver' => '?',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\BackedEnumValueResolver' => '?',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DateTimeValueResolver' => '?',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\DefaultValueResolver' => '?',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\QueryParameterValueResolver' => '?',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestAttributeValueResolver' => '?',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestPayloadValueResolver' => '?',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\RequestValueResolver' => '?',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\ServiceValueResolver' => '?',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\SessionValueResolver' => '?',
            'Symfony\\Component\\HttpKernel\\Controller\\ArgumentResolver\\VariadicValueResolver' => '?',
            'argument_resolver.not_tagged_controller' => '?',
        ])), $b), false);
    }

    /**
     * Gets the public 'import_export_file.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getImportExportFile_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['import_export_file.repository'])) {
            return $container->services['import_export_file.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['import_export_file.repository'])) {
            return $container->services['import_export_file.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['import_export_file.repository'])) {
            return $container->services['import_export_file.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['import_export_file.repository'])) {
            return $container->services['import_export_file.repository'];
        }

        return $container->services['import_export_file.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportFile\\ImportExportFileDefinition'] ?? self::getImportExportFileDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'import_export_log.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getImportExportLog_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['import_export_log.repository'])) {
            return $container->services['import_export_log.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['import_export_log.repository'])) {
            return $container->services['import_export_log.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['import_export_log.repository'])) {
            return $container->services['import_export_log.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['import_export_log.repository'])) {
            return $container->services['import_export_log.repository'];
        }

        return $container->services['import_export_log.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportLog\\ImportExportLogDefinition'] ?? self::getImportExportLogDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'import_export_profile.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getImportExportProfile_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['import_export_profile.repository'])) {
            return $container->services['import_export_profile.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['import_export_profile.repository'])) {
            return $container->services['import_export_profile.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['import_export_profile.repository'])) {
            return $container->services['import_export_profile.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['import_export_profile.repository'])) {
            return $container->services['import_export_profile.repository'];
        }

        return $container->services['import_export_profile.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\ImportExport\\ImportExportProfileDefinition'] ?? self::getImportExportProfileDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'import_export_profile_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getImportExportProfileTranslation_RepositoryService($container)
    {
        return $container->services['import_export_profile_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\ImportExport\\ImportExportProfileTranslationDefinition'] ?? self::getImportExportProfileTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'integration.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getIntegration_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['integration.repository'])) {
            return $container->services['integration.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['integration.repository'])) {
            return $container->services['integration.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['integration.repository'])) {
            return $container->services['integration.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['integration.repository'])) {
            return $container->services['integration.repository'];
        }

        return $container->services['integration.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\Integration\\IntegrationDefinition'] ?? self::getIntegrationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'integration_role.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getIntegrationRole_RepositoryService($container)
    {
        return $container->services['integration_role.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\Integration\\Aggregate\\IntegrationRole\\IntegrationRoleDefinition'] ?? self::getIntegrationRoleDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'landing_page.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getLandingPage_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['landing_page.repository'])) {
            return $container->services['landing_page.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['landing_page.repository'])) {
            return $container->services['landing_page.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['landing_page.repository'])) {
            return $container->services['landing_page.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['landing_page.repository'])) {
            return $container->services['landing_page.repository'];
        }

        return $container->services['landing_page.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\LandingPage\\LandingPageDefinition'] ?? self::getLandingPageDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'landing_page_sales_channel.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getLandingPageSalesChannel_RepositoryService($container)
    {
        return $container->services['landing_page_sales_channel.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageSalesChannel\\LandingPageSalesChannelDefinition'] ?? self::getLandingPageSalesChannelDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'landing_page_tag.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getLandingPageTag_RepositoryService($container)
    {
        return $container->services['landing_page_tag.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTag\\LandingPageTagDefinition'] ?? self::getLandingPageTagDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'landing_page_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getLandingPageTranslation_RepositoryService($container)
    {
        return $container->services['landing_page_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTranslation\\LandingPageTranslationDefinition'] ?? self::getLandingPageTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'language.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getLanguage_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['language.repository'])) {
            return $container->services['language.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['language.repository'])) {
            return $container->services['language.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['language.repository'])) {
            return $container->services['language.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['language.repository'])) {
            return $container->services['language.repository'];
        }

        return $container->services['language.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\Language\\LanguageDefinition'] ?? self::getLanguageDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'locale.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getLocale_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['locale.repository'])) {
            return $container->services['locale.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['locale.repository'])) {
            return $container->services['locale.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['locale.repository'])) {
            return $container->services['locale.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['locale.repository'])) {
            return $container->services['locale.repository'];
        }

        return $container->services['locale.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\Locale\\LocaleDefinition'] ?? self::getLocaleDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'locale_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getLocaleTranslation_RepositoryService($container)
    {
        return $container->services['locale_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\Locale\\Aggregate\\LocaleTranslation\\LocaleTranslationDefinition'] ?? self::getLocaleTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'log_entry.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getLogEntry_RepositoryService($container)
    {
        return $container->services['log_entry.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\Log\\LogEntryDefinition'] ?? self::getLogEntryDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'mail_header_footer.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getMailHeaderFooter_RepositoryService($container)
    {
        return $container->services['mail_header_footer.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooter\\MailHeaderFooterDefinition'] ?? self::getMailHeaderFooterDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'mail_header_footer_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getMailHeaderFooterTranslation_RepositoryService($container)
    {
        return $container->services['mail_header_footer_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooterTranslation\\MailHeaderFooterTranslationDefinition'] ?? self::getMailHeaderFooterTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'mail_template.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getMailTemplate_RepositoryService($container)
    {
        return $container->services['mail_template.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\MailTemplate\\MailTemplateDefinition'] ?? self::getMailTemplateDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'mail_template_media.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getMailTemplateMedia_RepositoryService($container)
    {
        return $container->services['mail_template_media.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateMedia\\MailTemplateMediaDefinition'] ?? self::getMailTemplateMediaDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'mail_template_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getMailTemplateTranslation_RepositoryService($container)
    {
        return $container->services['mail_template_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTranslation\\MailTemplateTranslationDefinition'] ?? self::getMailTemplateTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'mail_template_type.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getMailTemplateType_RepositoryService($container)
    {
        return $container->services['mail_template_type.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateType\\MailTemplateTypeDefinition'] ?? self::getMailTemplateTypeDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'mail_template_type_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getMailTemplateTypeTranslation_RepositoryService($container)
    {
        return $container->services['mail_template_type_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTypeTranslation\\MailTemplateTypeTranslationDefinition'] ?? self::getMailTemplateTypeTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'main_category.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getMainCategory_RepositoryService($container)
    {
        return $container->services['main_category.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Seo\\MainCategory\\MainCategoryDefinition'] ?? self::getMainCategoryDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'maintenance.filesystem.private' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected static function getMaintenance_Filesystem_PrivateService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $container->services['maintenance.filesystem.private'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)), 'plugins/maintenance');
    }

    /**
     * Gets the public 'maintenance.filesystem.public' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected static function getMaintenance_Filesystem_PublicService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $container->services['maintenance.filesystem.public'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($container->services['shopware.filesystem.public'] ?? self::getShopware_Filesystem_PublicService($container)), 'plugins/maintenance');
    }

    /**
     * Gets the public 'media.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getMedia_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['media.repository'])) {
            return $container->services['media.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['media.repository'])) {
            return $container->services['media.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['media.repository'])) {
            return $container->services['media.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['media.repository'])) {
            return $container->services['media.repository'];
        }

        return $container->services['media.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Media\\MediaDefinition'] ?? self::getMediaDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'media_default_folder.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getMediaDefaultFolder_RepositoryService($container)
    {
        return $container->services['media_default_folder.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaDefaultFolder\\MediaDefaultFolderDefinition'] ?? self::getMediaDefaultFolderDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'media_folder.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getMediaFolder_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['media_folder.repository'])) {
            return $container->services['media_folder.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['media_folder.repository'])) {
            return $container->services['media_folder.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['media_folder.repository'])) {
            return $container->services['media_folder.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['media_folder.repository'])) {
            return $container->services['media_folder.repository'];
        }

        return $container->services['media_folder.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolder\\MediaFolderDefinition'] ?? self::getMediaFolderDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'media_folder_configuration.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getMediaFolderConfiguration_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['media_folder_configuration.repository'])) {
            return $container->services['media_folder_configuration.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['media_folder_configuration.repository'])) {
            return $container->services['media_folder_configuration.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['media_folder_configuration.repository'])) {
            return $container->services['media_folder_configuration.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['media_folder_configuration.repository'])) {
            return $container->services['media_folder_configuration.repository'];
        }

        return $container->services['media_folder_configuration.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfiguration\\MediaFolderConfigurationDefinition'] ?? self::getMediaFolderConfigurationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'media_folder_configuration_media_thumbnail_size.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getMediaFolderConfigurationMediaThumbnailSize_RepositoryService($container)
    {
        return $container->services['media_folder_configuration_media_thumbnail_size.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfigurationMediaThumbnailSize\\MediaFolderConfigurationMediaThumbnailSizeDefinition'] ?? self::getMediaFolderConfigurationMediaThumbnailSizeDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'media_tag.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getMediaTag_RepositoryService($container)
    {
        return $container->services['media_tag.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaTag\\MediaTagDefinition'] ?? self::getMediaTagDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'media_thumbnail.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getMediaThumbnail_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['media_thumbnail.repository'])) {
            return $container->services['media_thumbnail.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['media_thumbnail.repository'])) {
            return $container->services['media_thumbnail.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['media_thumbnail.repository'])) {
            return $container->services['media_thumbnail.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['media_thumbnail.repository'])) {
            return $container->services['media_thumbnail.repository'];
        }

        return $container->services['media_thumbnail.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnail\\MediaThumbnailDefinition'] ?? self::getMediaThumbnailDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'media_thumbnail_size.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getMediaThumbnailSize_RepositoryService($container)
    {
        return $container->services['media_thumbnail_size.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnailSize\\MediaThumbnailSizeDefinition'] ?? self::getMediaThumbnailSizeDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'media_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getMediaTranslation_RepositoryService($container)
    {
        return $container->services['media_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaTranslation\\MediaTranslationDefinition'] ?? self::getMediaTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'messenger.default_bus' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Messenger\MessageBus
     */
    protected static function getMessenger_DefaultBusService($container)
    {
        $a = ($container->privates['messenger.bus.default'] ?? self::getMessenger_Bus_DefaultService($container));

        if (isset($container->services['messenger.default_bus'])) {
            return $container->services['messenger.default_bus'];
        }

        return $container->services['messenger.default_bus'] = new \Shopware\Core\Framework\Adapter\Messenger\MessageBus($a, ['Shopware\\Core\\Framework\\MessageQueue\\AsyncMessageInterface' => 'async', 'Shopware\\Core\\Framework\\MessageQueue\\LowPriorityMessageInterface' => 'low_priority', 'Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage' => 'async']);
    }

    /**
     * Gets the public 'monolog.logger.business_events' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected static function getMonolog_Logger_BusinessEventsService($container)
    {
        $container->services['monolog.logger.business_events'] = $instance = new \Symfony\Bridge\Monolog\Logger('business_events');

        $instance->pushHandler(($container->privates['monolog.handler.business_event_handler_buffer'] ?? self::getMonolog_Handler_BusinessEventHandlerBufferService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $instance->pushHandler(($container->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? self::getExcludeFlowEventHandlerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'monolog.logger.elasticsearch' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected static function getMonolog_Logger_ElasticsearchService($container)
    {
        $container->services['monolog.logger.elasticsearch'] = $instance = new \Symfony\Bridge\Monolog\Logger('elasticsearch');

        $instance->pushHandler(($container->privates['monolog.handler.elasticsearch'] ?? self::getMonolog_Handler_ElasticsearchService($container)));
        $instance->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $instance->pushHandler(($container->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? self::getExcludeFlowEventHandlerService($container)));

        return $instance;
    }

    /**
     * Gets the public 'newsletter_recipient.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getNewsletterRecipient_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['newsletter_recipient.repository'])) {
            return $container->services['newsletter_recipient.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['newsletter_recipient.repository'])) {
            return $container->services['newsletter_recipient.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['newsletter_recipient.repository'])) {
            return $container->services['newsletter_recipient.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['newsletter_recipient.repository'])) {
            return $container->services['newsletter_recipient.repository'];
        }

        return $container->services['newsletter_recipient.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipient\\NewsletterRecipientDefinition'] ?? self::getNewsletterRecipientDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'newsletter_recipient_tag.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getNewsletterRecipientTag_RepositoryService($container)
    {
        return $container->services['newsletter_recipient_tag.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipientTag\\NewsletterRecipientTagDefinition'] ?? self::getNewsletterRecipientTagDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'notification.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getNotification_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['notification.repository'])) {
            return $container->services['notification.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['notification.repository'])) {
            return $container->services['notification.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['notification.repository'])) {
            return $container->services['notification.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['notification.repository'])) {
            return $container->services['notification.repository'];
        }

        return $container->services['notification.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Administration\\Notification\\NotificationDefinition'] ?? self::getNotificationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'number_range.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getNumberRange_RepositoryService($container)
    {
        return $container->services['number_range.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\NumberRange\\NumberRangeDefinition'] ?? self::getNumberRangeDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'number_range_sales_channel.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getNumberRangeSalesChannel_RepositoryService($container)
    {
        return $container->services['number_range_sales_channel.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeSalesChannel\\NumberRangeSalesChannelDefinition'] ?? self::getNumberRangeSalesChannelDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'number_range_state.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getNumberRangeState_RepositoryService($container)
    {
        return $container->services['number_range_state.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeState\\NumberRangeStateDefinition'] ?? self::getNumberRangeStateDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'number_range_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getNumberRangeTranslation_RepositoryService($container)
    {
        return $container->services['number_range_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTranslation\\NumberRangeTranslationDefinition'] ?? self::getNumberRangeTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'number_range_type.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getNumberRangeType_RepositoryService($container)
    {
        return $container->services['number_range_type.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeType\\NumberRangeTypeDefinition'] ?? self::getNumberRangeTypeDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'number_range_type_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getNumberRangeTypeTranslation_RepositoryService($container)
    {
        return $container->services['number_range_type_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTypeTranslation\\NumberRangeTypeTranslationDefinition'] ?? self::getNumberRangeTypeTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'order.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getOrder_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['order.repository'])) {
            return $container->services['order.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['order.repository'])) {
            return $container->services['order.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['order.repository'])) {
            return $container->services['order.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['order.repository'])) {
            return $container->services['order.repository'];
        }

        return $container->services['order.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Order\\OrderDefinition'] ?? self::getOrderDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'order_address.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getOrderAddress_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['order_address.repository'])) {
            return $container->services['order_address.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['order_address.repository'])) {
            return $container->services['order_address.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['order_address.repository'])) {
            return $container->services['order_address.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['order_address.repository'])) {
            return $container->services['order_address.repository'];
        }

        return $container->services['order_address.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderAddress\\OrderAddressDefinition'] ?? self::getOrderAddressDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'order_customer.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getOrderCustomer_RepositoryService($container)
    {
        return $container->services['order_customer.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderCustomer\\OrderCustomerDefinition'] ?? self::getOrderCustomerDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'order_delivery.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getOrderDelivery_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['order_delivery.repository'])) {
            return $container->services['order_delivery.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['order_delivery.repository'])) {
            return $container->services['order_delivery.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['order_delivery.repository'])) {
            return $container->services['order_delivery.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['order_delivery.repository'])) {
            return $container->services['order_delivery.repository'];
        }

        return $container->services['order_delivery.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDelivery\\OrderDeliveryDefinition'] ?? self::getOrderDeliveryDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'order_delivery_position.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getOrderDeliveryPosition_RepositoryService($container)
    {
        return $container->services['order_delivery_position.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDeliveryPosition\\OrderDeliveryPositionDefinition'] ?? self::getOrderDeliveryPositionDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'order_line_item.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getOrderLineItem_RepositoryService($container)
    {
        return $container->services['order_line_item.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItem\\OrderLineItemDefinition'] ?? self::getOrderLineItemDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'order_line_item_download.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getOrderLineItemDownload_RepositoryService($container)
    {
        return $container->services['order_line_item_download.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItemDownload\\OrderLineItemDownloadDefinition'] ?? self::getOrderLineItemDownloadDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'order_tag.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getOrderTag_RepositoryService($container)
    {
        return $container->services['order_tag.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTag\\OrderTagDefinition'] ?? self::getOrderTagDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'order_transaction.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getOrderTransaction_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['order_transaction.repository'])) {
            return $container->services['order_transaction.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['order_transaction.repository'])) {
            return $container->services['order_transaction.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['order_transaction.repository'])) {
            return $container->services['order_transaction.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['order_transaction.repository'])) {
            return $container->services['order_transaction.repository'];
        }

        return $container->services['order_transaction.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionDefinition'] ?? self::getOrderTransactionDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'order_transaction_capture.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getOrderTransactionCapture_RepositoryService($container)
    {
        return $container->services['order_transaction_capture.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCapture\\OrderTransactionCaptureDefinition'] ?? self::getOrderTransactionCaptureDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'order_transaction_capture_refund.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getOrderTransactionCaptureRefund_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['order_transaction_capture_refund.repository'])) {
            return $container->services['order_transaction_capture_refund.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['order_transaction_capture_refund.repository'])) {
            return $container->services['order_transaction_capture_refund.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['order_transaction_capture_refund.repository'])) {
            return $container->services['order_transaction_capture_refund.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['order_transaction_capture_refund.repository'])) {
            return $container->services['order_transaction_capture_refund.repository'];
        }

        return $container->services['order_transaction_capture_refund.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefund\\OrderTransactionCaptureRefundDefinition'] ?? self::getOrderTransactionCaptureRefundDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'order_transaction_capture_refund_position.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getOrderTransactionCaptureRefundPosition_RepositoryService($container)
    {
        return $container->services['order_transaction_capture_refund_position.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefundPosition\\OrderTransactionCaptureRefundPositionDefinition'] ?? self::getOrderTransactionCaptureRefundPositionDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'payment_method.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getPaymentMethod_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['payment_method.repository'])) {
            return $container->services['payment_method.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['payment_method.repository'])) {
            return $container->services['payment_method.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['payment_method.repository'])) {
            return $container->services['payment_method.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['payment_method.repository'])) {
            return $container->services['payment_method.repository'];
        }

        return $container->services['payment_method.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Payment\\PaymentMethodDefinition'] ?? self::getPaymentMethodDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'payment_method_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getPaymentMethodTranslation_RepositoryService($container)
    {
        return $container->services['payment_method_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Payment\\Aggregate\\PaymentMethodTranslation\\PaymentMethodTranslationDefinition'] ?? self::getPaymentMethodTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'plugin.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getPlugin_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['plugin.repository'])) {
            return $container->services['plugin.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['plugin.repository'])) {
            return $container->services['plugin.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['plugin.repository'])) {
            return $container->services['plugin.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['plugin.repository'])) {
            return $container->services['plugin.repository'];
        }

        return $container->services['plugin.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\Plugin\\PluginDefinition'] ?? self::getPluginDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'plugin_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getPluginTranslation_RepositoryService($container)
    {
        return $container->services['plugin_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\Plugin\\Aggregate\\PluginTranslation\\PluginTranslationDefinition'] ?? self::getPluginTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProduct_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['product.repository'])) {
            return $container->services['product.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['product.repository'])) {
            return $container->services['product.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['product.repository'])) {
            return $container->services['product.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['product.repository'])) {
            return $container->services['product.repository'];
        }

        return $container->services['product.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? self::getProductDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_category.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductCategory_RepositoryService($container)
    {
        return $container->services['product_category.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategory\\ProductCategoryDefinition'] ?? self::getProductCategoryDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_category_tree.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductCategoryTree_RepositoryService($container)
    {
        return $container->services['product_category_tree.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategoryTree\\ProductCategoryTreeDefinition'] ?? self::getProductCategoryTreeDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_configurator_setting.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductConfiguratorSetting_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['product_configurator_setting.repository'])) {
            return $container->services['product_configurator_setting.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['product_configurator_setting.repository'])) {
            return $container->services['product_configurator_setting.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['product_configurator_setting.repository'])) {
            return $container->services['product_configurator_setting.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['product_configurator_setting.repository'])) {
            return $container->services['product_configurator_setting.repository'];
        }

        return $container->services['product_configurator_setting.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductConfiguratorSetting\\ProductConfiguratorSettingDefinition'] ?? self::getProductConfiguratorSettingDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_cross_selling.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductCrossSelling_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['product_cross_selling.repository'])) {
            return $container->services['product_cross_selling.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['product_cross_selling.repository'])) {
            return $container->services['product_cross_selling.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['product_cross_selling.repository'])) {
            return $container->services['product_cross_selling.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['product_cross_selling.repository'])) {
            return $container->services['product_cross_selling.repository'];
        }

        return $container->services['product_cross_selling.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSelling\\ProductCrossSellingDefinition'] ?? self::getProductCrossSellingDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_cross_selling_assigned_products.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductCrossSellingAssignedProducts_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['product_cross_selling_assigned_products.repository'])) {
            return $container->services['product_cross_selling_assigned_products.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['product_cross_selling_assigned_products.repository'])) {
            return $container->services['product_cross_selling_assigned_products.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['product_cross_selling_assigned_products.repository'])) {
            return $container->services['product_cross_selling_assigned_products.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['product_cross_selling_assigned_products.repository'])) {
            return $container->services['product_cross_selling_assigned_products.repository'];
        }

        return $container->services['product_cross_selling_assigned_products.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingAssignedProducts\\ProductCrossSellingAssignedProductsDefinition'] ?? self::getProductCrossSellingAssignedProductsDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_cross_selling_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductCrossSellingTranslation_RepositoryService($container)
    {
        return $container->services['product_cross_selling_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingTranslation\\ProductCrossSellingTranslationDefinition'] ?? self::getProductCrossSellingTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_custom_field_set.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductCustomFieldSet_RepositoryService($container)
    {
        return $container->services['product_custom_field_set.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCustomFieldSet\\ProductCustomFieldSetDefinition'] ?? self::getProductCustomFieldSetDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_download.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductDownload_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['product_download.repository'])) {
            return $container->services['product_download.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['product_download.repository'])) {
            return $container->services['product_download.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['product_download.repository'])) {
            return $container->services['product_download.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['product_download.repository'])) {
            return $container->services['product_download.repository'];
        }

        return $container->services['product_download.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductDownload\\ProductDownloadDefinition'] ?? self::getProductDownloadDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_export.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductExport_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['product_export.repository'])) {
            return $container->services['product_export.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['product_export.repository'])) {
            return $container->services['product_export.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['product_export.repository'])) {
            return $container->services['product_export.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['product_export.repository'])) {
            return $container->services['product_export.repository'];
        }

        return $container->services['product_export.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\ProductExport\\ProductExportDefinition'] ?? self::getProductExportDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_feature_set.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductFeatureSet_RepositoryService($container)
    {
        return $container->services['product_feature_set.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSet\\ProductFeatureSetDefinition'] ?? self::getProductFeatureSetDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_feature_set_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductFeatureSetTranslation_RepositoryService($container)
    {
        return $container->services['product_feature_set_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSetTranslation\\ProductFeatureSetTranslationDefinition'] ?? self::getProductFeatureSetTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_keyword_dictionary.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductKeywordDictionary_RepositoryService($container)
    {
        return $container->services['product_keyword_dictionary.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductKeywordDictionary\\ProductKeywordDictionaryDefinition'] ?? self::getProductKeywordDictionaryDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_manufacturer.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductManufacturer_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['product_manufacturer.repository'])) {
            return $container->services['product_manufacturer.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['product_manufacturer.repository'])) {
            return $container->services['product_manufacturer.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['product_manufacturer.repository'])) {
            return $container->services['product_manufacturer.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['product_manufacturer.repository'])) {
            return $container->services['product_manufacturer.repository'];
        }

        return $container->services['product_manufacturer.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturer\\ProductManufacturerDefinition'] ?? self::getProductManufacturerDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_manufacturer_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductManufacturerTranslation_RepositoryService($container)
    {
        return $container->services['product_manufacturer_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturerTranslation\\ProductManufacturerTranslationDefinition'] ?? self::getProductManufacturerTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_media.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductMedia_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['product_media.repository'])) {
            return $container->services['product_media.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['product_media.repository'])) {
            return $container->services['product_media.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['product_media.repository'])) {
            return $container->services['product_media.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['product_media.repository'])) {
            return $container->services['product_media.repository'];
        }

        return $container->services['product_media.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductMedia\\ProductMediaDefinition'] ?? self::getProductMediaDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_option.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductOption_RepositoryService($container)
    {
        return $container->services['product_option.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductOption\\ProductOptionDefinition'] ?? self::getProductOptionDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_price.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductPrice_RepositoryService($container)
    {
        return $container->services['product_price.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductPrice\\ProductPriceDefinition'] ?? self::getProductPriceDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_property.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductProperty_RepositoryService($container)
    {
        return $container->services['product_property.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductProperty\\ProductPropertyDefinition'] ?? self::getProductPropertyDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_review.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductReview_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['product_review.repository'])) {
            return $container->services['product_review.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['product_review.repository'])) {
            return $container->services['product_review.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['product_review.repository'])) {
            return $container->services['product_review.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['product_review.repository'])) {
            return $container->services['product_review.repository'];
        }

        return $container->services['product_review.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductReview\\ProductReviewDefinition'] ?? self::getProductReviewDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_search_config.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductSearchConfig_RepositoryService($container)
    {
        return $container->services['product_search_config.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfig\\ProductSearchConfigDefinition'] ?? self::getProductSearchConfigDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_search_config_field.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductSearchConfigField_RepositoryService($container)
    {
        return $container->services['product_search_config_field.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfigField\\ProductSearchConfigFieldDefinition'] ?? self::getProductSearchConfigFieldDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_search_keyword.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductSearchKeyword_RepositoryService($container)
    {
        return $container->services['product_search_keyword.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchKeyword\\ProductSearchKeywordDefinition'] ?? self::getProductSearchKeywordDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_sorting.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductSorting_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['product_sorting.repository'])) {
            return $container->services['product_sorting.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['product_sorting.repository'])) {
            return $container->services['product_sorting.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['product_sorting.repository'])) {
            return $container->services['product_sorting.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['product_sorting.repository'])) {
            return $container->services['product_sorting.repository'];
        }

        return $container->services['product_sorting.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingDefinition'] ?? self::getProductSortingDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_sorting_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductSortingTranslation_RepositoryService($container)
    {
        return $container->services['product_sorting_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingTranslationDefinition'] ?? self::getProductSortingTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_stream.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductStream_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['product_stream.repository'])) {
            return $container->services['product_stream.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['product_stream.repository'])) {
            return $container->services['product_stream.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['product_stream.repository'])) {
            return $container->services['product_stream.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['product_stream.repository'])) {
            return $container->services['product_stream.repository'];
        }

        return $container->services['product_stream.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\ProductStream\\ProductStreamDefinition'] ?? self::getProductStreamDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_stream_filter.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductStreamFilter_RepositoryService($container)
    {
        return $container->services['product_stream_filter.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamFilter\\ProductStreamFilterDefinition'] ?? self::getProductStreamFilterDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_stream_mapping.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductStreamMapping_RepositoryService($container)
    {
        return $container->services['product_stream_mapping.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductStreamMapping\\ProductStreamMappingDefinition'] ?? self::getProductStreamMappingDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_stream_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductStreamTranslation_RepositoryService($container)
    {
        return $container->services['product_stream_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamTranslation\\ProductStreamTranslationDefinition'] ?? self::getProductStreamTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_tag.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductTag_RepositoryService($container)
    {
        return $container->services['product_tag.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductTag\\ProductTagDefinition'] ?? self::getProductTagDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductTranslation_RepositoryService($container)
    {
        return $container->services['product_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductTranslation\\ProductTranslationDefinition'] ?? self::getProductTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'product_visibility.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getProductVisibility_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['product_visibility.repository'])) {
            return $container->services['product_visibility.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['product_visibility.repository'])) {
            return $container->services['product_visibility.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['product_visibility.repository'])) {
            return $container->services['product_visibility.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['product_visibility.repository'])) {
            return $container->services['product_visibility.repository'];
        }

        return $container->services['product_visibility.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductVisibility\\ProductVisibilityDefinition'] ?? self::getProductVisibilityDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'profiling.filesystem.private' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected static function getProfiling_Filesystem_PrivateService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $container->services['profiling.filesystem.private'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)), 'plugins/profiling');
    }

    /**
     * Gets the public 'profiling.filesystem.public' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected static function getProfiling_Filesystem_PublicService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $container->services['profiling.filesystem.public'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($container->services['shopware.filesystem.public'] ?? self::getShopware_Filesystem_PublicService($container)), 'plugins/profiling');
    }

    /**
     * Gets the public 'promotion.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getPromotion_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['promotion.repository'])) {
            return $container->services['promotion.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['promotion.repository'])) {
            return $container->services['promotion.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['promotion.repository'])) {
            return $container->services['promotion.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['promotion.repository'])) {
            return $container->services['promotion.repository'];
        }

        return $container->services['promotion.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Promotion\\PromotionDefinition'] ?? self::getPromotionDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'promotion_cart_rule.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getPromotionCartRule_RepositoryService($container)
    {
        return $container->services['promotion_cart_rule.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionCartRule\\PromotionCartRuleDefinition'] ?? self::getPromotionCartRuleDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'promotion_discount.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getPromotionDiscount_RepositoryService($container)
    {
        return $container->services['promotion_discount.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscount\\PromotionDiscountDefinition'] ?? self::getPromotionDiscountDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'promotion_discount_prices.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getPromotionDiscountPrices_RepositoryService($container)
    {
        return $container->services['promotion_discount_prices.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountPrice\\PromotionDiscountPriceDefinition'] ?? self::getPromotionDiscountPriceDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'promotion_discount_rule.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getPromotionDiscountRule_RepositoryService($container)
    {
        return $container->services['promotion_discount_rule.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountRule\\PromotionDiscountRuleDefinition'] ?? self::getPromotionDiscountRuleDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'promotion_individual_code.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getPromotionIndividualCode_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['promotion_individual_code.repository'])) {
            return $container->services['promotion_individual_code.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['promotion_individual_code.repository'])) {
            return $container->services['promotion_individual_code.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['promotion_individual_code.repository'])) {
            return $container->services['promotion_individual_code.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['promotion_individual_code.repository'])) {
            return $container->services['promotion_individual_code.repository'];
        }

        return $container->services['promotion_individual_code.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionIndividualCode\\PromotionIndividualCodeDefinition'] ?? self::getPromotionIndividualCodeDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'promotion_order_rule.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getPromotionOrderRule_RepositoryService($container)
    {
        return $container->services['promotion_order_rule.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionOrderRule\\PromotionOrderRuleDefinition'] ?? self::getPromotionOrderRuleDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'promotion_persona_customer.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getPromotionPersonaCustomer_RepositoryService($container)
    {
        return $container->services['promotion_persona_customer.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaCustomer\\PromotionPersonaCustomerDefinition'] ?? self::getPromotionPersonaCustomerDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'promotion_persona_rule.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getPromotionPersonaRule_RepositoryService($container)
    {
        return $container->services['promotion_persona_rule.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaRule\\PromotionPersonaRuleDefinition'] ?? self::getPromotionPersonaRuleDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'promotion_sales_channel.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getPromotionSalesChannel_RepositoryService($container)
    {
        return $container->services['promotion_sales_channel.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSalesChannel\\PromotionSalesChannelDefinition'] ?? self::getPromotionSalesChannelDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'promotion_setgroup.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getPromotionSetgroup_RepositoryService($container)
    {
        return $container->services['promotion_setgroup.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroup\\PromotionSetGroupDefinition'] ?? self::getPromotionSetGroupDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'promotion_setgroup_rule.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getPromotionSetgroupRule_RepositoryService($container)
    {
        return $container->services['promotion_setgroup_rule.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroupRule\\PromotionSetGroupRuleDefinition'] ?? self::getPromotionSetGroupRuleDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'promotion_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getPromotionTranslation_RepositoryService($container)
    {
        return $container->services['promotion_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionTranslation\\PromotionTranslationDefinition'] ?? self::getPromotionTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'property_group.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getPropertyGroup_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['property_group.repository'])) {
            return $container->services['property_group.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['property_group.repository'])) {
            return $container->services['property_group.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['property_group.repository'])) {
            return $container->services['property_group.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['property_group.repository'])) {
            return $container->services['property_group.repository'];
        }

        return $container->services['property_group.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Property\\PropertyGroupDefinition'] ?? self::getPropertyGroupDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'property_group_option.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getPropertyGroupOption_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['property_group_option.repository'])) {
            return $container->services['property_group_option.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['property_group_option.repository'])) {
            return $container->services['property_group_option.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['property_group_option.repository'])) {
            return $container->services['property_group_option.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['property_group_option.repository'])) {
            return $container->services['property_group_option.repository'];
        }

        return $container->services['property_group_option.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOption\\PropertyGroupOptionDefinition'] ?? self::getPropertyGroupOptionDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'property_group_option_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getPropertyGroupOptionTranslation_RepositoryService($container)
    {
        return $container->services['property_group_option_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOptionTranslation\\PropertyGroupOptionTranslationDefinition'] ?? self::getPropertyGroupOptionTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'property_group_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getPropertyGroupTranslation_RepositoryService($container)
    {
        return $container->services['property_group_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupTranslation\\PropertyGroupTranslationDefinition'] ?? self::getPropertyGroupTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'request_stack' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\RequestStack
     */
    protected static function getRequestStackService($container)
    {
        return $container->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack();
    }

    /**
     * Gets the public 'router' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Routing\Router
     */
    protected static function getRouterService($container)
    {
        return $container->services['router'] = new \Shopware\Storefront\Framework\Routing\Router(($container->privates['router.default'] ?? self::getRouter_DefaultService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the public 'routing.loader' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader
     */
    protected static function getRouting_LoaderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/config/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/config/Loader/Loader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/config/Loader/DelegatingLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Routing/DelegatingLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/config/Loader/LoaderResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/config/Loader/LoaderResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Route/ApiRouteLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/config/Loader/FileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/Configurator/Traits/HostTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/Configurator/Traits/LocalizedRouteTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/Configurator/Traits/PrefixTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/XmlFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/config/FileLocatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/config/FileLocator.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Config/FileLocator.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/YamlFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/PhpFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/GlobFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/DirectoryLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/ObjectLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/ContainerLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/AnnotationClassLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Routing/AnnotatedRouteControllerLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/AnnotationFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/AnnotationDirectoryLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/config/Loader/DirectoryAwareLoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/routing/Loader/Psr4DirectoryLoader.php';

        $a = new \Symfony\Component\Config\Loader\LoaderResolver();

        $b = new \Symfony\Component\HttpKernel\Config\FileLocator(($container->services['kernel'] ?? $container->get('kernel', 1)));
        $c = new \Symfony\Bundle\FrameworkBundle\Routing\AnnotatedRouteControllerLoader(($container->privates['annotations.cached_reader'] ?? self::getAnnotations_CachedReaderService($container)), 'dev');

        $a->addLoader(new \Shopware\Core\Framework\Api\Route\ApiRouteLoader(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container))));
        $a->addLoader(new \Symfony\Component\Routing\Loader\XmlFileLoader($b, 'dev'));
        $a->addLoader(new \Symfony\Component\Routing\Loader\YamlFileLoader($b, 'dev'));
        $a->addLoader(new \Symfony\Component\Routing\Loader\PhpFileLoader($b, 'dev'));
        $a->addLoader(new \Symfony\Component\Routing\Loader\GlobFileLoader($b, 'dev'));
        $a->addLoader(new \Symfony\Component\Routing\Loader\DirectoryLoader($b, 'dev'));
        $a->addLoader(new \Symfony\Component\Routing\Loader\ContainerLoader(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'kernel' => ['services', 'kernel', 'getKernelService', false],
        ], [
            'kernel' => 'Shopware\\Core\\Kernel',
        ]), 'dev'));
        $a->addLoader($c);
        $a->addLoader(new \Symfony\Component\Routing\Loader\AnnotationDirectoryLoader($b, $c));
        $a->addLoader(new \Symfony\Component\Routing\Loader\AnnotationFileLoader($b, $c));
        $a->addLoader(new \Symfony\Component\Routing\Loader\Psr4DirectoryLoader($b));

        return $container->services['routing.loader'] = new \Symfony\Bundle\FrameworkBundle\Routing\DelegatingLoader($a, ['utf8' => true], []);
    }

    /**
     * Gets the public 'rule.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getRule_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['rule.repository'])) {
            return $container->services['rule.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['rule.repository'])) {
            return $container->services['rule.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['rule.repository'])) {
            return $container->services['rule.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['rule.repository'])) {
            return $container->services['rule.repository'];
        }

        return $container->services['rule.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Rule\\RuleDefinition'] ?? self::getRuleDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'rule_condition.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getRuleCondition_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['rule_condition.repository'])) {
            return $container->services['rule_condition.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['rule_condition.repository'])) {
            return $container->services['rule_condition.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['rule_condition.repository'])) {
            return $container->services['rule_condition.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['rule_condition.repository'])) {
            return $container->services['rule_condition.repository'];
        }

        return $container->services['rule_condition.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Rule\\Aggregate\\RuleCondition\\RuleConditionDefinition'] ?? self::getRuleConditionDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'rule_tag.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getRuleTag_RepositoryService($container)
    {
        return $container->services['rule_tag.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Rule\\Aggregate\\RuleTag\\RuleTagDefinition'] ?? self::getRuleTagDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel.category.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected static function getSalesChannel_Category_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['sales_channel.category.repository'])) {
            return $container->services['sales_channel.category.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['sales_channel.category.repository'])) {
            return $container->services['sales_channel.category.repository'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['sales_channel.category.repository'])) {
            return $container->services['sales_channel.category.repository'];
        }

        return $container->services['sales_channel.category.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($container->services['Shopware\\Core\\Content\\Category\\SalesChannel\\SalesChannelCategoryDefinition'] ?? self::getSalesChannelCategoryDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel.country.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected static function getSalesChannel_Country_RepositoryService($container)
    {
        return $container->services['sales_channel.country.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($container->services['Shopware\\Core\\System\\Country\\SalesChannel\\SalesChannelCountryDefinition'] ?? self::getSalesChannelCountryDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel.country_state.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected static function getSalesChannel_CountryState_RepositoryService($container)
    {
        return $container->services['sales_channel.country_state.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($container->services['Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\SalesChannel\\SalesChannelCountryStateDefinition'] ?? self::getSalesChannelCountryStateDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel.currency.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected static function getSalesChannel_Currency_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['sales_channel.currency.repository'])) {
            return $container->services['sales_channel.currency.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['sales_channel.currency.repository'])) {
            return $container->services['sales_channel.currency.repository'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['sales_channel.currency.repository'])) {
            return $container->services['sales_channel.currency.repository'];
        }

        return $container->services['sales_channel.currency.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($container->services['Shopware\\Core\\System\\Currency\\SalesChannel\\SalesChannelCurrencyDefinition'] ?? self::getSalesChannelCurrencyDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel.landing_page.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected static function getSalesChannel_LandingPage_RepositoryService($container)
    {
        return $container->services['sales_channel.landing_page.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($container->services['Shopware\\Core\\Content\\LandingPage\\SalesChannel\\SalesChannelLandingPageDefinition'] ?? self::getSalesChannelLandingPageDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel.language.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected static function getSalesChannel_Language_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['sales_channel.language.repository'])) {
            return $container->services['sales_channel.language.repository'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['sales_channel.language.repository'])) {
            return $container->services['sales_channel.language.repository'];
        }

        return $container->services['sales_channel.language.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($container->services['Shopware\\Core\\System\\Language\\SalesChannel\\SalesChannelLanguageDefinition'] ?? self::getSalesChannelLanguageDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), $b, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel.main_category.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected static function getSalesChannel_MainCategory_RepositoryService($container)
    {
        return $container->services['sales_channel.main_category.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($container->services['Shopware\\Core\\Content\\Seo\\MainCategory\\SalesChannel\\SalesChannelMainCategoryDefinition'] ?? self::getSalesChannelMainCategoryDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel.newsletter_recipient.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected static function getSalesChannel_NewsletterRecipient_RepositoryService($container)
    {
        return $container->services['sales_channel.newsletter_recipient.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($container->services['Shopware\\Core\\Content\\Newsletter\\SalesChannel\\SalesChannelNewsletterRecipientDefinition'] ?? self::getSalesChannelNewsletterRecipientDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel.payment_method.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected static function getSalesChannel_PaymentMethod_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['sales_channel.payment_method.repository'])) {
            return $container->services['sales_channel.payment_method.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['sales_channel.payment_method.repository'])) {
            return $container->services['sales_channel.payment_method.repository'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['sales_channel.payment_method.repository'])) {
            return $container->services['sales_channel.payment_method.repository'];
        }

        return $container->services['sales_channel.payment_method.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($container->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SalesChannelPaymentMethodDefinition'] ?? self::getSalesChannelPaymentMethodDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel.product.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected static function getSalesChannel_Product_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['sales_channel.product.repository'])) {
            return $container->services['sales_channel.product.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['sales_channel.product.repository'])) {
            return $container->services['sales_channel.product.repository'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['sales_channel.product.repository'])) {
            return $container->services['sales_channel.product.repository'];
        }

        return $container->services['sales_channel.product.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\SalesChannelProductDefinition'] ?? self::getSalesChannelProductDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getSalesChannel_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['sales_channel.repository'])) {
            return $container->services['sales_channel.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['sales_channel.repository'])) {
            return $container->services['sales_channel.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['sales_channel.repository'])) {
            return $container->services['sales_channel.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['sales_channel.repository'])) {
            return $container->services['sales_channel.repository'];
        }

        return $container->services['sales_channel.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\SalesChannel\\SalesChannelDefinition'] ?? self::getSalesChannelDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel.salutation.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected static function getSalesChannel_Salutation_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['sales_channel.salutation.repository'])) {
            return $container->services['sales_channel.salutation.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['sales_channel.salutation.repository'])) {
            return $container->services['sales_channel.salutation.repository'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['sales_channel.salutation.repository'])) {
            return $container->services['sales_channel.salutation.repository'];
        }

        return $container->services['sales_channel.salutation.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($container->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\SalesChannelSalutationDefinition'] ?? self::getSalesChannelSalutationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel.seo_url.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected static function getSalesChannel_SeoUrl_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['sales_channel.seo_url.repository'])) {
            return $container->services['sales_channel.seo_url.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['sales_channel.seo_url.repository'])) {
            return $container->services['sales_channel.seo_url.repository'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['sales_channel.seo_url.repository'])) {
            return $container->services['sales_channel.seo_url.repository'];
        }

        return $container->services['sales_channel.seo_url.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($container->services['Shopware\\Core\\Content\\Seo\\SeoUrl\\SalesChannel\\SalesChannelSeoUrlDefinition'] ?? self::getSalesChannelSeoUrlDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel.shipping_method.repository' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository
     */
    protected static function getSalesChannel_ShippingMethod_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['sales_channel.shipping_method.repository'])) {
            return $container->services['sales_channel.shipping_method.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['sales_channel.shipping_method.repository'])) {
            return $container->services['sales_channel.shipping_method.repository'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['sales_channel.shipping_method.repository'])) {
            return $container->services['sales_channel.shipping_method.repository'];
        }

        return $container->services['sales_channel.shipping_method.repository'] = new \Shopware\Core\System\SalesChannel\Entity\SalesChannelRepository(($container->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SalesChannelShippingMethodDefinition'] ?? self::getSalesChannelShippingMethodDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel_analytics.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getSalesChannelAnalytics_RepositoryService($container)
    {
        return $container->services['sales_channel_analytics.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelAnalytics\\SalesChannelAnalyticsDefinition'] ?? self::getSalesChannelAnalyticsDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel_country.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getSalesChannelCountry_RepositoryService($container)
    {
        return $container->services['sales_channel_country.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCountry\\SalesChannelCountryDefinition'] ?? self::getSalesChannelCountryDefinition2Service($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel_currency.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getSalesChannelCurrency_RepositoryService($container)
    {
        return $container->services['sales_channel_currency.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCurrency\\SalesChannelCurrencyDefinition'] ?? self::getSalesChannelCurrencyDefinition2Service($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Administration\Notification\NotificationDefinition' shared service.
     *
     * @return \Shopware\Administration\Notification\NotificationDefinition
     */
    protected static function getNotificationDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Administration\\Notification\\NotificationDefinition'] = $instance = new \Shopware\Administration\Notification\NotificationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Administration\Snippet\AppAdministrationSnippetDefinition' shared service.
     *
     * @return \Shopware\Administration\Snippet\AppAdministrationSnippetDefinition
     */
    protected static function getAppAdministrationSnippetDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Snippet/AppAdministrationSnippetDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Administration\\Snippet\\AppAdministrationSnippetDefinition'] = $instance = new \Shopware\Administration\Snippet\AppAdministrationSnippetDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Customer\Aggregate\CustomerAddress\CustomerAddressDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerAddress\CustomerAddressDefinition
     */
    protected static function getCustomerAddressDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerAddress\\CustomerAddressDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerAddress\CustomerAddressDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupRegistrationSalesChannel\CustomerGroupRegistrationSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupRegistrationSalesChannel\CustomerGroupRegistrationSalesChannelDefinition
     */
    protected static function getCustomerGroupRegistrationSalesChannelDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerGroupRegistrationSalesChannel/CustomerGroupRegistrationSalesChannelDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupRegistrationSalesChannel\\CustomerGroupRegistrationSalesChannelDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupRegistrationSalesChannel\CustomerGroupRegistrationSalesChannelDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupTranslation\CustomerGroupTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupTranslation\CustomerGroupTranslationDefinition
     */
    protected static function getCustomerGroupTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerGroupTranslation/CustomerGroupTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupTranslation\\CustomerGroupTranslationDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroupTranslation\CustomerGroupTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Customer\Aggregate\CustomerGroup\CustomerGroupDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroup\CustomerGroupDefinition
     */
    protected static function getCustomerGroupDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroup\\CustomerGroupDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerGroup\CustomerGroupDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Customer\Aggregate\CustomerRecovery\CustomerRecoveryDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerRecovery\CustomerRecoveryDefinition
     */
    protected static function getCustomerRecoveryDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerRecovery/CustomerRecoveryDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerRecovery\\CustomerRecoveryDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerRecovery\CustomerRecoveryDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Customer\Aggregate\CustomerTag\CustomerTagDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerTag\CustomerTagDefinition
     */
    protected static function getCustomerTagDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerTag/CustomerTagDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerTag\\CustomerTagDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerTag\CustomerTagDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlistProduct\CustomerWishlistProductDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlistProduct\CustomerWishlistProductDefinition
     */
    protected static function getCustomerWishlistProductDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerWishlistProduct/CustomerWishlistProductDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlistProduct\\CustomerWishlistProductDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlistProduct\CustomerWishlistProductDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlist\CustomerWishlistDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlist\CustomerWishlistDefinition
     */
    protected static function getCustomerWishlistDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Aggregate/CustomerWishlist/CustomerWishlistDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlist\\CustomerWishlistDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\Aggregate\CustomerWishlist\CustomerWishlistDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Customer\CustomerDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\CustomerDefinition
     */
    protected static function getCustomerDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Customer\\CustomerDefinition'] = $instance = new \Shopware\Core\Checkout\Customer\CustomerDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfigSalesChannel\DocumentBaseConfigSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfigSalesChannel\DocumentBaseConfigSalesChannelDefinition
     */
    protected static function getDocumentBaseConfigSalesChannelDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Aggregate/DocumentBaseConfigSalesChannel/DocumentBaseConfigSalesChannelDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfigSalesChannel\\DocumentBaseConfigSalesChannelDefinition'] = $instance = new \Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfigSalesChannel\DocumentBaseConfigSalesChannelDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfig\DocumentBaseConfigDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfig\DocumentBaseConfigDefinition
     */
    protected static function getDocumentBaseConfigDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Aggregate/DocumentBaseConfig/DocumentBaseConfigDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfig\\DocumentBaseConfigDefinition'] = $instance = new \Shopware\Core\Checkout\Document\Aggregate\DocumentBaseConfig\DocumentBaseConfigDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Document\Aggregate\DocumentTypeTranslation\DocumentTypeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Aggregate\DocumentTypeTranslation\DocumentTypeTranslationDefinition
     */
    protected static function getDocumentTypeTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Aggregate/DocumentTypeTranslation/DocumentTypeTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentTypeTranslation\\DocumentTypeTranslationDefinition'] = $instance = new \Shopware\Core\Checkout\Document\Aggregate\DocumentTypeTranslation\DocumentTypeTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Document\Aggregate\DocumentType\DocumentTypeDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Aggregate\DocumentType\DocumentTypeDefinition
     */
    protected static function getDocumentTypeDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Aggregate/DocumentType/DocumentTypeDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentType\\DocumentTypeDefinition'] = $instance = new \Shopware\Core\Checkout\Document\Aggregate\DocumentType\DocumentTypeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Document\DocumentDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\DocumentDefinition
     */
    protected static function getDocumentDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/DocumentDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Document\\DocumentDefinition'] = $instance = new \Shopware\Core\Checkout\Document\DocumentDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\Aggregate\OrderAddress\OrderAddressDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderAddress\OrderAddressDefinition
     */
    protected static function getOrderAddressDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderAddress\\OrderAddressDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderAddress\OrderAddressDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\Aggregate\OrderCustomer\OrderCustomerDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderCustomer\OrderCustomerDefinition
     */
    protected static function getOrderCustomerDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderCustomer/OrderCustomerDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderCustomer\\OrderCustomerDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderCustomer\OrderCustomerDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\Aggregate\OrderDeliveryPosition\OrderDeliveryPositionDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderDeliveryPosition\OrderDeliveryPositionDefinition
     */
    protected static function getOrderDeliveryPositionDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderDeliveryPosition/OrderDeliveryPositionDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDeliveryPosition\\OrderDeliveryPositionDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderDeliveryPosition\OrderDeliveryPositionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\Aggregate\OrderDelivery\OrderDeliveryDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderDelivery\OrderDeliveryDefinition
     */
    protected static function getOrderDeliveryDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderDelivery/OrderDeliveryDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDelivery\\OrderDeliveryDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderDelivery\OrderDeliveryDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\Aggregate\OrderLineItemDownload\OrderLineItemDownloadDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderLineItemDownload\OrderLineItemDownloadDefinition
     */
    protected static function getOrderLineItemDownloadDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderLineItemDownload/OrderLineItemDownloadDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItemDownload\\OrderLineItemDownloadDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderLineItemDownload\OrderLineItemDownloadDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\Aggregate\OrderLineItem\OrderLineItemDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderLineItem\OrderLineItemDefinition
     */
    protected static function getOrderLineItemDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderLineItem/OrderLineItemDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItem\\OrderLineItemDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderLineItem\OrderLineItemDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\Aggregate\OrderTag\OrderTagDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderTag\OrderTagDefinition
     */
    protected static function getOrderTagDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTag/OrderTagDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTag\\OrderTagDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderTag\OrderTagDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefundPosition\OrderTransactionCaptureRefundPositionDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefundPosition\OrderTransactionCaptureRefundPositionDefinition
     */
    protected static function getOrderTransactionCaptureRefundPositionDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTransactionCaptureRefundPosition/OrderTransactionCaptureRefundPositionDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefundPosition\\OrderTransactionCaptureRefundPositionDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefundPosition\OrderTransactionCaptureRefundPositionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefund\OrderTransactionCaptureRefundDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefund\OrderTransactionCaptureRefundDefinition
     */
    protected static function getOrderTransactionCaptureRefundDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTransactionCaptureRefund/OrderTransactionCaptureRefundDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefund\\OrderTransactionCaptureRefundDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCaptureRefund\OrderTransactionCaptureRefundDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCapture\OrderTransactionCaptureDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCapture\OrderTransactionCaptureDefinition
     */
    protected static function getOrderTransactionCaptureDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTransactionCapture/OrderTransactionCaptureDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCapture\\OrderTransactionCaptureDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderTransactionCapture\OrderTransactionCaptureDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\Aggregate\OrderTransaction\OrderTransactionDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderTransaction\OrderTransactionDefinition
     */
    protected static function getOrderTransactionDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTransaction/OrderTransactionDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionDefinition'] = $instance = new \Shopware\Core\Checkout\Order\Aggregate\OrderTransaction\OrderTransactionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Order\OrderDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\OrderDefinition
     */
    protected static function getOrderDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Order\\OrderDefinition'] = $instance = new \Shopware\Core\Checkout\Order\OrderDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Payment\Aggregate\PaymentMethodTranslation\PaymentMethodTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\Aggregate\PaymentMethodTranslation\PaymentMethodTranslationDefinition
     */
    protected static function getPaymentMethodTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Aggregate/PaymentMethodTranslation/PaymentMethodTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Payment\\Aggregate\\PaymentMethodTranslation\\PaymentMethodTranslationDefinition'] = $instance = new \Shopware\Core\Checkout\Payment\Aggregate\PaymentMethodTranslation\PaymentMethodTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionCartRule\PromotionCartRuleDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionCartRule\PromotionCartRuleDefinition
     */
    protected static function getPromotionCartRuleDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionCartRule/PromotionCartRuleDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionCartRule\\PromotionCartRuleDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionCartRule\PromotionCartRuleDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountPrice\PromotionDiscountPriceDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountPrice\PromotionDiscountPriceDefinition
     */
    protected static function getPromotionDiscountPriceDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionDiscountPrice/PromotionDiscountPriceDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountPrice\\PromotionDiscountPriceDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountPrice\PromotionDiscountPriceDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountRule\PromotionDiscountRuleDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountRule\PromotionDiscountRuleDefinition
     */
    protected static function getPromotionDiscountRuleDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionDiscountRule/PromotionDiscountRuleDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountRule\\PromotionDiscountRuleDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscountRule\PromotionDiscountRuleDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscount\PromotionDiscountDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscount\PromotionDiscountDefinition
     */
    protected static function getPromotionDiscountDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionDiscount/PromotionDiscountDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscount\\PromotionDiscountDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionDiscount\PromotionDiscountDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionIndividualCode\PromotionIndividualCodeDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionIndividualCode\PromotionIndividualCodeDefinition
     */
    protected static function getPromotionIndividualCodeDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionIndividualCode/PromotionIndividualCodeDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionIndividualCode\\PromotionIndividualCodeDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionIndividualCode\PromotionIndividualCodeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionOrderRule\PromotionOrderRuleDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionOrderRule\PromotionOrderRuleDefinition
     */
    protected static function getPromotionOrderRuleDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionOrderRule/PromotionOrderRuleDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionOrderRule\\PromotionOrderRuleDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionOrderRule\PromotionOrderRuleDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaCustomer\PromotionPersonaCustomerDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaCustomer\PromotionPersonaCustomerDefinition
     */
    protected static function getPromotionPersonaCustomerDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionPersonaCustomer/PromotionPersonaCustomerDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaCustomer\\PromotionPersonaCustomerDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaCustomer\PromotionPersonaCustomerDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaRule\PromotionPersonaRuleDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaRule\PromotionPersonaRuleDefinition
     */
    protected static function getPromotionPersonaRuleDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionPersonaRule/PromotionPersonaRuleDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaRule\\PromotionPersonaRuleDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionPersonaRule\PromotionPersonaRuleDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionSalesChannel\PromotionSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSalesChannel\PromotionSalesChannelDefinition
     */
    protected static function getPromotionSalesChannelDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionSalesChannel/PromotionSalesChannelDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSalesChannel\\PromotionSalesChannelDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSalesChannel\PromotionSalesChannelDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroupRule\PromotionSetGroupRuleDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroupRule\PromotionSetGroupRuleDefinition
     */
    protected static function getPromotionSetGroupRuleDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionSetGroupRule/PromotionSetGroupRuleDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroupRule\\PromotionSetGroupRuleDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroupRule\PromotionSetGroupRuleDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroup\PromotionSetGroupDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroup\PromotionSetGroupDefinition
     */
    protected static function getPromotionSetGroupDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionSetGroup/PromotionSetGroupDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroup\\PromotionSetGroupDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionSetGroup\PromotionSetGroupDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\Aggregate\PromotionTranslation\PromotionTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Aggregate\PromotionTranslation\PromotionTranslationDefinition
     */
    protected static function getPromotionTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Aggregate/PromotionTranslation/PromotionTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionTranslation\\PromotionTranslationDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\Aggregate\PromotionTranslation\PromotionTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Promotion\PromotionDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\PromotionDefinition
     */
    protected static function getPromotionDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/PromotionDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Promotion\\PromotionDefinition'] = $instance = new \Shopware\Core\Checkout\Promotion\PromotionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodPrice\ShippingMethodPriceDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodPrice\ShippingMethodPriceDefinition
     */
    protected static function getShippingMethodPriceDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/Aggregate/ShippingMethodPrice/ShippingMethodPriceDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodPrice\\ShippingMethodPriceDefinition'] = $instance = new \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodPrice\ShippingMethodPriceDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTag\ShippingMethodTagDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTag\ShippingMethodTagDefinition
     */
    protected static function getShippingMethodTagDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/Aggregate/ShippingMethodTag/ShippingMethodTagDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTag\\ShippingMethodTagDefinition'] = $instance = new \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTag\ShippingMethodTagDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTranslation\ShippingMethodTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTranslation\ShippingMethodTranslationDefinition
     */
    protected static function getShippingMethodTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/Aggregate/ShippingMethodTranslation/ShippingMethodTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTranslation\\ShippingMethodTranslationDefinition'] = $instance = new \Shopware\Core\Checkout\Shipping\Aggregate\ShippingMethodTranslation\ShippingMethodTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Category\Aggregate\CategoryTag\CategoryTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Category\Aggregate\CategoryTag\CategoryTagDefinition
     */
    protected static function getCategoryTagDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/Aggregate/CategoryTag/CategoryTagDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTag\\CategoryTagDefinition'] = $instance = new \Shopware\Core\Content\Category\Aggregate\CategoryTag\CategoryTagDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Category\Aggregate\CategoryTranslation\CategoryTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Category\Aggregate\CategoryTranslation\CategoryTranslationDefinition
     */
    protected static function getCategoryTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/Aggregate/CategoryTranslation/CategoryTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTranslation\\CategoryTranslationDefinition'] = $instance = new \Shopware\Core\Content\Category\Aggregate\CategoryTranslation\CategoryTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Cms\Aggregate\CmsBlock\CmsBlockDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\Aggregate\CmsBlock\CmsBlockDefinition
     */
    protected static function getCmsBlockDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/Aggregate/CmsBlock/CmsBlockDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Cms\\Aggregate\\CmsBlock\\CmsBlockDefinition'] = $instance = new \Shopware\Core\Content\Cms\Aggregate\CmsBlock\CmsBlockDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Cms\Aggregate\CmsPageTranslation\CmsPageTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\Aggregate\CmsPageTranslation\CmsPageTranslationDefinition
     */
    protected static function getCmsPageTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/Aggregate/CmsPageTranslation/CmsPageTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Cms\\Aggregate\\CmsPageTranslation\\CmsPageTranslationDefinition'] = $instance = new \Shopware\Core\Content\Cms\Aggregate\CmsPageTranslation\CmsPageTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Cms\Aggregate\CmsSection\CmsSectionDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\Aggregate\CmsSection\CmsSectionDefinition
     */
    protected static function getCmsSectionDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/Aggregate/CmsSection/CmsSectionDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSection\\CmsSectionDefinition'] = $instance = new \Shopware\Core\Content\Cms\Aggregate\CmsSection\CmsSectionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Cms\Aggregate\CmsSlotTranslation\CmsSlotTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\Aggregate\CmsSlotTranslation\CmsSlotTranslationDefinition
     */
    protected static function getCmsSlotTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/Aggregate/CmsSlotTranslation/CmsSlotTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlotTranslation\\CmsSlotTranslationDefinition'] = $instance = new \Shopware\Core\Content\Cms\Aggregate\CmsSlotTranslation\CmsSlotTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Cms\Aggregate\CmsSlot\CmsSlotDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\Aggregate\CmsSlot\CmsSlotDefinition
     */
    protected static function getCmsSlotDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/Aggregate/CmsSlot/CmsSlotDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlot\\CmsSlotDefinition'] = $instance = new \Shopware\Core\Content\Cms\Aggregate\CmsSlot\CmsSlotDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Cms\CmsPageDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Cms\CmsPageDefinition
     */
    protected static function getCmsPageDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Cms\\CmsPageDefinition'] = $instance = new \Shopware\Core\Content\Cms\CmsPageDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Flow\Aggregate\FlowSequence\FlowSequenceDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Aggregate\FlowSequence\FlowSequenceDefinition
     */
    protected static function getFlowSequenceDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Aggregate/FlowSequence/FlowSequenceDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Flow\\Aggregate\\FlowSequence\\FlowSequenceDefinition'] = $instance = new \Shopware\Core\Content\Flow\Aggregate\FlowSequence\FlowSequenceDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Flow\Aggregate\FlowTemplate\FlowTemplateDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Aggregate\FlowTemplate\FlowTemplateDefinition
     */
    protected static function getFlowTemplateDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Aggregate/FlowTemplate/FlowTemplateDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Flow\\Aggregate\\FlowTemplate\\FlowTemplateDefinition'] = $instance = new \Shopware\Core\Content\Flow\Aggregate\FlowTemplate\FlowTemplateDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Flow\FlowDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Flow\FlowDefinition
     */
    protected static function getFlowDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/FlowDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Flow\\FlowDefinition'] = $instance = new \Shopware\Core\Content\Flow\FlowDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\ImportExport\Aggregate\ImportExportFile\ImportExportFileDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Aggregate\ImportExportFile\ImportExportFileDefinition
     */
    protected static function getImportExportFileDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Aggregate/ImportExportFile/ImportExportFileDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportFile\\ImportExportFileDefinition'] = $instance = new \Shopware\Core\Content\ImportExport\Aggregate\ImportExportFile\ImportExportFileDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\ImportExport\Aggregate\ImportExportLog\ImportExportLogDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Aggregate\ImportExportLog\ImportExportLogDefinition
     */
    protected static function getImportExportLogDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Aggregate/ImportExportLog/ImportExportLogDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportLog\\ImportExportLogDefinition'] = $instance = new \Shopware\Core\Content\ImportExport\Aggregate\ImportExportLog\ImportExportLogDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\ImportExport\ImportExportProfileDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\ImportExportProfileDefinition
     */
    protected static function getImportExportProfileDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/ImportExportProfileDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\ImportExport\\ImportExportProfileDefinition'] = $instance = new \Shopware\Core\Content\ImportExport\ImportExportProfileDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\ImportExport\ImportExportProfileTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\ImportExportProfileTranslationDefinition
     */
    protected static function getImportExportProfileTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/ImportExportProfileTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\ImportExport\\ImportExportProfileTranslationDefinition'] = $instance = new \Shopware\Core\Content\ImportExport\ImportExportProfileTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\LandingPage\Aggregate\LandingPageSalesChannel\LandingPageSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\Content\LandingPage\Aggregate\LandingPageSalesChannel\LandingPageSalesChannelDefinition
     */
    protected static function getLandingPageSalesChannelDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/Aggregate/LandingPageSalesChannel/LandingPageSalesChannelDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageSalesChannel\\LandingPageSalesChannelDefinition'] = $instance = new \Shopware\Core\Content\LandingPage\Aggregate\LandingPageSalesChannel\LandingPageSalesChannelDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\LandingPage\Aggregate\LandingPageTag\LandingPageTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\LandingPage\Aggregate\LandingPageTag\LandingPageTagDefinition
     */
    protected static function getLandingPageTagDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/Aggregate/LandingPageTag/LandingPageTagDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTag\\LandingPageTagDefinition'] = $instance = new \Shopware\Core\Content\LandingPage\Aggregate\LandingPageTag\LandingPageTagDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\LandingPage\Aggregate\LandingPageTranslation\LandingPageTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\LandingPage\Aggregate\LandingPageTranslation\LandingPageTranslationDefinition
     */
    protected static function getLandingPageTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/Aggregate/LandingPageTranslation/LandingPageTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTranslation\\LandingPageTranslationDefinition'] = $instance = new \Shopware\Core\Content\LandingPage\Aggregate\LandingPageTranslation\LandingPageTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooterTranslation\MailHeaderFooterTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooterTranslation\MailHeaderFooterTranslationDefinition
     */
    protected static function getMailHeaderFooterTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailHeaderFooterTranslation/MailHeaderFooterTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooterTranslation\\MailHeaderFooterTranslationDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooterTranslation\MailHeaderFooterTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooter\MailHeaderFooterDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooter\MailHeaderFooterDefinition
     */
    protected static function getMailHeaderFooterDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailHeaderFooter/MailHeaderFooterDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooter\\MailHeaderFooterDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailHeaderFooter\MailHeaderFooterDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateMedia\MailTemplateMediaDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateMedia\MailTemplateMediaDefinition
     */
    protected static function getMailTemplateMediaDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailTemplateMedia/MailTemplateMediaDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateMedia\\MailTemplateMediaDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateMedia\MailTemplateMediaDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTranslation\MailTemplateTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTranslation\MailTemplateTranslationDefinition
     */
    protected static function getMailTemplateTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailTemplateTranslation/MailTemplateTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTranslation\\MailTemplateTranslationDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTranslation\MailTemplateTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTypeTranslation\MailTemplateTypeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTypeTranslation\MailTemplateTypeTranslationDefinition
     */
    protected static function getMailTemplateTypeTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailTemplateTypeTranslation/MailTemplateTypeTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTypeTranslation\\MailTemplateTypeTranslationDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateTypeTranslation\MailTemplateTypeTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateType\MailTemplateTypeDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateType\MailTemplateTypeDefinition
     */
    protected static function getMailTemplateTypeDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/Aggregate/MailTemplateType/MailTemplateTypeDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateType\\MailTemplateTypeDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\Aggregate\MailTemplateType\MailTemplateTypeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\MailTemplate\MailTemplateDefinition' shared service.
     *
     * @return \Shopware\Core\Content\MailTemplate\MailTemplateDefinition
     */
    protected static function getMailTemplateDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/MailTemplate/MailTemplateDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\MailTemplate\\MailTemplateDefinition'] = $instance = new \Shopware\Core\Content\MailTemplate\MailTemplateDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Media\Aggregate\MediaDefaultFolder\MediaDefaultFolderDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaDefaultFolder\MediaDefaultFolderDefinition
     */
    protected static function getMediaDefaultFolderDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaDefaultFolder/MediaDefaultFolderDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaDefaultFolder\\MediaDefaultFolderDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaDefaultFolder\MediaDefaultFolderDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Media\Aggregate\MediaFolderConfigurationMediaThumbnailSize\MediaFolderConfigurationMediaThumbnailSizeDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaFolderConfigurationMediaThumbnailSize\MediaFolderConfigurationMediaThumbnailSizeDefinition
     */
    protected static function getMediaFolderConfigurationMediaThumbnailSizeDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaFolderConfigurationMediaThumbnailSize/MediaFolderConfigurationMediaThumbnailSizeDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfigurationMediaThumbnailSize\\MediaFolderConfigurationMediaThumbnailSizeDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaFolderConfigurationMediaThumbnailSize\MediaFolderConfigurationMediaThumbnailSizeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Media\Aggregate\MediaFolderConfiguration\MediaFolderConfigurationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaFolderConfiguration\MediaFolderConfigurationDefinition
     */
    protected static function getMediaFolderConfigurationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaFolderConfiguration/MediaFolderConfigurationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfiguration\\MediaFolderConfigurationDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaFolderConfiguration\MediaFolderConfigurationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Media\Aggregate\MediaFolder\MediaFolderDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaFolder\MediaFolderDefinition
     */
    protected static function getMediaFolderDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaFolder/MediaFolderDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolder\\MediaFolderDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaFolder\MediaFolderDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Media\Aggregate\MediaTag\MediaTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaTag\MediaTagDefinition
     */
    protected static function getMediaTagDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaTag/MediaTagDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaTag\\MediaTagDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaTag\MediaTagDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Media\Aggregate\MediaThumbnailSize\MediaThumbnailSizeDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaThumbnailSize\MediaThumbnailSizeDefinition
     */
    protected static function getMediaThumbnailSizeDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaThumbnailSize/MediaThumbnailSizeDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnailSize\\MediaThumbnailSizeDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaThumbnailSize\MediaThumbnailSizeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Media\Aggregate\MediaThumbnail\MediaThumbnailDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaThumbnail\MediaThumbnailDefinition
     */
    protected static function getMediaThumbnailDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaThumbnail/MediaThumbnailDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnail\\MediaThumbnailDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaThumbnail\MediaThumbnailDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Media\Aggregate\MediaTranslation\MediaTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\Aggregate\MediaTranslation\MediaTranslationDefinition
     */
    protected static function getMediaTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Aggregate/MediaTranslation/MediaTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Media\\Aggregate\\MediaTranslation\\MediaTranslationDefinition'] = $instance = new \Shopware\Core\Content\Media\Aggregate\MediaTranslation\MediaTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Media\MediaDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Media\MediaDefinition
     */
    protected static function getMediaDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Media\\MediaDefinition'] = $instance = new \Shopware\Core\Content\Media\MediaDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Newsletter\Aggregate\NewsletterRecipientTag\NewsletterRecipientTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Newsletter\Aggregate\NewsletterRecipientTag\NewsletterRecipientTagDefinition
     */
    protected static function getNewsletterRecipientTagDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/Aggregate/NewsletterRecipientTag/NewsletterRecipientTagDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipientTag\\NewsletterRecipientTagDefinition'] = $instance = new \Shopware\Core\Content\Newsletter\Aggregate\NewsletterRecipientTag\NewsletterRecipientTagDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\ProductExport\ProductExportDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\ProductExportDefinition
     */
    protected static function getProductExportDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/ProductExportDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\ProductExport\\ProductExportDefinition'] = $instance = new \Shopware\Core\Content\ProductExport\ProductExportDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\ProductStream\Aggregate\ProductStreamFilter\ProductStreamFilterDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ProductStream\Aggregate\ProductStreamFilter\ProductStreamFilterDefinition
     */
    protected static function getProductStreamFilterDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/Aggregate/ProductStreamFilter/ProductStreamFilterDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamFilter\\ProductStreamFilterDefinition'] = $instance = new \Shopware\Core\Content\ProductStream\Aggregate\ProductStreamFilter\ProductStreamFilterDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\ProductStream\Aggregate\ProductStreamTranslation\ProductStreamTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ProductStream\Aggregate\ProductStreamTranslation\ProductStreamTranslationDefinition
     */
    protected static function getProductStreamTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/Aggregate/ProductStreamTranslation/ProductStreamTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamTranslation\\ProductStreamTranslationDefinition'] = $instance = new \Shopware\Core\Content\ProductStream\Aggregate\ProductStreamTranslation\ProductStreamTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\ProductStream\ProductStreamDefinition' shared service.
     *
     * @return \Shopware\Core\Content\ProductStream\ProductStreamDefinition
     */
    protected static function getProductStreamDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/ProductStreamDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\ProductStream\\ProductStreamDefinition'] = $instance = new \Shopware\Core\Content\ProductStream\ProductStreamDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductCategoryTree\ProductCategoryTreeDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCategoryTree\ProductCategoryTreeDefinition
     */
    protected static function getProductCategoryTreeDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCategoryTree/ProductCategoryTreeDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategoryTree\\ProductCategoryTreeDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCategoryTree\ProductCategoryTreeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductCategory\ProductCategoryDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCategory\ProductCategoryDefinition
     */
    protected static function getProductCategoryDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCategory/ProductCategoryDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategory\\ProductCategoryDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCategory\ProductCategoryDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductConfiguratorSetting\ProductConfiguratorSettingDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductConfiguratorSetting\ProductConfiguratorSettingDefinition
     */
    protected static function getProductConfiguratorSettingDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductConfiguratorSetting/ProductConfiguratorSettingDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductConfiguratorSetting\\ProductConfiguratorSettingDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductConfiguratorSetting\ProductConfiguratorSettingDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductCrossSellingAssignedProducts\ProductCrossSellingAssignedProductsDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCrossSellingAssignedProducts\ProductCrossSellingAssignedProductsDefinition
     */
    protected static function getProductCrossSellingAssignedProductsDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCrossSellingAssignedProducts/ProductCrossSellingAssignedProductsDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingAssignedProducts\\ProductCrossSellingAssignedProductsDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCrossSellingAssignedProducts\ProductCrossSellingAssignedProductsDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductCrossSellingTranslation\ProductCrossSellingTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCrossSellingTranslation\ProductCrossSellingTranslationDefinition
     */
    protected static function getProductCrossSellingTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCrossSellingTranslation/ProductCrossSellingTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingTranslation\\ProductCrossSellingTranslationDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCrossSellingTranslation\ProductCrossSellingTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductCrossSelling\ProductCrossSellingDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCrossSelling\ProductCrossSellingDefinition
     */
    protected static function getProductCrossSellingDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCrossSelling/ProductCrossSellingDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSelling\\ProductCrossSellingDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCrossSelling\ProductCrossSellingDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductCustomFieldSet\ProductCustomFieldSetDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductCustomFieldSet\ProductCustomFieldSetDefinition
     */
    protected static function getProductCustomFieldSetDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductCustomFieldSet/ProductCustomFieldSetDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductCustomFieldSet\\ProductCustomFieldSetDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductCustomFieldSet\ProductCustomFieldSetDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductDownload\ProductDownloadDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductDownload\ProductDownloadDefinition
     */
    protected static function getProductDownloadDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductDownload\\ProductDownloadDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductDownload\ProductDownloadDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductFeatureSetTranslation\ProductFeatureSetTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductFeatureSetTranslation\ProductFeatureSetTranslationDefinition
     */
    protected static function getProductFeatureSetTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductFeatureSetTranslation/ProductFeatureSetTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSetTranslation\\ProductFeatureSetTranslationDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductFeatureSetTranslation\ProductFeatureSetTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductFeatureSet\ProductFeatureSetDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductFeatureSet\ProductFeatureSetDefinition
     */
    protected static function getProductFeatureSetDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductFeatureSet/ProductFeatureSetDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSet\\ProductFeatureSetDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductFeatureSet\ProductFeatureSetDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductKeywordDictionary\ProductKeywordDictionaryDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductKeywordDictionary\ProductKeywordDictionaryDefinition
     */
    protected static function getProductKeywordDictionaryDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductKeywordDictionary/ProductKeywordDictionaryDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductKeywordDictionary\\ProductKeywordDictionaryDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductKeywordDictionary\ProductKeywordDictionaryDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductManufacturerTranslation\ProductManufacturerTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductManufacturerTranslation\ProductManufacturerTranslationDefinition
     */
    protected static function getProductManufacturerTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductManufacturerTranslation/ProductManufacturerTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturerTranslation\\ProductManufacturerTranslationDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductManufacturerTranslation\ProductManufacturerTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductManufacturer\ProductManufacturerDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductManufacturer\ProductManufacturerDefinition
     */
    protected static function getProductManufacturerDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductManufacturer/ProductManufacturerDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturer\\ProductManufacturerDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductManufacturer\ProductManufacturerDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductMedia\ProductMediaDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductMedia\ProductMediaDefinition
     */
    protected static function getProductMediaDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductMedia/ProductMediaDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductMedia\\ProductMediaDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductMedia\ProductMediaDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductOption\ProductOptionDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductOption\ProductOptionDefinition
     */
    protected static function getProductOptionDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductOption/ProductOptionDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductOption\\ProductOptionDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductOption\ProductOptionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductPrice\ProductPriceDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductPrice\ProductPriceDefinition
     */
    protected static function getProductPriceDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductPrice/ProductPriceDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductPrice\\ProductPriceDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductPrice\ProductPriceDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductProperty\ProductPropertyDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductProperty\ProductPropertyDefinition
     */
    protected static function getProductPropertyDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductProperty/ProductPropertyDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductProperty\\ProductPropertyDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductProperty\ProductPropertyDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductReview\ProductReviewDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductReview\ProductReviewDefinition
     */
    protected static function getProductReviewDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductReview/ProductReviewDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductReview\\ProductReviewDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductReview\ProductReviewDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductSearchConfigField\ProductSearchConfigFieldDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductSearchConfigField\ProductSearchConfigFieldDefinition
     */
    protected static function getProductSearchConfigFieldDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductSearchConfigField/ProductSearchConfigFieldDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfigField\\ProductSearchConfigFieldDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductSearchConfigField\ProductSearchConfigFieldDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductSearchConfig\ProductSearchConfigDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductSearchConfig\ProductSearchConfigDefinition
     */
    protected static function getProductSearchConfigDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductSearchConfig/ProductSearchConfigDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfig\\ProductSearchConfigDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductSearchConfig\ProductSearchConfigDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductSearchKeyword\ProductSearchKeywordDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductSearchKeyword\ProductSearchKeywordDefinition
     */
    protected static function getProductSearchKeywordDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductSearchKeyword/ProductSearchKeywordDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchKeyword\\ProductSearchKeywordDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductSearchKeyword\ProductSearchKeywordDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductStreamMapping\ProductStreamMappingDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductStreamMapping\ProductStreamMappingDefinition
     */
    protected static function getProductStreamMappingDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductStreamMapping/ProductStreamMappingDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductStreamMapping\\ProductStreamMappingDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductStreamMapping\ProductStreamMappingDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductTag\ProductTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductTag\ProductTagDefinition
     */
    protected static function getProductTagDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductTag/ProductTagDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductTag\\ProductTagDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductTag\ProductTagDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductTranslation\ProductTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductTranslation\ProductTranslationDefinition
     */
    protected static function getProductTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductTranslation/ProductTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductTranslation\\ProductTranslationDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductTranslation\ProductTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\Aggregate\ProductVisibility\ProductVisibilityDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\Aggregate\ProductVisibility\ProductVisibilityDefinition
     */
    protected static function getProductVisibilityDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Aggregate/ProductVisibility/ProductVisibilityDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\Aggregate\\ProductVisibility\\ProductVisibilityDefinition'] = $instance = new \Shopware\Core\Content\Product\Aggregate\ProductVisibility\ProductVisibilityDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingDefinition
     */
    protected static function getProductSortingDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Sorting/ProductSortingDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingDefinition'] = $instance = new \Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingTranslationDefinition
     */
    protected static function getProductSortingTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Sorting/ProductSortingTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingTranslationDefinition'] = $instance = new \Shopware\Core\Content\Product\SalesChannel\Sorting\ProductSortingTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Property\Aggregate\PropertyGroupOptionTranslation\PropertyGroupOptionTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Property\Aggregate\PropertyGroupOptionTranslation\PropertyGroupOptionTranslationDefinition
     */
    protected static function getPropertyGroupOptionTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Property/Aggregate/PropertyGroupOptionTranslation/PropertyGroupOptionTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOptionTranslation\\PropertyGroupOptionTranslationDefinition'] = $instance = new \Shopware\Core\Content\Property\Aggregate\PropertyGroupOptionTranslation\PropertyGroupOptionTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Property\Aggregate\PropertyGroupOption\PropertyGroupOptionDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Property\Aggregate\PropertyGroupOption\PropertyGroupOptionDefinition
     */
    protected static function getPropertyGroupOptionDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Property/Aggregate/PropertyGroupOption/PropertyGroupOptionDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOption\\PropertyGroupOptionDefinition'] = $instance = new \Shopware\Core\Content\Property\Aggregate\PropertyGroupOption\PropertyGroupOptionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Property\Aggregate\PropertyGroupTranslation\PropertyGroupTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Property\Aggregate\PropertyGroupTranslation\PropertyGroupTranslationDefinition
     */
    protected static function getPropertyGroupTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Property/Aggregate/PropertyGroupTranslation/PropertyGroupTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupTranslation\\PropertyGroupTranslationDefinition'] = $instance = new \Shopware\Core\Content\Property\Aggregate\PropertyGroupTranslation\PropertyGroupTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Property\PropertyGroupDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Property\PropertyGroupDefinition
     */
    protected static function getPropertyGroupDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Property/PropertyGroupDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Property\\PropertyGroupDefinition'] = $instance = new \Shopware\Core\Content\Property\PropertyGroupDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Rule\Aggregate\RuleCondition\RuleConditionDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Rule\Aggregate\RuleCondition\RuleConditionDefinition
     */
    protected static function getRuleConditionDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Rule/Aggregate/RuleCondition/RuleConditionDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Rule\\Aggregate\\RuleCondition\\RuleConditionDefinition'] = $instance = new \Shopware\Core\Content\Rule\Aggregate\RuleCondition\RuleConditionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Rule\Aggregate\RuleTag\RuleTagDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Rule\Aggregate\RuleTag\RuleTagDefinition
     */
    protected static function getRuleTagDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Rule/Aggregate/RuleTag/RuleTagDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Rule\\Aggregate\\RuleTag\\RuleTagDefinition'] = $instance = new \Shopware\Core\Content\Rule\Aggregate\RuleTag\RuleTagDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Rule\RuleDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Rule\RuleDefinition
     */
    protected static function getRuleDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Rule\\RuleDefinition'] = $instance = new \Shopware\Core\Content\Rule\RuleDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Content\Seo\SeoUrlTemplate\SeoUrlTemplateDefinition' shared service.
     *
     * @return \Shopware\Core\Content\Seo\SeoUrlTemplate\SeoUrlTemplateDefinition
     */
    protected static function getSeoUrlTemplateDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlTemplate/SeoUrlTemplateDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Content\\Seo\\SeoUrlTemplate\\SeoUrlTemplateDefinition'] = $instance = new \Shopware\Core\Content\Seo\SeoUrlTemplate\SeoUrlTemplateDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\Api\Acl\Role\AclRoleDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Acl\Role\AclRoleDefinition
     */
    protected static function getAclRoleDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Acl/Role/AclRoleDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclRoleDefinition'] = $instance = new \Shopware\Core\Framework\Api\Acl\Role\AclRoleDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\Api\Acl\Role\AclUserRoleDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Acl\Role\AclUserRoleDefinition
     */
    protected static function getAclUserRoleDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Acl/Role/AclUserRoleDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclUserRoleDefinition'] = $instance = new \Shopware\Core\Framework\Api\Acl\Role\AclUserRoleDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Aggregate\ActionButtonTranslation\ActionButtonTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\ActionButtonTranslation\ActionButtonTranslationDefinition
     */
    protected static function getActionButtonTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/ActionButtonTranslation/ActionButtonTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\ActionButtonTranslation\\ActionButtonTranslationDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\ActionButtonTranslation\ActionButtonTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Aggregate\ActionButton\ActionButtonDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\ActionButton\ActionButtonDefinition
     */
    protected static function getActionButtonDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/ActionButton/ActionButtonDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\ActionButton\\ActionButtonDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\ActionButton\ActionButtonDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Aggregate\AppPaymentMethod\AppPaymentMethodDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\AppPaymentMethod\AppPaymentMethodDefinition
     */
    protected static function getAppPaymentMethodDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\AppPaymentMethod\\AppPaymentMethodDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\AppPaymentMethod\AppPaymentMethodDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Aggregate\AppScriptConditionTranslation\AppScriptConditionTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\AppScriptConditionTranslation\AppScriptConditionTranslationDefinition
     */
    protected static function getAppScriptConditionTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/AppScriptConditionTranslation/AppScriptConditionTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptConditionTranslation\\AppScriptConditionTranslationDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\AppScriptConditionTranslation\AppScriptConditionTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Aggregate\AppScriptCondition\AppScriptConditionDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\AppScriptCondition\AppScriptConditionDefinition
     */
    protected static function getAppScriptConditionDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/AppScriptCondition/AppScriptConditionDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptCondition\\AppScriptConditionDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\AppScriptCondition\AppScriptConditionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Aggregate\AppShippingMethod\AppShippingMethodDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\AppShippingMethod\AppShippingMethodDefinition
     */
    protected static function getAppShippingMethodDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/AppShippingMethod/AppShippingMethodDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\AppShippingMethod\\AppShippingMethodDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\AppShippingMethod\AppShippingMethodDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Aggregate\AppTranslation\AppTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\AppTranslation\AppTranslationDefinition
     */
    protected static function getAppTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/AppTranslation/AppTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\AppTranslation\\AppTranslationDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\AppTranslation\AppTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Aggregate\CmsBlockTranslation\AppCmsBlockTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\CmsBlockTranslation\AppCmsBlockTranslationDefinition
     */
    protected static function getAppCmsBlockTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/CmsBlockTranslation/AppCmsBlockTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlockTranslation\\AppCmsBlockTranslationDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\CmsBlockTranslation\AppCmsBlockTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Aggregate\CmsBlock\AppCmsBlockDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\CmsBlock\AppCmsBlockDefinition
     */
    protected static function getAppCmsBlockDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/CmsBlock/AppCmsBlockDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlock\\AppCmsBlockDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\CmsBlock\AppCmsBlockDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Aggregate\FlowActionTranslation\AppFlowActionTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\FlowActionTranslation\AppFlowActionTranslationDefinition
     */
    protected static function getAppFlowActionTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/FlowActionTranslation/AppFlowActionTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\FlowActionTranslation\\AppFlowActionTranslationDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\FlowActionTranslation\AppFlowActionTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Aggregate\FlowAction\AppFlowActionDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\FlowAction\AppFlowActionDefinition
     */
    protected static function getAppFlowActionDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/FlowAction/AppFlowActionDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\FlowAction\\AppFlowActionDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\FlowAction\AppFlowActionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Aggregate\FlowEvent\AppFlowEventDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Aggregate\FlowEvent\AppFlowEventDefinition
     */
    protected static function getAppFlowEventDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Aggregate/FlowEvent/AppFlowEventDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Aggregate\\FlowEvent\\AppFlowEventDefinition'] = $instance = new \Shopware\Core\Framework\App\Aggregate\FlowEvent\AppFlowEventDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\AppDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\AppDefinition
     */
    protected static function getAppDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\AppDefinition'] = $instance = new \Shopware\Core\Framework\App\AppDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\App\Template\TemplateDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\App\Template\TemplateDefinition
     */
    protected static function getTemplateDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Template/TemplateDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\App\\Template\\TemplateDefinition'] = $instance = new \Shopware\Core\Framework\App\Template\TemplateDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommitData\VersionCommitDataDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommitData\VersionCommitDataDefinition
     */
    protected static function getVersionCommitDataDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommitData\\VersionCommitDataDefinition'] = $instance = new \Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommitData\VersionCommitDataDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommit\VersionCommitDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommit\VersionCommitDefinition
     */
    protected static function getVersionCommitDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommit\\VersionCommitDefinition'] = $instance = new \Shopware\Core\Framework\DataAbstractionLayer\Version\Aggregate\VersionCommit\VersionCommitDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\DataAbstractionLayer\Version\VersionDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Version\VersionDefinition
     */
    protected static function getVersionDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\VersionDefinition'] = $instance = new \Shopware\Core\Framework\DataAbstractionLayer\Version\VersionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\Log\LogEntryDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Log\LogEntryDefinition
     */
    protected static function getLogEntryDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Log/LogEntryDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\Log\\LogEntryDefinition'] = $instance = new \Shopware\Core\Framework\Log\LogEntryDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\MessageQueue\ScheduledTask\ScheduledTaskDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\ScheduledTask\ScheduledTaskDefinition
     */
    protected static function getScheduledTaskDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/ScheduledTaskDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\ScheduledTaskDefinition'] = $instance = new \Shopware\Core\Framework\MessageQueue\ScheduledTask\ScheduledTaskDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\Plugin\Aggregate\PluginTranslation\PluginTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Aggregate\PluginTranslation\PluginTranslationDefinition
     */
    protected static function getPluginTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Aggregate/PluginTranslation/PluginTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\Plugin\\Aggregate\\PluginTranslation\\PluginTranslationDefinition'] = $instance = new \Shopware\Core\Framework\Plugin\Aggregate\PluginTranslation\PluginTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\Plugin\PluginDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\PluginDefinition
     */
    protected static function getPluginDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/PluginDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\Plugin\\PluginDefinition'] = $instance = new \Shopware\Core\Framework\Plugin\PluginDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\Script\ScriptDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Script\ScriptDefinition
     */
    protected static function getScriptDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\Script\\ScriptDefinition'] = $instance = new \Shopware\Core\Framework\Script\ScriptDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\Webhook\EventLog\WebhookEventLogDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Webhook\EventLog\WebhookEventLogDefinition
     */
    protected static function getWebhookEventLogDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/EventLog/WebhookEventLogDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\Webhook\\EventLog\\WebhookEventLogDefinition'] = $instance = new \Shopware\Core\Framework\Webhook\EventLog\WebhookEventLogDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\Framework\Webhook\WebhookDefinition' shared service.
     *
     * @return \Shopware\Core\Framework\Webhook\WebhookDefinition
     */
    protected static function getWebhookDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/WebhookDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\Framework\\Webhook\\WebhookDefinition'] = $instance = new \Shopware\Core\Framework\Webhook\WebhookDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Country\Aggregate\CountryStateTranslation\CountryStateTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Country\Aggregate\CountryStateTranslation\CountryStateTranslationDefinition
     */
    protected static function getCountryStateTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/Aggregate/CountryStateTranslation/CountryStateTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\Country\\Aggregate\\CountryStateTranslation\\CountryStateTranslationDefinition'] = $instance = new \Shopware\Core\System\Country\Aggregate\CountryStateTranslation\CountryStateTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Country\Aggregate\CountryTranslation\CountryTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Country\Aggregate\CountryTranslation\CountryTranslationDefinition
     */
    protected static function getCountryTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Country/Aggregate/CountryTranslation/CountryTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\Country\\Aggregate\\CountryTranslation\\CountryTranslationDefinition'] = $instance = new \Shopware\Core\System\Country\Aggregate\CountryTranslation\CountryTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Currency\Aggregate\CurrencyCountryRounding\CurrencyCountryRoundingDefinition' shared service.
     *
     * @return \Shopware\Core\System\Currency\Aggregate\CurrencyCountryRounding\CurrencyCountryRoundingDefinition
     */
    protected static function getCurrencyCountryRoundingDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyCountryRounding\\CurrencyCountryRoundingDefinition'] = $instance = new \Shopware\Core\System\Currency\Aggregate\CurrencyCountryRounding\CurrencyCountryRoundingDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Currency\Aggregate\CurrencyTranslation\CurrencyTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Currency\Aggregate\CurrencyTranslation\CurrencyTranslationDefinition
     */
    protected static function getCurrencyTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Currency/Aggregate/CurrencyTranslation/CurrencyTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyTranslation\\CurrencyTranslationDefinition'] = $instance = new \Shopware\Core\System\Currency\Aggregate\CurrencyTranslation\CurrencyTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\CustomEntity\CustomEntityDefinition' shared service.
     *
     * @return \Shopware\Core\System\CustomEntity\CustomEntityDefinition
     */
    protected static function getCustomEntityDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomEntity/CustomEntityDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\CustomEntity\\CustomEntityDefinition'] = $instance = new \Shopware\Core\System\CustomEntity\CustomEntityDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\CustomField\Aggregate\CustomFieldSetRelation\CustomFieldSetRelationDefinition' shared service.
     *
     * @return \Shopware\Core\System\CustomField\Aggregate\CustomFieldSetRelation\CustomFieldSetRelationDefinition
     */
    protected static function getCustomFieldSetRelationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomField/Aggregate/CustomFieldSetRelation/CustomFieldSetRelationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSetRelation\\CustomFieldSetRelationDefinition'] = $instance = new \Shopware\Core\System\CustomField\Aggregate\CustomFieldSetRelation\CustomFieldSetRelationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\CustomField\Aggregate\CustomFieldSet\CustomFieldSetDefinition' shared service.
     *
     * @return \Shopware\Core\System\CustomField\Aggregate\CustomFieldSet\CustomFieldSetDefinition
     */
    protected static function getCustomFieldSetDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomField/Aggregate/CustomFieldSet/CustomFieldSetDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSet\\CustomFieldSetDefinition'] = $instance = new \Shopware\Core\System\CustomField\Aggregate\CustomFieldSet\CustomFieldSetDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\CustomField\CustomFieldDefinition' shared service.
     *
     * @return \Shopware\Core\System\CustomField\CustomFieldDefinition
     */
    protected static function getCustomFieldDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomField/CustomFieldDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\CustomField\\CustomFieldDefinition'] = $instance = new \Shopware\Core\System\CustomField\CustomFieldDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\DeliveryTime\Aggregate\DeliveryTimeTranslation\DeliveryTimeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\DeliveryTime\Aggregate\DeliveryTimeTranslation\DeliveryTimeTranslationDefinition
     */
    protected static function getDeliveryTimeTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/DeliveryTime/Aggregate/DeliveryTimeTranslation/DeliveryTimeTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\DeliveryTime\\Aggregate\\DeliveryTimeTranslation\\DeliveryTimeTranslationDefinition'] = $instance = new \Shopware\Core\System\DeliveryTime\Aggregate\DeliveryTimeTranslation\DeliveryTimeTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\DeliveryTime\DeliveryTimeDefinition' shared service.
     *
     * @return \Shopware\Core\System\DeliveryTime\DeliveryTimeDefinition
     */
    protected static function getDeliveryTimeDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/DeliveryTime/DeliveryTimeDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\DeliveryTime\\DeliveryTimeDefinition'] = $instance = new \Shopware\Core\System\DeliveryTime\DeliveryTimeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Integration\Aggregate\IntegrationRole\IntegrationRoleDefinition' shared service.
     *
     * @return \Shopware\Core\System\Integration\Aggregate\IntegrationRole\IntegrationRoleDefinition
     */
    protected static function getIntegrationRoleDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Integration/Aggregate/IntegrationRole/IntegrationRoleDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\Integration\\Aggregate\\IntegrationRole\\IntegrationRoleDefinition'] = $instance = new \Shopware\Core\System\Integration\Aggregate\IntegrationRole\IntegrationRoleDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Integration\IntegrationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Integration\IntegrationDefinition
     */
    protected static function getIntegrationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Integration/IntegrationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\Integration\\IntegrationDefinition'] = $instance = new \Shopware\Core\System\Integration\IntegrationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Locale\Aggregate\LocaleTranslation\LocaleTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Locale\Aggregate\LocaleTranslation\LocaleTranslationDefinition
     */
    protected static function getLocaleTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Locale/Aggregate/LocaleTranslation/LocaleTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\Locale\\Aggregate\\LocaleTranslation\\LocaleTranslationDefinition'] = $instance = new \Shopware\Core\System\Locale\Aggregate\LocaleTranslation\LocaleTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Locale\LocaleDefinition' shared service.
     *
     * @return \Shopware\Core\System\Locale\LocaleDefinition
     */
    protected static function getLocaleDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Locale/LocaleDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\Locale\\LocaleDefinition'] = $instance = new \Shopware\Core\System\Locale\LocaleDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\NumberRange\Aggregate\NumberRangeSalesChannel\NumberRangeSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Aggregate\NumberRangeSalesChannel\NumberRangeSalesChannelDefinition
     */
    protected static function getNumberRangeSalesChannelDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Aggregate/NumberRangeSalesChannel/NumberRangeSalesChannelDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeSalesChannel\\NumberRangeSalesChannelDefinition'] = $instance = new \Shopware\Core\System\NumberRange\Aggregate\NumberRangeSalesChannel\NumberRangeSalesChannelDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\NumberRange\Aggregate\NumberRangeState\NumberRangeStateDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Aggregate\NumberRangeState\NumberRangeStateDefinition
     */
    protected static function getNumberRangeStateDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Aggregate/NumberRangeState/NumberRangeStateDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeState\\NumberRangeStateDefinition'] = $instance = new \Shopware\Core\System\NumberRange\Aggregate\NumberRangeState\NumberRangeStateDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\NumberRange\Aggregate\NumberRangeTranslation\NumberRangeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Aggregate\NumberRangeTranslation\NumberRangeTranslationDefinition
     */
    protected static function getNumberRangeTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Aggregate/NumberRangeTranslation/NumberRangeTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTranslation\\NumberRangeTranslationDefinition'] = $instance = new \Shopware\Core\System\NumberRange\Aggregate\NumberRangeTranslation\NumberRangeTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\NumberRange\Aggregate\NumberRangeTypeTranslation\NumberRangeTypeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Aggregate\NumberRangeTypeTranslation\NumberRangeTypeTranslationDefinition
     */
    protected static function getNumberRangeTypeTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Aggregate/NumberRangeTypeTranslation/NumberRangeTypeTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTypeTranslation\\NumberRangeTypeTranslationDefinition'] = $instance = new \Shopware\Core\System\NumberRange\Aggregate\NumberRangeTypeTranslation\NumberRangeTypeTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\NumberRange\Aggregate\NumberRangeType\NumberRangeTypeDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Aggregate\NumberRangeType\NumberRangeTypeDefinition
     */
    protected static function getNumberRangeTypeDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Aggregate/NumberRangeType/NumberRangeTypeDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeType\\NumberRangeTypeDefinition'] = $instance = new \Shopware\Core\System\NumberRange\Aggregate\NumberRangeType\NumberRangeTypeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\NumberRange\NumberRangeDefinition' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\NumberRangeDefinition
     */
    protected static function getNumberRangeDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/NumberRangeDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\NumberRange\\NumberRangeDefinition'] = $instance = new \Shopware\Core\System\NumberRange\NumberRangeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SalesChannel\Aggregate\SalesChannelAnalytics\SalesChannelAnalyticsDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelAnalytics\SalesChannelAnalyticsDefinition
     */
    protected static function getSalesChannelAnalyticsDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelAnalytics/SalesChannelAnalyticsDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelAnalytics\\SalesChannelAnalyticsDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelAnalytics\SalesChannelAnalyticsDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCountry\SalesChannelCountryDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCountry\SalesChannelCountryDefinition
     */
    protected static function getSalesChannelCountryDefinition3Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelCountry/SalesChannelCountryDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCountry\\SalesChannelCountryDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCountry\SalesChannelCountryDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCurrency\SalesChannelCurrencyDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCurrency\SalesChannelCurrencyDefinition
     */
    protected static function getSalesChannelCurrencyDefinition3Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelCurrency/SalesChannelCurrencyDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCurrency\\SalesChannelCurrencyDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelCurrency\SalesChannelCurrencyDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SalesChannel\Aggregate\SalesChannelDomain\SalesChannelDomainDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelDomain\SalesChannelDomainDefinition
     */
    protected static function getSalesChannelDomainDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelDomain\\SalesChannelDomainDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelDomain\SalesChannelDomainDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SalesChannel\Aggregate\SalesChannelLanguage\SalesChannelLanguageDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelLanguage\SalesChannelLanguageDefinition
     */
    protected static function getSalesChannelLanguageDefinition3Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelLanguage/SalesChannelLanguageDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelLanguage\\SalesChannelLanguageDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelLanguage\SalesChannelLanguageDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SalesChannel\Aggregate\SalesChannelPaymentMethod\SalesChannelPaymentMethodDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelPaymentMethod\SalesChannelPaymentMethodDefinition
     */
    protected static function getSalesChannelPaymentMethodDefinition3Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelPaymentMethod/SalesChannelPaymentMethodDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelPaymentMethod\\SalesChannelPaymentMethodDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelPaymentMethod\SalesChannelPaymentMethodDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SalesChannel\Aggregate\SalesChannelShippingMethod\SalesChannelShippingMethodDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelShippingMethod\SalesChannelShippingMethodDefinition
     */
    protected static function getSalesChannelShippingMethodDefinition3Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelShippingMethod/SalesChannelShippingMethodDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelShippingMethod\\SalesChannelShippingMethodDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelShippingMethod\SalesChannelShippingMethodDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTranslation\SalesChannelTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTranslation\SalesChannelTranslationDefinition
     */
    protected static function getSalesChannelTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelTranslation/SalesChannelTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTranslation\\SalesChannelTranslationDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTranslation\SalesChannelTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTypeTranslation\SalesChannelTypeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTypeTranslation\SalesChannelTypeTranslationDefinition
     */
    protected static function getSalesChannelTypeTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelTypeTranslation/SalesChannelTypeTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTypeTranslation\\SalesChannelTypeTranslationDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelTypeTranslation\SalesChannelTypeTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SalesChannel\Aggregate\SalesChannelType\SalesChannelTypeDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelType\SalesChannelTypeDefinition
     */
    protected static function getSalesChannelTypeDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Aggregate/SalesChannelType/SalesChannelTypeDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelType\\SalesChannelTypeDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\Aggregate\SalesChannelType\SalesChannelTypeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SalesChannel\SalesChannelDefinition' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\SalesChannelDefinition
     */
    protected static function getSalesChannelDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Core\\System\\SalesChannel\\SalesChannelDefinition'] = $instance = new \Shopware\Core\System\SalesChannel\SalesChannelDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Salutation\Aggregate\SalutationTranslation\SalutationTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Salutation\Aggregate\SalutationTranslation\SalutationTranslationDefinition
     */
    protected static function getSalutationTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Salutation/Aggregate/SalutationTranslation/SalutationTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\Salutation\\Aggregate\\SalutationTranslation\\SalutationTranslationDefinition'] = $instance = new \Shopware\Core\System\Salutation\Aggregate\SalutationTranslation\SalutationTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Snippet\Aggregate\SnippetSet\SnippetSetDefinition' shared service.
     *
     * @return \Shopware\Core\System\Snippet\Aggregate\SnippetSet\SnippetSetDefinition
     */
    protected static function getSnippetSetDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Core\\System\\Snippet\\Aggregate\\SnippetSet\\SnippetSetDefinition'] = $instance = new \Shopware\Core\System\Snippet\Aggregate\SnippetSet\SnippetSetDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Snippet\SnippetDefinition' shared service.
     *
     * @return \Shopware\Core\System\Snippet\SnippetDefinition
     */
    protected static function getSnippetDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Core\\System\\Snippet\\SnippetDefinition'] = $instance = new \Shopware\Core\System\Snippet\SnippetDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\StateMachine\Aggregation\StateMachineHistory\StateMachineHistoryDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\Aggregation\StateMachineHistory\StateMachineHistoryDefinition
     */
    protected static function getStateMachineHistoryDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/Aggregation/StateMachineHistory/StateMachineHistoryDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineHistory\\StateMachineHistoryDefinition'] = $instance = new \Shopware\Core\System\StateMachine\Aggregation\StateMachineHistory\StateMachineHistoryDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateDefinition
     */
    protected static function getStateMachineStateDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/Aggregation/StateMachineState/StateMachineStateDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateDefinition'] = $instance = new \Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateTranslationDefinition
     */
    protected static function getStateMachineStateTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/Aggregation/StateMachineState/StateMachineStateTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateTranslationDefinition'] = $instance = new \Shopware\Core\System\StateMachine\Aggregation\StateMachineState\StateMachineStateTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\StateMachine\Aggregation\StateMachineTransition\StateMachineTransitionDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\Aggregation\StateMachineTransition\StateMachineTransitionDefinition
     */
    protected static function getStateMachineTransitionDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/Aggregation/StateMachineTransition/StateMachineTransitionDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineTransition\\StateMachineTransitionDefinition'] = $instance = new \Shopware\Core\System\StateMachine\Aggregation\StateMachineTransition\StateMachineTransitionDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\StateMachine\StateMachineDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\StateMachineDefinition
     */
    protected static function getStateMachineDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/StateMachineDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\StateMachine\\StateMachineDefinition'] = $instance = new \Shopware\Core\System\StateMachine\StateMachineDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\StateMachine\StateMachineTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\StateMachineTranslationDefinition
     */
    protected static function getStateMachineTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/StateMachineTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\StateMachine\\StateMachineTranslationDefinition'] = $instance = new \Shopware\Core\System\StateMachine\StateMachineTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\SystemConfig\SystemConfigDefinition' shared service.
     *
     * @return \Shopware\Core\System\SystemConfig\SystemConfigDefinition
     */
    protected static function getSystemConfigDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/SystemConfigDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\SystemConfig\\SystemConfigDefinition'] = $instance = new \Shopware\Core\System\SystemConfig\SystemConfigDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Tag\TagDefinition' shared service.
     *
     * @return \Shopware\Core\System\Tag\TagDefinition
     */
    protected static function getTagDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Tag/TagDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\Tag\\TagDefinition'] = $instance = new \Shopware\Core\System\Tag\TagDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\TaxProvider\Aggregate\TaxProviderTranslation\TaxProviderTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\TaxProvider\Aggregate\TaxProviderTranslation\TaxProviderTranslationDefinition
     */
    protected static function getTaxProviderTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/TaxProvider/Aggregate/TaxProviderTranslation/TaxProviderTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\TaxProvider\\Aggregate\\TaxProviderTranslation\\TaxProviderTranslationDefinition'] = $instance = new \Shopware\Core\System\TaxProvider\Aggregate\TaxProviderTranslation\TaxProviderTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\TaxProvider\TaxProviderDefinition' shared service.
     *
     * @return \Shopware\Core\System\TaxProvider\TaxProviderDefinition
     */
    protected static function getTaxProviderDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Core\\System\\TaxProvider\\TaxProviderDefinition'] = $instance = new \Shopware\Core\System\TaxProvider\TaxProviderDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Tax\Aggregate\TaxRuleTypeTranslation\TaxRuleTypeTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Tax\Aggregate\TaxRuleTypeTranslation\TaxRuleTypeTranslationDefinition
     */
    protected static function getTaxRuleTypeTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Tax/Aggregate/TaxRuleTypeTranslation/TaxRuleTypeTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleTypeTranslation\\TaxRuleTypeTranslationDefinition'] = $instance = new \Shopware\Core\System\Tax\Aggregate\TaxRuleTypeTranslation\TaxRuleTypeTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Tax\Aggregate\TaxRuleType\TaxRuleTypeDefinition' shared service.
     *
     * @return \Shopware\Core\System\Tax\Aggregate\TaxRuleType\TaxRuleTypeDefinition
     */
    protected static function getTaxRuleTypeDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Tax/Aggregate/TaxRuleType/TaxRuleTypeDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleType\\TaxRuleTypeDefinition'] = $instance = new \Shopware\Core\System\Tax\Aggregate\TaxRuleType\TaxRuleTypeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Tax\Aggregate\TaxRule\TaxRuleDefinition' shared service.
     *
     * @return \Shopware\Core\System\Tax\Aggregate\TaxRule\TaxRuleDefinition
     */
    protected static function getTaxRuleDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Tax/Aggregate/TaxRule/TaxRuleDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\Tax\\Aggregate\\TaxRule\\TaxRuleDefinition'] = $instance = new \Shopware\Core\System\Tax\Aggregate\TaxRule\TaxRuleDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Tax\TaxDefinition' shared service.
     *
     * @return \Shopware\Core\System\Tax\TaxDefinition
     */
    protected static function getTaxDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Core\\System\\Tax\\TaxDefinition'] = $instance = new \Shopware\Core\System\Tax\TaxDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Unit\Aggregate\UnitTranslation\UnitTranslationDefinition' shared service.
     *
     * @return \Shopware\Core\System\Unit\Aggregate\UnitTranslation\UnitTranslationDefinition
     */
    protected static function getUnitTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Unit/Aggregate/UnitTranslation/UnitTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\Unit\\Aggregate\\UnitTranslation\\UnitTranslationDefinition'] = $instance = new \Shopware\Core\System\Unit\Aggregate\UnitTranslation\UnitTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\Unit\UnitDefinition' shared service.
     *
     * @return \Shopware\Core\System\Unit\UnitDefinition
     */
    protected static function getUnitDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Unit/UnitDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\Unit\\UnitDefinition'] = $instance = new \Shopware\Core\System\Unit\UnitDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\User\Aggregate\UserAccessKey\UserAccessKeyDefinition' shared service.
     *
     * @return \Shopware\Core\System\User\Aggregate\UserAccessKey\UserAccessKeyDefinition
     */
    protected static function getUserAccessKeyDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/User/Aggregate/UserAccessKey/UserAccessKeyDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\User\\Aggregate\\UserAccessKey\\UserAccessKeyDefinition'] = $instance = new \Shopware\Core\System\User\Aggregate\UserAccessKey\UserAccessKeyDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\User\Aggregate\UserConfig\UserConfigDefinition' shared service.
     *
     * @return \Shopware\Core\System\User\Aggregate\UserConfig\UserConfigDefinition
     */
    protected static function getUserConfigDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/User/Aggregate/UserConfig/UserConfigDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\User\\Aggregate\\UserConfig\\UserConfigDefinition'] = $instance = new \Shopware\Core\System\User\Aggregate\UserConfig\UserConfigDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\User\Aggregate\UserRecovery\UserRecoveryDefinition' shared service.
     *
     * @return \Shopware\Core\System\User\Aggregate\UserRecovery\UserRecoveryDefinition
     */
    protected static function getUserRecoveryDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/User/Aggregate/UserRecovery/UserRecoveryDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Core\\System\\User\\Aggregate\\UserRecovery\\UserRecoveryDefinition'] = $instance = new \Shopware\Core\System\User\Aggregate\UserRecovery\UserRecoveryDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Core\System\User\UserDefinition' shared service.
     *
     * @return \Shopware\Core\System\User\UserDefinition
     */
    protected static function getUserDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Core\\System\\User\\UserDefinition'] = $instance = new \Shopware\Core\System\User\UserDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Storefront\Theme\Aggregate\ThemeChildDefinition' shared service.
     *
     * @return \Shopware\Storefront\Theme\Aggregate\ThemeChildDefinition
     */
    protected static function getThemeChildDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Aggregate/ThemeChildDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Storefront\\Theme\\Aggregate\\ThemeChildDefinition'] = $instance = new \Shopware\Storefront\Theme\Aggregate\ThemeChildDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Storefront\Theme\Aggregate\ThemeMediaDefinition' shared service.
     *
     * @return \Shopware\Storefront\Theme\Aggregate\ThemeMediaDefinition
     */
    protected static function getThemeMediaDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Aggregate/ThemeMediaDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Storefront\\Theme\\Aggregate\\ThemeMediaDefinition'] = $instance = new \Shopware\Storefront\Theme\Aggregate\ThemeMediaDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Storefront\Theme\Aggregate\ThemeSalesChannelDefinition' shared service.
     *
     * @return \Shopware\Storefront\Theme\Aggregate\ThemeSalesChannelDefinition
     */
    protected static function getThemeSalesChannelDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Storefront\\Theme\\Aggregate\\ThemeSalesChannelDefinition'] = $instance = new \Shopware\Storefront\Theme\Aggregate\ThemeSalesChannelDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Storefront\Theme\Aggregate\ThemeTranslationDefinition' shared service.
     *
     * @return \Shopware\Storefront\Theme\Aggregate\ThemeTranslationDefinition
     */
    protected static function getThemeTranslationDefinition2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityTranslationDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Aggregate/ThemeTranslationDefinition.php';

        $container->services['sales_channel_definition.Shopware\\Storefront\\Theme\\Aggregate\\ThemeTranslationDefinition'] = $instance = new \Shopware\Storefront\Theme\Aggregate\ThemeTranslationDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_definition.Shopware\Storefront\Theme\ThemeDefinition' shared service.
     *
     * @return \Shopware\Storefront\Theme\ThemeDefinition
     */
    protected static function getThemeDefinition2Service($container)
    {
        $container->services['sales_channel_definition.Shopware\\Storefront\\Theme\\ThemeDefinition'] = $instance = new \Shopware\Storefront\Theme\ThemeDefinition();

        $instance->compile(($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)));

        return $instance;
    }

    /**
     * Gets the public 'sales_channel_domain.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getSalesChannelDomain_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['sales_channel_domain.repository'])) {
            return $container->services['sales_channel_domain.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['sales_channel_domain.repository'])) {
            return $container->services['sales_channel_domain.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['sales_channel_domain.repository'])) {
            return $container->services['sales_channel_domain.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['sales_channel_domain.repository'])) {
            return $container->services['sales_channel_domain.repository'];
        }

        return $container->services['sales_channel_domain.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelDomain\\SalesChannelDomainDefinition'] ?? self::getSalesChannelDomainDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel_language.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getSalesChannelLanguage_RepositoryService($container)
    {
        return $container->services['sales_channel_language.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelLanguage\\SalesChannelLanguageDefinition'] ?? self::getSalesChannelLanguageDefinition2Service($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel_payment_method.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getSalesChannelPaymentMethod_RepositoryService($container)
    {
        return $container->services['sales_channel_payment_method.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelPaymentMethod\\SalesChannelPaymentMethodDefinition'] ?? self::getSalesChannelPaymentMethodDefinition2Service($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel_shipping_method.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getSalesChannelShippingMethod_RepositoryService($container)
    {
        return $container->services['sales_channel_shipping_method.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelShippingMethod\\SalesChannelShippingMethodDefinition'] ?? self::getSalesChannelShippingMethodDefinition2Service($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getSalesChannelTranslation_RepositoryService($container)
    {
        return $container->services['sales_channel_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTranslation\\SalesChannelTranslationDefinition'] ?? self::getSalesChannelTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel_type.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getSalesChannelType_RepositoryService($container)
    {
        return $container->services['sales_channel_type.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelType\\SalesChannelTypeDefinition'] ?? self::getSalesChannelTypeDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'sales_channel_type_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getSalesChannelTypeTranslation_RepositoryService($container)
    {
        return $container->services['sales_channel_type_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTypeTranslation\\SalesChannelTypeTranslationDefinition'] ?? self::getSalesChannelTypeTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'salutation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getSalutation_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['salutation.repository'])) {
            return $container->services['salutation.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['salutation.repository'])) {
            return $container->services['salutation.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['salutation.repository'])) {
            return $container->services['salutation.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['salutation.repository'])) {
            return $container->services['salutation.repository'];
        }

        return $container->services['salutation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\Salutation\\SalutationDefinition'] ?? self::getSalutationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'salutation_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getSalutationTranslation_RepositoryService($container)
    {
        return $container->services['salutation_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\Salutation\\Aggregate\\SalutationTranslation\\SalutationTranslationDefinition'] ?? self::getSalutationTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'scheduled_task.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getScheduledTask_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['scheduled_task.repository'])) {
            return $container->services['scheduled_task.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['scheduled_task.repository'])) {
            return $container->services['scheduled_task.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['scheduled_task.repository'])) {
            return $container->services['scheduled_task.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['scheduled_task.repository'])) {
            return $container->services['scheduled_task.repository'];
        }

        return $container->services['scheduled_task.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\ScheduledTaskDefinition'] ?? self::getScheduledTaskDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'script.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getScript_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['script.repository'])) {
            return $container->services['script.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['script.repository'])) {
            return $container->services['script.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['script.repository'])) {
            return $container->services['script.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['script.repository'])) {
            return $container->services['script.repository'];
        }

        return $container->services['script.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\Script\\ScriptDefinition'] ?? self::getScriptDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'seo_url.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getSeoUrl_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['seo_url.repository'])) {
            return $container->services['seo_url.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['seo_url.repository'])) {
            return $container->services['seo_url.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['seo_url.repository'])) {
            return $container->services['seo_url.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['seo_url.repository'])) {
            return $container->services['seo_url.repository'];
        }

        return $container->services['seo_url.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Seo\\SeoUrl\\SeoUrlDefinition'] ?? self::getSeoUrlDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'seo_url_template.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getSeoUrlTemplate_RepositoryService($container)
    {
        return $container->services['seo_url_template.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Content\\Seo\\SeoUrlTemplate\\SeoUrlTemplateDefinition'] ?? self::getSeoUrlTemplateDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'services_resetter' shared service.
     *
     * @return \Symfony\Component\HttpKernel\DependencyInjection\ServicesResetter
     */
    protected static function getServicesResetterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/DependencyInjection/ServicesResetter.php';

        return $container->services['services_resetter'] = new \Symfony\Component\HttpKernel\DependencyInjection\ServicesResetter(new RewindableGenerator(function () use ($container) {
            if (isset($container->services['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder'])) {
                yield 'Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder' => ($container->services['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\EntityTemplateLoader'])) {
                yield 'Shopware\\Core\\Framework\\Adapter\\Twig\\EntityTemplateLoader' => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\EntityTemplateLoader'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\Framework\\App\\ActiveAppsLoader'])) {
                yield 'Shopware\\Core\\Framework\\App\\ActiveAppsLoader' => ($container->privates['Shopware\\Core\\Framework\\App\\ActiveAppsLoader'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\System\\CustomField\\CustomFieldService'])) {
                yield 'Shopware\\Core\\System\\CustomField\\CustomFieldService' => ($container->privates['Shopware\\Core\\System\\CustomField\\CustomFieldService'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\Framework\\Script\\Debugging\\ScriptTraces'])) {
                yield 'Shopware\\Core\\Framework\\Script\\Debugging\\ScriptTraces' => ($container->privates['Shopware\\Core\\Framework\\Script\\Debugging\\ScriptTraces'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\Framework\\Webhook\\WebhookCacheClearer'])) {
                yield 'Shopware\\Core\\Framework\\Webhook\\WebhookCacheClearer' => ($container->privates['Shopware\\Core\\Framework\\Webhook\\WebhookCacheClearer'] ?? null);
            }
            if (false) {
                yield 'shopware.increment.gateway.array' => null;
            }
            if (isset($container->privates['Shopware\\Core\\System\\SalesChannel\\StoreApiCustomFieldMapper'])) {
                yield 'Shopware\\Core\\System\\SalesChannel\\StoreApiCustomFieldMapper' => ($container->privates['Shopware\\Core\\System\\SalesChannel\\StoreApiCustomFieldMapper'] ?? null);
            }
            if (isset($container->services['Shopware\\Core\\System\\Currency\\CurrencyFormatter'])) {
                yield 'Shopware\\Core\\System\\Currency\\CurrencyFormatter' => ($container->services['Shopware\\Core\\System\\Currency\\CurrencyFormatter'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'])) {
                yield 'Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider' => ($container->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'])) {
                yield 'Shopware\\Core\\System\\StateMachine\\StateMachineRegistry' => ($container->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\System\\StateMachine\\Loader\\InitialStateIdLoader'])) {
                yield 'Shopware\\Core\\System\\StateMachine\\Loader\\InitialStateIdLoader' => ($container->privates['Shopware\\Core\\System\\StateMachine\\Loader\\InitialStateIdLoader'] ?? null);
            }
            if (isset($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'])) {
                yield 'Shopware\\Core\\System\\SystemConfig\\SystemConfigService' => ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\System\\SystemConfig\\Store\\MemoizedSystemConfigStore'])) {
                yield 'Shopware\\Core\\System\\SystemConfig\\Store\\MemoizedSystemConfigStore' => ($container->privates['Shopware\\Core\\System\\SystemConfig\\Store\\MemoizedSystemConfigStore'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\Content\\Media\\Pathname\\UrlGeneratorInterface'])) {
                yield 'Shopware\\Core\\Content\\Media\\Pathname\\UrlGeneratorInterface' => ($container->privates['Shopware\\Core\\Content\\Media\\Pathname\\UrlGeneratorInterface'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\AppScriptProductPriceCalculator'])) {
                yield 'Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\ProductPriceCalculator' => ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\AppScriptProductPriceCalculator'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\AppScriptProductPriceCalculator'])) {
                yield 'Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\AppScriptProductPriceCalculator' => ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\AppScriptProductPriceCalculator'] ?? null);
            }
            if (isset($container->privates['Shopware\\Elasticsearch\\Product\\SearchKeywordReplacement'])) {
                yield 'Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\SearchKeywordUpdater' => ($container->privates['Shopware\\Elasticsearch\\Product\\SearchKeywordReplacement'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Filter\\TokenFilter'])) {
                yield 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Filter\\TokenFilter' => ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Filter\\TokenFilter'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'])) {
                yield 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer' => ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\SalutationSerializer'])) {
                yield 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\SalutationSerializer' => ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\SalutationSerializer'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CountrySerializer'])) {
                yield 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CountrySerializer' => ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CountrySerializer'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\LanguageSerializer'])) {
                yield 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\LanguageSerializer' => ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\LanguageSerializer'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer'])) {
                yield 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer' => ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\PromotionIndividualCodeSerializer'])) {
                yield 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\PromotionIndividualCodeSerializer' => ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\PromotionIndividualCodeSerializer'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCategoryPathsSubscriber'])) {
                yield 'Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCategoryPathsSubscriber' => ($container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCategoryPathsSubscriber'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber'])) {
                yield 'Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber' => ($container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber'] ?? null);
            }
            if (isset($container->services['Shopware\\Core\\Content\\Flow\\Dispatching\\CachedFlowLoader'])) {
                yield 'Shopware\\Core\\Content\\Flow\\Dispatching\\CachedFlowLoader' => ($container->services['Shopware\\Core\\Content\\Flow\\Dispatching\\CachedFlowLoader'] ?? null);
            }
            if (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'])) {
                yield 'Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService' => ($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\Address\\AddressValidator'])) {
                yield 'Shopware\\Core\\Checkout\\Cart\\Address\\AddressValidator' => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Address\\AddressValidator'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'])) {
                yield 'Shopware\\Core\\Checkout\\Cart\\CartRuleLoader' => ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\Facade\\ScriptPriceStubs'])) {
                yield 'Shopware\\Core\\Checkout\\Cart\\Facade\\ScriptPriceStubs' => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Facade\\ScriptPriceStubs'] ?? null);
            }
            if (isset($container->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'])) {
                yield 'Shopware\\Storefront\\Theme\\StorefrontPluginRegistry' => ($container->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? null);
            }
            if (isset($container->privates['Shopware\\Storefront\\Theme\\Twig\\ThemeNamespaceHierarchyBuilder'])) {
                yield 'Shopware\\Storefront\\Theme\\Twig\\ThemeNamespaceHierarchyBuilder' => ($container->privates['Shopware\\Storefront\\Theme\\Twig\\ThemeNamespaceHierarchyBuilder'] ?? null);
            }
            if (isset($container->services['Shopware\\Storefront\\Theme\\SalesChannelThemeLoader'])) {
                yield 'Shopware\\Storefront\\Theme\\SalesChannelThemeLoader' => ($container->services['Shopware\\Storefront\\Theme\\SalesChannelThemeLoader'] ?? null);
            }
            if (isset($container->services['cache.app'])) {
                yield 'cache.app' => ($container->services['cache.app'] ?? null);
            }
            if (isset($container->services['cache.system'])) {
                yield 'cache.system' => ($container->services['cache.system'] ?? null);
            }
            if (false) {
                yield 'cache.validator' => null;
            }
            if (false) {
                yield 'cache.serializer' => null;
            }
            if (isset($container->privates['cache.annotations'])) {
                yield 'cache.annotations' => ($container->privates['cache.annotations'] ?? null);
            }
            if (false) {
                yield 'cache.property_info' => null;
            }
            if (isset($container->privates['cache.messenger.restart_workers_signal'])) {
                yield 'cache.messenger.restart_workers_signal' => ($container->privates['cache.messenger.restart_workers_signal'] ?? null);
            }
            if (isset($container->privates['http_client.transport'])) {
                yield 'http_client.transport' => ($container->privates['http_client.transport'] ?? null);
            }
            if (isset($container->privates['mailer.message_logger_listener'])) {
                yield 'mailer.message_logger_listener' => ($container->privates['mailer.message_logger_listener'] ?? null);
            }
            if (isset($container->privates['translation.locale_switcher'])) {
                yield 'translation.locale_switcher' => ($container->privates['translation.locale_switcher'] ?? null);
            }
            if (isset($container->privates['debug.stopwatch'])) {
                yield 'debug.stopwatch' => ($container->privates['debug.stopwatch'] ?? null);
            }
            if (isset($container->services['event_dispatcher'])) {
                yield 'debug.event_dispatcher' => ($container->services['event_dispatcher'] ?? null);
            }
            if (isset($container->privates['cache.rate_limiter'])) {
                yield 'cache.rate_limiter' => ($container->privates['cache.rate_limiter'] ?? null);
            }
            if (isset($container->privates['.cache.object.inner'])) {
                yield '.cache.object.inner' => ($container->privates['.cache.object.inner'] ?? null);
            }
            if (isset($container->privates['.cache.http.inner'])) {
                yield '.cache.http.inner' => ($container->privates['.cache.http.inner'] ?? null);
            }
            if (isset($container->privates['cache.tags'])) {
                yield 'cache.tags' => ($container->privates['cache.tags'] ?? null);
            }
            if (isset($container->privates['session_listener'])) {
                yield 'session_listener' => ($container->privates['session_listener'] ?? null);
            }
            if (isset($container->services['cache.validator_expression_language'])) {
                yield 'cache.validator_expression_language' => ($container->services['cache.validator_expression_language'] ?? null);
            }
            if (isset($container->privates['messenger.transport.in_memory.factory'])) {
                yield 'messenger.transport.in_memory.factory' => ($container->privates['messenger.transport.in_memory.factory'] ?? null);
            }
            if (isset($container->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'])) {
                yield 'monolog.handler.main' => ($container->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? null);
            }
            if (isset($container->privates['monolog.handler.console'])) {
                yield 'monolog.handler.console' => ($container->privates['monolog.handler.console'] ?? null);
            }
            if (isset($container->privates['monolog.handler.business_event_handler_buffer'])) {
                yield 'monolog.handler.business_event_handler_buffer' => ($container->privates['monolog.handler.business_event_handler_buffer'] ?? null);
            }
            if (isset($container->privates['monolog.handler.elasticsearch'])) {
                yield 'monolog.handler.elasticsearch' => ($container->privates['monolog.handler.elasticsearch'] ?? null);
            }
        }, fn () => 0 + (int) (isset($container->services['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder'])) + (int) (isset($container->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\EntityTemplateLoader'])) + (int) (isset($container->privates['Shopware\\Core\\Framework\\App\\ActiveAppsLoader'])) + (int) (isset($container->privates['Shopware\\Core\\System\\CustomField\\CustomFieldService'])) + (int) (isset($container->privates['Shopware\\Core\\Framework\\Script\\Debugging\\ScriptTraces'])) + (int) (isset($container->privates['Shopware\\Core\\Framework\\Webhook\\WebhookCacheClearer'])) + (int) (false) + (int) (isset($container->privates['Shopware\\Core\\System\\SalesChannel\\StoreApiCustomFieldMapper'])) + (int) (isset($container->services['Shopware\\Core\\System\\Currency\\CurrencyFormatter'])) + (int) (isset($container->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'])) + (int) (isset($container->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'])) + (int) (isset($container->privates['Shopware\\Core\\System\\StateMachine\\Loader\\InitialStateIdLoader'])) + (int) (isset($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'])) + (int) (isset($container->privates['Shopware\\Core\\System\\SystemConfig\\Store\\MemoizedSystemConfigStore'])) + (int) (isset($container->privates['Shopware\\Core\\Content\\Media\\Pathname\\UrlGeneratorInterface'])) + (int) (isset($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\AppScriptProductPriceCalculator'])) + (int) (isset($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\AppScriptProductPriceCalculator'])) + (int) (isset($container->privates['Shopware\\Elasticsearch\\Product\\SearchKeywordReplacement'])) + (int) (isset($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Filter\\TokenFilter'])) + (int) (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'])) + (int) (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\SalutationSerializer'])) + (int) (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CountrySerializer'])) + (int) (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\LanguageSerializer'])) + (int) (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer'])) + (int) (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\PromotionIndividualCodeSerializer'])) + (int) (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCategoryPathsSubscriber'])) + (int) (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber'])) + (int) (isset($container->services['Shopware\\Core\\Content\\Flow\\Dispatching\\CachedFlowLoader'])) + (int) (isset($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'])) + (int) (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\Address\\AddressValidator'])) + (int) (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'])) + (int) (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\Facade\\ScriptPriceStubs'])) + (int) (isset($container->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'])) + (int) (isset($container->privates['Shopware\\Storefront\\Theme\\Twig\\ThemeNamespaceHierarchyBuilder'])) + (int) (isset($container->services['Shopware\\Storefront\\Theme\\SalesChannelThemeLoader'])) + (int) (isset($container->services['cache.app'])) + (int) (isset($container->services['cache.system'])) + (int) (false) + (int) (false) + (int) (isset($container->privates['cache.annotations'])) + (int) (false) + (int) (isset($container->privates['cache.messenger.restart_workers_signal'])) + (int) (isset($container->privates['http_client.transport'])) + (int) (isset($container->privates['mailer.message_logger_listener'])) + (int) (isset($container->privates['translation.locale_switcher'])) + (int) (isset($container->privates['debug.stopwatch'])) + (int) (isset($container->services['event_dispatcher'])) + (int) (isset($container->privates['cache.rate_limiter'])) + (int) (isset($container->privates['.cache.object.inner'])) + (int) (isset($container->privates['.cache.http.inner'])) + (int) (isset($container->privates['cache.tags'])) + (int) (isset($container->privates['session_listener'])) + (int) (isset($container->services['cache.validator_expression_language'])) + (int) (isset($container->privates['messenger.transport.in_memory.factory'])) + (int) (isset($container->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'])) + (int) (isset($container->privates['monolog.handler.console'])) + (int) (isset($container->privates['monolog.handler.business_event_handler_buffer'])) + (int) (isset($container->privates['monolog.handler.elasticsearch']))), ['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder' => ['reset'], 'Shopware\\Core\\Framework\\Adapter\\Twig\\EntityTemplateLoader' => ['reset'], 'Shopware\\Core\\Framework\\App\\ActiveAppsLoader' => ['reset'], 'Shopware\\Core\\System\\CustomField\\CustomFieldService' => ['reset'], 'Shopware\\Core\\Framework\\Script\\Debugging\\ScriptTraces' => ['reset'], 'Shopware\\Core\\Framework\\Webhook\\WebhookCacheClearer' => ['reset'], 'shopware.increment.gateway.array' => ['resetAll'], 'Shopware\\Core\\System\\SalesChannel\\StoreApiCustomFieldMapper' => ['reset'], 'Shopware\\Core\\System\\Currency\\CurrencyFormatter' => ['reset'], 'Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider' => ['reset'], 'Shopware\\Core\\System\\StateMachine\\StateMachineRegistry' => ['reset'], 'Shopware\\Core\\System\\StateMachine\\Loader\\InitialStateIdLoader' => ['reset'], 'Shopware\\Core\\System\\SystemConfig\\SystemConfigService' => ['reset'], 'Shopware\\Core\\System\\SystemConfig\\Store\\MemoizedSystemConfigStore' => ['reset'], 'Shopware\\Core\\Content\\Media\\Pathname\\UrlGeneratorInterface' => ['reset'], 'Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\ProductPriceCalculator' => ['reset'], 'Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\AppScriptProductPriceCalculator' => ['reset'], 'Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\SearchKeywordUpdater' => ['reset'], 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Filter\\TokenFilter' => ['reset'], 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer' => ['reset'], 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\SalutationSerializer' => ['reset'], 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CountrySerializer' => ['reset'], 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\LanguageSerializer' => ['reset'], 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer' => ['reset'], 'Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\PromotionIndividualCodeSerializer' => ['reset'], 'Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCategoryPathsSubscriber' => ['reset'], 'Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber' => ['reset'], 'Shopware\\Core\\Content\\Flow\\Dispatching\\CachedFlowLoader' => ['reset'], 'Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService' => ['reset'], 'Shopware\\Core\\Checkout\\Cart\\Address\\AddressValidator' => ['reset'], 'Shopware\\Core\\Checkout\\Cart\\CartRuleLoader' => ['reset'], 'Shopware\\Core\\Checkout\\Cart\\Facade\\ScriptPriceStubs' => ['reset'], 'Shopware\\Storefront\\Theme\\StorefrontPluginRegistry' => ['reset'], 'Shopware\\Storefront\\Theme\\Twig\\ThemeNamespaceHierarchyBuilder' => ['reset'], 'Shopware\\Storefront\\Theme\\SalesChannelThemeLoader' => ['reset'], 'cache.app' => ['reset'], 'cache.system' => ['reset'], 'cache.validator' => ['reset'], 'cache.serializer' => ['reset'], 'cache.annotations' => ['reset'], 'cache.property_info' => ['reset'], 'cache.messenger.restart_workers_signal' => ['reset'], 'http_client.transport' => ['?reset'], 'mailer.message_logger_listener' => ['reset'], 'translation.locale_switcher' => ['reset'], 'debug.stopwatch' => ['reset'], 'debug.event_dispatcher' => ['reset'], 'cache.rate_limiter' => ['reset'], '.cache.object.inner' => ['reset'], '.cache.http.inner' => ['reset'], 'cache.tags' => ['reset'], 'session_listener' => ['reset'], 'cache.validator_expression_language' => ['reset'], 'messenger.transport.in_memory.factory' => ['reset'], 'monolog.handler.main' => ['reset'], 'monolog.handler.console' => ['reset'], 'monolog.handler.business_event_handler_buffer' => ['reset'], 'monolog.handler.elasticsearch' => ['reset']]);
    }

    /**
     * Gets the public 'shipping_method.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getShippingMethod_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['shipping_method.repository'])) {
            return $container->services['shipping_method.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['shipping_method.repository'])) {
            return $container->services['shipping_method.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['shipping_method.repository'])) {
            return $container->services['shipping_method.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['shipping_method.repository'])) {
            return $container->services['shipping_method.repository'];
        }

        return $container->services['shipping_method.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Shipping\\ShippingMethodDefinition'] ?? self::getShippingMethodDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'shipping_method_price.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getShippingMethodPrice_RepositoryService($container)
    {
        return $container->services['shipping_method_price.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodPrice\\ShippingMethodPriceDefinition'] ?? self::getShippingMethodPriceDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'shipping_method_tag.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getShippingMethodTag_RepositoryService($container)
    {
        return $container->services['shipping_method_tag.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTag\\ShippingMethodTagDefinition'] ?? self::getShippingMethodTagDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'shipping_method_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getShippingMethodTranslation_RepositoryService($container)
    {
        return $container->services['shipping_method_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTranslation\\ShippingMethodTranslationDefinition'] ?? self::getShippingMethodTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'shopware.filesystem.asset' shared service.
     *
     * @return \League\Flysystem\FilesystemOperator
     */
    protected static function getShopware_Filesystem_AssetService($container)
    {
        return $container->services['shopware.filesystem.asset'] = ($container->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\FilesystemFactory'] ?? self::getFilesystemFactoryService($container))->factory($container->parameters['shopware.filesystem.asset']);
    }

    /**
     * Gets the public 'shopware.filesystem.private' shared service.
     *
     * @return \League\Flysystem\FilesystemOperator
     */
    protected static function getShopware_Filesystem_PrivateService($container)
    {
        return $container->services['shopware.filesystem.private'] = ($container->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\FilesystemFactory'] ?? self::getFilesystemFactoryService($container))->privateFactory($container->parameters['shopware.filesystem.private']);
    }

    /**
     * Gets the public 'shopware.filesystem.public' shared service.
     *
     * @return \League\Flysystem\FilesystemOperator
     */
    protected static function getShopware_Filesystem_PublicService($container)
    {
        return $container->services['shopware.filesystem.public'] = ($container->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\FilesystemFactory'] ?? self::getFilesystemFactoryService($container))->factory($container->parameters['shopware.filesystem.public']);
    }

    /**
     * Gets the public 'shopware.filesystem.sitemap' shared service.
     *
     * @return \League\Flysystem\FilesystemOperator
     */
    protected static function getShopware_Filesystem_SitemapService($container)
    {
        return $container->services['shopware.filesystem.sitemap'] = ($container->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\FilesystemFactory'] ?? self::getFilesystemFactoryService($container))->factory($container->parameters['shopware.filesystem.sitemap']);
    }

    /**
     * Gets the public 'shopware.filesystem.temp' shared service.
     *
     * @return \League\Flysystem\FilesystemOperator
     */
    protected static function getShopware_Filesystem_TempService($container)
    {
        return $container->services['shopware.filesystem.temp'] = ($container->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\FilesystemFactory'] ?? self::getFilesystemFactoryService($container))->privateFactory($container->parameters['shopware.filesystem.temp']);
    }

    /**
     * Gets the public 'shopware.filesystem.theme' shared service.
     *
     * @return \League\Flysystem\FilesystemOperator
     */
    protected static function getShopware_Filesystem_ThemeService($container)
    {
        return $container->services['shopware.filesystem.theme'] = ($container->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\FilesystemFactory'] ?? self::getFilesystemFactoryService($container))->factory($container->parameters['shopware.filesystem.theme']);
    }

    /**
     * Gets the public 'shopware.frw_client' shared service.
     *
     * @return \GuzzleHttp\Client
     */
    protected static function getShopware_FrwClientService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['shopware.frw_client'] = $container->createProxy('ClientProxyD1baff0', static fn () => \ClientProxyD1baff0::createLazyProxy(static fn () => self::getShopware_FrwClientService($container, false)));
        }

        return ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClientFactory'] ?? self::getStoreClientFactoryService($container))->create(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->services['Shopware\\Core\\Framework\\Store\\Services\\VerifyResponseSignatureMiddleware'] ?? self::getVerifyResponseSignatureMiddlewareService($container));
        }, 1));
    }

    /**
     * Gets the public 'shopware.increment.gateway.registry' shared service.
     *
     * @return \Shopware\Core\Framework\Increment\IncrementGatewayRegistry
     */
    protected static function getShopware_Increment_Gateway_RegistryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Increment/IncrementGatewayRegistry.php';

        return $container->services['shopware.increment.gateway.registry'] = new \Shopware\Core\Framework\Increment\IncrementGatewayRegistry(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['shopware.increment.user_activity.gateway.mysql'] ?? self::getShopware_Increment_UserActivity_Gateway_MysqlService($container));
            yield 1 => ($container->privates['shopware.increment.message_queue.gateway.mysql'] ?? self::getShopware_Increment_MessageQueue_Gateway_MysqlService($container));
        }, 2));
    }

    /**
     * Gets the public 'shopware.store_client' shared service.
     *
     * @return \GuzzleHttp\Client
     */
    protected static function getShopware_StoreClientService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->services['shopware.store_client'] = $container->createProxy('ClientProxyD1baff0', static fn () => \ClientProxyD1baff0::createLazyProxy(static fn () => self::getShopware_StoreClientService($container, false)));
        }

        return ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClientFactory'] ?? self::getStoreClientFactoryService($container))->create(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->services['Shopware\\Core\\Framework\\Store\\Services\\VerifyResponseSignatureMiddleware'] ?? self::getVerifyResponseSignatureMiddlewareService($container));
            yield 1 => ($container->services['Shopware\\Core\\Framework\\Store\\Services\\StoreSessionExpiredMiddleware'] ?? self::getStoreSessionExpiredMiddlewareService($container));
            yield 2 => ($container->services['Shopware\\Core\\Framework\\Store\\Services\\ShopSecretInvalidMiddleware'] ?? self::getShopSecretInvalidMiddlewareService($container));
        }, 3));
    }

    /**
     * Gets the public 'snippet.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getSnippet_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['snippet.repository'])) {
            return $container->services['snippet.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['snippet.repository'])) {
            return $container->services['snippet.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['snippet.repository'])) {
            return $container->services['snippet.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['snippet.repository'])) {
            return $container->services['snippet.repository'];
        }

        return $container->services['snippet.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\Snippet\\SnippetDefinition'] ?? self::getSnippetDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'snippet_set.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getSnippetSet_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['snippet_set.repository'])) {
            return $container->services['snippet_set.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['snippet_set.repository'])) {
            return $container->services['snippet_set.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['snippet_set.repository'])) {
            return $container->services['snippet_set.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['snippet_set.repository'])) {
            return $container->services['snippet_set.repository'];
        }

        return $container->services['snippet_set.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\Snippet\\Aggregate\\SnippetSet\\SnippetSetDefinition'] ?? self::getSnippetSetDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'state_machine.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getStateMachine_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['state_machine.repository'])) {
            return $container->services['state_machine.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['state_machine.repository'])) {
            return $container->services['state_machine.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['state_machine.repository'])) {
            return $container->services['state_machine.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['state_machine.repository'])) {
            return $container->services['state_machine.repository'];
        }

        return $container->services['state_machine.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\StateMachine\\StateMachineDefinition'] ?? self::getStateMachineDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'state_machine_history.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getStateMachineHistory_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['state_machine_history.repository'])) {
            return $container->services['state_machine_history.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['state_machine_history.repository'])) {
            return $container->services['state_machine_history.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['state_machine_history.repository'])) {
            return $container->services['state_machine_history.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['state_machine_history.repository'])) {
            return $container->services['state_machine_history.repository'];
        }

        return $container->services['state_machine_history.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineHistory\\StateMachineHistoryDefinition'] ?? self::getStateMachineHistoryDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'state_machine_state.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getStateMachineState_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['state_machine_state.repository'])) {
            return $container->services['state_machine_state.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['state_machine_state.repository'])) {
            return $container->services['state_machine_state.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['state_machine_state.repository'])) {
            return $container->services['state_machine_state.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['state_machine_state.repository'])) {
            return $container->services['state_machine_state.repository'];
        }

        return $container->services['state_machine_state.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateDefinition'] ?? self::getStateMachineStateDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'state_machine_state_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getStateMachineStateTranslation_RepositoryService($container)
    {
        return $container->services['state_machine_state_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateTranslationDefinition'] ?? self::getStateMachineStateTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'state_machine_transition.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getStateMachineTransition_RepositoryService($container)
    {
        return $container->services['state_machine_transition.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineTransition\\StateMachineTransitionDefinition'] ?? self::getStateMachineTransitionDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'state_machine_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getStateMachineTranslation_RepositoryService($container)
    {
        return $container->services['state_machine_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\StateMachine\\StateMachineTranslationDefinition'] ?? self::getStateMachineTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'storefront.filesystem.private' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected static function getStorefront_Filesystem_PrivateService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $container->services['storefront.filesystem.private'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)), 'plugins/storefront');
    }

    /**
     * Gets the public 'storefront.filesystem.public' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected static function getStorefront_Filesystem_PublicService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $container->services['storefront.filesystem.public'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($container->services['shopware.filesystem.public'] ?? self::getShopware_Filesystem_PublicService($container)), 'plugins/storefront');
    }

    /**
     * Gets the public 'system.filesystem.private' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected static function getSystem_Filesystem_PrivateService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $container->services['system.filesystem.private'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)), 'plugins/system');
    }

    /**
     * Gets the public 'system.filesystem.public' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem
     */
    protected static function getSystem_Filesystem_PublicService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Filesystem/PrefixFilesystem.php';

        return $container->services['system.filesystem.public'] = new \Shopware\Core\Framework\Adapter\Filesystem\PrefixFilesystem(($container->services['shopware.filesystem.public'] ?? self::getShopware_Filesystem_PublicService($container)), 'plugins/system');
    }

    /**
     * Gets the public 'system_config.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getSystemConfig_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['system_config.repository'])) {
            return $container->services['system_config.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['system_config.repository'])) {
            return $container->services['system_config.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['system_config.repository'])) {
            return $container->services['system_config.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['system_config.repository'])) {
            return $container->services['system_config.repository'];
        }

        return $container->services['system_config.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigDefinition'] ?? self::getSystemConfigDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'tag.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getTag_RepositoryService($container)
    {
        return $container->services['tag.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\Tag\\TagDefinition'] ?? self::getTagDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'tax.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getTax_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['tax.repository'])) {
            return $container->services['tax.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['tax.repository'])) {
            return $container->services['tax.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['tax.repository'])) {
            return $container->services['tax.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['tax.repository'])) {
            return $container->services['tax.repository'];
        }

        return $container->services['tax.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\Tax\\TaxDefinition'] ?? self::getTaxDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'tax_provider.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getTaxProvider_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['tax_provider.repository'])) {
            return $container->services['tax_provider.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['tax_provider.repository'])) {
            return $container->services['tax_provider.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['tax_provider.repository'])) {
            return $container->services['tax_provider.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['tax_provider.repository'])) {
            return $container->services['tax_provider.repository'];
        }

        return $container->services['tax_provider.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\TaxProvider\\TaxProviderDefinition'] ?? self::getTaxProviderDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'tax_provider_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getTaxProviderTranslation_RepositoryService($container)
    {
        return $container->services['tax_provider_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\TaxProvider\\Aggregate\\TaxProviderTranslation\\TaxProviderTranslationDefinition'] ?? self::getTaxProviderTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'tax_rule.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getTaxRule_RepositoryService($container)
    {
        return $container->services['tax_rule.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\Tax\\Aggregate\\TaxRule\\TaxRuleDefinition'] ?? self::getTaxRuleDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'tax_rule_type.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getTaxRuleType_RepositoryService($container)
    {
        return $container->services['tax_rule_type.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleType\\TaxRuleTypeDefinition'] ?? self::getTaxRuleTypeDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'tax_rule_type_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getTaxRuleTypeTranslation_RepositoryService($container)
    {
        return $container->services['tax_rule_type_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleTypeTranslation\\TaxRuleTypeTranslationDefinition'] ?? self::getTaxRuleTypeTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'theme.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getTheme_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['theme.repository'])) {
            return $container->services['theme.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['theme.repository'])) {
            return $container->services['theme.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['theme.repository'])) {
            return $container->services['theme.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['theme.repository'])) {
            return $container->services['theme.repository'];
        }

        return $container->services['theme.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Storefront\\Theme\\ThemeDefinition'] ?? self::getThemeDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'theme_child.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getThemeChild_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['theme_child.repository'])) {
            return $container->services['theme_child.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['theme_child.repository'])) {
            return $container->services['theme_child.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['theme_child.repository'])) {
            return $container->services['theme_child.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['theme_child.repository'])) {
            return $container->services['theme_child.repository'];
        }

        return $container->services['theme_child.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Storefront\\Theme\\Aggregate\\ThemeChildDefinition'] ?? self::getThemeChildDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'theme_media.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getThemeMedia_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['theme_media.repository'])) {
            return $container->services['theme_media.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['theme_media.repository'])) {
            return $container->services['theme_media.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['theme_media.repository'])) {
            return $container->services['theme_media.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['theme_media.repository'])) {
            return $container->services['theme_media.repository'];
        }

        return $container->services['theme_media.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Storefront\\Theme\\Aggregate\\ThemeMediaDefinition'] ?? self::getThemeMediaDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'theme_sales_channel.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getThemeSalesChannel_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['theme_sales_channel.repository'])) {
            return $container->services['theme_sales_channel.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['theme_sales_channel.repository'])) {
            return $container->services['theme_sales_channel.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['theme_sales_channel.repository'])) {
            return $container->services['theme_sales_channel.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['theme_sales_channel.repository'])) {
            return $container->services['theme_sales_channel.repository'];
        }

        return $container->services['theme_sales_channel.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Storefront\\Theme\\Aggregate\\ThemeSalesChannelDefinition'] ?? self::getThemeSalesChannelDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'theme_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getThemeTranslation_RepositoryService($container)
    {
        return $container->services['theme_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Storefront\\Theme\\Aggregate\\ThemeTranslationDefinition'] ?? self::getThemeTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'translator' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Translation\Translator
     */
    protected static function getTranslatorService($container)
    {
        $a = ($container->privates['Shopware\\Core\\System\\Snippet\\SnippetService'] ?? self::getSnippetServiceService($container));

        if (isset($container->services['translator'])) {
            return $container->services['translator'];
        }

        return $container->services['translator'] = new \Shopware\Core\Framework\Adapter\Translation\Translator(($container->privates['translator.default'] ?? self::getTranslator_DefaultService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->privates['translator.formatter.default'] ?? self::getTranslator_Formatter_DefaultService($container)), 'dev', ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'] ?? self::getLanguageLocaleCodeProviderService($container)), $a, true);
    }

    /**
     * Gets the public 'twig' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Twig\TwigEnvironment
     */
    protected static function getTwigService($container)
    {
        $container->services['twig'] = $instance = new \Shopware\Core\Framework\Adapter\Twig\TwigEnvironment(($container->privates['twig.loader.chain'] ?? self::getTwig_Loader_ChainService($container)), ['debug' => true, 'strict_variables' => false, 'autoescape' => 'name', 'cache' => ($container->targetDir.''.'/twig'), 'charset' => 'UTF-8']);

        $a = ($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true));
        $b = ($container->services['router'] ?? self::getRouterService($container));

        $c = new \Symfony\Bridge\Twig\Extension\RoutingExtension($b);
        $d = ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack());
        $e = ($container->services['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder'] ?? self::getTemplateFinderService($container));
        $f = ($container->services['Shopware\\Core\\Content\\Seo\\SeoUrlPlaceholderHandlerInterface'] ?? self::getSeoUrlPlaceholderHandlerInterfaceService($container));
        $g = new \Symfony\Bridge\Twig\AppVariable();
        $g->setEnvironment('dev');
        $g->setDebug(true);
        if ($container->has('request_stack')) {
            $g->setRequestStack($d);
        }
        $g->setLocaleSwitcher(($container->privates['translation.locale_switcher'] ?? self::getTranslation_LocaleSwitcherService($container)));

        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\ProfilerExtension(new \Twig\Profiler\Profile(), $a));
        $instance->addExtension(($container->privates['twig.extension.trans'] ?? self::getTwig_Extension_TransService($container)));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\AssetExtension(($container->privates['assets.packages'] ?? self::getAssets_PackagesService($container))));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\CodeExtension(($container->privates['debug.file_link_formatter'] ??= new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter($container->getEnv('default::SYMFONY_IDE'))), \dirname(__DIR__, 4), 'UTF-8'));
        $instance->addExtension($c);
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\YamlExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\StopwatchExtension($a, true));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpKernelExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\HttpFoundationExtension(new \Symfony\Component\HttpFoundation\UrlHelper($d, $b)));
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\SerializerExtension());
        $instance->addExtension(new \Symfony\Bridge\Twig\Extension\DumpExtension(($container->services['var_dumper.cloner'] ?? self::getVarDumper_ClonerService($container)), ($container->privates['var_dumper.html_dumper'] ?? self::getVarDumper_HtmlDumperService($container))));
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Extension\NodeExtension($e, ($container->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateScopeDetector'] ?? self::getTemplateScopeDetectorService($container))));
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Extension\PhpSyntaxExtension());
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Extension\FeatureFlagExtension());
        $instance->addExtension(new \Twig\Extra\Intl\IntlExtension());
        $instance->addExtension(new \Twig\Extra\String\StringExtension());
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Extension\PcreExtension());
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Extension\InstanceOfExtension());
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Filter\CurrencyFilter(($container->services['Shopware\\Core\\System\\Currency\\CurrencyFormatter'] ?? self::getCurrencyFormatterService($container))));
        $instance->addExtension(new \Cocur\Slugify\Bridge\Twig\SlugifyExtension(($container->privates['slugify'] ?? self::getSlugifyService($container))));
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Filter\ReplaceRecursiveFilter());
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\SecurityExtension([]));
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Extension\SeoUrlFunctionExtension($c, $f));
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Extension\CategoryUrlExtension($c, new \Shopware\Core\Content\Category\Service\CategoryUrlGenerator($f)));
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Extension\MediaExtension(($container->services['media.repository'] ?? self::getMedia_RepositoryService($container))));
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Extension\RawUrlFunctionExtension($b, $d));
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Extension\SwSanitizeTwigFilter(($container->services['Shopware\\Core\\Framework\\Util\\HtmlSanitizer'] ?? self::getHtmlSanitizerService($container))));
        $instance->addExtension(new \Shopware\Core\Framework\Adapter\Twig\Extension\BuildBreadcrumbExtension(($container->privates['Shopware\\Core\\Content\\Category\\Service\\CategoryBreadcrumbBuilder'] ?? self::getCategoryBreadcrumbBuilderService($container)), ($container->services['category.repository'] ?? self::getCategory_RepositoryService($container))));
        $instance->addExtension(new \Shopware\Core\Profiling\Twig\DoctrineExtension());
        $instance->addExtension(new \Shopware\Storefront\Framework\Twig\TemplateDataExtension($d));
        $instance->addExtension(new \Shopware\Storefront\Framework\Twig\Extension\ConfigExtension(new \Shopware\Storefront\Framework\Twig\TemplateConfigAccessor(($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->privates['Shopware\\Storefront\\Theme\\ThemeConfigValueAccessor'] ?? self::getThemeConfigValueAccessorService($container)))));
        $instance->addExtension(new \Shopware\Storefront\Framework\Twig\IconExtension($e));
        $instance->addExtension(new \Shopware\Storefront\Framework\Twig\ThumbnailExtension($e));
        $instance->addExtension(new \Shopware\Storefront\Framework\Twig\Extension\UrlEncodingTwigFilter());
        $instance->addExtension(new \Shopware\Storefront\Framework\Twig\Extension\IconCacheTwigFilter());
        $instance->addGlobal('app', new \Shopware\Storefront\Framework\Twig\TwigAppVariable($g, $container->parameters['shopware.twig.app_variable.allowed_server_params']));
        $instance->addRuntimeLoader(new \Twig\RuntimeLoader\ContainerRuntimeLoader(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Symfony\\Bridge\\Twig\\Extension\\HttpKernelRuntime' => ['privates', 'twig.runtime.httpkernel', 'getTwig_Runtime_HttpkernelService', false],
            'Symfony\\Bridge\\Twig\\Extension\\SerializerRuntime' => ['privates', 'twig.runtime.serializer', 'getTwig_Runtime_SerializerService', false],
        ], [
            'Symfony\\Bridge\\Twig\\Extension\\HttpKernelRuntime' => '?',
            'Symfony\\Bridge\\Twig\\Extension\\SerializerRuntime' => '?',
        ])));
        (new \Symfony\Bundle\TwigBundle\DependencyInjection\Configurator\EnvironmentConfigurator('F j, Y H:i', '%d days', NULL, 0, '.', ','))->configure($instance);

        return $instance;
    }

    /**
     * Gets the public 'unit.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getUnit_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['unit.repository'])) {
            return $container->services['unit.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['unit.repository'])) {
            return $container->services['unit.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['unit.repository'])) {
            return $container->services['unit.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['unit.repository'])) {
            return $container->services['unit.repository'];
        }

        return $container->services['unit.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\Unit\\UnitDefinition'] ?? self::getUnitDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'unit_translation.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getUnitTranslation_RepositoryService($container)
    {
        return $container->services['unit_translation.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\Unit\\Aggregate\\UnitTranslation\\UnitTranslationDefinition'] ?? self::getUnitTranslationDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'user.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getUser_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['user.repository'])) {
            return $container->services['user.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['user.repository'])) {
            return $container->services['user.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['user.repository'])) {
            return $container->services['user.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['user.repository'])) {
            return $container->services['user.repository'];
        }

        return $container->services['user.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\User\\UserDefinition'] ?? self::getUserDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'user_access_key.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getUserAccessKey_RepositoryService($container)
    {
        return $container->services['user_access_key.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\User\\Aggregate\\UserAccessKey\\UserAccessKeyDefinition'] ?? self::getUserAccessKeyDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'user_config.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getUserConfig_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['user_config.repository'])) {
            return $container->services['user_config.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['user_config.repository'])) {
            return $container->services['user_config.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['user_config.repository'])) {
            return $container->services['user_config.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['user_config.repository'])) {
            return $container->services['user_config.repository'];
        }

        return $container->services['user_config.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\User\\Aggregate\\UserConfig\\UserConfigDefinition'] ?? self::getUserConfigDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'user_recovery.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getUserRecovery_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['user_recovery.repository'])) {
            return $container->services['user_recovery.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['user_recovery.repository'])) {
            return $container->services['user_recovery.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['user_recovery.repository'])) {
            return $container->services['user_recovery.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['user_recovery.repository'])) {
            return $container->services['user_recovery.repository'];
        }

        return $container->services['user_recovery.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\System\\User\\Aggregate\\UserRecovery\\UserRecoveryDefinition'] ?? self::getUserRecoveryDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'var_dumper.cloner' shared service.
     *
     * @return \Symfony\Component\VarDumper\Cloner\VarCloner
     */
    protected static function getVarDumper_ClonerService($container)
    {
        $container->services['var_dumper.cloner'] = $instance = new \Symfony\Component\VarDumper\Cloner\VarCloner();

        $instance->setMaxItems(2500);
        $instance->setMinDepth(1);
        $instance->setMaxString(-1);
        $instance->addCasters(['Closure' => 'Symfony\\Component\\VarDumper\\Caster\\ReflectionCaster::unsetClosureFileInfo']);

        return $instance;
    }

    /**
     * Gets the public 'version.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getVersion_RepositoryService($container)
    {
        return $container->services['version.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\VersionDefinition'] ?? self::getVersionDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'version_commit.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getVersionCommit_RepositoryService($container)
    {
        return $container->services['version_commit.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommit\\VersionCommitDefinition'] ?? self::getVersionCommitDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'version_commit_data.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getVersionCommitData_RepositoryService($container)
    {
        return $container->services['version_commit_data.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommitData\\VersionCommitDataDefinition'] ?? self::getVersionCommitDataDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'webhook.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getWebhook_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['webhook.repository'])) {
            return $container->services['webhook.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['webhook.repository'])) {
            return $container->services['webhook.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['webhook.repository'])) {
            return $container->services['webhook.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['webhook.repository'])) {
            return $container->services['webhook.repository'];
        }

        return $container->services['webhook.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\Webhook\\WebhookDefinition'] ?? self::getWebhookDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the public 'webhook_event_log.repository' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository
     */
    protected static function getWebhookEventLog_RepositoryService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\VersionManager'] ?? self::getVersionManagerService($container));

        if (isset($container->services['webhook_event_log.repository'])) {
            return $container->services['webhook_event_log.repository'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->services['webhook_event_log.repository'])) {
            return $container->services['webhook_event_log.repository'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntityAggregatorInterface'] ?? self::getEntityAggregatorInterfaceService($container));

        if (isset($container->services['webhook_event_log.repository'])) {
            return $container->services['webhook_event_log.repository'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->services['webhook_event_log.repository'])) {
            return $container->services['webhook_event_log.repository'];
        }

        return $container->services['webhook_event_log.repository'] = new \Shopware\Core\Framework\DataAbstractionLayer\EntityRepository(($container->services['Shopware\\Core\\Framework\\Webhook\\EventLog\\WebhookEventLogDefinition'] ?? self::getWebhookEventLogDefinitionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Read\\EntityReaderInterface'] ?? self::getEntityReaderInterfaceService($container)), $a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Event\\EntityLoadedEventFactory'] ?? self::getEntityLoadedEventFactoryService($container)));
    }

    /**
     * Gets the private '.Shopware\Administration\Command\DeleteAdminFilesAfterBuildCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getDeleteAdminFilesAfterBuildCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Administration\\Command\\DeleteAdminFilesAfterBuildCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('administration:delete-files-after-build', [], 'Deletes all unnecessary files of the administration after the build process.', false, #[\Closure(name: 'Shopware\\Administration\\Command\\DeleteAdminFilesAfterBuildCommand')] fn (): \Shopware\Administration\Command\DeleteAdminFilesAfterBuildCommand => ($container->privates['Shopware\\Administration\\Command\\DeleteAdminFilesAfterBuildCommand'] ?? self::getDeleteAdminFilesAfterBuildCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Administration\Command\DeleteExtensionLocalPublicFilesCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getDeleteExtensionLocalPublicFilesCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Administration\\Command\\DeleteExtensionLocalPublicFilesCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('administration:delete-extension-local-public-files', [], 'Deletes all files in the local public folder of the extension. This command should run after assets:install so the assets are available in the public folder.', false, #[\Closure(name: 'Shopware\\Administration\\Command\\DeleteExtensionLocalPublicFilesCommand')] fn (): \Shopware\Administration\Command\DeleteExtensionLocalPublicFilesCommand => ($container->privates['Shopware\\Administration\\Command\\DeleteExtensionLocalPublicFilesCommand'] ?? self::getDeleteExtensionLocalPublicFilesCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Checkout\Cart\Command\CartMigrateCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getCartMigrateCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Checkout\\Cart\\Command\\CartMigrateCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('cart:migrate', [], 'Migrate carts from redis to database', false, #[\Closure(name: 'Shopware\\Core\\Checkout\\Cart\\Command\\CartMigrateCommand')] fn (): \Shopware\Core\Checkout\Cart\Command\CartMigrateCommand => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Command\\CartMigrateCommand'] ?? self::getCartMigrateCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Checkout\Customer\Command\DeleteUnusedGuestCustomersCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getDeleteUnusedGuestCustomersCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Checkout\\Customer\\Command\\DeleteUnusedGuestCustomersCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('customer:delete-unused-guests', [], 'Delete unused guest customers', false, #[\Closure(name: 'Shopware\\Core\\Checkout\\Customer\\Command\\DeleteUnusedGuestCustomersCommand')] fn (): \Shopware\Core\Checkout\Customer\Command\DeleteUnusedGuestCustomersCommand => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Command\\DeleteUnusedGuestCustomersCommand'] ?? self::getDeleteUnusedGuestCustomersCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Content\ImportExport\Command\DeleteExpiredFilesCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getDeleteExpiredFilesCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Content\\ImportExport\\Command\\DeleteExpiredFilesCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('import-export:delete-expired', [], 'Deletes expired files', false, #[\Closure(name: 'Shopware\\Core\\Content\\ImportExport\\Command\\DeleteExpiredFilesCommand')] fn (): \Shopware\Core\Content\ImportExport\Command\DeleteExpiredFilesCommand => ($container->privates['Shopware\\Core\\Content\\ImportExport\\Command\\DeleteExpiredFilesCommand'] ?? self::getDeleteExpiredFilesCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Content\ImportExport\Command\ImportEntityCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getImportEntityCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Content\\ImportExport\\Command\\ImportEntityCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('import:entity', [], 'Import entities from a csv file', false, #[\Closure(name: 'Shopware\\Core\\Content\\ImportExport\\Command\\ImportEntityCommand')] fn (): \Shopware\Core\Content\ImportExport\Command\ImportEntityCommand => ($container->privates['Shopware\\Core\\Content\\ImportExport\\Command\\ImportEntityCommand'] ?? self::getImportEntityCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Content\Media\Commands\DeleteNotUsedMediaCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getDeleteNotUsedMediaCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Content\\Media\\Commands\\DeleteNotUsedMediaCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('media:delete-unused', [], 'Deletes all media files which are not used in any entity', false, #[\Closure(name: 'Shopware\\Core\\Content\\Media\\Commands\\DeleteNotUsedMediaCommand')] fn (): \Shopware\Core\Content\Media\Commands\DeleteNotUsedMediaCommand => (isset($container->factories['service_container']['Shopware\\Core\\Content\\Media\\Commands\\DeleteNotUsedMediaCommand']) ? $container->factories['service_container']['Shopware\\Core\\Content\\Media\\Commands\\DeleteNotUsedMediaCommand']($container) : self::getDeleteNotUsedMediaCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Content\Media\Commands\GenerateMediaTypesCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getGenerateMediaTypesCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Content\\Media\\Commands\\GenerateMediaTypesCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('media:generate-media-types', [], 'Generates media types for all media files', false, #[\Closure(name: 'Shopware\\Core\\Content\\Media\\Commands\\GenerateMediaTypesCommand')] fn (): \Shopware\Core\Content\Media\Commands\GenerateMediaTypesCommand => ($container->privates['Shopware\\Core\\Content\\Media\\Commands\\GenerateMediaTypesCommand'] ?? self::getGenerateMediaTypesCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Content\Media\Commands\GenerateThumbnailsCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getGenerateThumbnailsCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Content\\Media\\Commands\\GenerateThumbnailsCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('media:generate-thumbnails', [], 'Generates thumbnails for all media files', false, #[\Closure(name: 'Shopware\\Core\\Content\\Media\\Commands\\GenerateThumbnailsCommand')] fn (): \Shopware\Core\Content\Media\Commands\GenerateThumbnailsCommand => ($container->privates['Shopware\\Core\\Content\\Media\\Commands\\GenerateThumbnailsCommand'] ?? self::getGenerateThumbnailsCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Content\Media\Infrastructure\Command\UpdatePathCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getUpdatePathCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Content\\Media\\Infrastructure\\Command\\UpdatePathCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('media:update-path', [], 'Iterates over the media and updates the path column.', false, #[\Closure(name: 'Shopware\\Core\\Content\\Media\\Infrastructure\\Command\\UpdatePathCommand')] fn (): \Shopware\Core\Content\Media\Infrastructure\Command\UpdatePathCommand => ($container->privates['Shopware\\Core\\Content\\Media\\Infrastructure\\Command\\UpdatePathCommand'] ?? self::getUpdatePathCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Content\ProductExport\Command\ProductExportGenerateCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getProductExportGenerateCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Content\\ProductExport\\Command\\ProductExportGenerateCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('product-export:generate', [], 'Generates a product export file', false, #[\Closure(name: 'Shopware\\Core\\Content\\ProductExport\\Command\\ProductExportGenerateCommand')] fn (): \Shopware\Core\Content\ProductExport\Command\ProductExportGenerateCommand => ($container->privates['Shopware\\Core\\Content\\ProductExport\\Command\\ProductExportGenerateCommand'] ?? self::getProductExportGenerateCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Content\Sitemap\Commands\SitemapGenerateCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getSitemapGenerateCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Content\\Sitemap\\Commands\\SitemapGenerateCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('sitemap:generate', [], 'Generates sitemap files', false, #[\Closure(name: 'Shopware\\Core\\Content\\Sitemap\\Commands\\SitemapGenerateCommand')] fn (): \Shopware\Core\Content\Sitemap\Commands\SitemapGenerateCommand => ($container->privates['Shopware\\Core\\Content\\Sitemap\\Commands\\SitemapGenerateCommand'] ?? self::getSitemapGenerateCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Adapter\Command\S3FilesystemVisibilityCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getS3FilesystemVisibilityCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Adapter\\Command\\S3FilesystemVisibilityCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('s3:set-visibility', [], 'Sets the visibility of all files in the s3 filesystem to public', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Adapter\\Command\\S3FilesystemVisibilityCommand')] fn (): \Shopware\Core\Framework\Adapter\Command\S3FilesystemVisibilityCommand => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Command\\S3FilesystemVisibilityCommand'] ?? self::getS3FilesystemVisibilityCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Api\Command\DumpClassSchemaCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getDumpClassSchemaCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Api\\Command\\DumpClassSchemaCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('framework:dump:class:schema', [], 'Dumps the schema of the given entity', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Api\\Command\\DumpClassSchemaCommand')] fn (): \Shopware\Core\Framework\Api\Command\DumpClassSchemaCommand => ($container->privates['Shopware\\Core\\Framework\\Api\\Command\\DumpClassSchemaCommand'] ?? self::getDumpClassSchemaCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Api\Command\DumpSchemaCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getDumpSchemaCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Api\\Command\\DumpSchemaCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('framework:schema', [], 'Dumps the schema of the given entity', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Api\\Command\\DumpSchemaCommand')] fn (): \Shopware\Core\Framework\Api\Command\DumpSchemaCommand => ($container->privates['Shopware\\Core\\Framework\\Api\\Command\\DumpSchemaCommand'] ?? self::getDumpSchemaCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\App\Command\ActivateAppCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getActivateAppCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\App\\Command\\ActivateAppCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('app:activate', [], 'Activates an app', false, #[\Closure(name: 'Shopware\\Core\\Framework\\App\\Command\\ActivateAppCommand')] fn (): \Shopware\Core\Framework\App\Command\ActivateAppCommand => ($container->privates['Shopware\\Core\\Framework\\App\\Command\\ActivateAppCommand'] ?? self::getActivateAppCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\App\Command\CreateAppCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getCreateAppCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\App\\Command\\CreateAppCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('app:create', [], 'Creates an app skeleton', false, #[\Closure(name: 'Shopware\\Core\\Framework\\App\\Command\\CreateAppCommand')] fn (): \Shopware\Core\Framework\App\Command\CreateAppCommand => ($container->privates['Shopware\\Core\\Framework\\App\\Command\\CreateAppCommand'] ?? self::getCreateAppCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\App\Command\DeactivateAppCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getDeactivateAppCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\App\\Command\\DeactivateAppCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('app:deactivate', [], 'Deactivates an app', false, #[\Closure(name: 'Shopware\\Core\\Framework\\App\\Command\\DeactivateAppCommand')] fn (): \Shopware\Core\Framework\App\Command\DeactivateAppCommand => ($container->privates['Shopware\\Core\\Framework\\App\\Command\\DeactivateAppCommand'] ?? self::getDeactivateAppCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\App\Command\InstallAppCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getInstallAppCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\App\\Command\\InstallAppCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('app:install', [], 'Installs an app', false, #[\Closure(name: 'Shopware\\Core\\Framework\\App\\Command\\InstallAppCommand')] fn (): \Shopware\Core\Framework\App\Command\InstallAppCommand => ($container->privates['Shopware\\Core\\Framework\\App\\Command\\InstallAppCommand'] ?? self::getInstallAppCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\App\Command\RefreshAppCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getRefreshAppCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\App\\Command\\RefreshAppCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('app:refresh', ['app:update'], 'Refreshes an app', false, #[\Closure(name: 'Shopware\\Core\\Framework\\App\\Command\\RefreshAppCommand')] fn (): \Shopware\Core\Framework\App\Command\RefreshAppCommand => ($container->privates['Shopware\\Core\\Framework\\App\\Command\\RefreshAppCommand'] ?? self::getRefreshAppCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\App\Command\ResolveAppUrlChangeCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getResolveAppUrlChangeCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\App\\Command\\ResolveAppUrlChangeCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('app:url-change:resolve', [], 'Resolves app url changes', false, #[\Closure(name: 'Shopware\\Core\\Framework\\App\\Command\\ResolveAppUrlChangeCommand')] fn (): \Shopware\Core\Framework\App\Command\ResolveAppUrlChangeCommand => ($container->privates['Shopware\\Core\\Framework\\App\\Command\\ResolveAppUrlChangeCommand'] ?? self::getResolveAppUrlChangeCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\App\Command\UninstallAppCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getUninstallAppCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\App\\Command\\UninstallAppCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('app:uninstall', [], 'Uninstalls an app', false, #[\Closure(name: 'Shopware\\Core\\Framework\\App\\Command\\UninstallAppCommand')] fn (): \Shopware\Core\Framework\App\Command\UninstallAppCommand => ($container->privates['Shopware\\Core\\Framework\\App\\Command\\UninstallAppCommand'] ?? self::getUninstallAppCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\App\Command\ValidateAppCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getValidateAppCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\App\\Command\\ValidateAppCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('app:validate', [], 'Validates an app', false, #[\Closure(name: 'Shopware\\Core\\Framework\\App\\Command\\ValidateAppCommand')] fn (): \Shopware\Core\Framework\App\Command\ValidateAppCommand => ($container->privates['Shopware\\Core\\Framework\\App\\Command\\ValidateAppCommand'] ?? self::getValidateAppCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Changelog\Command\ChangelogChangeCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getChangelogChangeCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogChangeCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('changelog:change', [], 'Changes the changelog of a release', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogChangeCommand')] fn (): \Shopware\Core\Framework\Changelog\Command\ChangelogChangeCommand => ($container->privates['Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogChangeCommand'] ?? self::getChangelogChangeCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Changelog\Command\ChangelogCheckCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getChangelogCheckCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCheckCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('changelog:check', [], 'Checks the changelog for errors', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCheckCommand')] fn (): \Shopware\Core\Framework\Changelog\Command\ChangelogCheckCommand => ($container->privates['Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCheckCommand'] ?? self::getChangelogCheckCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Changelog\Command\ChangelogCreateCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getChangelogCreateCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCreateCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('changelog:create', [], 'Creates a changelog file', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCreateCommand')] fn (): \Shopware\Core\Framework\Changelog\Command\ChangelogCreateCommand => ($container->privates['Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCreateCommand'] ?? self::getChangelogCreateCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Changelog\Command\ChangelogReleaseCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getChangelogReleaseCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogReleaseCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('changelog:release', [], 'Creates a new changelog release', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogReleaseCommand')] fn (): \Shopware\Core\Framework\Changelog\Command\ChangelogReleaseCommand => ($container->privates['Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogReleaseCommand'] ?? self::getChangelogReleaseCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\DataAbstractionLayer\Command\CreateEntitiesCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getCreateEntitiesCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateEntitiesCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('dal:create:entities', [], 'Creates the entity classes', false, #[\Closure(name: 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateEntitiesCommand')] fn (): \Shopware\Core\Framework\DataAbstractionLayer\Command\CreateEntitiesCommand => ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateEntitiesCommand'] ?? self::getCreateEntitiesCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\DataAbstractionLayer\Command\CreateHydratorCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getCreateHydratorCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateHydratorCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('dal:create:hydrators', [], 'Creates the hydrator classes', false, #[\Closure(name: 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateHydratorCommand')] fn (): \Shopware\Core\Framework\DataAbstractionLayer\Command\CreateHydratorCommand => ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateHydratorCommand'] ?? self::getCreateHydratorCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\DataAbstractionLayer\Command\CreateSchemaCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getCreateSchemaCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateSchemaCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('dal:create:schema', [], 'Creates the database schema', false, #[\Closure(name: 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateSchemaCommand')] fn (): \Shopware\Core\Framework\DataAbstractionLayer\Command\CreateSchemaCommand => ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateSchemaCommand'] ?? self::getCreateSchemaCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\DataAbstractionLayer\Command\DataAbstractionLayerValidateCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getDataAbstractionLayerValidateCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\DataAbstractionLayerValidateCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('dal:validate', [], 'Validates the DAL definitions', false, #[\Closure(name: 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\DataAbstractionLayerValidateCommand')] fn (): \Shopware\Core\Framework\DataAbstractionLayer\Command\DataAbstractionLayerValidateCommand => ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\DataAbstractionLayerValidateCommand'] ?? self::getDataAbstractionLayerValidateCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\DataAbstractionLayer\Command\RefreshIndexCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getRefreshIndexCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('dal:refresh:index', [], 'Refreshes the index for a given entity', false, #[\Closure(name: 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand')] fn (): \Shopware\Core\Framework\DataAbstractionLayer\Command\RefreshIndexCommand => ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand'] ?? self::getRefreshIndexCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Demodata\Command\DemodataCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getDemodataCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Demodata\\Command\\DemodataCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('framework:demodata', [], 'Generates demo data', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Demodata\\Command\\DemodataCommand')] fn (): \Shopware\Core\Framework\Demodata\Command\DemodataCommand => ($container->privates['Shopware\\Core\\Framework\\Demodata\\Command\\DemodataCommand'] ?? self::getDemodataCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Demodata\PersonalData\CleanPersonalDataCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getCleanPersonalDataCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Demodata\\PersonalData\\CleanPersonalDataCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('database:clean-personal-data', [], 'Cleans personal data from the database', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Demodata\\PersonalData\\CleanPersonalDataCommand')] fn (): \Shopware\Core\Framework\Demodata\PersonalData\CleanPersonalDataCommand => ($container->privates['Shopware\\Core\\Framework\\Demodata\\PersonalData\\CleanPersonalDataCommand'] ?? self::getCleanPersonalDataCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Event\Command\DebugDumpBusinessEventsCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getDebugDumpBusinessEventsCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Event\\Command\\DebugDumpBusinessEventsCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('debug:business-events', [], 'Dumps all business events', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Event\\Command\\DebugDumpBusinessEventsCommand')] fn (): \Shopware\Core\Framework\Event\Command\DebugDumpBusinessEventsCommand => ($container->privates['Shopware\\Core\\Framework\\Event\\Command\\DebugDumpBusinessEventsCommand'] ?? self::getDebugDumpBusinessEventsCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Feature\Command\FeatureDumpCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getFeatureDumpCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Feature\\Command\\FeatureDumpCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('feature:dump', ['administration:dump:features', 'administration:dump:features'], 'Dumps all features', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Feature\\Command\\FeatureDumpCommand')] fn (): \Shopware\Core\Framework\Feature\Command\FeatureDumpCommand => ($container->privates['Shopware\\Core\\Framework\\Feature\\Command\\FeatureDumpCommand'] ?? self::getFeatureDumpCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\MessageQueue\Command\ListScheduledTaskCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getListScheduledTaskCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\MessageQueue\\Command\\ListScheduledTaskCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('scheduled-task:list', [], 'List all scheduled tasks', false, #[\Closure(name: 'Shopware\\Core\\Framework\\MessageQueue\\Command\\ListScheduledTaskCommand')] fn (): \Shopware\Core\Framework\MessageQueue\Command\ListScheduledTaskCommand => ($container->privates['Shopware\\Core\\Framework\\MessageQueue\\Command\\ListScheduledTaskCommand'] ?? self::getListScheduledTaskCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\MessageQueue\Command\RegisterScheduledTasksCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getRegisterScheduledTasksCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\MessageQueue\\Command\\RegisterScheduledTasksCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('scheduled-task:register', [], 'Registers all scheduled tasks', false, #[\Closure(name: 'Shopware\\Core\\Framework\\MessageQueue\\Command\\RegisterScheduledTasksCommand')] fn (): \Shopware\Core\Framework\MessageQueue\Command\RegisterScheduledTasksCommand => ($container->privates['Shopware\\Core\\Framework\\MessageQueue\\Command\\RegisterScheduledTasksCommand'] ?? self::getRegisterScheduledTasksCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\MessageQueue\Command\RunSingleScheduledTaskCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getRunSingleScheduledTaskCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\MessageQueue\\Command\\RunSingleScheduledTaskCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('scheduled-task:run-single', [], 'Allows to run one single scheduled task regardless of its schedule.', false, #[\Closure(name: 'Shopware\\Core\\Framework\\MessageQueue\\Command\\RunSingleScheduledTaskCommand')] fn (): \Shopware\Core\Framework\MessageQueue\Command\RunSingleScheduledTaskCommand => ($container->privates['Shopware\\Core\\Framework\\MessageQueue\\Command\\RunSingleScheduledTaskCommand'] ?? self::getRunSingleScheduledTaskCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\MessageQueue\Command\ScheduledTaskRunner.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getScheduledTaskRunner_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\MessageQueue\\Command\\ScheduledTaskRunner.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('scheduled-task:run', [], 'Runs scheduled tasks', false, #[\Closure(name: 'Shopware\\Core\\Framework\\MessageQueue\\Command\\ScheduledTaskRunner')] fn (): \Shopware\Core\Framework\MessageQueue\Command\ScheduledTaskRunner => ($container->privates['Shopware\\Core\\Framework\\MessageQueue\\Command\\ScheduledTaskRunner'] ?? self::getScheduledTaskRunnerService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Migration\Command\CreateMigrationCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getCreateMigrationCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Migration\\Command\\CreateMigrationCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('database:create-migration', [], 'Creates a new migration file', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Migration\\Command\\CreateMigrationCommand')] fn (): \Shopware\Core\Framework\Migration\Command\CreateMigrationCommand => ($container->privates['Shopware\\Core\\Framework\\Migration\\Command\\CreateMigrationCommand'] ?? self::getCreateMigrationCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Migration\Command\MigrationCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getMigrationCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Migration\\Command\\MigrationCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('database:migrate', [], 'Executes all migrations', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Migration\\Command\\MigrationCommand')] fn (): \Shopware\Core\Framework\Migration\Command\MigrationCommand => ($container->privates['Shopware\\Core\\Framework\\Migration\\Command\\MigrationCommand'] ?? self::getMigrationCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Migration\Command\MigrationDestructiveCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getMigrationDestructiveCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Migration\\Command\\MigrationDestructiveCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('database:migrate-destructive', [], 'Executes all migrations', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Migration\\Command\\MigrationDestructiveCommand')] fn (): \Shopware\Core\Framework\Migration\Command\MigrationDestructiveCommand => ($container->privates['Shopware\\Core\\Framework\\Migration\\Command\\MigrationDestructiveCommand'] ?? self::getMigrationDestructiveCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Migration\Command\RefreshMigrationCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getRefreshMigrationCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Migration\\Command\\RefreshMigrationCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('database:refresh-migration', [], 'Refreshes the migration state', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Migration\\Command\\RefreshMigrationCommand')] fn (): \Shopware\Core\Framework\Migration\Command\RefreshMigrationCommand => ($container->privates['Shopware\\Core\\Framework\\Migration\\Command\\RefreshMigrationCommand'] ?? self::getRefreshMigrationCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Plugin\Command\BundleDumpCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getBundleDumpCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Plugin\\Command\\BundleDumpCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('bundle:dump', ['administration:dump:plugins', 'administration:dump:bundles'], 'Dumps the bundle configuration for a plugin', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Plugin\\Command\\BundleDumpCommand')] fn (): \Shopware\Core\Framework\Plugin\Command\BundleDumpCommand => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\BundleDumpCommand'] ?? self::getBundleDumpCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginActivateCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getPluginActivateCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginActivateCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('plugin:activate', [], 'Activate a plugin', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginActivateCommand')] fn (): \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginActivateCommand => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginActivateCommand'] ?? self::getPluginActivateCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginDeactivateCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getPluginDeactivateCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginDeactivateCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('plugin:deactivate', [], 'Deactivates a plugin', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginDeactivateCommand')] fn (): \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginDeactivateCommand => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginDeactivateCommand'] ?? self::getPluginDeactivateCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginInstallCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getPluginInstallCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginInstallCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('plugin:install', [], 'Installs a plugin', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginInstallCommand')] fn (): \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginInstallCommand => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginInstallCommand'] ?? self::getPluginInstallCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginUninstallCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getPluginUninstallCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUninstallCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('plugin:uninstall', [], 'Uninstall a plugin', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUninstallCommand')] fn (): \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginUninstallCommand => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUninstallCommand'] ?? self::getPluginUninstallCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginUpdateAllCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getPluginUpdateAllCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUpdateAllCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('plugin:update:all', [], 'Install all available plugin updates', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUpdateAllCommand')] fn (): \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginUpdateAllCommand => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUpdateAllCommand'] ?? self::getPluginUpdateAllCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginUpdateCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getPluginUpdateCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUpdateCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('plugin:update', [], 'Updates a plugin', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUpdateCommand')] fn (): \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginUpdateCommand => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUpdateCommand'] ?? self::getPluginUpdateCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Plugin\Command\PluginCreateCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getPluginCreateCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Plugin\\Command\\PluginCreateCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('plugin:create', [], 'Creates a new plugin', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Plugin\\Command\\PluginCreateCommand')] fn (): \Shopware\Core\Framework\Plugin\Command\PluginCreateCommand => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\PluginCreateCommand'] ?? self::getPluginCreateCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Plugin\Command\PluginListCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getPluginListCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Plugin\\Command\\PluginListCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('plugin:list', [], 'Lists all plugins', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Plugin\\Command\\PluginListCommand')] fn (): \Shopware\Core\Framework\Plugin\Command\PluginListCommand => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\PluginListCommand'] ?? self::getPluginListCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Plugin\Command\PluginRefreshCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getPluginRefreshCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Plugin\\Command\\PluginRefreshCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('plugin:refresh', [], 'Refreshes the plugin list', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Plugin\\Command\\PluginRefreshCommand')] fn (): \Shopware\Core\Framework\Plugin\Command\PluginRefreshCommand => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\PluginRefreshCommand'] ?? self::getPluginRefreshCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Plugin\Command\PluginZipImportCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getPluginZipImportCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Plugin\\Command\\PluginZipImportCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('plugin:zip-import', [], 'Imports a plugin from a zip file', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Plugin\\Command\\PluginZipImportCommand')] fn (): \Shopware\Core\Framework\Plugin\Command\PluginZipImportCommand => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\PluginZipImportCommand'] ?? self::getPluginZipImportCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Store\Command\StoreDownloadCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getStoreDownloadCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Store\\Command\\StoreDownloadCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('store:download', [], 'Downloads a plugin from the store', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Store\\Command\\StoreDownloadCommand')] fn (): \Shopware\Core\Framework\Store\Command\StoreDownloadCommand => ($container->privates['Shopware\\Core\\Framework\\Store\\Command\\StoreDownloadCommand'] ?? self::getStoreDownloadCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Framework\Store\Command\StoreLoginCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getStoreLoginCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Framework\\Store\\Command\\StoreLoginCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('store:login', [], 'Login to the store', false, #[\Closure(name: 'Shopware\\Core\\Framework\\Store\\Command\\StoreLoginCommand')] fn (): \Shopware\Core\Framework\Store\Command\StoreLoginCommand => ($container->privates['Shopware\\Core\\Framework\\Store\\Command\\StoreLoginCommand'] ?? self::getStoreLoginCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelCreateCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getSalesChannelCreateCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelCreateCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('sales-channel:create', [], 'Creates a new sales channel', false, #[\Closure(name: 'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelCreateCommand')] fn (): \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelCreateCommand => ($container->privates['Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelCreateCommand'] ?? self::getSalesChannelCreateCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelListCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getSalesChannelListCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelListCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('sales-channel:list', [], 'Lists all sales channels', false, #[\Closure(name: 'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelListCommand')] fn (): \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelListCommand => ($container->privates['Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelListCommand'] ?? self::getSalesChannelListCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelMaintenanceDisableCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getSalesChannelMaintenanceDisableCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceDisableCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('sales-channel:maintenance:disable', [], 'Disable maintenance mode for a sales channel', false, #[\Closure(name: 'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceDisableCommand')] fn (): \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelMaintenanceDisableCommand => ($container->privates['Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceDisableCommand'] ?? self::getSalesChannelMaintenanceDisableCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelMaintenanceEnableCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getSalesChannelMaintenanceEnableCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceEnableCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('sales-channel:maintenance:enable', [], 'Enable maintenance mode for a sales channel', false, #[\Closure(name: 'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceEnableCommand')] fn (): \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelMaintenanceEnableCommand => ($container->privates['Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceEnableCommand'] ?? self::getSalesChannelMaintenanceEnableCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelUpdateDomainCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getSalesChannelUpdateDomainCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelUpdateDomainCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('sales-channel:update:domain', [], 'Updates a sales channel domain', false, #[\Closure(name: 'Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelUpdateDomainCommand')] fn (): \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelUpdateDomainCommand => ($container->privates['Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelUpdateDomainCommand'] ?? self::getSalesChannelUpdateDomainCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Maintenance\System\Command\SystemConfigureShopCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getSystemConfigureShopCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Maintenance\\System\\Command\\SystemConfigureShopCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('system:configure-shop', [], 'Configure shop', false, #[\Closure(name: 'Shopware\\Core\\Maintenance\\System\\Command\\SystemConfigureShopCommand')] fn (): \Shopware\Core\Maintenance\System\Command\SystemConfigureShopCommand => ($container->privates['Shopware\\Core\\Maintenance\\System\\Command\\SystemConfigureShopCommand'] ?? self::getSystemConfigureShopCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Maintenance\System\Command\SystemGenerateAppSecretCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getSystemGenerateAppSecretCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateAppSecretCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('system:generate-app-secret', [], 'Generates a new app secret', false, #[\Closure(name: 'Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateAppSecretCommand')] fn (): \Shopware\Core\Maintenance\System\Command\SystemGenerateAppSecretCommand => ($container->privates['Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateAppSecretCommand'] ?? self::getSystemGenerateAppSecretCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Maintenance\System\Command\SystemGenerateJwtSecretCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getSystemGenerateJwtSecretCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateJwtSecretCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('system:generate-jwt-secret', [], 'Generates a new JWT secret', false, #[\Closure(name: 'Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateJwtSecretCommand')] fn (): \Shopware\Core\Maintenance\System\Command\SystemGenerateJwtSecretCommand => ($container->privates['Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateJwtSecretCommand'] ?? self::getSystemGenerateJwtSecretCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Maintenance\System\Command\SystemInstallCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getSystemInstallCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Maintenance\\System\\Command\\SystemInstallCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('system:install', [], 'Installs the Shopware 6 system', false, #[\Closure(name: 'Shopware\\Core\\Maintenance\\System\\Command\\SystemInstallCommand')] fn (): \Shopware\Core\Maintenance\System\Command\SystemInstallCommand => ($container->privates['Shopware\\Core\\Maintenance\\System\\Command\\SystemInstallCommand'] ?? self::getSystemInstallCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Maintenance\System\Command\SystemIsInstalledCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getSystemIsInstalledCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Maintenance\\System\\Command\\SystemIsInstalledCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('system:is-installed', [], 'Checks if the system is installed and returns exit code 0 if Shopware is installed', false, #[\Closure(name: 'Shopware\\Core\\Maintenance\\System\\Command\\SystemIsInstalledCommand')] fn (): \Shopware\Core\Maintenance\System\Command\SystemIsInstalledCommand => ($container->privates['Shopware\\Core\\Maintenance\\System\\Command\\SystemIsInstalledCommand'] ?? self::getSystemIsInstalledCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Maintenance\System\Command\SystemSetupCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getSystemSetupCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Maintenance\\System\\Command\\SystemSetupCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('system:setup', [], 'Setup the system', false, #[\Closure(name: 'Shopware\\Core\\Maintenance\\System\\Command\\SystemSetupCommand')] fn (): \Shopware\Core\Maintenance\System\Command\SystemSetupCommand => ($container->privates['Shopware\\Core\\Maintenance\\System\\Command\\SystemSetupCommand'] ?? self::getSystemSetupCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Maintenance\System\Command\SystemUpdateFinishCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getSystemUpdateFinishCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdateFinishCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('system:update:finish', [], 'Finishes the update process', false, #[\Closure(name: 'Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdateFinishCommand')] fn (): \Shopware\Core\Maintenance\System\Command\SystemUpdateFinishCommand => ($container->privates['Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdateFinishCommand'] ?? self::getSystemUpdateFinishCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Maintenance\System\Command\SystemUpdatePrepareCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getSystemUpdatePrepareCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdatePrepareCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('system:update:prepare', [], 'Prepares the update process', false, #[\Closure(name: 'Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdatePrepareCommand')] fn (): \Shopware\Core\Maintenance\System\Command\SystemUpdatePrepareCommand => ($container->privates['Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdatePrepareCommand'] ?? self::getSystemUpdatePrepareCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Maintenance\User\Command\UserChangePasswordCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getUserChangePasswordCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Maintenance\\User\\Command\\UserChangePasswordCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('user:change-password', [], 'Change the password of a user', false, #[\Closure(name: 'Shopware\\Core\\Maintenance\\User\\Command\\UserChangePasswordCommand')] fn (): \Shopware\Core\Maintenance\User\Command\UserChangePasswordCommand => ($container->privates['Shopware\\Core\\Maintenance\\User\\Command\\UserChangePasswordCommand'] ?? self::getUserChangePasswordCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\Maintenance\User\Command\UserCreateCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getUserCreateCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\Maintenance\\User\\Command\\UserCreateCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('user:create', [], 'Creates a new user', false, #[\Closure(name: 'Shopware\\Core\\Maintenance\\User\\Command\\UserCreateCommand')] fn (): \Shopware\Core\Maintenance\User\Command\UserCreateCommand => ($container->privates['Shopware\\Core\\Maintenance\\User\\Command\\UserCreateCommand'] ?? self::getUserCreateCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\System\NumberRange\Command\MigrateIncrementStorageCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getMigrateIncrementStorageCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\System\\NumberRange\\Command\\MigrateIncrementStorageCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('number-range:migrate', [], 'Migrate the increment storage of a number range', false, #[\Closure(name: 'Shopware\\Core\\System\\NumberRange\\Command\\MigrateIncrementStorageCommand')] fn (): \Shopware\Core\System\NumberRange\Command\MigrateIncrementStorageCommand => ($container->privates['Shopware\\Core\\System\\NumberRange\\Command\\MigrateIncrementStorageCommand'] ?? self::getMigrateIncrementStorageCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\System\Snippet\Command\ValidateSnippetsCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getValidateSnippetsCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\System\\Snippet\\Command\\ValidateSnippetsCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('snippets:validate', [], 'Validates snippets', false, #[\Closure(name: 'Shopware\\Core\\System\\Snippet\\Command\\ValidateSnippetsCommand')] fn (): \Shopware\Core\System\Snippet\Command\ValidateSnippetsCommand => ($container->privates['Shopware\\Core\\System\\Snippet\\Command\\ValidateSnippetsCommand'] ?? self::getValidateSnippetsCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\System\StateMachine\Command\WorkflowDumpCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getWorkflowDumpCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\System\\StateMachine\\Command\\WorkflowDumpCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('state-machine:dump', [], 'Dumps a state machine to a graphviz file', false, #[\Closure(name: 'Shopware\\Core\\System\\StateMachine\\Command\\WorkflowDumpCommand')] fn (): \Shopware\Core\System\StateMachine\Command\WorkflowDumpCommand => ($container->privates['Shopware\\Core\\System\\StateMachine\\Command\\WorkflowDumpCommand'] ?? self::getWorkflowDumpCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\System\SystemConfig\Command\ConfigGet.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getConfigGet_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\System\\SystemConfig\\Command\\ConfigGet.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('system:config:get', [], 'Get a config value', false, #[\Closure(name: 'Shopware\\Core\\System\\SystemConfig\\Command\\ConfigGet')] fn (): \Shopware\Core\System\SystemConfig\Command\ConfigGet => ($container->privates['Shopware\\Core\\System\\SystemConfig\\Command\\ConfigGet'] ?? self::getConfigGetService($container)));
    }

    /**
     * Gets the private '.Shopware\Core\System\SystemConfig\Command\ConfigSet.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getConfigSet_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Core\\System\\SystemConfig\\Command\\ConfigSet.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('system:config:set', [], 'Get a config value', false, #[\Closure(name: 'Shopware\\Core\\System\\SystemConfig\\Command\\ConfigSet')] fn (): \Shopware\Core\System\SystemConfig\Command\ConfigSet => ($container->privates['Shopware\\Core\\System\\SystemConfig\\Command\\ConfigSet'] ?? self::getConfigSetService($container)));
    }

    /**
     * Gets the private '.Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminIndexingCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getElasticsearchAdminIndexingCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('es:admin:index', [], 'Index the elasticsearch for the admin search', false, #[\Closure(name: 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand')] fn (): \Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminIndexingCommand => ($container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand'] ?? self::getElasticsearchAdminIndexingCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminResetCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getElasticsearchAdminResetCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminResetCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('es:admin:reset', [], 'Reset Admin Elasticsearch indexing', false, #[\Closure(name: 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminResetCommand')] fn (): \Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminResetCommand => ($container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminResetCommand'] ?? self::getElasticsearchAdminResetCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminTestCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getElasticsearchAdminTestCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminTestCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('es:admin:test', [], 'Allows you to test the admin search index', false, #[\Closure(name: 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminTestCommand')] fn (): \Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminTestCommand => ($container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminTestCommand'] ?? self::getElasticsearchAdminTestCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminUpdateMappingCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getElasticsearchAdminUpdateMappingCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminUpdateMappingCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('es:admin:mapping:update', [], 'Update the Elasticsearch indices mapping', false, #[\Closure(name: 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminUpdateMappingCommand')] fn (): \Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminUpdateMappingCommand => ($container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminUpdateMappingCommand'] ?? self::getElasticsearchAdminUpdateMappingCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Elasticsearch\Framework\Command\ElasticsearchCleanIndicesCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getElasticsearchCleanIndicesCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCleanIndicesCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('es:index:cleanup', [], 'Clean outdated indices', false, #[\Closure(name: 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCleanIndicesCommand')] fn (): \Shopware\Elasticsearch\Framework\Command\ElasticsearchCleanIndicesCommand => ($container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCleanIndicesCommand'] ?? self::getElasticsearchCleanIndicesCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Elasticsearch\Framework\Command\ElasticsearchCreateAliasCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getElasticsearchCreateAliasCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCreateAliasCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('es:create:alias', [], 'Create the elasticsearch alias', false, #[\Closure(name: 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCreateAliasCommand')] fn (): \Shopware\Elasticsearch\Framework\Command\ElasticsearchCreateAliasCommand => ($container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCreateAliasCommand'] ?? self::getElasticsearchCreateAliasCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Elasticsearch\Framework\Command\ElasticsearchIndexingCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getElasticsearchIndexingCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchIndexingCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('es:index', [], 'Index all entities into elasticsearch', false, #[\Closure(name: 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchIndexingCommand')] fn (): \Shopware\Elasticsearch\Framework\Command\ElasticsearchIndexingCommand => ($container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchIndexingCommand'] ?? self::getElasticsearchIndexingCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Elasticsearch\Framework\Command\ElasticsearchResetCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getElasticsearchResetCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchResetCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('es:reset', [], 'Reset the elasticsearch index', false, #[\Closure(name: 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchResetCommand')] fn (): \Shopware\Elasticsearch\Framework\Command\ElasticsearchResetCommand => ($container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchResetCommand'] ?? self::getElasticsearchResetCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Elasticsearch\Framework\Command\ElasticsearchStatusCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getElasticsearchStatusCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchStatusCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('es:status', [], 'Show the status of the elasticsearch index', false, #[\Closure(name: 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchStatusCommand')] fn (): \Shopware\Elasticsearch\Framework\Command\ElasticsearchStatusCommand => ($container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchStatusCommand'] ?? self::getElasticsearchStatusCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Elasticsearch\Framework\Command\ElasticsearchTestAnalyzerCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getElasticsearchTestAnalyzerCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchTestAnalyzerCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('es:test:analyzer', [], 'Test the elasticsearch analyzer', false, #[\Closure(name: 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchTestAnalyzerCommand')] fn (): \Shopware\Elasticsearch\Framework\Command\ElasticsearchTestAnalyzerCommand => ($container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchTestAnalyzerCommand'] ?? self::getElasticsearchTestAnalyzerCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Elasticsearch\Framework\Command\ElasticsearchUpdateMappingCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getElasticsearchUpdateMappingCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchUpdateMappingCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('es:mapping:update', [], 'Update the Elasticsearch indices mapping', false, #[\Closure(name: 'Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchUpdateMappingCommand')] fn (): \Shopware\Elasticsearch\Framework\Command\ElasticsearchUpdateMappingCommand => ($container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchUpdateMappingCommand'] ?? self::getElasticsearchUpdateMappingCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Storefront\Framework\Command\HttpCacheWarmUpCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getHttpCacheWarmUpCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Storefront\\Framework\\Command\\HttpCacheWarmUpCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('http:cache:warm:up', [], 'Warm up the http cache', false, #[\Closure(name: 'Shopware\\Storefront\\Framework\\Command\\HttpCacheWarmUpCommand')] fn (): \Shopware\Storefront\Framework\Command\HttpCacheWarmUpCommand => ($container->privates['Shopware\\Storefront\\Framework\\Command\\HttpCacheWarmUpCommand'] ?? self::getHttpCacheWarmUpCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Storefront\Framework\Command\SalesChannelCreateStorefrontCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getSalesChannelCreateStorefrontCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Storefront\\Framework\\Command\\SalesChannelCreateStorefrontCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('sales-channel:create:storefront', [], 'Creates a new storefront sales channel', false, #[\Closure(name: 'Shopware\\Storefront\\Framework\\Command\\SalesChannelCreateStorefrontCommand')] fn (): \Shopware\Storefront\Framework\Command\SalesChannelCreateStorefrontCommand => ($container->privates['Shopware\\Storefront\\Framework\\Command\\SalesChannelCreateStorefrontCommand'] ?? self::getSalesChannelCreateStorefrontCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Storefront\Theme\Command\ThemeChangeCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getThemeChangeCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Storefront\\Theme\\Command\\ThemeChangeCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('theme:change', [], 'Change the active theme for a sales channel', false, #[\Closure(name: 'Shopware\\Storefront\\Theme\\Command\\ThemeChangeCommand')] fn (): \Shopware\Storefront\Theme\Command\ThemeChangeCommand => ($container->privates['Shopware\\Storefront\\Theme\\Command\\ThemeChangeCommand'] ?? self::getThemeChangeCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Storefront\Theme\Command\ThemeCompileCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getThemeCompileCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Storefront\\Theme\\Command\\ThemeCompileCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('theme:compile', [], 'Compile the theme', false, #[\Closure(name: 'Shopware\\Storefront\\Theme\\Command\\ThemeCompileCommand')] fn (): \Shopware\Storefront\Theme\Command\ThemeCompileCommand => ($container->privates['Shopware\\Storefront\\Theme\\Command\\ThemeCompileCommand'] ?? self::getThemeCompileCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Storefront\Theme\Command\ThemeCreateCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getThemeCreateCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Storefront\\Theme\\Command\\ThemeCreateCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('theme:create', [], 'Create a new theme', false, #[\Closure(name: 'Shopware\\Storefront\\Theme\\Command\\ThemeCreateCommand')] fn (): \Shopware\Storefront\Theme\Command\ThemeCreateCommand => ($container->privates['Shopware\\Storefront\\Theme\\Command\\ThemeCreateCommand'] ?? self::getThemeCreateCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Storefront\Theme\Command\ThemeDumpCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getThemeDumpCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Storefront\\Theme\\Command\\ThemeDumpCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('theme:dump', [], 'Dump the theme configuration', false, #[\Closure(name: 'Shopware\\Storefront\\Theme\\Command\\ThemeDumpCommand')] fn (): \Shopware\Storefront\Theme\Command\ThemeDumpCommand => ($container->privates['Shopware\\Storefront\\Theme\\Command\\ThemeDumpCommand'] ?? self::getThemeDumpCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Storefront\Theme\Command\ThemePrepareIconsCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getThemePrepareIconsCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Storefront\\Theme\\Command\\ThemePrepareIconsCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('theme:prepare-icons', [], 'Prepare the theme icons', false, #[\Closure(name: 'Shopware\\Storefront\\Theme\\Command\\ThemePrepareIconsCommand')] fn (): \Shopware\Storefront\Theme\Command\ThemePrepareIconsCommand => ($container->privates['Shopware\\Storefront\\Theme\\Command\\ThemePrepareIconsCommand'] ?? self::getThemePrepareIconsCommandService($container)));
    }

    /**
     * Gets the private '.Shopware\Storefront\Theme\Command\ThemeRefreshCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getThemeRefreshCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Shopware\\Storefront\\Theme\\Command\\ThemeRefreshCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('theme:refresh', [], 'Refresh the theme configuration', false, #[\Closure(name: 'Shopware\\Storefront\\Theme\\Command\\ThemeRefreshCommand')] fn (): \Shopware\Storefront\Theme\Command\ThemeRefreshCommand => ($container->privates['Shopware\\Storefront\\Theme\\Command\\ThemeRefreshCommand'] ?? self::getThemeRefreshCommandService($container)));
    }

    /**
     * Gets the private '.Symfony\Component\Dotenv\Command\DotenvDumpCommand.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function getDotenvDumpCommand_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.Symfony\\Component\\Dotenv\\Command\\DotenvDumpCommand.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('dotenv:dump', [], 'Compiles .env files to .env.local.php', false, #[\Closure(name: 'Symfony\\Component\\Dotenv\\Command\\DotenvDumpCommand')] fn (): \Symfony\Component\Dotenv\Command\DotenvDumpCommand => ($container->privates['Symfony\\Component\\Dotenv\\Command\\DotenvDumpCommand'] ?? self::getDotenvDumpCommandService($container)));
    }

    /**
     * Gets the private '.cache.http.inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected static function get_Cache_Http_InnerService($container)
    {
        $container->privates['.cache.http.inner'] = $instance = new \Symfony\Component\Cache\Adapter\ArrayAdapter(172800);

        $instance->setLogger(($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));

        return $instance;
    }

    /**
     * Gets the private '.cache.object.inner' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected static function get_Cache_Object_InnerService($container)
    {
        $container->privates['.cache.object.inner'] = $instance = new \Symfony\Component\Cache\Adapter\ArrayAdapter(172800);

        $instance->setLogger(($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));

        return $instance;
    }

    /**
     * Gets the private '.cache.rate_limiter.taggable' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TagAwareAdapter
     */
    protected static function get_Cache_RateLimiter_TaggableService($container)
    {
        return $container->privates['.cache.rate_limiter.taggable'] = new \Symfony\Component\Cache\Adapter\TagAwareAdapter(($container->privates['cache.rate_limiter'] ?? self::getCache_RateLimiterService($container)));
    }

    /**
     * Gets the private '.cache.tags.taggable' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TagAwareAdapter
     */
    protected static function get_Cache_Tags_TaggableService($container)
    {
        return $container->privates['.cache.tags.taggable'] = new \Symfony\Component\Cache\Adapter\TagAwareAdapter(($container->privates['cache.tags'] ?? self::getCache_TagsService($container)));
    }

    /**
     * Gets the private '.console.command.about.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_About_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.about.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('about', [], 'Display information about the current project', false, #[\Closure(name: 'console.command.about', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\AboutCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\AboutCommand => ($container->privates['console.command.about'] ?? self::getConsole_Command_AboutService($container)));
    }

    /**
     * Gets the private '.console.command.assets_install.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_AssetsInstall_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.assets_install.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('assets:install', [], 'Installs bundles web assets under a public web directory', false, #[\Closure(name: 'console.command.assets_install', class: 'Shopware\\Core\\Framework\\Adapter\\Asset\\AssetInstallCommand')] fn (): \Shopware\Core\Framework\Adapter\Asset\AssetInstallCommand => ($container->privates['console.command.assets_install'] ?? self::getConsole_Command_AssetsInstallService($container)));
    }

    /**
     * Gets the private '.console.command.cache_clear.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_CacheClear_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.cache_clear.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('cache:clear', [], 'Clear the cache', false, #[\Closure(name: 'console.command.cache_clear', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\CacheClearCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\CacheClearCommand => ($container->privates['console.command.cache_clear'] ?? self::getConsole_Command_CacheClearService($container)));
    }

    /**
     * Gets the private '.console.command.cache_pool_clear.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_CachePoolClear_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.cache_pool_clear.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('cache:pool:clear', [], 'Clear cache pools', false, #[\Closure(name: 'console.command.cache_pool_clear', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\CachePoolClearCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\CachePoolClearCommand => ($container->privates['console.command.cache_pool_clear'] ?? self::getConsole_Command_CachePoolClearService($container)));
    }

    /**
     * Gets the private '.console.command.cache_pool_delete.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_CachePoolDelete_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.cache_pool_delete.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('cache:pool:delete', [], 'Delete an item from a cache pool', false, #[\Closure(name: 'console.command.cache_pool_delete', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\CachePoolDeleteCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\CachePoolDeleteCommand => ($container->privates['console.command.cache_pool_delete'] ?? self::getConsole_Command_CachePoolDeleteService($container)));
    }

    /**
     * Gets the private '.console.command.cache_pool_invalidate_tags.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_CachePoolInvalidateTags_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.cache_pool_invalidate_tags.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('cache:pool:invalidate-tags', [], 'Invalidate cache tags for all or a specific pool', false, #[\Closure(name: 'console.command.cache_pool_invalidate_tags', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\CachePoolInvalidateTagsCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\CachePoolInvalidateTagsCommand => ($container->privates['console.command.cache_pool_invalidate_tags'] ?? self::getConsole_Command_CachePoolInvalidateTagsService($container)));
    }

    /**
     * Gets the private '.console.command.cache_pool_list.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_CachePoolList_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.cache_pool_list.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('cache:pool:list', [], 'List available cache pools', false, #[\Closure(name: 'console.command.cache_pool_list', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\CachePoolListCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\CachePoolListCommand => ($container->privates['console.command.cache_pool_list'] ?? self::getConsole_Command_CachePoolListService($container)));
    }

    /**
     * Gets the private '.console.command.cache_pool_prune.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_CachePoolPrune_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.cache_pool_prune.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('cache:pool:prune', [], 'Prune cache pools', false, #[\Closure(name: 'console.command.cache_pool_prune', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\CachePoolPruneCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\CachePoolPruneCommand => ($container->privates['console.command.cache_pool_prune'] ?? self::getConsole_Command_CachePoolPruneService($container)));
    }

    /**
     * Gets the private '.console.command.cache_warmup.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_CacheWarmup_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.cache_warmup.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('cache:warmup', [], 'Warm up an empty cache', false, #[\Closure(name: 'console.command.cache_warmup', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\CacheWarmupCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\CacheWarmupCommand => ($container->privates['console.command.cache_warmup'] ?? self::getConsole_Command_CacheWarmupService($container)));
    }

    /**
     * Gets the private '.console.command.config_debug.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_ConfigDebug_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.config_debug.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('debug:config', [], 'Dump the current configuration for an extension', false, #[\Closure(name: 'console.command.config_debug', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\ConfigDebugCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\ConfigDebugCommand => ($container->privates['console.command.config_debug'] ?? self::getConsole_Command_ConfigDebugService($container)));
    }

    /**
     * Gets the private '.console.command.config_dump_reference.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_ConfigDumpReference_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.config_dump_reference.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('config:dump-reference', [], 'Dump the default configuration for an extension', false, #[\Closure(name: 'console.command.config_dump_reference', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\ConfigDumpReferenceCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\ConfigDumpReferenceCommand => ($container->privates['console.command.config_dump_reference'] ?? self::getConsole_Command_ConfigDumpReferenceService($container)));
    }

    /**
     * Gets the private '.console.command.container_debug.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_ContainerDebug_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.container_debug.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('debug:container', [], 'Display current services for an application', false, #[\Closure(name: 'console.command.container_debug', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\ContainerDebugCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\ContainerDebugCommand => ($container->privates['console.command.container_debug'] ?? self::getConsole_Command_ContainerDebugService($container)));
    }

    /**
     * Gets the private '.console.command.container_lint.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_ContainerLint_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.container_lint.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('lint:container', [], 'Ensure that arguments injected into services match type declarations', false, #[\Closure(name: 'console.command.container_lint', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\ContainerLintCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\ContainerLintCommand => ($container->privates['console.command.container_lint'] ?? self::getConsole_Command_ContainerLintService($container)));
    }

    /**
     * Gets the private '.console.command.debug_autowiring.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_DebugAutowiring_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.debug_autowiring.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('debug:autowiring', [], 'List classes/interfaces you can use for autowiring', false, #[\Closure(name: 'console.command.debug_autowiring', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\DebugAutowiringCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\DebugAutowiringCommand => ($container->privates['console.command.debug_autowiring'] ?? self::getConsole_Command_DebugAutowiringService($container)));
    }

    /**
     * Gets the private '.console.command.dotenv_debug.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_DotenvDebug_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.dotenv_debug.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('debug:dotenv', [], 'Lists all dotenv files with variables and values', false, #[\Closure(name: 'console.command.dotenv_debug', class: 'Symfony\\Component\\Dotenv\\Command\\DebugCommand')] fn (): \Symfony\Component\Dotenv\Command\DebugCommand => ($container->privates['console.command.dotenv_debug'] ?? self::getConsole_Command_DotenvDebugService($container)));
    }

    /**
     * Gets the private '.console.command.event_dispatcher_debug.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_EventDispatcherDebug_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.event_dispatcher_debug.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('debug:event-dispatcher', [], 'Display configured listeners for an application', false, #[\Closure(name: 'console.command.event_dispatcher_debug', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\EventDispatcherDebugCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\EventDispatcherDebugCommand => ($container->privates['console.command.event_dispatcher_debug'] ?? self::getConsole_Command_EventDispatcherDebugService($container)));
    }

    /**
     * Gets the private '.console.command.mailer_test.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_MailerTest_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.mailer_test.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('mailer:test', [], 'Test Mailer transports by sending an email', false, #[\Closure(name: 'console.command.mailer_test', class: 'Symfony\\Component\\Mailer\\Command\\MailerTestCommand')] fn (): \Symfony\Component\Mailer\Command\MailerTestCommand => ($container->privates['console.command.mailer_test'] ?? self::getConsole_Command_MailerTestService($container)));
    }

    /**
     * Gets the private '.console.command.messenger_consume_messages.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_MessengerConsumeMessages_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.messenger_consume_messages.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('messenger:consume', [], 'Consume messages', false, #[\Closure(name: 'console.command.messenger_consume_messages', class: 'Symfony\\Component\\Messenger\\Command\\ConsumeMessagesCommand')] fn (): \Symfony\Component\Messenger\Command\ConsumeMessagesCommand => ($container->privates['console.command.messenger_consume_messages'] ?? self::getConsole_Command_MessengerConsumeMessagesService($container)));
    }

    /**
     * Gets the private '.console.command.messenger_debug.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_MessengerDebug_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.messenger_debug.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('debug:messenger', [], 'List messages you can dispatch using the message buses', false, #[\Closure(name: 'console.command.messenger_debug', class: 'Symfony\\Component\\Messenger\\Command\\DebugCommand')] fn (): \Symfony\Component\Messenger\Command\DebugCommand => ($container->privates['console.command.messenger_debug'] ?? self::getConsole_Command_MessengerDebugService($container)));
    }

    /**
     * Gets the private '.console.command.messenger_failed_messages_remove.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_MessengerFailedMessagesRemove_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.messenger_failed_messages_remove.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('messenger:failed:remove', [], 'Remove given messages from the failure transport', false, #[\Closure(name: 'console.command.messenger_failed_messages_remove', class: 'Symfony\\Component\\Messenger\\Command\\FailedMessagesRemoveCommand')] fn (): \Symfony\Component\Messenger\Command\FailedMessagesRemoveCommand => ($container->privates['console.command.messenger_failed_messages_remove'] ?? self::getConsole_Command_MessengerFailedMessagesRemoveService($container)));
    }

    /**
     * Gets the private '.console.command.messenger_failed_messages_retry.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_MessengerFailedMessagesRetry_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.messenger_failed_messages_retry.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('messenger:failed:retry', [], 'Retry one or more messages from the failure transport', false, #[\Closure(name: 'console.command.messenger_failed_messages_retry', class: 'Symfony\\Component\\Messenger\\Command\\FailedMessagesRetryCommand')] fn (): \Symfony\Component\Messenger\Command\FailedMessagesRetryCommand => ($container->privates['console.command.messenger_failed_messages_retry'] ?? self::getConsole_Command_MessengerFailedMessagesRetryService($container)));
    }

    /**
     * Gets the private '.console.command.messenger_failed_messages_show.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_MessengerFailedMessagesShow_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.messenger_failed_messages_show.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('messenger:failed:show', [], 'Show one or more messages from the failure transport', false, #[\Closure(name: 'console.command.messenger_failed_messages_show', class: 'Symfony\\Component\\Messenger\\Command\\FailedMessagesShowCommand')] fn (): \Symfony\Component\Messenger\Command\FailedMessagesShowCommand => ($container->privates['console.command.messenger_failed_messages_show'] ?? self::getConsole_Command_MessengerFailedMessagesShowService($container)));
    }

    /**
     * Gets the private '.console.command.messenger_setup_transports.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_MessengerSetupTransports_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.messenger_setup_transports.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('messenger:setup-transports', [], 'Prepare the required infrastructure for the transport', false, #[\Closure(name: 'console.command.messenger_setup_transports', class: 'Symfony\\Component\\Messenger\\Command\\SetupTransportsCommand')] fn (): \Symfony\Component\Messenger\Command\SetupTransportsCommand => ($container->privates['console.command.messenger_setup_transports'] ?? self::getConsole_Command_MessengerSetupTransportsService($container)));
    }

    /**
     * Gets the private '.console.command.messenger_stats.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_MessengerStats_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.messenger_stats.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('messenger:stats', [], 'Show the message count for one or more transports', false, #[\Closure(name: 'console.command.messenger_stats', class: 'Symfony\\Component\\Messenger\\Command\\StatsCommand')] fn (): \Symfony\Component\Messenger\Command\StatsCommand => ($container->privates['console.command.messenger_stats'] ?? self::getConsole_Command_MessengerStatsService($container)));
    }

    /**
     * Gets the private '.console.command.messenger_stop_workers.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_MessengerStopWorkers_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.messenger_stop_workers.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('messenger:stop-workers', [], 'Stop workers after their current message', false, #[\Closure(name: 'console.command.messenger_stop_workers', class: 'Symfony\\Component\\Messenger\\Command\\StopWorkersCommand')] fn (): \Symfony\Component\Messenger\Command\StopWorkersCommand => ($container->privates['console.command.messenger_stop_workers'] ?? self::getConsole_Command_MessengerStopWorkersService($container)));
    }

    /**
     * Gets the private '.console.command.router_debug.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_RouterDebug_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.router_debug.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('debug:router', [], 'Display current routes for an application', false, #[\Closure(name: 'console.command.router_debug', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\RouterDebugCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\RouterDebugCommand => ($container->privates['console.command.router_debug'] ?? self::getConsole_Command_RouterDebugService($container)));
    }

    /**
     * Gets the private '.console.command.router_match.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_RouterMatch_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.router_match.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('router:match', [], 'Help debug routes by simulating a path info match', false, #[\Closure(name: 'console.command.router_match', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\RouterMatchCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\RouterMatchCommand => ($container->privates['console.command.router_match'] ?? self::getConsole_Command_RouterMatchService($container)));
    }

    /**
     * Gets the private '.console.command.secrets_decrypt_to_local.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_SecretsDecryptToLocal_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.secrets_decrypt_to_local.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('secrets:decrypt-to-local', [], 'Decrypt all secrets and stores them in the local vault', false, #[\Closure(name: 'console.command.secrets_decrypt_to_local', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\SecretsDecryptToLocalCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\SecretsDecryptToLocalCommand => ($container->privates['console.command.secrets_decrypt_to_local'] ?? self::getConsole_Command_SecretsDecryptToLocalService($container)));
    }

    /**
     * Gets the private '.console.command.secrets_encrypt_from_local.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_SecretsEncryptFromLocal_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.secrets_encrypt_from_local.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('secrets:encrypt-from-local', [], 'Encrypt all local secrets to the vault', false, #[\Closure(name: 'console.command.secrets_encrypt_from_local', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\SecretsEncryptFromLocalCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\SecretsEncryptFromLocalCommand => ($container->privates['console.command.secrets_encrypt_from_local'] ?? self::getConsole_Command_SecretsEncryptFromLocalService($container)));
    }

    /**
     * Gets the private '.console.command.secrets_generate_key.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_SecretsGenerateKey_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.secrets_generate_key.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('secrets:generate-keys', [], 'Generate new encryption keys', false, #[\Closure(name: 'console.command.secrets_generate_key', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\SecretsGenerateKeysCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\SecretsGenerateKeysCommand => ($container->privates['console.command.secrets_generate_key'] ?? self::getConsole_Command_SecretsGenerateKeyService($container)));
    }

    /**
     * Gets the private '.console.command.secrets_list.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_SecretsList_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.secrets_list.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('secrets:list', [], 'List all secrets', false, #[\Closure(name: 'console.command.secrets_list', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\SecretsListCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\SecretsListCommand => ($container->privates['console.command.secrets_list'] ?? self::getConsole_Command_SecretsListService($container)));
    }

    /**
     * Gets the private '.console.command.secrets_remove.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_SecretsRemove_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.secrets_remove.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('secrets:remove', [], 'Remove a secret from the vault', false, #[\Closure(name: 'console.command.secrets_remove', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\SecretsRemoveCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\SecretsRemoveCommand => ($container->privates['console.command.secrets_remove'] ?? self::getConsole_Command_SecretsRemoveService($container)));
    }

    /**
     * Gets the private '.console.command.secrets_set.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_SecretsSet_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.secrets_set.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('secrets:set', [], 'Set a secret in the vault', false, #[\Closure(name: 'console.command.secrets_set', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\SecretsSetCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\SecretsSetCommand => ($container->privates['console.command.secrets_set'] ?? self::getConsole_Command_SecretsSetService($container)));
    }

    /**
     * Gets the private '.console.command.serializer_debug.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_SerializerDebug_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.serializer_debug.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('debug:serializer', [], 'Display serialization information for classes', false, #[\Closure(name: 'console.command.serializer_debug', class: 'Symfony\\Component\\Serializer\\Command\\DebugCommand')] fn (): \Symfony\Component\Serializer\Command\DebugCommand => ($container->privates['console.command.serializer_debug'] ?? self::getConsole_Command_SerializerDebugService($container)));
    }

    /**
     * Gets the private '.console.command.translation_debug.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_TranslationDebug_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.translation_debug.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('debug:translation', [], 'Display translation messages information', false, #[\Closure(name: 'console.command.translation_debug', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\TranslationDebugCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\TranslationDebugCommand => ($container->privates['console.command.translation_debug'] ?? self::getConsole_Command_TranslationDebugService($container)));
    }

    /**
     * Gets the private '.console.command.translation_extract.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_TranslationExtract_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.translation_extract.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('translation:extract', [], 'Extract missing translations keys from code to translation files.', false, #[\Closure(name: 'console.command.translation_extract', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\TranslationUpdateCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\TranslationUpdateCommand => ($container->privates['console.command.translation_extract'] ?? self::getConsole_Command_TranslationExtractService($container)));
    }

    /**
     * Gets the private '.console.command.translation_pull.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_TranslationPull_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.translation_pull.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('translation:pull', [], 'Pull translations from a given provider.', false, #[\Closure(name: 'console.command.translation_pull', class: 'Symfony\\Component\\Translation\\Command\\TranslationPullCommand')] fn (): \Symfony\Component\Translation\Command\TranslationPullCommand => ($container->privates['console.command.translation_pull'] ?? self::getConsole_Command_TranslationPullService($container)));
    }

    /**
     * Gets the private '.console.command.translation_push.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_TranslationPush_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.translation_push.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('translation:push', [], 'Push translations to a given provider.', false, #[\Closure(name: 'console.command.translation_push', class: 'Symfony\\Component\\Translation\\Command\\TranslationPushCommand')] fn (): \Symfony\Component\Translation\Command\TranslationPushCommand => ($container->privates['console.command.translation_push'] ?? self::getConsole_Command_TranslationPushService($container)));
    }

    /**
     * Gets the private '.console.command.validator_debug.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_ValidatorDebug_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.validator_debug.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('debug:validator', [], 'Display validation constraints for classes', false, #[\Closure(name: 'console.command.validator_debug', class: 'Symfony\\Component\\Validator\\Command\\DebugCommand')] fn (): \Symfony\Component\Validator\Command\DebugCommand => ($container->privates['console.command.validator_debug'] ?? self::getConsole_Command_ValidatorDebugService($container)));
    }

    /**
     * Gets the private '.console.command.xliff_lint.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_XliffLint_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.xliff_lint.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('lint:xliff', [], 'Lint an XLIFF file and outputs encountered errors', false, #[\Closure(name: 'console.command.xliff_lint', class: 'Symfony\\Component\\Translation\\Command\\XliffLintCommand')] fn (): \Symfony\Component\Translation\Command\XliffLintCommand => ($container->privates['console.command.xliff_lint'] ?? self::getConsole_Command_XliffLintService($container)));
    }

    /**
     * Gets the private '.console.command.yaml_lint.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Console_Command_YamlLint_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.console.command.yaml_lint.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('lint:yaml', [], 'Lint a YAML file and outputs encountered errors', false, #[\Closure(name: 'console.command.yaml_lint', class: 'Symfony\\Bundle\\FrameworkBundle\\Command\\YamlLintCommand')] fn (): \Symfony\Bundle\FrameworkBundle\Command\YamlLintCommand => ($container->privates['console.command.yaml_lint'] ?? self::getConsole_Command_YamlLintService($container)));
    }

    /**
     * Gets the private '.debug.value_resolver.Shopware\Core\Checkout\Cart\CartValueResolver' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver
     */
    protected static function getCartValueResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/TraceableValueResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartValueResolver.php';

        $a = ($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? self::getCartServiceService($container));

        if (isset($container->privates['.debug.value_resolver.Shopware\\Core\\Checkout\\Cart\\CartValueResolver'])) {
            return $container->privates['.debug.value_resolver.Shopware\\Core\\Checkout\\Cart\\CartValueResolver'];
        }

        return $container->privates['.debug.value_resolver.Shopware\\Core\\Checkout\\Cart\\CartValueResolver'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver(new \Shopware\Core\Checkout\Cart\CartValueResolver($a), ($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private '.debug.value_resolver.Shopware\Core\Checkout\Customer\CustomerValueResolver' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver
     */
    protected static function getCustomerValueResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/TraceableValueResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/CustomerValueResolver.php';

        return $container->privates['.debug.value_resolver.Shopware\\Core\\Checkout\\Customer\\CustomerValueResolver'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver(new \Shopware\Core\Checkout\Customer\CustomerValueResolver(), ($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private '.debug.value_resolver.Shopware\Core\Framework\Api\Context\ContextValueResolver' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver
     */
    protected static function getContextValueResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/TraceableValueResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Context/ContextValueResolver.php';

        return $container->privates['.debug.value_resolver.Shopware\\Core\\Framework\\Api\\Context\\ContextValueResolver'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver(new \Shopware\Core\Framework\Api\Context\ContextValueResolver(), ($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private '.debug.value_resolver.Shopware\Core\Framework\Api\Response\ResponseFactoryInterfaceValueResolver' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver
     */
    protected static function getResponseFactoryInterfaceValueResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/TraceableValueResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Response/ResponseFactoryInterfaceValueResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Response/ResponseFactoryRegistry.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Response/ResponseFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Response/Type/JsonFactoryBase.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Response/Type/Api/JsonApiType.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Serializer/JsonApiEncoder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Response/Type/Api/JsonType.php';

        $a = ($container->privates['Shopware\\Core\\System\\SalesChannel\\Api\\StructEncoder'] ?? self::getStructEncoderService($container));

        if (isset($container->privates['.debug.value_resolver.Shopware\\Core\\Framework\\Api\\Response\\ResponseFactoryInterfaceValueResolver'])) {
            return $container->privates['.debug.value_resolver.Shopware\\Core\\Framework\\Api\\Response\\ResponseFactoryInterfaceValueResolver'];
        }

        return $container->privates['.debug.value_resolver.Shopware\\Core\\Framework\\Api\\Response\\ResponseFactoryInterfaceValueResolver'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver(new \Shopware\Core\Framework\Api\Response\ResponseFactoryInterfaceValueResolver(new \Shopware\Core\Framework\Api\Response\ResponseFactoryRegistry(new \Shopware\Core\Framework\Api\Response\Type\Api\JsonApiType(new \Shopware\Core\Framework\Api\Serializer\JsonApiEncoder(), $a), new \Shopware\Core\Framework\Api\Response\Type\Api\JsonType(($container->privates['Shopware\\Core\\Framework\\Api\\Serializer\\JsonEntityEncoder'] ?? self::getJsonEntityEncoderService($container)), $a))), ($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private '.debug.value_resolver.Shopware\Core\Framework\Routing\Annotation\CriteriaValueResolver' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver
     */
    protected static function getCriteriaValueResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/TraceableValueResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/Annotation/CriteriaValueResolver.php';

        return $container->privates['.debug.value_resolver.Shopware\\Core\\Framework\\Routing\\Annotation\\CriteriaValueResolver'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver(new \Shopware\Core\Framework\Routing\Annotation\CriteriaValueResolver(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\RequestCriteriaBuilder'] ?? self::getRequestCriteriaBuilderService($container))), ($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private '.debug.value_resolver.Shopware\Core\Framework\Routing\QueryDataBagResolver' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver
     */
    protected static function getQueryDataBagResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/TraceableValueResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/QueryDataBagResolver.php';

        return $container->privates['.debug.value_resolver.Shopware\\Core\\Framework\\Routing\\QueryDataBagResolver'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver(new \Shopware\Core\Framework\Routing\QueryDataBagResolver(), ($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private '.debug.value_resolver.Shopware\Core\Framework\Routing\RequestDataBagResolver' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver
     */
    protected static function getRequestDataBagResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/TraceableValueResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Routing/RequestDataBagResolver.php';

        return $container->privates['.debug.value_resolver.Shopware\\Core\\Framework\\Routing\\RequestDataBagResolver'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver(new \Shopware\Core\Framework\Routing\RequestDataBagResolver(), ($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private '.debug.value_resolver.Shopware\Core\System\SalesChannel\Context\SalesChannelContextValueResolver' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver
     */
    protected static function getSalesChannelContextValueResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/TraceableValueResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/SalesChannelContextValueResolver.php';

        return $container->privates['.debug.value_resolver.Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextValueResolver'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver(new \Shopware\Core\System\SalesChannel\Context\SalesChannelContextValueResolver(), ($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private '.debug.value_resolver.argument_resolver.backed_enum_resolver' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver
     */
    protected static function get_Debug_ValueResolver_ArgumentResolver_BackedEnumResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/TraceableValueResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/BackedEnumValueResolver.php';

        return $container->privates['.debug.value_resolver.argument_resolver.backed_enum_resolver'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver(new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\BackedEnumValueResolver(), ($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private '.debug.value_resolver.argument_resolver.datetime' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver
     */
    protected static function get_Debug_ValueResolver_ArgumentResolver_DatetimeService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/TraceableValueResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/DateTimeValueResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/psr/clock/src/ClockInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/clock/ClockInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/clock/Clock.php';

        return $container->privates['.debug.value_resolver.argument_resolver.datetime'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver(new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\DateTimeValueResolver(($container->privates['clock'] ??= new \Symfony\Component\Clock\Clock())), ($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private '.debug.value_resolver.argument_resolver.default' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver
     */
    protected static function get_Debug_ValueResolver_ArgumentResolver_DefaultService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/TraceableValueResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/DefaultValueResolver.php';

        return $container->privates['.debug.value_resolver.argument_resolver.default'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver(new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver(), ($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private '.debug.value_resolver.argument_resolver.not_tagged_controller' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver
     */
    protected static function get_Debug_ValueResolver_ArgumentResolver_NotTaggedControllerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/TraceableValueResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/NotTaggedControllerValueResolver.php';

        return $container->privates['.debug.value_resolver.argument_resolver.not_tagged_controller'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver(new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\NotTaggedControllerValueResolver(($container->privates['.service_locator.4a.A3U6'] ?? self::get_ServiceLocator_4a_A3U6Service($container))), ($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private '.debug.value_resolver.argument_resolver.query_parameter_value_resolver' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver
     */
    protected static function get_Debug_ValueResolver_ArgumentResolver_QueryParameterValueResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/TraceableValueResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/QueryParameterValueResolver.php';

        return $container->privates['.debug.value_resolver.argument_resolver.query_parameter_value_resolver'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver(new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\QueryParameterValueResolver(), ($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private '.debug.value_resolver.argument_resolver.request' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver
     */
    protected static function get_Debug_ValueResolver_ArgumentResolver_RequestService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/TraceableValueResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/RequestValueResolver.php';

        return $container->privates['.debug.value_resolver.argument_resolver.request'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver(new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver(), ($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private '.debug.value_resolver.argument_resolver.request_attribute' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver
     */
    protected static function get_Debug_ValueResolver_ArgumentResolver_RequestAttributeService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/TraceableValueResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/RequestAttributeValueResolver.php';

        return $container->privates['.debug.value_resolver.argument_resolver.request_attribute'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver(new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver(), ($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private '.debug.value_resolver.argument_resolver.request_payload' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver
     */
    protected static function get_Debug_ValueResolver_ArgumentResolver_RequestPayloadService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/TraceableValueResolver.php';

        $a = ($container->privates['argument_resolver.request_payload'] ?? self::getArgumentResolver_RequestPayloadService($container));

        if (isset($container->privates['.debug.value_resolver.argument_resolver.request_payload'])) {
            return $container->privates['.debug.value_resolver.argument_resolver.request_payload'];
        }

        return $container->privates['.debug.value_resolver.argument_resolver.request_payload'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver($a, ($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private '.debug.value_resolver.argument_resolver.service' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver
     */
    protected static function get_Debug_ValueResolver_ArgumentResolver_ServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/TraceableValueResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/ServiceValueResolver.php';

        return $container->privates['.debug.value_resolver.argument_resolver.service'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver(new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\ServiceValueResolver(($container->privates['.service_locator.4a.A3U6'] ?? self::get_ServiceLocator_4a_A3U6Service($container))), ($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private '.debug.value_resolver.argument_resolver.session' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver
     */
    protected static function get_Debug_ValueResolver_ArgumentResolver_SessionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/TraceableValueResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/SessionValueResolver.php';

        return $container->privates['.debug.value_resolver.argument_resolver.session'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver(new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver(), ($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private '.debug.value_resolver.argument_resolver.variadic' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver
     */
    protected static function get_Debug_ValueResolver_ArgumentResolver_VariadicService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentValueResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/TraceableValueResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/VariadicValueResolver.php';

        return $container->privates['.debug.value_resolver.argument_resolver.variadic'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\TraceableValueResolver(new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver(), ($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private '.errored..service_locator.mAMut9a.Shopware\Core\Framework\Validation\DataBag\RequestDataBag' shared service.
     *
     * @return \Shopware\Core\Framework\Validation\DataBag\RequestDataBag
     */
    protected static function getRequestDataBagService($container)
    {
        throw new RuntimeException('Cannot autowire service ".service_locator.mAMut9a": it references class "Shopware\\Core\\Framework\\Validation\\DataBag\\RequestDataBag" but no such service exists.');
    }

    /**
     * Gets the private '.errored..service_locator.y4_Zrx..Symfony\Component\Config\Loader\LoaderInterface' shared service.
     *
     * @return \Symfony\Component\Config\Loader\LoaderInterface
     */
    protected static function getLoaderInterfaceService($container)
    {
        throw new RuntimeException('Cannot autowire service ".service_locator.y4_Zrx.": it needs an instance of "Symfony\\Component\\Config\\Loader\\LoaderInterface" but this type has been excluded from autowiring.');
    }

    /**
     * Gets the private '.messenger.handler_descriptor.0T1MkE4' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_0T1MkE4Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\Cleanup\\CleanupSalesChannelContextTaskHandler'] ?? self::getCleanupSalesChannelContextTaskHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.0T1MkE4'])) {
            return $container->privates['.messenger.handler_descriptor.0T1MkE4'];
        }

        return $container->privates['.messenger.handler_descriptor.0T1MkE4'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.0X1Et5p' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_0X1Et5pService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupUnusedDownloadMediaTaskHandler'] ?? self::getCleanupUnusedDownloadMediaTaskHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.0X1Et5p'])) {
            return $container->privates['.messenger.handler_descriptor.0X1Et5p'];
        }

        return $container->privates['.messenger.handler_descriptor.0X1Et5p'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.1jGnvaX' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_1jGnvaXService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->services['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler'] ?? self::getCreateAliasTaskHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.1jGnvaX'])) {
            return $container->privates['.messenger.handler_descriptor.1jGnvaX'];
        }

        return $container->privates['.messenger.handler_descriptor.1jGnvaX'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.1okQVwW' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_1okQVwWService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'] ?? self::getSitemapGenerateTaskHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.1okQVwW'])) {
            return $container->privates['.messenger.handler_descriptor.1okQVwW'];
        }

        return $container->privates['.messenger.handler_descriptor.1okQVwW'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.2k7ZOfR' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_2k7ZOfRService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\Checkout\\Customer\\DeleteUnusedGuestCustomerHandler'] ?? self::getDeleteUnusedGuestCustomerHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.2k7ZOfR'])) {
            return $container->privates['.messenger.handler_descriptor.2k7ZOfR'];
        }

        return $container->privates['.messenger.handler_descriptor.2k7ZOfR'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.2tLbzh6' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_2tLbzh6Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\Content\\ProductStream\\ScheduledTask\\UpdateProductStreamMappingTaskHandler'] ?? self::getUpdateProductStreamMappingTaskHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.2tLbzh6'])) {
            return $container->privates['.messenger.handler_descriptor.2tLbzh6'];
        }

        return $container->privates['.messenger.handler_descriptor.2tLbzh6'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.3rmmvFz' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_3rmmvFzService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\System\\UsageData\\ScheduledTask\\CollectEntityDataTaskHandler'] ?? self::getCollectEntityDataTaskHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.3rmmvFz'])) {
            return $container->privates['.messenger.handler_descriptor.3rmmvFz'];
        }

        return $container->privates['.messenger.handler_descriptor.3rmmvFz'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.42IpoeP' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_42IpoePService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapMessageHandler'] ?? self::getSitemapMessageHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.42IpoeP'])) {
            return $container->privates['.messenger.handler_descriptor.42IpoeP'];
        }

        return $container->privates['.messenger.handler_descriptor.42IpoeP'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.62A1Dlr' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_62A1DlrService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'] ?? self::getUpdateAppsHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.62A1Dlr'])) {
            return $container->privates['.messenger.handler_descriptor.62A1Dlr'];
        }

        return $container->privates['.messenger.handler_descriptor.62A1Dlr'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.7nlC8Ye' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_7nlC8YeService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        return $container->privates['.messenger.handler_descriptor.7nlC8Ye'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor(($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\CacheWarmerTaskHandler'] ?? self::getCacheWarmerTaskHandlerService($container)), []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.Bh6eehT' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_Bh6eehTService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\Webhook\\ScheduledTask\\CleanupWebhookEventLogTaskHandler'] ?? self::getCleanupWebhookEventLogTaskHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.Bh6eehT'])) {
            return $container->privates['.messenger.handler_descriptor.Bh6eehT'];
        }

        return $container->privates['.messenger.handler_descriptor.Bh6eehT'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.BmgkEFy' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_BmgkEFyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\Webhook\\Handler\\WebhookEventMessageHandler'] ?? self::getWebhookEventMessageHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.BmgkEFy'])) {
            return $container->privates['.messenger.handler_descriptor.BmgkEFy'];
        }

        return $container->privates['.messenger.handler_descriptor.BmgkEFy'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.C9PIk8B' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_C9PIk8BService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\Checkout\\Cart\\Cleanup\\CleanupCartTaskHandler'] ?? self::getCleanupCartTaskHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.C9PIk8B'])) {
            return $container->privates['.messenger.handler_descriptor.C9PIk8B'];
        }

        return $container->privates['.messenger.handler_descriptor.C9PIk8B'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.DNvu0vs' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_DNvu0vsService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'] ?? self::getEntityIndexerRegistryService($container));

        if (isset($container->privates['.messenger.handler_descriptor.DNvu0vs'])) {
            return $container->privates['.messenger.handler_descriptor.DNvu0vs'];
        }

        return $container->privates['.messenger.handler_descriptor.DNvu0vs'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.FcGBy7g' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_FcGBy7gService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\Log\\ScheduledTask\\LogCleanupTaskHandler'] ?? self::getLogCleanupTaskHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.FcGBy7g'])) {
            return $container->privates['.messenger.handler_descriptor.FcGBy7g'];
        }

        return $container->privates['.messenger.handler_descriptor.FcGBy7g'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.Ikh07rr' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_Ikh07rrService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        return $container->privates['.messenger.handler_descriptor.Ikh07rr'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor(($container->privates['Shopware\\Storefront\\Theme\\Message\\DeleteThemeFilesHandler'] ?? self::getDeleteThemeFilesHandlerService($container)), []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.JchS1sa' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_JchS1saService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\System\\UsageData\\EntitySync\\CollectEntityDataMessageHandler'] ?? self::getCollectEntityDataMessageHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.JchS1sa'])) {
            return $container->privates['.messenger.handler_descriptor.JchS1sa'];
        }

        return $container->privates['.messenger.handler_descriptor.JchS1sa'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.LKzyvxp' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_LKzyvxpService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\System\\UsageData\\EntitySync\\DispatchEntityMessageHandler'] ?? self::getDispatchEntityMessageHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.LKzyvxp'])) {
            return $container->privates['.messenger.handler_descriptor.LKzyvxp'];
        }

        return $container->privates['.messenger.handler_descriptor.LKzyvxp'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.QCu4JIo' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_QCu4JIoService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'] ?? self::getElasticsearchIndexerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.QCu4JIo'])) {
            return $container->privates['.messenger.handler_descriptor.QCu4JIo'];
        }

        return $container->privates['.messenger.handler_descriptor.QCu4JIo'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.Qj5SaZv' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_Qj5SaZvService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsHandler'] ?? self::getGenerateThumbnailsHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.Qj5SaZv'])) {
            return $container->privates['.messenger.handler_descriptor.Qj5SaZv'];
        }

        return $container->privates['.messenger.handler_descriptor.Qj5SaZv'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.RfCy4k0' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_RfCy4k0Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'] ?? self::getElasticsearchIndexerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.RfCy4k0'])) {
            return $container->privates['.messenger.handler_descriptor.RfCy4k0'];
        }

        return $container->privates['.messenger.handler_descriptor.RfCy4k0'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.XeKBdg4' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_XeKBdg4Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Storefront\\Theme\\Message\\CompileThemeHandler'] ?? self::getCompileThemeHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.XeKBdg4'])) {
            return $container->privates['.messenger.handler_descriptor.XeKBdg4'];
        }

        return $container->privates['.messenger.handler_descriptor.XeKBdg4'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.Xr0g_CJ' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_Xr0gCJService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        return $container->privates['.messenger.handler_descriptor.Xr0g_CJ'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor(($container->privates['Shopware\\Core\\Content\\Media\\Message\\DeleteFileHandler'] ?? self::getDeleteFileHandlerService($container)), []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.YVK9Q8a' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_YVK9Q8aService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        return $container->privates['.messenger.handler_descriptor.YVK9Q8a'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor(($container->privates['Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsHandler'] ?? self::getGenerateThumbnailsHandlerService($container)), []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.aJipXF5' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_AJipXF5Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Cleanup\\CleanupVersionTaskHandler'] ?? self::getCleanupVersionTaskHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.aJipXF5'])) {
            return $container->privates['.messenger.handler_descriptor.aJipXF5'];
        }

        return $container->privates['.messenger.handler_descriptor.aJipXF5'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.av_HoGc' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_AvHoGcService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\Content\\Newsletter\\ScheduledTask\\NewsletterRecipientTaskHandler'] ?? self::getNewsletterRecipientTaskHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.av_HoGc'])) {
            return $container->privates['.messenger.handler_descriptor.av_HoGc'];
        }

        return $container->privates['.messenger.handler_descriptor.av_HoGc'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.jh4u3Y6' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_Jh4u3Y6Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        return $container->privates['.messenger.handler_descriptor.jh4u3Y6'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor(($container->privates['Shopware\\Core\\Content\\ImportExport\\Message\\DeleteFileHandler'] ?? self::getDeleteFileHandler2Service($container)), []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.k4V9sF7' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_K4V9sF7Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\Message\\CleanupOldCacheFoldersHandler'] ?? self::getCleanupOldCacheFoldersHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.k4V9sF7'])) {
            return $container->privates['.messenger.handler_descriptor.k4V9sF7'];
        }

        return $container->privates['.messenger.handler_descriptor.k4V9sF7'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.kTWICXA' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_KTWICXAService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\System\\UsageData\\EntitySync\\IterateEntityMessageHandler'] ?? self::getIterateEntityMessageHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.kTWICXA'])) {
            return $container->privates['.messenger.handler_descriptor.kTWICXA'];
        }

        return $container->privates['.messenger.handler_descriptor.kTWICXA'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.mbQVMyz' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_MbQVMyzService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidateCacheTaskHandler'] ?? self::getInvalidateCacheTaskHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.mbQVMyz'])) {
            return $container->privates['.messenger.handler_descriptor.mbQVMyz'];
        }

        return $container->privates['.messenger.handler_descriptor.mbQVMyz'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.n3ExUjN' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_N3ExUjNService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\System\\UsageData\\ScheduledTask\\CheckIntegrationChangedTaskHandler'] ?? self::getCheckIntegrationChangedTaskHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.n3ExUjN'])) {
            return $container->privates['.messenger.handler_descriptor.n3ExUjN'];
        }

        return $container->privates['.messenger.handler_descriptor.n3ExUjN'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.oJwqZvo' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_OJwqZvoService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\MessageQueue\\RegisterScheduledTaskHandler'] ?? self::getRegisterScheduledTaskHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.oJwqZvo'])) {
            return $container->privates['.messenger.handler_descriptor.oJwqZvo'];
        }

        return $container->privates['.messenger.handler_descriptor.oJwqZvo'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.p4Qvabm' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_P4QvabmService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['messenger.redispatch_message_handler'] ?? self::getMessenger_RedispatchMessageHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.p4Qvabm'])) {
            return $container->privates['.messenger.handler_descriptor.p4Qvabm'];
        }

        return $container->privates['.messenger.handler_descriptor.p4Qvabm'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.q2GexvY' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_Q2GexvYService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'] ?? self::getProductExportPartialGenerationHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.q2GexvY'])) {
            return $container->privates['.messenger.handler_descriptor.q2GexvY'];
        }

        return $container->privates['.messenger.handler_descriptor.q2GexvY'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.tGvt0LH' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_TGvt0LHService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['mailer.messenger.message_handler'] ?? self::getMailer_Messenger_MessageHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.tGvt0LH'])) {
            return $container->privates['.messenger.handler_descriptor.tGvt0LH'];
        }

        return $container->privates['.messenger.handler_descriptor.tGvt0LH'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.tdN_hNC' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_TdNHNCService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'] ?? self::getEntityIndexerRegistryService($container));

        if (isset($container->privates['.messenger.handler_descriptor.tdN_hNC'])) {
            return $container->privates['.messenger.handler_descriptor.tdN_hNC'];
        }

        return $container->privates['.messenger.handler_descriptor.tdN_hNC'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.u.9fsNR' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_U_9fsNRService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->services['Shopware\\Core\\Content\\ImportExport\\Message\\ImportExportHandler'] ?? self::getImportExportHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.u.9fsNR'])) {
            return $container->privates['.messenger.handler_descriptor.u.9fsNR'];
        }

        return $container->privates['.messenger.handler_descriptor.u.9fsNR'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.vx8qyVl' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_Vx8qyVlService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\Content\\ImportExport\\ScheduledTask\\CleanupImportExportFileTaskHandler'] ?? self::getCleanupImportExportFileTaskHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.vx8qyVl'])) {
            return $container->privates['.messenger.handler_descriptor.vx8qyVl'];
        }

        return $container->privates['.messenger.handler_descriptor.vx8qyVl'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.xFii1hV' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_XFii1hVService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupProductKeywordDictionaryTaskHandler'] ?? self::getCleanupProductKeywordDictionaryTaskHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.xFii1hV'])) {
            return $container->privates['.messenger.handler_descriptor.xFii1hV'];
        }

        return $container->privates['.messenger.handler_descriptor.xFii1hV'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.xzp5ujR' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_Xzp5ujRService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'] ?? self::getProductExportGenerateTaskHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.xzp5ujR'])) {
            return $container->privates['.messenger.handler_descriptor.xzp5ujR'];
        }

        return $container->privates['.messenger.handler_descriptor.xzp5ujR'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.yaSsnDY' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_YaSsnDYService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry'] ?? self::getAdminSearchRegistryService($container));

        if (isset($container->privates['.messenger.handler_descriptor.yaSsnDY'])) {
            return $container->privates['.messenger.handler_descriptor.yaSsnDY'];
        }

        return $container->privates['.messenger.handler_descriptor.yaSsnDY'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.messenger.handler_descriptor.ye4GMEz' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\HandlerDescriptor
     */
    protected static function get_Messenger_HandlerDescriptor_Ye4GMEzService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlerDescriptor.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsHandler'] ?? self::getDeleteCascadeAppsHandlerService($container));

        if (isset($container->privates['.messenger.handler_descriptor.ye4GMEz'])) {
            return $container->privates['.messenger.handler_descriptor.ye4GMEz'];
        }

        return $container->privates['.messenger.handler_descriptor.ye4GMEz'] = new \Symfony\Component\Messenger\Handler\HandlerDescriptor($a, []);
    }

    /**
     * Gets the private '.monolog.command.server_log.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Monolog_Command_ServerLog_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.monolog.command.server_log.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('server:log', [], 'Start a log server that displays logs in real time', false, #[\Closure(name: 'monolog.command.server_log', class: 'Symfony\\Bridge\\Monolog\\Command\\ServerLogCommand')] fn (): \Symfony\Bridge\Monolog\Command\ServerLogCommand => ($container->privates['monolog.command.server_log'] ?? self::getMonolog_Command_ServerLogService($container)));
    }

    /**
     * Gets the private '.service_locator.4a.A3U6' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected static function get_ServiceLocator_4a_A3U6Service($container)
    {
        return $container->privates['.service_locator.4a.A3U6'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Shopware\\Core\\Framework\\Api\\Controller\\CacheController::index' => ['privates', '.service_locator.mAMut9a', 'get_ServiceLocator_MAMut9aService', false],
            'kernel::loadRoutes' => ['privates', '.service_locator.y4_Zrx.', 'get_ServiceLocator_Y4Zrx_Service', false],
            'kernel::reboot' => ['privates', '.service_locator.zA3uUCZ', 'get_ServiceLocator_ZA3uUCZService', false],
            'kernel::registerContainerConfiguration' => ['privates', '.service_locator.y4_Zrx.', 'get_ServiceLocator_Y4Zrx_Service', false],
            'Shopware\\Core\\Framework\\Api\\Controller\\CacheController:index' => ['privates', '.service_locator.mAMut9a', 'get_ServiceLocator_MAMut9aService', false],
            'kernel:loadRoutes' => ['privates', '.service_locator.y4_Zrx.', 'get_ServiceLocator_Y4Zrx_Service', false],
            'kernel:reboot' => ['privates', '.service_locator.zA3uUCZ', 'get_ServiceLocator_ZA3uUCZService', false],
            'kernel:registerContainerConfiguration' => ['privates', '.service_locator.y4_Zrx.', 'get_ServiceLocator_Y4Zrx_Service', false],
        ], [
            'Shopware\\Core\\Framework\\Api\\Controller\\CacheController::index' => '?',
            'kernel::loadRoutes' => '?',
            'kernel::reboot' => '?',
            'kernel::registerContainerConfiguration' => '?',
            'Shopware\\Core\\Framework\\Api\\Controller\\CacheController:index' => '?',
            'kernel:loadRoutes' => '?',
            'kernel:reboot' => '?',
            'kernel:registerContainerConfiguration' => '?',
        ]);
    }

    /**
     * Gets the private '.service_locator.Y4J.A.e' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected static function get_ServiceLocator_Y4J_A_EService($container)
    {
        return $container->privates['.service_locator.Y4J.A.e'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'failed' => ['privates', 'messenger.transport.failed', 'getMessenger_Transport_FailedService', false],
        ], [
            'failed' => '?',
        ]);
    }

    /**
     * Gets the private '.service_locator._fH_3DO' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected static function get_ServiceLocator_FH3DOService($container)
    {
        return $container->privates['.service_locator._fH_3DO'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'async' => ['privates', 'messenger.transport.async', 'getMessenger_Transport_AsyncService', false],
            'failed' => ['privates', 'messenger.transport.failed', 'getMessenger_Transport_FailedService', false],
            'low_priority' => ['privates', 'messenger.transport.low_priority', 'getMessenger_Transport_LowPriorityService', false],
            'messenger.transport.async' => ['privates', 'messenger.transport.async', 'getMessenger_Transport_AsyncService', false],
            'messenger.transport.failed' => ['privates', 'messenger.transport.failed', 'getMessenger_Transport_FailedService', false],
            'messenger.transport.low_priority' => ['privates', 'messenger.transport.low_priority', 'getMessenger_Transport_LowPriorityService', false],
        ], [
            'async' => '?',
            'failed' => '?',
            'low_priority' => '?',
            'messenger.transport.async' => '?',
            'messenger.transport.failed' => '?',
            'messenger.transport.low_priority' => '?',
        ]);
    }

    /**
     * Gets the private '.service_locator.mAMut9a' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected static function get_ServiceLocator_MAMut9aService($container)
    {
        return $container->privates['.service_locator.mAMut9a'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'dataBag' => ['privates', '.errored..service_locator.mAMut9a.Shopware\\Core\\Framework\\Validation\\DataBag\\RequestDataBag', NULL, 'Cannot autowire service ".service_locator.mAMut9a": it references class "Shopware\\Core\\Framework\\Validation\\DataBag\\RequestDataBag" but no such service exists.'],
        ], [
            'dataBag' => 'Shopware\\Core\\Framework\\Validation\\DataBag\\RequestDataBag',
        ]);
    }

    /**
     * Gets the private '.service_locator.y4_Zrx.' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected static function get_ServiceLocator_Y4Zrx_Service($container)
    {
        return $container->privates['.service_locator.y4_Zrx.'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'loader' => ['privates', '.errored..service_locator.y4_Zrx..Symfony\\Component\\Config\\Loader\\LoaderInterface', NULL, 'Cannot autowire service ".service_locator.y4_Zrx.": it needs an instance of "Symfony\\Component\\Config\\Loader\\LoaderInterface" but this type has been excluded from autowiring.'],
        ], [
            'loader' => 'Symfony\\Component\\Config\\Loader\\LoaderInterface',
        ]);
    }

    /**
     * Gets the private '.service_locator.zA3uUCZ' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected static function get_ServiceLocator_ZA3uUCZService($container)
    {
        return $container->privates['.service_locator.zA3uUCZ'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'pluginLoader' => ['services', 'Shopware\\Core\\Framework\\Plugin\\KernelPluginLoader\\KernelPluginLoader', 'getKernelPluginLoaderService', false],
        ], [
            'pluginLoader' => 'Shopware\\Core\\Framework\\Plugin\\KernelPluginLoader\\KernelPluginLoader',
        ]);
    }

    /**
     * Gets the private '.twig.command.debug.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Twig_Command_Debug_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.twig.command.debug.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('debug:twig', [], 'Show a list of twig functions, filters, globals and tests', false, #[\Closure(name: 'twig.command.debug', class: 'Symfony\\Bridge\\Twig\\Command\\DebugCommand')] fn (): \Symfony\Bridge\Twig\Command\DebugCommand => ($container->privates['twig.command.debug'] ?? self::getTwig_Command_DebugService($container)));
    }

    /**
     * Gets the private '.twig.command.lint.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_Twig_Command_Lint_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.twig.command.lint.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('lint:twig', [], 'Lint a Twig template and outputs encountered errors', false, #[\Closure(name: 'twig.command.lint', class: 'Symfony\\Bundle\\TwigBundle\\Command\\LintCommand')] fn (): \Symfony\Bundle\TwigBundle\Command\LintCommand => ($container->privates['twig.command.lint'] ?? self::getTwig_Command_LintService($container)));
    }

    /**
     * Gets the private '.var_dumper.command.server_dump.lazy' shared service.
     *
     * @return \Symfony\Component\Console\Command\LazyCommand
     */
    protected static function get_VarDumper_Command_ServerDump_LazyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/LazyCommand.php';

        return $container->privates['.var_dumper.command.server_dump.lazy'] = new \Symfony\Component\Console\Command\LazyCommand('server:dump', [], 'Start a dump server that collects and displays dumps in a single place', false, #[\Closure(name: 'var_dumper.command.server_dump', class: 'Symfony\\Component\\VarDumper\\Command\\ServerDumpCommand')] fn (): \Symfony\Component\VarDumper\Command\ServerDumpCommand => ($container->privates['var_dumper.command.server_dump'] ?? self::getVarDumper_Command_ServerDumpService($container)));
    }

    /**
     * Gets the private 'Shopware\Administration\Command\DeleteAdminFilesAfterBuildCommand' shared service.
     *
     * @return \Shopware\Administration\Command\DeleteAdminFilesAfterBuildCommand
     */
    protected static function getDeleteAdminFilesAfterBuildCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Command/DeleteAdminFilesAfterBuildCommand.php';

        $container->privates['Shopware\\Administration\\Command\\DeleteAdminFilesAfterBuildCommand'] = $instance = new \Shopware\Administration\Command\DeleteAdminFilesAfterBuildCommand();

        $instance->setName('administration:delete-files-after-build');
        $instance->setDescription('Deletes all unnecessary files of the administration after the build process.');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Administration\Command\DeleteExtensionLocalPublicFilesCommand' shared service.
     *
     * @return \Shopware\Administration\Command\DeleteExtensionLocalPublicFilesCommand
     */
    protected static function getDeleteExtensionLocalPublicFilesCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Command/DeleteExtensionLocalPublicFilesCommand.php';

        $container->privates['Shopware\\Administration\\Command\\DeleteExtensionLocalPublicFilesCommand'] = $instance = new \Shopware\Administration\Command\DeleteExtensionLocalPublicFilesCommand(($container->services['kernel'] ?? $container->get('kernel', 1)));

        $instance->setName('administration:delete-extension-local-public-files');
        $instance->setDescription('Deletes all files in the local public folder of the extension. This command should run after assets:install so the assets are available in the public folder.');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Administration\Notification\Subscriber\UpdateSubscriber' shared service.
     *
     * @return \Shopware\Administration\Notification\Subscriber\UpdateSubscriber
     */
    protected static function getUpdateSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Notification/Subscriber/UpdateSubscriber.php';

        $a = ($container->services['Shopware\\Administration\\Notification\\NotificationService'] ?? self::getNotificationServiceService($container));

        if (isset($container->privates['Shopware\\Administration\\Notification\\Subscriber\\UpdateSubscriber'])) {
            return $container->privates['Shopware\\Administration\\Notification\\Subscriber\\UpdateSubscriber'];
        }

        return $container->privates['Shopware\\Administration\\Notification\\Subscriber\\UpdateSubscriber'] = new \Shopware\Administration\Notification\Subscriber\UpdateSubscriber($a);
    }

    /**
     * Gets the private 'Shopware\Administration\System\SalesChannel\Subscriber\SalesChannelUserConfigSubscriber' shared service.
     *
     * @return \Shopware\Administration\System\SalesChannel\Subscriber\SalesChannelUserConfigSubscriber
     */
    protected static function getSalesChannelUserConfigSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/System/SalesChannel/Subscriber/SalesChannelUserConfigSubscriber.php';

        $a = ($container->services['user_config.repository'] ?? self::getUserConfig_RepositoryService($container));

        if (isset($container->privates['Shopware\\Administration\\System\\SalesChannel\\Subscriber\\SalesChannelUserConfigSubscriber'])) {
            return $container->privates['Shopware\\Administration\\System\\SalesChannel\\Subscriber\\SalesChannelUserConfigSubscriber'];
        }

        return $container->privates['Shopware\\Administration\\System\\SalesChannel\\Subscriber\\SalesChannelUserConfigSubscriber'] = new \Shopware\Administration\System\SalesChannel\Subscriber\SalesChannelUserConfigSubscriber($a);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\Address\AddressValidator' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Address\AddressValidator
     */
    protected static function getAddressValidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Address/AddressValidator.php';

        $a = ($container->services['country.repository'] ?? self::getCountry_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\Address\\AddressValidator'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\Address\\AddressValidator'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\Address\\AddressValidator'] = new \Shopware\Core\Checkout\Cart\Address\AddressValidator($a);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\CachedRuleLoader' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\CachedRuleLoader
     */
    protected static function getCachedRuleLoaderService($container)
    {
        $a = ($container->services['rule.repository'] ?? self::getRule_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\CachedRuleLoader'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\CachedRuleLoader'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\CachedRuleLoader'] = new \Shopware\Core\Checkout\Cart\CachedRuleLoader(new \Shopware\Core\Checkout\Cart\RuleLoader($a), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\CartCalculator' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\CartCalculator
     */
    protected static function getCartCalculatorService($container)
    {
        $a = ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'] ?? self::getCartRuleLoaderService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\CartCalculator'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\CartCalculator'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\CartCalculator'] = new \Shopware\Core\Checkout\Cart\CartCalculator($a);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\CartFactory' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\CartFactory
     */
    protected static function getCartFactoryService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\CartFactory'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\CartFactory'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\CartFactory'] = new \Shopware\Core\Checkout\Cart\CartFactory($a);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\CartPersister' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\CartPersister
     */
    protected static function getCartPersisterService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'];
        }
        $b = ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container));

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] = new \Shopware\Core\Checkout\Cart\CartPersister($b, $a, new \Shopware\Core\Checkout\Cart\CartSerializationCleaner($b, $a), false);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\CartRuleLoader' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\CartRuleLoader
     */
    protected static function getCartRuleLoaderService($container)
    {
        $a = ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] ?? self::getCartPersisterService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'];
        }
        $b = ($container->privates['Shopware\\Core\\Checkout\\Cart\\Processor'] ?? self::getProcessorService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'];
        }
        $c = ($container->privates['Shopware\\Core\\Checkout\\Cart\\CachedRuleLoader'] ?? self::getCachedRuleLoaderService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'];
        }
        $d = ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartFactory'] ?? self::getCartFactoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'] = new \Shopware\Core\Checkout\Cart\CartRuleLoader($a, $b, ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), $c, ($container->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\TaxDetector'] ??= new \Shopware\Core\Checkout\Cart\Tax\TaxDetector()), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $d);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\Cleanup\CleanupCartTaskHandler' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Cleanup\CleanupCartTaskHandler
     */
    protected static function getCleanupCartTaskHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageSubscriberInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/ScheduledTaskHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Cleanup/CleanupCartTaskHandler.php';

        $a = ($container->services['scheduled_task.repository'] ?? self::getScheduledTask_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\Cleanup\\CleanupCartTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\Cleanup\\CleanupCartTaskHandler'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\Cleanup\\CleanupCartTaskHandler'] = new \Shopware\Core\Checkout\Cart\Cleanup\CleanupCartTaskHandler($a, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), 120);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\Command\CartMigrateCommand' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Command\CartMigrateCommand
     */
    protected static function getCartMigrateCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Command/ConsoleProgressTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Command/CartMigrateCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/RedisConnectionFactory.php';

        $container->privates['Shopware\\Core\\Checkout\\Cart\\Command\\CartMigrateCommand'] = $instance = new \Shopware\Core\Checkout\Cart\Command\CartMigrateCommand(NULL, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), false, 120, ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\RedisConnectionFactory'] ??= new \Shopware\Core\Framework\Adapter\Cache\RedisConnectionFactory($container->getEnv('REDIS_PREFIX'))));

        $instance->setName('cart:migrate');
        $instance->setDescription('Migrate carts from redis to database');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\CreditCartProcessor' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\CreditCartProcessor
     */
    protected static function getCreditCartProcessorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartProcessorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CreditCartProcessor.php';

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\CreditCartProcessor'] = new \Shopware\Core\Checkout\Cart\CreditCartProcessor(($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\AbsolutePriceCalculator'] ?? self::getAbsolutePriceCalculatorService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\CustomCartProcessor' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\CustomCartProcessor
     */
    protected static function getCustomCartProcessorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartProcessorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartDataCollectorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CustomCartProcessor.php';

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\CustomCartProcessor'] = new \Shopware\Core\Checkout\Cart\CustomCartProcessor(($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] ?? self::getQuantityPriceCalculatorService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\Delivery\DeliveryProcessor' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Delivery\DeliveryProcessor
     */
    protected static function getDeliveryProcessorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartProcessorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartDataCollectorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Delivery/DeliveryProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Delivery/DeliveryCalculator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Delivery/DeliveryBuilder.php';

        $a = ($container->services['shipping_method.repository'] ?? self::getShippingMethod_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\Delivery\\DeliveryProcessor'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\Delivery\\DeliveryProcessor'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\Delivery\\DeliveryProcessor'] = new \Shopware\Core\Checkout\Cart\Delivery\DeliveryProcessor(($container->privates['Shopware\\Core\\Checkout\\Cart\\Delivery\\DeliveryBuilder'] ??= new \Shopware\Core\Checkout\Cart\Delivery\DeliveryBuilder()), new \Shopware\Core\Checkout\Cart\Delivery\DeliveryCalculator(($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] ?? self::getQuantityPriceCalculatorService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\PercentageTaxRuleBuilder'] ??= new \Shopware\Core\Checkout\Cart\Tax\PercentageTaxRuleBuilder())), $a);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\Facade\ScriptPriceStubs' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Facade\ScriptPriceStubs
     */
    protected static function getScriptPriceStubsService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Facade/ScriptPriceStubs.php';

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\Facade\\ScriptPriceStubs'] = new \Shopware\Core\Checkout\Cart\Facade\ScriptPriceStubs(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] ?? self::getQuantityPriceCalculatorService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\PercentagePriceCalculator'] ?? self::getPercentagePriceCalculatorService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\LineItemFactoryHandler\CreditLineItemFactory' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\LineItemFactoryHandler\CreditLineItemFactory
     */
    protected static function getCreditLineItemFactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItemFactoryHandler/LineItemFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItemFactoryHandler/CreditLineItemFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/PriceDefinitionFactory.php';

        $a = ($container->services['media.repository'] ?? self::getMedia_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\CreditLineItemFactory'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\CreditLineItemFactory'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\CreditLineItemFactory'] = new \Shopware\Core\Checkout\Cart\LineItemFactoryHandler\CreditLineItemFactory(($container->privates['Shopware\\Core\\Checkout\\Cart\\PriceDefinitionFactory'] ??= new \Shopware\Core\Checkout\Cart\PriceDefinitionFactory()), $a);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\LineItemFactoryHandler\CustomLineItemFactory' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\LineItemFactoryHandler\CustomLineItemFactory
     */
    protected static function getCustomLineItemFactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItemFactoryHandler/LineItemFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItemFactoryHandler/CustomLineItemFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/PriceDefinitionFactory.php';

        $a = ($container->services['media.repository'] ?? self::getMedia_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\CustomLineItemFactory'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\CustomLineItemFactory'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\CustomLineItemFactory'] = new \Shopware\Core\Checkout\Cart\LineItemFactoryHandler\CustomLineItemFactory(($container->privates['Shopware\\Core\\Checkout\\Cart\\PriceDefinitionFactory'] ??= new \Shopware\Core\Checkout\Cart\PriceDefinitionFactory()), $a);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\LineItemFactoryHandler\ProductLineItemFactory' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\LineItemFactoryHandler\ProductLineItemFactory
     */
    protected static function getProductLineItemFactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItemFactoryHandler/LineItemFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItemFactoryHandler/ProductLineItemFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/PriceDefinitionFactory.php';

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\ProductLineItemFactory'] = new \Shopware\Core\Checkout\Cart\LineItemFactoryHandler\ProductLineItemFactory(($container->privates['Shopware\\Core\\Checkout\\Cart\\PriceDefinitionFactory'] ??= new \Shopware\Core\Checkout\Cart\PriceDefinitionFactory()));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\LineItemFactoryRegistry' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\LineItemFactoryRegistry
     */
    protected static function getLineItemFactoryRegistryService($container)
    {
        $a = ($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryRegistry'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryRegistry'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryRegistry'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryRegistry'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryRegistry'] = new \Shopware\Core\Checkout\Cart\LineItemFactoryRegistry(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\ProductLineItemFactory'] ?? self::getProductLineItemFactoryService($container));
            yield 1 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\PromotionLineItemFactory'] ??= new \Shopware\Core\Checkout\Cart\LineItemFactoryHandler\PromotionLineItemFactory());
            yield 2 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\CreditLineItemFactory'] ?? self::getCreditLineItemFactoryService($container));
            yield 3 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItemFactoryHandler\\CustomLineItemFactory'] ?? self::getCustomLineItemFactoryService($container));
        }, 4), $a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\LineItem\Group\LineItemGroupBuilder' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\LineItem\Group\LineItemGroupBuilder
     */
    protected static function getLineItemGroupBuilderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItem/Group/LineItemGroupBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItem/Group/LineItemGroupRuleMatcherInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItem/Group/RulesMatcher/AnyRuleMatcher.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItem/Group/RulesMatcher/AbstractAnyRuleLineItemMatcher.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItem/Group/RulesMatcher/AnyRuleLineItemMatcher.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItem/Group/AbstractProductLineItemProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItem/Group/ProductLineItemProvider.php';

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\LineItemGroupBuilder'] = new \Shopware\Core\Checkout\Cart\LineItem\Group\LineItemGroupBuilder(($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\LineItemGroupServiceRegistry'] ?? self::getLineItemGroupServiceRegistryService($container)), new \Shopware\Core\Checkout\Cart\LineItem\Group\RulesMatcher\AnyRuleMatcher(new \Shopware\Core\Checkout\Cart\LineItem\Group\RulesMatcher\AnyRuleLineItemMatcher()), ($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\LineItemQuantitySplitter'] ?? self::getLineItemQuantitySplitterService($container)), new \Shopware\Core\Checkout\Cart\LineItem\Group\ProductLineItemProvider());
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\LineItem\Group\LineItemGroupServiceRegistry' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\LineItem\Group\LineItemGroupServiceRegistry
     */
    protected static function getLineItemGroupServiceRegistryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItem/Group/LineItemGroupServiceRegistry.php';

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\LineItemGroupServiceRegistry'] = new \Shopware\Core\Checkout\Cart\LineItem\Group\LineItemGroupServiceRegistry(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\Packager\\LineItemGroupCountPackager'] ??= new \Shopware\Core\Checkout\Cart\LineItem\Group\Packager\LineItemGroupCountPackager());
            yield 1 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\Packager\\LineItemGroupUnitPriceGrossPackager'] ??= new \Shopware\Core\Checkout\Cart\LineItem\Group\Packager\LineItemGroupUnitPriceGrossPackager());
            yield 2 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\Packager\\LineItemGroupUnitPriceNetPackager'] ??= new \Shopware\Core\Checkout\Cart\LineItem\Group\Packager\LineItemGroupUnitPriceNetPackager());
        }, 3), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\Sorter\\LineItemGroupPriceAscSorter'] ??= new \Shopware\Core\Checkout\Cart\LineItem\Group\Sorter\LineItemGroupPriceAscSorter());
            yield 1 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\Sorter\\LineItemGroupPriceDescSorter'] ??= new \Shopware\Core\Checkout\Cart\LineItem\Group\Sorter\LineItemGroupPriceDescSorter());
        }, 2));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\LineItem\LineItemQuantitySplitter' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\LineItem\LineItemQuantitySplitter
     */
    protected static function getLineItemQuantitySplitterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/LineItem/LineItemQuantitySplitter.php';

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\LineItemQuantitySplitter'] = new \Shopware\Core\Checkout\Cart\LineItem\LineItemQuantitySplitter(($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] ?? self::getQuantityPriceCalculatorService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\Order\OrderConverter' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Order\OrderConverter
     */
    protected static function getOrderConverterService($container)
    {
        $a = ($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'];
        }
        $b = ($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? self::getSalesChannelContextFactoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'];
        }
        $d = ($container->services['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface'] ?? self::getNumberRangeValueGeneratorInterfaceService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'];
        }
        $e = ($container->services['order_address.repository'] ?? self::getOrderAddress_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'];
        }
        $f = ($container->services['product_download.repository'] ?? self::getProductDownload_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'];
        }
        $g = ($container->services['rule.repository'] ?? self::getRule_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'] = new \Shopware\Core\Checkout\Cart\Order\OrderConverter($a, $b, $c, $d, ($container->services['Shopware\\Core\\Checkout\\Order\\OrderDefinition'] ?? self::getOrderDefinitionService($container)), $e, ($container->privates['Shopware\\Core\\System\\StateMachine\\Loader\\InitialStateIdLoader'] ?? self::getInitialStateIdLoaderService($container)), new \Shopware\Core\Checkout\Cart\Order\LineItemDownloadLoader($f), $g);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\Price\AbsolutePriceCalculator' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Price\AbsolutePriceCalculator
     */
    protected static function getAbsolutePriceCalculatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Price/AbsolutePriceCalculator.php';

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\AbsolutePriceCalculator'] = new \Shopware\Core\Checkout\Cart\Price\AbsolutePriceCalculator(($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] ?? self::getQuantityPriceCalculatorService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\PercentageTaxRuleBuilder'] ??= new \Shopware\Core\Checkout\Cart\Tax\PercentageTaxRuleBuilder()));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\Price\AmountCalculator' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Price\AmountCalculator
     */
    protected static function getAmountCalculatorService($container)
    {
        return $container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\AmountCalculator'] = new \Shopware\Core\Checkout\Cart\Price\AmountCalculator(($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\CashRounding'] ??= new \Shopware\Core\Checkout\Cart\Price\CashRounding()), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\PercentageTaxRuleBuilder'] ??= new \Shopware\Core\Checkout\Cart\Tax\PercentageTaxRuleBuilder()), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\TaxCalculator'] ??= new \Shopware\Core\Checkout\Cart\Tax\TaxCalculator()));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\Price\CurrencyPriceCalculator' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Price\CurrencyPriceCalculator
     */
    protected static function getCurrencyPriceCalculatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Price/CurrencyPriceCalculator.php';

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\CurrencyPriceCalculator'] = new \Shopware\Core\Checkout\Cart\Price\CurrencyPriceCalculator(($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] ?? self::getQuantityPriceCalculatorService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\PercentageTaxRuleBuilder'] ??= new \Shopware\Core\Checkout\Cart\Tax\PercentageTaxRuleBuilder()));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\Price\GrossPriceCalculator' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Price\GrossPriceCalculator
     */
    protected static function getGrossPriceCalculatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Price/GrossPriceCalculator.php';

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\GrossPriceCalculator'] = new \Shopware\Core\Checkout\Cart\Price\GrossPriceCalculator(($container->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\TaxCalculator'] ??= new \Shopware\Core\Checkout\Cart\Tax\TaxCalculator()), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\CashRounding'] ??= new \Shopware\Core\Checkout\Cart\Price\CashRounding()));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\Price\NetPriceCalculator' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Price\NetPriceCalculator
     */
    protected static function getNetPriceCalculatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Price/NetPriceCalculator.php';

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\NetPriceCalculator'] = new \Shopware\Core\Checkout\Cart\Price\NetPriceCalculator(($container->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\TaxCalculator'] ??= new \Shopware\Core\Checkout\Cart\Tax\TaxCalculator()), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\CashRounding'] ??= new \Shopware\Core\Checkout\Cart\Price\CashRounding()));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\Price\PercentagePriceCalculator' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Price\PercentagePriceCalculator
     */
    protected static function getPercentagePriceCalculatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Price/PercentagePriceCalculator.php';

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\PercentagePriceCalculator'] = new \Shopware\Core\Checkout\Cart\Price\PercentagePriceCalculator(($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\CashRounding'] ??= new \Shopware\Core\Checkout\Cart\Price\CashRounding()), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] ?? self::getQuantityPriceCalculatorService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\PercentageTaxRuleBuilder'] ??= new \Shopware\Core\Checkout\Cart\Tax\PercentageTaxRuleBuilder()));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\Price\QuantityPriceCalculator' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Price\QuantityPriceCalculator
     */
    protected static function getQuantityPriceCalculatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Price/QuantityPriceCalculator.php';

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] = new \Shopware\Core\Checkout\Cart\Price\QuantityPriceCalculator(($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\GrossPriceCalculator'] ?? self::getGrossPriceCalculatorService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\NetPriceCalculator'] ?? self::getNetPriceCalculatorService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\Processor' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Processor
     */
    protected static function getProcessorService($container)
    {
        return $container->privates['Shopware\\Core\\Checkout\\Cart\\Processor'] = new \Shopware\Core\Checkout\Cart\Processor(new \Shopware\Core\Checkout\Cart\Validator(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Delivery\\DeliveryValidator'] ??= new \Shopware\Core\Checkout\Cart\Delivery\DeliveryValidator());
            yield 1 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\LineItemValidator'] ??= new \Shopware\Core\Checkout\Cart\LineItem\LineItemValidator());
            yield 2 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Address\\AddressValidator'] ?? self::getAddressValidatorService($container));
            yield 3 => ($container->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductLineItemValidator'] ??= new \Shopware\Core\Content\Product\Cart\ProductLineItemValidator());
            yield 4 => ($container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentMethodValidator'] ??= new \Shopware\Core\Checkout\Payment\Cart\PaymentMethodValidator());
        }, 5)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\AmountCalculator'] ?? self::getAmountCalculatorService($container)), new \Shopware\Core\Checkout\Cart\Transaction\TransactionProcessor(), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'] ?? self::getProductCartProcessorService($container));
            yield 1 => ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionProcessor'] ?? self::getPromotionProcessorService($container));
            yield 2 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\CustomCartProcessor'] ?? self::getCustomCartProcessorService($container));
            yield 3 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Processor\\ContainerCartProcessor'] ?? self::getContainerCartProcessorService($container));
            yield 4 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Processor\\DiscountCartProcessor'] ?? self::getDiscountCartProcessorService($container));
            yield 5 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\CreditCartProcessor'] ?? self::getCreditCartProcessorService($container));
            yield 6 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Delivery\\DeliveryProcessor'] ?? self::getDeliveryProcessorService($container));
            yield 7 => ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionDeliveryProcessor'] ?? self::getPromotionDeliveryProcessorService($container));
        }, 8), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'] ?? self::getProductCartProcessorService($container));
            yield 1 => ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionCollector'] ?? self::getPromotionCollectorService($container));
            yield 2 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\CustomCartProcessor'] ?? self::getCustomCartProcessorService($container));
            yield 3 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Delivery\\DeliveryProcessor'] ?? self::getDeliveryProcessorService($container));
        }, 4), ($container->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'] ?? self::getScriptExecutorService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\Processor\ContainerCartProcessor' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Processor\ContainerCartProcessor
     */
    protected static function getContainerCartProcessorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartProcessorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Processor/ContainerCartProcessor.php';

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\Processor\\ContainerCartProcessor'] = new \Shopware\Core\Checkout\Cart\Processor\ContainerCartProcessor(($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\PercentagePriceCalculator'] ?? self::getPercentagePriceCalculatorService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] ?? self::getQuantityPriceCalculatorService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\CurrencyPriceCalculator'] ?? self::getCurrencyPriceCalculatorService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\Processor\DiscountCartProcessor' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\Processor\DiscountCartProcessor
     */
    protected static function getDiscountCartProcessorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartProcessorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/Processor/DiscountCartProcessor.php';

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\Processor\\DiscountCartProcessor'] = new \Shopware\Core\Checkout\Cart\Processor\DiscountCartProcessor(($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\PercentagePriceCalculator'] ?? self::getPercentagePriceCalculatorService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\CurrencyPriceCalculator'] ?? self::getCurrencyPriceCalculatorService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Cart\TaxProvider\TaxProviderProcessor' shared service.
     *
     * @return \Shopware\Core\Checkout\Cart\TaxProvider\TaxProviderProcessor
     */
    protected static function getTaxProviderProcessorService($container)
    {
        $a = ($container->services['tax_provider.repository'] ?? self::getTaxProvider_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\TaxProvider\\TaxProviderProcessor'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\TaxProvider\\TaxProviderProcessor'];
        }
        $b = ($container->privates['shopware.app_system.guzzle'] ?? self::getShopware_AppSystem_GuzzleService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Cart\\TaxProvider\\TaxProviderProcessor'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Cart\\TaxProvider\\TaxProviderProcessor'];
        }
        $c = ($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\CashRounding'] ??= new \Shopware\Core\Checkout\Cart\Price\CashRounding());

        return $container->privates['Shopware\\Core\\Checkout\\Cart\\TaxProvider\\TaxProviderProcessor'] = new \Shopware\Core\Checkout\Cart\TaxProvider\TaxProviderProcessor($a, ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), new \Shopware\Core\Checkout\Cart\TaxProvider\TaxAdjustment(new \Shopware\Core\Checkout\Cart\Price\AmountCalculator($c, ($container->privates['Shopware\\Core\\Checkout\\Cart\\Tax\\PercentageTaxRuleBuilder'] ??= new \Shopware\Core\Checkout\Cart\Tax\PercentageTaxRuleBuilder()), new \Shopware\Core\Checkout\Cart\TaxProvider\TaxAdjustmentCalculator()), $c), ($container->services['Shopware\\Core\\Checkout\\Cart\\TaxProvider\\TaxProviderRegistry'] ?? self::getTaxProviderRegistryService($container)), new \Shopware\Core\Framework\App\TaxProvider\Payload\TaxProviderPayloadService(($container->privates['Shopware\\Core\\Framework\\App\\AppPayloadServiceHelper'] ?? self::getAppPayloadServiceHelperService($container)), $b, $container->getEnv('APP_URL')));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Customer\Command\DeleteUnusedGuestCustomersCommand' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Command\DeleteUnusedGuestCustomersCommand
     */
    protected static function getDeleteUnusedGuestCustomersCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Command/DeleteUnusedGuestCustomersCommand.php';

        $container->privates['Shopware\\Core\\Checkout\\Customer\\Command\\DeleteUnusedGuestCustomersCommand'] = $instance = new \Shopware\Core\Checkout\Customer\Command\DeleteUnusedGuestCustomersCommand(($container->privates['Shopware\\Core\\Checkout\\Customer\\DeleteUnusedGuestCustomerService'] ?? self::getDeleteUnusedGuestCustomerServiceService($container)));

        $instance->setName('customer:delete-unused-guests');
        $instance->setDescription('Delete unused guest customers');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Customer\DataAbstractionLayer\CustomerIndexer' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\DataAbstractionLayer\CustomerIndexer
     */
    protected static function getCustomerIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/DataAbstractionLayer/CustomerIndexer.php';

        $a = ($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\DataAbstractionLayer\\CustomerIndexer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\DataAbstractionLayer\\CustomerIndexer'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\DataAbstractionLayer\\CustomerIndexer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\DataAbstractionLayer\\CustomerIndexer'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Customer\\DataAbstractionLayer\\CustomerIndexer'] = new \Shopware\Core\Checkout\Customer\DataAbstractionLayer\CustomerIndexer(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\ManyToManyIdFieldUpdater'] ?? self::getManyToManyIdFieldUpdaterService($container)), ($container->privates['Shopware\\Core\\Content\\Newsletter\\DataAbstractionLayer\\Indexing\\CustomerNewsletterSalesChannelsUpdater'] ?? self::getCustomerNewsletterSalesChannelsUpdaterService($container)), $b);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Customer\DeleteUnusedGuestCustomerHandler' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\DeleteUnusedGuestCustomerHandler
     */
    protected static function getDeleteUnusedGuestCustomerHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageSubscriberInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/ScheduledTaskHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/DeleteUnusedGuestCustomerHandler.php';

        $a = ($container->services['scheduled_task.repository'] ?? self::getScheduledTask_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\DeleteUnusedGuestCustomerHandler'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\DeleteUnusedGuestCustomerHandler'];
        }
        $b = ($container->privates['Shopware\\Core\\Checkout\\Customer\\DeleteUnusedGuestCustomerService'] ?? self::getDeleteUnusedGuestCustomerServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\DeleteUnusedGuestCustomerHandler'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\DeleteUnusedGuestCustomerHandler'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Customer\\DeleteUnusedGuestCustomerHandler'] = new \Shopware\Core\Checkout\Customer\DeleteUnusedGuestCustomerHandler($a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Customer\DeleteUnusedGuestCustomerService' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\DeleteUnusedGuestCustomerService
     */
    protected static function getDeleteUnusedGuestCustomerServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/DeleteUnusedGuestCustomerService.php';

        $a = ($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\DeleteUnusedGuestCustomerService'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\DeleteUnusedGuestCustomerService'];
        }
        $b = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\DeleteUnusedGuestCustomerService'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\DeleteUnusedGuestCustomerService'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Customer\\DeleteUnusedGuestCustomerService'] = new \Shopware\Core\Checkout\Customer\DeleteUnusedGuestCustomerService($a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Customer\SalesChannel\AccountService' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\SalesChannel\AccountService
     */
    protected static function getAccountServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/SalesChannel/AccountService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Password/LegacyPasswordVerifier.php';

        $a = ($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'];
        }
        $c = ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\SwitchDefaultAddressRoute'] ?? self::getSwitchDefaultAddressRouteService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'];
        }
        $d = ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'] ?? self::getCartRestorerService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'] = new \Shopware\Core\Checkout\Customer\SalesChannel\AccountService($a, $b, new \Shopware\Core\Checkout\Customer\Password\LegacyPasswordVerifier(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Password\\LegacyEncoder\\Md5'] ??= new \Shopware\Core\Checkout\Customer\Password\LegacyEncoder\Md5());
            yield 1 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Password\\LegacyEncoder\\Sha256'] ??= new \Shopware\Core\Checkout\Customer\Password\LegacyEncoder\Sha256());
        }, 2)), $c, $d);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Customer\Service\ProductReviewCountService' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Service\ProductReviewCountService
     */
    protected static function getProductReviewCountServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Service/ProductReviewCountService.php';

        return $container->privates['Shopware\\Core\\Checkout\\Customer\\Service\\ProductReviewCountService'] = new \Shopware\Core\Checkout\Customer\Service\ProductReviewCountService(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Customer\Subscriber\CustomerBeforeDeleteSubscriber' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Subscriber\CustomerBeforeDeleteSubscriber
     */
    protected static function getCustomerBeforeDeleteSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Subscriber/CustomerBeforeDeleteSubscriber.php';

        $a = ($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerBeforeDeleteSubscriber'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerBeforeDeleteSubscriber'];
        }
        $b = ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? self::getSalesChannelContextServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerBeforeDeleteSubscriber'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerBeforeDeleteSubscriber'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerBeforeDeleteSubscriber'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerBeforeDeleteSubscriber'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerBeforeDeleteSubscriber'] = new \Shopware\Core\Checkout\Customer\Subscriber\CustomerBeforeDeleteSubscriber($a, $b, $c);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Customer\Subscriber\CustomerChangePasswordSubscriber' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Subscriber\CustomerChangePasswordSubscriber
     */
    protected static function getCustomerChangePasswordSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Subscriber/CustomerChangePasswordSubscriber.php';

        return $container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerChangePasswordSubscriber'] = new \Shopware\Core\Checkout\Customer\Subscriber\CustomerChangePasswordSubscriber(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Customer\Subscriber\CustomerFlowEventsSubscriber' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Subscriber\CustomerFlowEventsSubscriber
     */
    protected static function getCustomerFlowEventsSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Subscriber/CustomerFlowEventsSubscriber.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerFlowEventsSubscriber'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerFlowEventsSubscriber'];
        }
        $b = ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'] ?? self::getSalesChannelContextRestorerService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerFlowEventsSubscriber'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerFlowEventsSubscriber'];
        }
        $c = ($container->privates['Shopware\\Core\\Checkout\\Customer\\DataAbstractionLayer\\CustomerIndexer'] ?? self::getCustomerIndexerService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerFlowEventsSubscriber'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerFlowEventsSubscriber'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerFlowEventsSubscriber'] = new \Shopware\Core\Checkout\Customer\Subscriber\CustomerFlowEventsSubscriber($a, $b, $c);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Customer\Subscriber\CustomerGroupSubscriber' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Subscriber\CustomerGroupSubscriber
     */
    protected static function getCustomerGroupSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Subscriber/CustomerGroupSubscriber.php';

        $a = ($container->services['customer_group.repository'] ?? self::getCustomerGroup_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'];
        }
        $b = ($container->services['seo_url.repository'] ?? self::getSeoUrl_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'];
        }
        $c = ($container->services['language.repository'] ?? self::getLanguage_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'];
        }
        $d = ($container->privates['Shopware\\Core\\Content\\Seo\\SeoUrlPersister'] ?? self::getSeoUrlPersisterService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerGroupSubscriber'] = new \Shopware\Core\Checkout\Customer\Subscriber\CustomerGroupSubscriber($a, $b, $c, $d, ($container->privates['slugify'] ?? self::getSlugifyService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Customer\Subscriber\CustomerMetaFieldSubscriber' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Subscriber\CustomerMetaFieldSubscriber
     */
    protected static function getCustomerMetaFieldSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Subscriber/CustomerMetaFieldSubscriber.php';

        return $container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerMetaFieldSubscriber'] = new \Shopware\Core\Checkout\Customer\Subscriber\CustomerMetaFieldSubscriber(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Customer\Subscriber\CustomerRemoteAddressSubscriber' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Subscriber\CustomerRemoteAddressSubscriber
     */
    protected static function getCustomerRemoteAddressSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Subscriber/CustomerRemoteAddressSubscriber.php';

        $a = ($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerRemoteAddressSubscriber'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerRemoteAddressSubscriber'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerRemoteAddressSubscriber'] = new \Shopware\Core\Checkout\Customer\Subscriber\CustomerRemoteAddressSubscriber($a, ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Customer\Subscriber\CustomerSalutationSubscriber' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Subscriber\CustomerSalutationSubscriber
     */
    protected static function getCustomerSalutationSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Subscriber/CustomerSalutationSubscriber.php';

        return $container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerSalutationSubscriber'] = new \Shopware\Core\Checkout\Customer\Subscriber\CustomerSalutationSubscriber(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Customer\Subscriber\CustomerTokenSubscriber' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Subscriber\CustomerTokenSubscriber
     */
    protected static function getCustomerTokenSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Subscriber/CustomerTokenSubscriber.php';

        $a = ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'] ?? self::getSalesChannelContextPersisterService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerTokenSubscriber'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerTokenSubscriber'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\CustomerTokenSubscriber'] = new \Shopware\Core\Checkout\Customer\Subscriber\CustomerTokenSubscriber($a, ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Customer\Subscriber\ProductReviewSubscriber' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Subscriber\ProductReviewSubscriber
     */
    protected static function getProductReviewSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Subscriber/ProductReviewSubscriber.php';

        return $container->privates['Shopware\\Core\\Checkout\\Customer\\Subscriber\\ProductReviewSubscriber'] = new \Shopware\Core\Checkout\Customer\Subscriber\ProductReviewSubscriber(($container->privates['Shopware\\Core\\Checkout\\Customer\\Service\\ProductReviewCountService'] ?? self::getProductReviewCountServiceService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Customer\Validation\AddressValidationFactory' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Validation\AddressValidationFactory
     */
    protected static function getAddressValidationFactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Validation/DataValidationFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Validation/AddressValidationFactory.php';

        return $container->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\AddressValidationFactory'] = new \Shopware\Core\Checkout\Customer\Validation\AddressValidationFactory(($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerEmailUniqueValidator' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerEmailUniqueValidator
     */
    protected static function getCustomerEmailUniqueValidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Validation/Constraint/CustomerEmailUniqueValidator.php';

        return $container->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerEmailUniqueValidator'] = new \Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerEmailUniqueValidator(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerPasswordMatchesValidator' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerPasswordMatchesValidator
     */
    protected static function getCustomerPasswordMatchesValidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Validation/Constraint/CustomerPasswordMatchesValidator.php';

        $a = ($container->privates['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountService'] ?? self::getAccountServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerPasswordMatchesValidator'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerPasswordMatchesValidator'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerPasswordMatchesValidator'] = new \Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerPasswordMatchesValidator($a);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerVatIdentificationValidator' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerVatIdentificationValidator
     */
    protected static function getCustomerVatIdentificationValidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Validation/Constraint/CustomerVatIdentificationValidator.php';

        return $container->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerVatIdentificationValidator'] = new \Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerVatIdentificationValidator(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerZipCodeValidator' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerZipCodeValidator
     */
    protected static function getCustomerZipCodeValidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Validation/Constraint/CustomerZipCodeValidator.php';

        $a = ($container->services['country.repository'] ?? self::getCountry_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerZipCodeValidator'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerZipCodeValidator'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerZipCodeValidator'] = new \Shopware\Core\Checkout\Customer\Validation\Constraint\CustomerZipCodeValidator($a);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Customer\Validation\CustomerProfileValidationFactory' shared service.
     *
     * @return \Shopware\Core\Checkout\Customer\Validation\CustomerProfileValidationFactory
     */
    protected static function getCustomerProfileValidationFactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Validation/DataValidationFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Customer/Validation/CustomerProfileValidationFactory.php';

        return $container->privates['Shopware\\Core\\Checkout\\Customer\\Validation\\CustomerProfileValidationFactory'] = new \Shopware\Core\Checkout\Customer\Validation\CustomerProfileValidationFactory(($container->services['Shopware\\Core\\System\\Salutation\\SalutationDefinition'] ?? self::getSalutationDefinitionService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), $container->parameters['customer.account_types']);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Document\Renderer\CreditNoteRenderer' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Renderer\CreditNoteRenderer
     */
    protected static function getCreditNoteRendererService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Renderer/AbstractDocumentRenderer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Renderer/CreditNoteRenderer.php';

        $a = ($container->services['order.repository'] ?? self::getOrder_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'];
        }
        $b = ($container->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentConfigLoader'] ?? self::getDocumentConfigLoaderService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'];
        }
        $d = ($container->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'] ?? self::getDocumentTemplateRendererService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'];
        }
        $e = ($container->services['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface'] ?? self::getNumberRangeValueGeneratorInterfaceService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'] = new \Shopware\Core\Checkout\Document\Renderer\CreditNoteRenderer($a, $b, $c, $d, $e, ($container->privates['Shopware\\Core\\Checkout\\Document\\Service\\ReferenceInvoiceLoader'] ?? self::getReferenceInvoiceLoaderService($container)), \dirname(__DIR__, 4), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Document\Renderer\DeliveryNoteRenderer' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Renderer\DeliveryNoteRenderer
     */
    protected static function getDeliveryNoteRendererService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Renderer/AbstractDocumentRenderer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Renderer/DeliveryNoteRenderer.php';

        $a = ($container->services['order.repository'] ?? self::getOrder_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'];
        }
        $b = ($container->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentConfigLoader'] ?? self::getDocumentConfigLoaderService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'];
        }
        $d = ($container->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'] ?? self::getDocumentTemplateRendererService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'];
        }
        $e = ($container->services['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface'] ?? self::getNumberRangeValueGeneratorInterfaceService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'] = new \Shopware\Core\Checkout\Document\Renderer\DeliveryNoteRenderer($a, $b, $c, $d, $e, \dirname(__DIR__, 4), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Document\Renderer\InvoiceRenderer' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Renderer\InvoiceRenderer
     */
    protected static function getInvoiceRendererService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Renderer/AbstractDocumentRenderer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Renderer/InvoiceRenderer.php';

        $a = ($container->services['order.repository'] ?? self::getOrder_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'];
        }
        $b = ($container->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentConfigLoader'] ?? self::getDocumentConfigLoaderService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'];
        }
        $d = ($container->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'] ?? self::getDocumentTemplateRendererService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'];
        }
        $e = ($container->services['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface'] ?? self::getNumberRangeValueGeneratorInterfaceService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'] = new \Shopware\Core\Checkout\Document\Renderer\InvoiceRenderer($a, $b, $c, $d, $e, \dirname(__DIR__, 4), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Document\Renderer\StornoRenderer' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Renderer\StornoRenderer
     */
    protected static function getStornoRendererService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Renderer/AbstractDocumentRenderer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Renderer/StornoRenderer.php';

        $a = ($container->services['order.repository'] ?? self::getOrder_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'];
        }
        $b = ($container->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentConfigLoader'] ?? self::getDocumentConfigLoaderService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'];
        }
        $d = ($container->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'] ?? self::getDocumentTemplateRendererService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'];
        }
        $e = ($container->services['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface'] ?? self::getNumberRangeValueGeneratorInterfaceService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'] = new \Shopware\Core\Checkout\Document\Renderer\StornoRenderer($a, $b, $c, $d, $e, ($container->privates['Shopware\\Core\\Checkout\\Document\\Service\\ReferenceInvoiceLoader'] ?? self::getReferenceInvoiceLoaderService($container)), \dirname(__DIR__, 4), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Document\Service\DocumentConfigLoader' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Service\DocumentConfigLoader
     */
    protected static function getDocumentConfigLoaderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Service/DocumentConfigLoader.php';

        $a = ($container->services['document_base_config.repository'] ?? self::getDocumentBaseConfig_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentConfigLoader'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentConfigLoader'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentConfigLoader'] = new \Shopware\Core\Checkout\Document\Service\DocumentConfigLoader($a);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Document\Service\DocumentGenerator' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Service\DocumentGenerator
     */
    protected static function getDocumentGeneratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Service/DocumentGenerator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Renderer/DocumentRendererRegistry.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Service/PdfRenderer.php';

        $a = ($container->privates['Shopware\\Core\\Content\\Media\\MediaService'] ?? self::getMediaServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentGenerator'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentGenerator'];
        }
        $b = ($container->services['document.repository'] ?? self::getDocument_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentGenerator'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentGenerator'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentGenerator'] = new \Shopware\Core\Checkout\Document\Service\DocumentGenerator(new \Shopware\Core\Checkout\Document\Renderer\DocumentRendererRegistry(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\InvoiceRenderer'] ?? self::getInvoiceRendererService($container));
            yield 1 => ($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\DeliveryNoteRenderer'] ?? self::getDeliveryNoteRendererService($container));
            yield 2 => ($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\StornoRenderer'] ?? self::getStornoRendererService($container));
            yield 3 => ($container->privates['Shopware\\Core\\Checkout\\Document\\Renderer\\CreditNoteRenderer'] ?? self::getCreditNoteRendererService($container));
        }, 4)), new \Shopware\Core\Checkout\Document\Service\PdfRenderer($container->parameters['shopware.dompdf.options']), $a, $b, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Document\Service\ReferenceInvoiceLoader' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Service\ReferenceInvoiceLoader
     */
    protected static function getReferenceInvoiceLoaderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Service/ReferenceInvoiceLoader.php';

        return $container->privates['Shopware\\Core\\Checkout\\Document\\Service\\ReferenceInvoiceLoader'] = new \Shopware\Core\Checkout\Document\Service\ReferenceInvoiceLoader(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Document\Twig\DocumentTemplateRenderer' shared service.
     *
     * @return \Shopware\Core\Checkout\Document\Twig\DocumentTemplateRenderer
     */
    protected static function getDocumentTemplateRendererService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Twig/DocumentTemplateRenderer.php';

        $a = ($container->services['twig'] ?? self::getTwigService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'];
        }
        $b = ($container->services['translator'] ?? self::getTranslatorService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'];
        }
        $c = ($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? self::getSalesChannelContextFactoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Document\\Twig\\DocumentTemplateRenderer'] = new \Shopware\Core\Checkout\Document\Twig\DocumentTemplateRenderer(($container->services['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateFinder'] ?? self::getTemplateFinderService($container)), $a, $b, $c, $d);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Order\Aggregate\OrderTransaction\OrderTransactionStateHandler' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Aggregate\OrderTransaction\OrderTransactionStateHandler
     */
    protected static function getOrderTransactionStateHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Aggregate/OrderTransaction/OrderTransactionStateHandler.php';

        $a = ($container->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'] ?? self::getStateMachineRegistryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'] = new \Shopware\Core\Checkout\Order\Aggregate\OrderTransaction\OrderTransactionStateHandler($a);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Order\Listener\OrderStateChangeEventListener' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Listener\OrderStateChangeEventListener
     */
    protected static function getOrderStateChangeEventListenerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Listener/OrderStateChangeEventListener.php';

        $a = ($container->services['order.repository'] ?? self::getOrder_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'];
        }
        $b = ($container->services['order_transaction.repository'] ?? self::getOrderTransaction_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'];
        }
        $c = ($container->services['order_delivery.repository'] ?? self::getOrderDelivery_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'];
        }
        $e = ($container->services['Shopware\\Core\\Framework\\Event\\BusinessEventCollector'] ?? self::getBusinessEventCollectorService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'];
        }
        $f = ($container->services['state_machine_state.repository'] ?? self::getStateMachineState_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Order\\Listener\\OrderStateChangeEventListener'] = new \Shopware\Core\Checkout\Order\Listener\OrderStateChangeEventListener($a, $b, $c, $d, $e, $f);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Order\SalesChannel\OrderService' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\SalesChannel\OrderService
     */
    protected static function getOrderServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/SalesChannel/OrderService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Validation/DataValidationFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Validation/OrderValidationFactory.php';

        return $container->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'] = new \Shopware\Core\Checkout\Order\SalesChannel\OrderService(($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)), new \Shopware\Core\Checkout\Order\Validation\OrderValidationFactory(), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? self::getCartServiceService($container)), ($container->services['payment_method.repository'] ?? self::getPaymentMethod_RepositoryService($container)), ($container->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'] ?? self::getStateMachineRegistryService($container)), ($container->services['order.repository'] ?? self::getOrder_RepositoryService($container)), ($container->services['mail_template.repository'] ?? self::getMailTemplate_RepositoryService($container)), ($container->services['document.repository'] ?? self::getDocument_RepositoryService($container)), ($container->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'] ?? self::getMailServiceService($container)), ($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Order\Subscriber\OrderSalutationSubscriber' shared service.
     *
     * @return \Shopware\Core\Checkout\Order\Subscriber\OrderSalutationSubscriber
     */
    protected static function getOrderSalutationSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Order/Subscriber/OrderSalutationSubscriber.php';

        return $container->privates['Shopware\\Core\\Checkout\\Order\\Subscriber\\OrderSalutationSubscriber'] = new \Shopware\Core\Checkout\Order\Subscriber\OrderSalutationSubscriber(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Payment\Cart\PaymentHandler\CashPayment' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\CashPayment
     */
    protected static function getCashPaymentService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/SynchronousPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/DefaultPayment.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/CashPayment.php';

        $a = ($container->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'] ?? self::getOrderTransactionStateHandlerService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\CashPayment'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\CashPayment'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\CashPayment'] = new \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\CashPayment($a);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Payment\Cart\PaymentHandler\DebitPayment' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\DebitPayment
     */
    protected static function getDebitPaymentService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/SynchronousPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/DefaultPayment.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/DebitPayment.php';

        $a = ($container->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'] ?? self::getOrderTransactionStateHandlerService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DebitPayment'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DebitPayment'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DebitPayment'] = new \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\DebitPayment($a);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Payment\Cart\PaymentHandler\DefaultPayment' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\DefaultPayment
     */
    protected static function getDefaultPaymentService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/SynchronousPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/DefaultPayment.php';

        $a = ($container->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'] ?? self::getOrderTransactionStateHandlerService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DefaultPayment'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DefaultPayment'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DefaultPayment'] = new \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\DefaultPayment($a);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Payment\Cart\PaymentHandler\InvoicePayment' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\InvoicePayment
     */
    protected static function getInvoicePaymentService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/SynchronousPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/DefaultPayment.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/RecurringPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/InvoicePayment.php';

        $a = ($container->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'] ?? self::getOrderTransactionStateHandlerService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\InvoicePayment'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\InvoicePayment'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\InvoicePayment'] = new \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\InvoicePayment($a);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Payment\Cart\PaymentHandler\PaymentHandlerRegistry' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\PaymentHandlerRegistry
     */
    protected static function getPaymentHandlerRegistryService($container)
    {
        $a = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppPaymentHandler' => ['privates', 'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppPaymentHandler', 'getAppPaymentHandlerService', false],
        ], [
            'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppPaymentHandler' => 'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppPaymentHandler',
        ]);

        return $container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PaymentHandlerRegistry'] = new \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\PaymentHandlerRegistry(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\CashPayment' => ['privates', 'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\CashPayment', 'getCashPaymentService', false],
            'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DebitPayment' => ['privates', 'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DebitPayment', 'getDebitPaymentService', false],
            'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DefaultPayment' => ['privates', 'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DefaultPayment', 'getDefaultPaymentService', false],
            'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\InvoicePayment' => ['privates', 'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\InvoicePayment', 'getInvoicePaymentService', false],
            'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PrePayment' => ['privates', 'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PrePayment', 'getPrePaymentService', false],
            'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler' => ['privates', 'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler', 'getAppSyncPaymentHandlerService', false],
        ], [
            'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\CashPayment' => 'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\CashPayment',
            'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DebitPayment' => 'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DebitPayment',
            'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DefaultPayment' => 'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\DefaultPayment',
            'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\InvoicePayment' => 'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\InvoicePayment',
            'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PrePayment' => 'Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PrePayment',
            'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler' => 'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler',
        ]), new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppAsyncPaymentHandler' => ['privates', 'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppAsyncPaymentHandler', 'getAppAsyncPaymentHandlerService', false],
        ], [
            'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppAsyncPaymentHandler' => 'Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppAsyncPaymentHandler',
        ]), $a, $a, ($container->privates['.service_locator.Xbsa8iG'] ??= new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [], [])), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Payment\Cart\PaymentHandler\PrePayment' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\PrePayment
     */
    protected static function getPrePaymentService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/SynchronousPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/DefaultPayment.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/RecurringPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PrePayment.php';

        $a = ($container->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'] ?? self::getOrderTransactionStateHandlerService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PrePayment'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PrePayment'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PrePayment'] = new \Shopware\Core\Checkout\Payment\Cart\PaymentHandler\PrePayment($a);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Payment\Cart\Token\JWTFactoryV2' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\Cart\Token\JWTFactoryV2
     */
    protected static function getJWTFactoryV2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/Token/TokenFactoryInterfaceV2.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/Token/JWTFactoryV2.php';

        return $container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\Token\\JWTFactoryV2'] = new \Shopware\Core\Checkout\Payment\Cart\Token\JWTFactoryV2(($container->privates['shopware.jwt_config'] ?? self::getShopware_JwtConfigService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Payment\DataAbstractionLayer\PaymentMethodIndexer' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\DataAbstractionLayer\PaymentMethodIndexer
     */
    protected static function getPaymentMethodIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/DataAbstractionLayer/PaymentMethodIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/DataAbstractionLayer/PaymentDistinguishableNameGenerator.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentMethodIndexer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentMethodIndexer'];
        }
        $b = ($container->services['payment_method.repository'] ?? self::getPaymentMethod_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentMethodIndexer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentMethodIndexer'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentMethodIndexer'] = new \Shopware\Core\Checkout\Payment\DataAbstractionLayer\PaymentMethodIndexer(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, $b, new \Shopware\Core\Checkout\Payment\DataAbstractionLayer\PaymentDistinguishableNameGenerator($b));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Payment\DataAbstractionLayer\PaymentMethodValidator' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\DataAbstractionLayer\PaymentMethodValidator
     */
    protected static function getPaymentMethodValidator2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/DataAbstractionLayer/PaymentMethodValidator.php';

        return $container->privates['Shopware\\Core\\Checkout\\Payment\\DataAbstractionLayer\\PaymentMethodValidator'] = new \Shopware\Core\Checkout\Payment\DataAbstractionLayer\PaymentMethodValidator(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Payment\PaymentService' shared service.
     *
     * @return \Shopware\Core\Checkout\Payment\PaymentService
     */
    protected static function getPaymentServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/PaymentService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentTransactionChainProcessor.php';

        $a = ($container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\Token\\JWTFactoryV2'] ?? self::getJWTFactoryV2Service($container));
        $b = ($container->services['order.repository'] ?? self::getOrder_RepositoryService($container));
        $c = ($container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentHandler\\PaymentHandlerRegistry'] ?? self::getPaymentHandlerRegistryService($container));
        $d = ($container->privates['Shopware\\Core\\Checkout\\Payment\\Cart\\PaymentTransactionStructFactory'] ??= new \Shopware\Core\Checkout\Payment\Cart\PaymentTransactionStructFactory());
        $e = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        return $container->privates['Shopware\\Core\\Checkout\\Payment\\PaymentService'] = new \Shopware\Core\Checkout\Payment\PaymentService(new \Shopware\Core\Checkout\Payment\Cart\PaymentTransactionChainProcessor($a, $b, ($container->services['router'] ?? self::getRouterService($container)), $c, ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->privates['Shopware\\Core\\System\\StateMachine\\Loader\\InitialStateIdLoader'] ?? self::getInitialStateIdLoaderService($container)), $d, $e), $a, $c, ($container->services['order_transaction.repository'] ?? self::getOrderTransaction_RepositoryService($container)), ($container->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'] ?? self::getOrderTransactionStateHandlerService($container)), ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), $b, ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? self::getSalesChannelContextServiceService($container)), $d, $e);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Promotion\Cart\Discount\Filter\FilterServiceRegistry' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Cart\Discount\Filter\FilterServiceRegistry
     */
    protected static function getFilterServiceRegistryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/Discount/Filter/FilterServiceRegistry.php';

        return $container->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\Discount\\Filter\\FilterServiceRegistry'] = new \Shopware\Core\Checkout\Promotion\Cart\Discount\Filter\FilterServiceRegistry(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\Discount\\Filter\\Sorter\\FilterSorterPriceAsc'] ??= new \Shopware\Core\Checkout\Promotion\Cart\Discount\Filter\Sorter\FilterSorterPriceAsc());
            yield 1 => ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\Discount\\Filter\\Sorter\\FilterSorterPriceDesc'] ??= new \Shopware\Core\Checkout\Promotion\Cart\Discount\Filter\Sorter\FilterSorterPriceDesc());
        }, 2), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\Discount\\Filter\\Picker\\VerticalPicker'] ??= new \Shopware\Core\Checkout\Promotion\Cart\Discount\Filter\Picker\VerticalPicker());
            yield 1 => ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\Discount\\Filter\\Picker\\HorizontalPicker'] ??= new \Shopware\Core\Checkout\Promotion\Cart\Discount\Filter\Picker\HorizontalPicker());
        }, 2));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Promotion\Cart\PromotionCollector' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Cart\PromotionCollector
     */
    protected static function getPromotionCollectorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartDataCollectorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionCartInformationTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionCollector.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Gateway/PromotionGatewayInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Gateway/PromotionGateway.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Service/PromotionDateTimeServiceInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Service/PromotionDateTimeService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionItemBuilder.php';

        $a = ($container->services['promotion.repository'] ?? self::getPromotion_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionCollector'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionCollector'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionCollector'] = new \Shopware\Core\Checkout\Promotion\Cart\PromotionCollector(new \Shopware\Core\Checkout\Promotion\Gateway\PromotionGateway($a, new \Shopware\Core\Checkout\Promotion\Service\PromotionDateTimeService()), ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionItemBuilder'] ??= new \Shopware\Core\Checkout\Promotion\Cart\PromotionItemBuilder()), ($container->services['Shopware\\Core\\Framework\\Util\\HtmlSanitizer'] ?? self::getHtmlSanitizerService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Promotion\Cart\PromotionDeliveryProcessor' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Cart\PromotionDeliveryProcessor
     */
    protected static function getPromotionDeliveryProcessorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartProcessorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionDeliveryProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionCartInformationTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionDeliveryCalculator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionItemBuilder.php';

        return $container->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionDeliveryProcessor'] = new \Shopware\Core\Checkout\Promotion\Cart\PromotionDeliveryProcessor(new \Shopware\Core\Checkout\Promotion\Cart\PromotionDeliveryCalculator(($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] ?? self::getQuantityPriceCalculatorService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\PercentagePriceCalculator'] ?? self::getPercentagePriceCalculatorService($container)), ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionItemBuilder'] ??= new \Shopware\Core\Checkout\Promotion\Cart\PromotionItemBuilder())), ($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\LineItemGroupBuilder'] ?? self::getLineItemGroupBuilderService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Promotion\Cart\PromotionProcessor' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Cart\PromotionProcessor
     */
    protected static function getPromotionProcessorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartProcessorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionCartInformationTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/PromotionCalculator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/Discount/Composition/DiscountCompositionBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/Discount/Filter/PackageFilter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/Discount/Filter/AdvancedPackageFilter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/Discount/Filter/AdvancedPackagePicker.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/Discount/Filter/SetGroupScopeFilter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/Discount/Filter/AdvancedPackageRules.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/Discount/DiscountPackager.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/Discount/ScopePackager/CartScopeDiscountPackager.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/Discount/ScopePackager/SetGroupScopeDiscountPackager.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Cart/Discount/ScopePackager/SetScopeDiscountPackager.php';

        $a = ($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\Group\\LineItemGroupBuilder'] ?? self::getLineItemGroupBuilderService($container));
        $b = ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\Discount\\Filter\\FilterServiceRegistry'] ?? self::getFilterServiceRegistryService($container));

        return $container->privates['Shopware\\Core\\Checkout\\Promotion\\Cart\\PromotionProcessor'] = new \Shopware\Core\Checkout\Promotion\Cart\PromotionProcessor(new \Shopware\Core\Checkout\Promotion\Cart\PromotionCalculator(($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\AmountCalculator'] ?? self::getAmountCalculatorService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\AbsolutePriceCalculator'] ?? self::getAbsolutePriceCalculatorService($container)), $a, new \Shopware\Core\Checkout\Promotion\Cart\Discount\Composition\DiscountCompositionBuilder(), new \Shopware\Core\Checkout\Promotion\Cart\Discount\Filter\AdvancedPackageFilter($b), new \Shopware\Core\Checkout\Promotion\Cart\Discount\Filter\AdvancedPackagePicker($b), new \Shopware\Core\Checkout\Promotion\Cart\Discount\Filter\AdvancedPackageRules(), ($container->privates['Shopware\\Core\\Checkout\\Cart\\LineItem\\LineItemQuantitySplitter'] ?? self::getLineItemQuantitySplitterService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\PercentagePriceCalculator'] ?? self::getPercentagePriceCalculatorService($container)), new \Shopware\Core\Checkout\Promotion\Cart\Discount\ScopePackager\CartScopeDiscountPackager(), new \Shopware\Core\Checkout\Promotion\Cart\Discount\ScopePackager\SetGroupScopeDiscountPackager($a), new \Shopware\Core\Checkout\Promotion\Cart\Discount\ScopePackager\SetScopeDiscountPackager($a)), $a);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Promotion\DataAbstractionLayer\PromotionIndexer' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\DataAbstractionLayer\PromotionIndexer
     */
    protected static function getPromotionIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/DataAbstractionLayer/PromotionIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/DataAbstractionLayer/PromotionExclusionUpdater.php';

        $a = ($container->services['promotion.repository'] ?? self::getPromotion_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Promotion\\DataAbstractionLayer\\PromotionIndexer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Promotion\\DataAbstractionLayer\\PromotionIndexer'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Promotion\\DataAbstractionLayer\\PromotionIndexer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Promotion\\DataAbstractionLayer\\PromotionIndexer'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Promotion\\DataAbstractionLayer\\PromotionIndexer'] = new \Shopware\Core\Checkout\Promotion\DataAbstractionLayer\PromotionIndexer(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, new \Shopware\Core\Checkout\Promotion\DataAbstractionLayer\PromotionExclusionUpdater(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container))), ($container->privates['Shopware\\Core\\Checkout\\Promotion\\DataAbstractionLayer\\PromotionRedemptionUpdater'] ?? self::getPromotionRedemptionUpdaterService($container)), $b);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Promotion\DataAbstractionLayer\PromotionRedemptionUpdater' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\DataAbstractionLayer\PromotionRedemptionUpdater
     */
    protected static function getPromotionRedemptionUpdaterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/DataAbstractionLayer/PromotionRedemptionUpdater.php';

        return $container->privates['Shopware\\Core\\Checkout\\Promotion\\DataAbstractionLayer\\PromotionRedemptionUpdater'] = new \Shopware\Core\Checkout\Promotion\DataAbstractionLayer\PromotionRedemptionUpdater(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Promotion\Subscriber\PromotionIndividualCodeRedeemer' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Subscriber\PromotionIndividualCodeRedeemer
     */
    protected static function getPromotionIndividualCodeRedeemerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Subscriber/PromotionIndividualCodeRedeemer.php';

        $a = ($container->services['promotion_individual_code.repository'] ?? self::getPromotionIndividualCode_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Promotion\\Subscriber\\PromotionIndividualCodeRedeemer'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Promotion\\Subscriber\\PromotionIndividualCodeRedeemer'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Promotion\\Subscriber\\PromotionIndividualCodeRedeemer'] = new \Shopware\Core\Checkout\Promotion\Subscriber\PromotionIndividualCodeRedeemer($a);
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Promotion\Subscriber\Storefront\StorefrontCartSubscriber' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Subscriber\Storefront\StorefrontCartSubscriber
     */
    protected static function getStorefrontCartSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Subscriber/Storefront/StorefrontCartSubscriber.php';

        $a = ($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? self::getCartServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Checkout\\Promotion\\Subscriber\\Storefront\\StorefrontCartSubscriber'])) {
            return $container->privates['Shopware\\Core\\Checkout\\Promotion\\Subscriber\\Storefront\\StorefrontCartSubscriber'];
        }

        return $container->privates['Shopware\\Core\\Checkout\\Promotion\\Subscriber\\Storefront\\StorefrontCartSubscriber'] = new \Shopware\Core\Checkout\Promotion\Subscriber\Storefront\StorefrontCartSubscriber($a, ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Promotion\Validator\PromotionValidator' shared service.
     *
     * @return \Shopware\Core\Checkout\Promotion\Validator\PromotionValidator
     */
    protected static function getPromotionValidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Promotion/Validator/PromotionValidator.php';

        return $container->privates['Shopware\\Core\\Checkout\\Promotion\\Validator\\PromotionValidator'] = new \Shopware\Core\Checkout\Promotion\Validator\PromotionValidator(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Checkout\Shipping\Validator\ShippingMethodValidator' shared service.
     *
     * @return \Shopware\Core\Checkout\Shipping\Validator\ShippingMethodValidator
     */
    protected static function getShippingMethodValidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Shipping/Validator/ShippingMethodValidator.php';

        return $container->privates['Shopware\\Core\\Checkout\\Shipping\\Validator\\ShippingMethodValidator'] = new \Shopware\Core\Checkout\Shipping\Validator\ShippingMethodValidator(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Category\DataAbstractionLayer\CategoryIndexer' shared service.
     *
     * @return \Shopware\Core\Content\Category\DataAbstractionLayer\CategoryIndexer
     */
    protected static function getCategoryIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/DataAbstractionLayer/CategoryIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/DataAbstractionLayer/CategoryBreadcrumbUpdater.php';

        $a = ($container->services['category.repository'] ?? self::getCategory_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Category\\DataAbstractionLayer\\CategoryIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Category\\DataAbstractionLayer\\CategoryIndexer'];
        }
        $b = ($container->services['language.repository'] ?? self::getLanguage_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Category\\DataAbstractionLayer\\CategoryIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Category\\DataAbstractionLayer\\CategoryIndexer'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Category\\DataAbstractionLayer\\CategoryIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Category\\DataAbstractionLayer\\CategoryIndexer'];
        }
        $d = ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container));

        return $container->privates['Shopware\\Core\\Content\\Category\\DataAbstractionLayer\\CategoryIndexer'] = new \Shopware\Core\Content\Category\DataAbstractionLayer\CategoryIndexer($d, ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\ChildCountUpdater'] ?? self::getChildCountUpdaterService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\TreeUpdater'] ?? self::getTreeUpdaterService($container)), new \Shopware\Core\Content\Category\DataAbstractionLayer\CategoryBreadcrumbUpdater($d, $a, $b), $c);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Category\Service\CategoryBreadcrumbBuilder' shared service.
     *
     * @return \Shopware\Core\Content\Category\Service\CategoryBreadcrumbBuilder
     */
    protected static function getCategoryBreadcrumbBuilderService($container)
    {
        $a = ($container->services['category.repository'] ?? self::getCategory_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Category\\Service\\CategoryBreadcrumbBuilder'])) {
            return $container->privates['Shopware\\Core\\Content\\Category\\Service\\CategoryBreadcrumbBuilder'];
        }

        return $container->privates['Shopware\\Core\\Content\\Category\\Service\\CategoryBreadcrumbBuilder'] = new \Shopware\Core\Content\Category\Service\CategoryBreadcrumbBuilder($a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Category\Service\NavigationLoader' shared service.
     *
     * @return \Shopware\Core\Content\Category\Service\NavigationLoader
     */
    protected static function getNavigationLoaderService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Category\\Service\\NavigationLoader'])) {
            return $container->privates['Shopware\\Core\\Content\\Category\\Service\\NavigationLoader'];
        }
        $b = ($container->services['Shopware\\Core\\Content\\Category\\SalesChannel\\TreeBuildingNavigationRoute'] ?? self::getTreeBuildingNavigationRouteService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Category\\Service\\NavigationLoader'])) {
            return $container->privates['Shopware\\Core\\Content\\Category\\Service\\NavigationLoader'];
        }

        return $container->privates['Shopware\\Core\\Content\\Category\\Service\\NavigationLoader'] = new \Shopware\Core\Content\Category\Service\NavigationLoader($a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Category\Subscriber\CategorySubscriber' shared service.
     *
     * @return \Shopware\Core\Content\Category\Subscriber\CategorySubscriber
     */
    protected static function getCategorySubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/Subscriber/CategorySubscriber.php';

        $a = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Category\\Subscriber\\CategorySubscriber'])) {
            return $container->privates['Shopware\\Core\\Content\\Category\\Subscriber\\CategorySubscriber'];
        }

        return $container->privates['Shopware\\Core\\Content\\Category\\Subscriber\\CategorySubscriber'] = new \Shopware\Core\Content\Category\Subscriber\CategorySubscriber($a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Category\Validation\EntryPointValidator' shared service.
     *
     * @return \Shopware\Core\Content\Category\Validation\EntryPointValidator
     */
    protected static function getEntryPointValidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Category/Validation/EntryPointValidator.php';

        return $container->privates['Shopware\\Core\\Content\\Category\\Validation\\EntryPointValidator'] = new \Shopware\Core\Content\Category\Validation\EntryPointValidator(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Cms\DataResolver\Element\FormCmsElementResolver' shared service.
     *
     * @return \Shopware\Core\Content\Cms\DataResolver\Element\FormCmsElementResolver
     */
    protected static function getFormCmsElementResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/CmsElementResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/AbstractCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/FormCmsElementResolver.php';

        $a = ($container->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'] ?? self::getCachedSalutationRouteService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Cms\\DataResolver\\Element\\FormCmsElementResolver'])) {
            return $container->privates['Shopware\\Core\\Content\\Cms\\DataResolver\\Element\\FormCmsElementResolver'];
        }

        return $container->privates['Shopware\\Core\\Content\\Cms\\DataResolver\\Element\\FormCmsElementResolver'] = new \Shopware\Core\Content\Cms\DataResolver\Element\FormCmsElementResolver($a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Cms\DataResolver\Element\TextCmsElementResolver' shared service.
     *
     * @return \Shopware\Core\Content\Cms\DataResolver\Element\TextCmsElementResolver
     */
    protected static function getTextCmsElementResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/CmsElementResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/AbstractCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/TextCmsElementResolver.php';

        return $container->privates['Shopware\\Core\\Content\\Cms\\DataResolver\\Element\\TextCmsElementResolver'] = new \Shopware\Core\Content\Cms\DataResolver\Element\TextCmsElementResolver(($container->services['Shopware\\Core\\Framework\\Util\\HtmlSanitizer'] ?? self::getHtmlSanitizerService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Cms\SalesChannel\SalesChannelCmsPageLoader' shared service.
     *
     * @return \Shopware\Core\Content\Cms\SalesChannel\SalesChannelCmsPageLoader
     */
    protected static function getSalesChannelCmsPageLoaderService($container)
    {
        $a = ($container->services['cms_page.repository'] ?? self::getCmsPage_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'])) {
            return $container->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'];
        }
        $b = ($container->services['Shopware\\Core\\Content\\Cms\\DataResolver\\CmsSlotsDataResolver'] ?? self::getCmsSlotsDataResolverService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'])) {
            return $container->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'])) {
            return $container->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'];
        }

        return $container->privates['Shopware\\Core\\Content\\Cms\\SalesChannel\\SalesChannelCmsPageLoader'] = new \Shopware\Core\Content\Cms\SalesChannel\SalesChannelCmsPageLoader($a, $b, $c);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Cms\Subscriber\CmsPageDefaultChangeSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\Cms\Subscriber\CmsPageDefaultChangeSubscriber
     */
    protected static function getCmsPageDefaultChangeSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/Subscriber/CmsPageDefaultChangeSubscriber.php';

        return $container->privates['Shopware\\Core\\Content\\Cms\\Subscriber\\CmsPageDefaultChangeSubscriber'] = new \Shopware\Core\Content\Cms\Subscriber\CmsPageDefaultChangeSubscriber(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Cms\Subscriber\UnusedMediaSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\Cms\Subscriber\UnusedMediaSubscriber
     */
    protected static function getUnusedMediaSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/Subscriber/UnusedMediaSubscriber.php';

        return $container->privates['Shopware\\Core\\Content\\Cms\\Subscriber\\UnusedMediaSubscriber'] = new \Shopware\Core\Content\Cms\Subscriber\UnusedMediaSubscriber(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Api\FlowActionCollector' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Api\FlowActionCollector
     */
    protected static function getFlowActionCollectorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Api/FlowActionCollector.php';

        return $container->privates['Shopware\\Core\\Content\\Flow\\Api\\FlowActionCollector'] = new \Shopware\Core\Content\Flow\Api\FlowActionCollector(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddOrderTagAction'] ?? self::getAddOrderTagActionService($container));
            yield 1 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddCustomerTagAction'] ?? self::getAddCustomerTagActionService($container));
            yield 2 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\RemoveOrderTagAction'] ?? self::getRemoveOrderTagActionService($container));
            yield 3 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\RemoveCustomerTagAction'] ?? self::getRemoveCustomerTagActionService($container));
            yield 4 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\ChangeCustomerGroupAction'] ?? self::getChangeCustomerGroupActionService($container));
            yield 5 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\ChangeCustomerStatusAction'] ?? self::getChangeCustomerStatusActionService($container));
            yield 6 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\GenerateDocumentAction'] ?? self::getGenerateDocumentActionService($container));
            yield 7 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\GrantDownloadAccessAction'] ?? self::getGrantDownloadAccessActionService($container));
            yield 8 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SendMailAction'] ?? self::getSendMailActionService($container));
            yield 9 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetOrderStateAction'] ?? self::getSetOrderStateActionService($container));
            yield 10 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetCustomerCustomFieldAction'] ?? self::getSetCustomerCustomFieldActionService($container));
            yield 11 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetCustomerGroupCustomFieldAction'] ?? self::getSetCustomerGroupCustomFieldActionService($container));
            yield 12 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddCustomerAffiliateAndCampaignCodeAction'] ?? self::getAddCustomerAffiliateAndCampaignCodeActionService($container));
            yield 13 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddOrderAffiliateAndCampaignCodeAction'] ?? self::getAddOrderAffiliateAndCampaignCodeActionService($container));
            yield 14 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetOrderCustomFieldAction'] ?? self::getSetOrderCustomFieldActionService($container));
            yield 15 => ($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\StopFlowAction'] ??= new \Shopware\Core\Content\Flow\Dispatching\Action\StopFlowAction());
        }, 16), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['app_flow_action.repository'] ?? self::getAppFlowAction_RepositoryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\AddCustomerAffiliateAndCampaignCodeAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\AddCustomerAffiliateAndCampaignCodeAction
     */
    protected static function getAddCustomerAffiliateAndCampaignCodeActionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/AddCustomerAffiliateAndCampaignCodeAction.php';

        return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddCustomerAffiliateAndCampaignCodeAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\AddCustomerAffiliateAndCampaignCodeAction(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\AddCustomerTagAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\AddCustomerTagAction
     */
    protected static function getAddCustomerTagActionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/AddCustomerTagAction.php';

        return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddCustomerTagAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\AddCustomerTagAction(($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\AddOrderAffiliateAndCampaignCodeAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\AddOrderAffiliateAndCampaignCodeAction
     */
    protected static function getAddOrderAffiliateAndCampaignCodeActionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/AddOrderAffiliateAndCampaignCodeAction.php';

        return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddOrderAffiliateAndCampaignCodeAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\AddOrderAffiliateAndCampaignCodeAction(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['order.repository'] ?? self::getOrder_RepositoryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\AddOrderTagAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\AddOrderTagAction
     */
    protected static function getAddOrderTagActionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/AddOrderTagAction.php';

        return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\AddOrderTagAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\AddOrderTagAction(($container->services['order.repository'] ?? self::getOrder_RepositoryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\ChangeCustomerGroupAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\ChangeCustomerGroupAction
     */
    protected static function getChangeCustomerGroupActionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/ChangeCustomerGroupAction.php';

        return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\ChangeCustomerGroupAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\ChangeCustomerGroupAction(($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\ChangeCustomerStatusAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\ChangeCustomerStatusAction
     */
    protected static function getChangeCustomerStatusActionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/ChangeCustomerStatusAction.php';

        return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\ChangeCustomerStatusAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\ChangeCustomerStatusAction(($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\GenerateDocumentAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\GenerateDocumentAction
     */
    protected static function getGenerateDocumentActionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/GenerateDocumentAction.php';

        return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\GenerateDocumentAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\GenerateDocumentAction(($container->privates['Shopware\\Core\\Checkout\\Document\\Service\\DocumentGenerator'] ?? self::getDocumentGeneratorService($container)), ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\GrantDownloadAccessAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\GrantDownloadAccessAction
     */
    protected static function getGrantDownloadAccessActionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/GrantDownloadAccessAction.php';

        return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\GrantDownloadAccessAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\GrantDownloadAccessAction(($container->services['order_line_item_download.repository'] ?? self::getOrderLineItemDownload_RepositoryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\RemoveCustomerTagAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\RemoveCustomerTagAction
     */
    protected static function getRemoveCustomerTagActionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/RemoveCustomerTagAction.php';

        return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\RemoveCustomerTagAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\RemoveCustomerTagAction(($container->services['customer_tag.repository'] ?? self::getCustomerTag_RepositoryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\RemoveOrderTagAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\RemoveOrderTagAction
     */
    protected static function getRemoveOrderTagActionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/RemoveOrderTagAction.php';

        return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\RemoveOrderTagAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\RemoveOrderTagAction(($container->services['order_tag.repository'] ?? self::getOrderTag_RepositoryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\SendMailAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\SendMailAction
     */
    protected static function getSendMailActionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/SendMailAction.php';

        return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SendMailAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\SendMailAction(($container->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'] ?? self::getMailServiceService($container)), ($container->services['mail_template.repository'] ?? self::getMailTemplate_RepositoryService($container)), ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['mail_template_type.repository'] ?? self::getMailTemplateType_RepositoryService($container)), ($container->services['translator'] ?? self::getTranslatorService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'] ?? self::getLanguageLocaleCodeProviderService($container)), true);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\SetCustomerCustomFieldAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\SetCustomerCustomFieldAction
     */
    protected static function getSetCustomerCustomFieldActionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/CustomFieldActionTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/SetCustomerCustomFieldAction.php';

        return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetCustomerCustomFieldAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\SetCustomerCustomFieldAction(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\SetCustomerGroupCustomFieldAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\SetCustomerGroupCustomFieldAction
     */
    protected static function getSetCustomerGroupCustomFieldActionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/CustomFieldActionTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/SetCustomerGroupCustomFieldAction.php';

        return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetCustomerGroupCustomFieldAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\SetCustomerGroupCustomFieldAction(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['customer_group.repository'] ?? self::getCustomerGroup_RepositoryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\SetOrderCustomFieldAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\SetOrderCustomFieldAction
     */
    protected static function getSetOrderCustomFieldActionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/CustomFieldActionTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/SetOrderCustomFieldAction.php';

        return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetOrderCustomFieldAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\SetOrderCustomFieldAction(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['order.repository'] ?? self::getOrder_RepositoryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Action\SetOrderStateAction' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Action\SetOrderStateAction
     */
    protected static function getSetOrderStateActionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/FlowAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/DelayableAction.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/SetOrderStateAction.php';

        return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Action\\SetOrderStateAction'] = new \Shopware\Core\Content\Flow\Dispatching\Action\SetOrderStateAction(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), ($container->privates['Shopware\\Core\\Checkout\\Order\\SalesChannel\\OrderService'] ?? self::getOrderServiceService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Storer\CustomerGroupStorer' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Storer\CustomerGroupStorer
     */
    protected static function getCustomerGroupStorerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/FlowStorer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/CustomerGroupStorer.php';

        $a = ($container->services['customer_group.repository'] ?? self::getCustomerGroup_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerGroupStorer'])) {
            return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerGroupStorer'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerGroupStorer'])) {
            return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerGroupStorer'];
        }

        return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerGroupStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\CustomerGroupStorer($a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Storer\CustomerRecoveryStorer' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Storer\CustomerRecoveryStorer
     */
    protected static function getCustomerRecoveryStorerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/FlowStorer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/CustomerRecoveryStorer.php';

        $a = ($container->services['customer_recovery.repository'] ?? self::getCustomerRecovery_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerRecoveryStorer'])) {
            return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerRecoveryStorer'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerRecoveryStorer'])) {
            return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerRecoveryStorer'];
        }

        return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerRecoveryStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\CustomerRecoveryStorer($a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Storer\CustomerStorer' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Storer\CustomerStorer
     */
    protected static function getCustomerStorerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/FlowStorer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/CustomerStorer.php';

        $a = ($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerStorer'])) {
            return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerStorer'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerStorer'])) {
            return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerStorer'];
        }

        return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\CustomerStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\CustomerStorer($a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Storer\NewsletterRecipientStorer' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Storer\NewsletterRecipientStorer
     */
    protected static function getNewsletterRecipientStorerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/FlowStorer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/NewsletterRecipientStorer.php';

        $a = ($container->services['newsletter_recipient.repository'] ?? self::getNewsletterRecipient_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\NewsletterRecipientStorer'])) {
            return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\NewsletterRecipientStorer'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\NewsletterRecipientStorer'])) {
            return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\NewsletterRecipientStorer'];
        }

        return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\NewsletterRecipientStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\NewsletterRecipientStorer($a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Storer\OrderStorer' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Storer\OrderStorer
     */
    protected static function getOrderStorerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/FlowStorer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/OrderStorer.php';

        $a = ($container->services['order.repository'] ?? self::getOrder_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\OrderStorer'])) {
            return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\OrderStorer'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\OrderStorer'])) {
            return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\OrderStorer'];
        }

        return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\OrderStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\OrderStorer($a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Storer\OrderTransactionStorer' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Storer\OrderTransactionStorer
     */
    protected static function getOrderTransactionStorerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/FlowStorer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/OrderTransactionStorer.php';

        $a = ($container->services['order_transaction.repository'] ?? self::getOrderTransaction_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\OrderTransactionStorer'])) {
            return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\OrderTransactionStorer'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\OrderTransactionStorer'])) {
            return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\OrderTransactionStorer'];
        }

        return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\OrderTransactionStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\OrderTransactionStorer($a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Storer\ProductStorer' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Storer\ProductStorer
     */
    protected static function getProductStorerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/FlowStorer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/ProductStorer.php';

        $a = ($container->services['product.repository'] ?? self::getProduct_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ProductStorer'])) {
            return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ProductStorer'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ProductStorer'])) {
            return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ProductStorer'];
        }

        return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\ProductStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\ProductStorer($a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Dispatching\Storer\UserStorer' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Dispatching\Storer\UserStorer
     */
    protected static function getUserStorerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/FlowStorer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Storer/UserStorer.php';

        $a = ($container->services['user_recovery.repository'] ?? self::getUserRecovery_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\UserStorer'])) {
            return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\UserStorer'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\UserStorer'])) {
            return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\UserStorer'];
        }

        return $container->privates['Shopware\\Core\\Content\\Flow\\Dispatching\\Storer\\UserStorer'] = new \Shopware\Core\Content\Flow\Dispatching\Storer\UserStorer($a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Indexing\FlowIndexer' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Indexing\FlowIndexer
     */
    protected static function getFlowIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Indexing/FlowIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Indexing/FlowPayloadUpdater.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/FlowBuilder.php';

        $a = ($container->services['flow.repository'] ?? self::getFlow_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'];
        }
        $b = ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] ?? self::getCacheInvalidatorService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'];
        }

        return $container->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexer'] = new \Shopware\Core\Content\Flow\Indexing\FlowIndexer(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, new \Shopware\Core\Content\Flow\Indexing\FlowPayloadUpdater(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), new \Shopware\Core\Content\Flow\Dispatching\FlowBuilder(), $b), $c);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Flow\Indexing\FlowIndexerSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\Flow\Indexing\FlowIndexerSubscriber
     */
    protected static function getFlowIndexerSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Indexing/FlowIndexerSubscriber.php';

        return $container->privates['Shopware\\Core\\Content\\Flow\\Indexing\\FlowIndexerSubscriber'] = new \Shopware\Core\Content\Flow\Indexing\FlowIndexerSubscriber(($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\Command\DeleteExpiredFilesCommand' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Command\DeleteExpiredFilesCommand
     */
    protected static function getDeleteExpiredFilesCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Command/DeleteExpiredFilesCommand.php';

        $container->privates['Shopware\\Core\\Content\\ImportExport\\Command\\DeleteExpiredFilesCommand'] = $instance = new \Shopware\Core\Content\ImportExport\Command\DeleteExpiredFilesCommand(($container->privates['Shopware\\Core\\Content\\ImportExport\\Service\\DeleteExpiredFilesService'] ?? self::getDeleteExpiredFilesServiceService($container)));

        $instance->setName('import-export:delete-expired');
        $instance->setDescription('Deletes expired files');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\Command\ImportEntityCommand' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Command\ImportEntityCommand
     */
    protected static function getImportEntityCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Command/ImportEntityCommand.php';

        $container->privates['Shopware\\Core\\Content\\ImportExport\\Command\\ImportEntityCommand'] = $instance = new \Shopware\Core\Content\ImportExport\Command\ImportEntityCommand(($container->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'] ?? self::getImportExportServiceService($container)), ($container->services['import_export_profile.repository'] ?? self::getImportExportProfile_RepositoryService($container)), ($container->services['Shopware\\Core\\Content\\ImportExport\\ImportExportFactory'] ?? self::getImportExportFactoryService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)));

        $instance->setName('import:entity');
        $instance->setDescription('Import entities from a csv file');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\CountrySerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\CountrySerializer
     */
    protected static function getCountrySerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/AbstractEntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/EntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/CountrySerializer.php';

        $a = ($container->services['country.repository'] ?? self::getCountry_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CountrySerializer'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CountrySerializer'];
        }

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CountrySerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\CountrySerializer($a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\CustomerSerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\CustomerSerializer
     */
    protected static function getCustomerSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/AbstractEntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/EntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/CustomerSerializer.php';

        $a = ($container->services['customer_group.repository'] ?? self::getCustomerGroup_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer'];
        }
        $b = ($container->services['payment_method.repository'] ?? self::getPaymentMethod_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer'];
        }
        $c = ($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer'];
        }

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\CustomerSerializer($a, $b, $c);
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\LanguageSerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\LanguageSerializer
     */
    protected static function getLanguageSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/AbstractEntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/EntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/LanguageSerializer.php';

        $a = ($container->services['language.repository'] ?? self::getLanguage_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\LanguageSerializer'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\LanguageSerializer'];
        }

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\LanguageSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\LanguageSerializer($a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\MediaSerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\MediaSerializer
     */
    protected static function getMediaSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/AbstractEntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/EntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/AbstractMediaSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/MediaSerializer.php';

        $a = ($container->privates['Shopware\\Core\\Content\\Media\\MediaService'] ?? self::getMediaServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'];
        }
        $b = ($container->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'] ?? self::getFileSaverService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'];
        }
        $c = ($container->services['media_folder.repository'] ?? self::getMediaFolder_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'];
        }
        $d = ($container->services['media.repository'] ?? self::getMedia_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'];
        }

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\MediaSerializer($a, $b, $c, $d);
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\MediaSerializerSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\MediaSerializerSubscriber
     */
    protected static function getMediaSerializerSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/MediaSerializerSubscriber.php';

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializerSubscriber'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\MediaSerializerSubscriber(($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'] ?? self::getMediaSerializerService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\ProductCrossSellingSerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\ProductCrossSellingSerializer
     */
    protected static function getProductCrossSellingSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/AbstractEntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/EntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/ProductCrossSellingSerializer.php';

        $a = ($container->services['product_cross_selling_assigned_products.repository'] ?? self::getProductCrossSellingAssignedProducts_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductCrossSellingSerializer'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductCrossSellingSerializer'];
        }

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductCrossSellingSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\ProductCrossSellingSerializer($a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\ProductSerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\ProductSerializer
     */
    protected static function getProductSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/AbstractEntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/EntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/ProductSerializer.php';

        $a = ($container->services['product_visibility.repository'] ?? self::getProductVisibility_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductSerializer'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductSerializer'];
        }
        $b = ($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductSerializer'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductSerializer'];
        }
        $c = ($container->services['product_media.repository'] ?? self::getProductMedia_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductSerializer'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductSerializer'];
        }
        $d = ($container->services['product_configurator_setting.repository'] ?? self::getProductConfiguratorSetting_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductSerializer'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductSerializer'];
        }

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\ProductSerializer($a, $b, $c, $d);
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\PromotionIndividualCodeSerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\PromotionIndividualCodeSerializer
     */
    protected static function getPromotionIndividualCodeSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/AbstractEntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/EntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/PromotionIndividualCodeSerializer.php';

        $a = ($container->services['promotion_individual_code.repository'] ?? self::getPromotionIndividualCode_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\PromotionIndividualCodeSerializer'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\PromotionIndividualCodeSerializer'];
        }
        $b = ($container->services['promotion.repository'] ?? self::getPromotion_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\PromotionIndividualCodeSerializer'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\PromotionIndividualCodeSerializer'];
        }

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\PromotionIndividualCodeSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\PromotionIndividualCodeSerializer($a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\SalutationSerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\SalutationSerializer
     */
    protected static function getSalutationSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/AbstractEntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/EntitySerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Entity/SalutationSerializer.php';

        $a = ($container->services['salutation.repository'] ?? self::getSalutation_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\SalutationSerializer'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\SalutationSerializer'];
        }

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\SalutationSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\SalutationSerializer($a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\CustomFieldsSerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\CustomFieldsSerializer
     */
    protected static function getCustomFieldsSerializer2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/FieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/CustomFieldsSerializer.php';

        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\FieldSerializer\\CustomFieldsSerializer'] ?? self::getCustomFieldsSerializerService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\CustomFieldsSerializer'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\CustomFieldsSerializer'];
        }

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\CustomFieldsSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\CustomFieldsSerializer($a, ($container->privates['Shopware\\Core\\System\\CustomField\\CustomFieldService'] ?? self::getCustomFieldServiceService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\PriceSerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\PriceSerializer
     */
    protected static function getPriceSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/FieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/PriceSerializer.php';

        $a = ($container->services['currency.repository'] ?? self::getCurrency_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\PriceSerializer'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\PriceSerializer'];
        }

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\PriceSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\PriceSerializer($a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\ToOneSerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\ToOneSerializer
     */
    protected static function getToOneSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/FieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/ToOneSerializer.php';

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\ToOneSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\ToOneSerializer(($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\PrimaryKeyResolver'] ?? self::getPrimaryKeyResolverService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\TranslationsSerializer' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\TranslationsSerializer
     */
    protected static function getTranslationsSerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/FieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/TranslationsSerializer.php';

        $a = ($container->services['language.repository'] ?? self::getLanguage_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\TranslationsSerializer'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\TranslationsSerializer'];
        }

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\TranslationsSerializer'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\TranslationsSerializer($a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\PrimaryKeyResolver' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\PrimaryKeyResolver
     */
    protected static function getPrimaryKeyResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/PrimaryKeyResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/AbstractFieldSerializer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/Field/FieldSerializer.php';

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\PrimaryKeyResolver'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\PrimaryKeyResolver(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\FieldSerializer'] ??= new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\FieldSerializer()));
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\DataAbstractionLayer\SystemDefaultValidator' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\DataAbstractionLayer\SystemDefaultValidator
     */
    protected static function getSystemDefaultValidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/SystemDefaultValidator.php';

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\SystemDefaultValidator'] = new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\SystemDefaultValidator(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\Event\Subscriber\FileDeletedSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Event\Subscriber\FileDeletedSubscriber
     */
    protected static function getFileDeletedSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Event/Subscriber/FileDeletedSubscriber.php';

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\FileDeletedSubscriber'] = new \Shopware\Core\Content\ImportExport\Event\Subscriber\FileDeletedSubscriber(($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\Event\Subscriber\ProductCategoryPathsSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Event\Subscriber\ProductCategoryPathsSubscriber
     */
    protected static function getProductCategoryPathsSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Event/Subscriber/ProductCategoryPathsSubscriber.php';

        $a = ($container->services['category.repository'] ?? self::getCategory_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCategoryPathsSubscriber'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCategoryPathsSubscriber'];
        }
        $b = ($container->services['Shopware\\Core\\Framework\\Api\\Sync\\SyncService'] ?? self::getSyncServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCategoryPathsSubscriber'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCategoryPathsSubscriber'];
        }

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductCategoryPathsSubscriber'] = new \Shopware\Core\Content\ImportExport\Event\Subscriber\ProductCategoryPathsSubscriber($a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\Event\Subscriber\ProductVariantsSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Event\Subscriber\ProductVariantsSubscriber
     */
    protected static function getProductVariantsSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Event/Subscriber/ProductVariantsSubscriber.php';

        $a = ($container->services['Shopware\\Core\\Framework\\Api\\Sync\\SyncService'] ?? self::getSyncServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber'];
        }
        $b = ($container->services['property_group.repository'] ?? self::getPropertyGroup_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber'];
        }
        $c = ($container->services['property_group_option.repository'] ?? self::getPropertyGroupOption_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber'];
        }

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\Event\\Subscriber\\ProductVariantsSubscriber'] = new \Shopware\Core\Content\ImportExport\Event\Subscriber\ProductVariantsSubscriber($a, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $b, $c);
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\Message\DeleteFileHandler' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Message\DeleteFileHandler
     */
    protected static function getDeleteFileHandler2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Message/DeleteFileHandler.php';

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\Message\\DeleteFileHandler'] = new \Shopware\Core\Content\ImportExport\Message\DeleteFileHandler(($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\Processing\Pipe\PipeFactory' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Processing\Pipe\PipeFactory
     */
    protected static function getPipeFactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Processing/Pipe/AbstractPipeFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Processing/Pipe/PipeFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/DataAbstractionLayer/Serializer/SerializerRegistry.php';

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\Processing\\Pipe\\PipeFactory'] = new \Shopware\Core\Content\ImportExport\Processing\Pipe\PipeFactory(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\SerializerRegistry(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\MediaSerializer'] ?? self::getMediaSerializerService($container));
            yield 1 => ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\SalutationSerializer'] ?? self::getSalutationSerializerService($container));
            yield 2 => ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CountrySerializer'] ?? self::getCountrySerializerService($container));
            yield 3 => ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\LanguageSerializer'] ?? self::getLanguageSerializerService($container));
            yield 4 => ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\CustomerSerializer'] ?? self::getCustomerSerializerService($container));
            yield 5 => ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\PromotionIndividualCodeSerializer'] ?? self::getPromotionIndividualCodeSerializerService($container));
            yield 6 => ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductSerializer'] ?? self::getProductSerializerService($container));
            yield 7 => ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\ProductCrossSellingSerializer'] ?? self::getProductCrossSellingSerializerService($container));
            yield 8 => ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\OrderSerializer'] ??= new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\OrderSerializer());
            yield 9 => ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Entity\\EntitySerializer'] ??= new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Entity\EntitySerializer());
        }, 10), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\ToOneSerializer'] ?? self::getToOneSerializerService($container));
            yield 1 => ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\TranslationsSerializer'] ?? self::getTranslationsSerializerService($container));
            yield 2 => ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\PriceSerializer'] ?? self::getPriceSerializerService($container));
            yield 3 => ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\CustomFieldsSerializer'] ?? self::getCustomFieldsSerializer2Service($container));
            yield 4 => ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\Field\\FieldSerializer'] ??= new \Shopware\Core\Content\ImportExport\DataAbstractionLayer\Serializer\Field\FieldSerializer());
        }, 5)), ($container->privates['Shopware\\Core\\Content\\ImportExport\\DataAbstractionLayer\\Serializer\\PrimaryKeyResolver'] ?? self::getPrimaryKeyResolverService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\Processing\Writer\CsvFileWriterFactory' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Processing\Writer\CsvFileWriterFactory
     */
    protected static function getCsvFileWriterFactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Processing/Writer/AbstractWriterFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Processing/Writer/CsvFileWriterFactory.php';

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\Processing\\Writer\\CsvFileWriterFactory'] = new \Shopware\Core\Content\ImportExport\Processing\Writer\CsvFileWriterFactory(($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\ScheduledTask\CleanupImportExportFileTaskHandler' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\ScheduledTask\CleanupImportExportFileTaskHandler
     */
    protected static function getCleanupImportExportFileTaskHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageSubscriberInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/ScheduledTaskHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/ScheduledTask/CleanupImportExportFileTaskHandler.php';

        $a = ($container->services['scheduled_task.repository'] ?? self::getScheduledTask_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\ScheduledTask\\CleanupImportExportFileTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\ScheduledTask\\CleanupImportExportFileTaskHandler'];
        }
        $b = ($container->privates['Shopware\\Core\\Content\\ImportExport\\Service\\DeleteExpiredFilesService'] ?? self::getDeleteExpiredFilesServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\ScheduledTask\\CleanupImportExportFileTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\ScheduledTask\\CleanupImportExportFileTaskHandler'];
        }

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\ScheduledTask\\CleanupImportExportFileTaskHandler'] = new \Shopware\Core\Content\ImportExport\ScheduledTask\CleanupImportExportFileTaskHandler($a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\Service\DeleteExpiredFilesService' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Service\DeleteExpiredFilesService
     */
    protected static function getDeleteExpiredFilesServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Service/DeleteExpiredFilesService.php';

        $a = ($container->services['import_export_file.repository'] ?? self::getImportExportFile_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\Service\\DeleteExpiredFilesService'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\Service\\DeleteExpiredFilesService'];
        }

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\Service\\DeleteExpiredFilesService'] = new \Shopware\Core\Content\ImportExport\Service\DeleteExpiredFilesService($a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\Service\FileService' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Service\FileService
     */
    protected static function getFileServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Service/AbstractFileService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Service/FileService.php';

        $a = ($container->services['import_export_file.repository'] ?? self::getImportExportFile_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\Service\\FileService'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\Service\\FileService'];
        }

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\Service\\FileService'] = new \Shopware\Core\Content\ImportExport\Service\FileService(($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)), $a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\ImportExport\Service\ImportExportService' shared service.
     *
     * @return \Shopware\Core\Content\ImportExport\Service\ImportExportService
     */
    protected static function getImportExportServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ImportExport/Service/ImportExportService.php';

        $a = ($container->services['import_export_log.repository'] ?? self::getImportExportLog_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'];
        }
        $b = ($container->services['user.repository'] ?? self::getUser_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'];
        }
        $c = ($container->services['import_export_profile.repository'] ?? self::getImportExportProfile_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'];
        }
        $d = ($container->privates['Shopware\\Core\\Content\\ImportExport\\Service\\FileService'] ?? self::getFileServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'])) {
            return $container->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'];
        }

        return $container->privates['Shopware\\Core\\Content\\ImportExport\\Service\\ImportExportService'] = new \Shopware\Core\Content\ImportExport\Service\ImportExportService($a, $b, $c, $d);
    }

    /**
     * Gets the private 'Shopware\Core\Content\LandingPage\DataAbstractionLayer\LandingPageIndexer' shared service.
     *
     * @return \Shopware\Core\Content\LandingPage\DataAbstractionLayer\LandingPageIndexer
     */
    protected static function getLandingPageIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/DataAbstractionLayer/LandingPageIndexer.php';

        $a = ($container->services['landing_page.repository'] ?? self::getLandingPage_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\LandingPage\\DataAbstractionLayer\\LandingPageIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\LandingPage\\DataAbstractionLayer\\LandingPageIndexer'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\LandingPage\\DataAbstractionLayer\\LandingPageIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\LandingPage\\DataAbstractionLayer\\LandingPageIndexer'];
        }

        return $container->privates['Shopware\\Core\\Content\\LandingPage\\DataAbstractionLayer\\LandingPageIndexer'] = new \Shopware\Core\Content\LandingPage\DataAbstractionLayer\LandingPageIndexer(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Content\LandingPage\LandingPageValidator' shared service.
     *
     * @return \Shopware\Core\Content\LandingPage\LandingPageValidator
     */
    protected static function getLandingPageValidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/LandingPage/LandingPageValidator.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\LandingPage\\LandingPageValidator'])) {
            return $container->privates['Shopware\\Core\\Content\\LandingPage\\LandingPageValidator'];
        }

        return $container->privates['Shopware\\Core\\Content\\LandingPage\\LandingPageValidator'] = new \Shopware\Core\Content\LandingPage\LandingPageValidator($a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Mail\Service\MailService' shared service.
     *
     * @return \Shopware\Core\Content\Mail\Service\MailService
     */
    protected static function getMailServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Mail/Service/AbstractMailService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Mail/Service/MailService.php';

        return $container->privates['Shopware\\Core\\Content\\Mail\\Service\\MailService'] = new \Shopware\Core\Content\Mail\Service\MailService(($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] ?? self::getDataValidatorService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\StringTemplateRenderer'] ?? self::getStringTemplateRendererService($container)), ($container->services['Shopware\\Core\\Content\\Mail\\Service\\MailFactory'] ?? self::getMailFactoryService($container)), ($container->services['Shopware\\Core\\Content\\Mail\\Service\\MailSender'] ?? self::getMailSenderService($container)), ($container->services['media.repository'] ?? self::getMedia_RepositoryService($container)), ($container->services['Shopware\\Core\\System\\SalesChannel\\SalesChannelDefinition'] ?? self::getSalesChannelDefinitionService($container)), ($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\Cms\ImageCmsElementResolver' shared service.
     *
     * @return \Shopware\Core\Content\Media\Cms\ImageCmsElementResolver
     */
    protected static function getImageCmsElementResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/CmsElementResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/AbstractCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Cms/ImageCmsElementResolver.php';

        $a = ($container->privates['Shopware\\Storefront\\Page\\Cms\\DefaultMediaResolver'] ?? self::getDefaultMediaResolverService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\Cms\\ImageCmsElementResolver'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\Cms\\ImageCmsElementResolver'];
        }

        return $container->privates['Shopware\\Core\\Content\\Media\\Cms\\ImageCmsElementResolver'] = new \Shopware\Core\Content\Media\Cms\ImageCmsElementResolver($a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\Cms\Type\ImageGalleryTypeDataResolver' shared service.
     *
     * @return \Shopware\Core\Content\Media\Cms\Type\ImageGalleryTypeDataResolver
     */
    protected static function getImageGalleryTypeDataResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/CmsElementResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/AbstractCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Cms/Type/ImageSliderTypeDataResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Cms/Type/ImageGalleryTypeDataResolver.php';

        return $container->privates['Shopware\\Core\\Content\\Media\\Cms\\Type\\ImageGalleryTypeDataResolver'] = new \Shopware\Core\Content\Media\Cms\Type\ImageGalleryTypeDataResolver(($container->privates['Shopware\\Storefront\\Page\\Cms\\DefaultMediaResolver'] ?? self::getDefaultMediaResolverService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\Cms\Type\ImageSliderTypeDataResolver' shared service.
     *
     * @return \Shopware\Core\Content\Media\Cms\Type\ImageSliderTypeDataResolver
     */
    protected static function getImageSliderTypeDataResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/CmsElementResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/AbstractCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Cms/Type/ImageSliderTypeDataResolver.php';

        return $container->privates['Shopware\\Core\\Content\\Media\\Cms\\Type\\ImageSliderTypeDataResolver'] = new \Shopware\Core\Content\Media\Cms\Type\ImageSliderTypeDataResolver(($container->privates['Shopware\\Storefront\\Page\\Cms\\DefaultMediaResolver'] ?? self::getDefaultMediaResolverService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\Commands\DeleteNotUsedMediaCommand' service.
     *
     * @return \Shopware\Core\Content\Media\Commands\DeleteNotUsedMediaCommand
     */
    protected static function getDeleteNotUsedMediaCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Commands/DeleteNotUsedMediaCommand.php';

        $container->factories['service_container']['Shopware\\Core\\Content\\Media\\Commands\\DeleteNotUsedMediaCommand'] = function ($container) {
            $instance = new \Shopware\Core\Content\Media\Commands\DeleteNotUsedMediaCommand(($container->privates['Shopware\\Core\\Content\\Media\\UnusedMediaPurger'] ?? self::getUnusedMediaPurgerService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)));

            $instance->setName('media:delete-unused');
            $instance->setDescription('Deletes all media files which are not used in any entity');

            return $instance;
        };

        return $container->factories['service_container']['Shopware\\Core\\Content\\Media\\Commands\\DeleteNotUsedMediaCommand']($container);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\Commands\GenerateMediaTypesCommand' shared service.
     *
     * @return \Shopware\Core\Content\Media\Commands\GenerateMediaTypesCommand
     */
    protected static function getGenerateMediaTypesCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Commands/GenerateMediaTypesCommand.php';

        $container->privates['Shopware\\Core\\Content\\Media\\Commands\\GenerateMediaTypesCommand'] = $instance = new \Shopware\Core\Content\Media\Commands\GenerateMediaTypesCommand(($container->privates['Shopware\\Core\\Content\\Media\\TypeDetector\\TypeDetector'] ?? self::getTypeDetectorService($container)), ($container->services['media.repository'] ?? self::getMedia_RepositoryService($container)));

        $instance->setName('media:generate-media-types');
        $instance->setDescription('Generates media types for all media files');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\Commands\GenerateThumbnailsCommand' shared service.
     *
     * @return \Shopware\Core\Content\Media\Commands\GenerateThumbnailsCommand
     */
    protected static function getGenerateThumbnailsCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Commands/GenerateThumbnailsCommand.php';

        $container->privates['Shopware\\Core\\Content\\Media\\Commands\\GenerateThumbnailsCommand'] = $instance = new \Shopware\Core\Content\Media\Commands\GenerateThumbnailsCommand(($container->privates['Shopware\\Core\\Content\\Media\\Thumbnail\\ThumbnailService'] ?? self::getThumbnailServiceService($container)), ($container->services['media.repository'] ?? self::getMedia_RepositoryService($container)), ($container->services['media_folder.repository'] ?? self::getMediaFolder_RepositoryService($container)), ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container)));

        $instance->setName('media:generate-thumbnails');
        $instance->setDescription('Generates thumbnails for all media files');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\Core\Application\AbstractMediaPathStrategy' shared service.
     *
     * @return \Shopware\Core\Content\Media\Core\Application\AbstractMediaPathStrategy
     */
    protected static function getAbstractMediaPathStrategyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Core/Application/AbstractMediaPathStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Core/Strategy/PathStrategyFactory.php';

        $a = ($container->services['Shopware\\Core\\Content\\Media\\Core\\Strategy\\BCStrategy'] ?? self::getBCStrategyService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\AbstractMediaPathStrategy'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\AbstractMediaPathStrategy'];
        }

        return $container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\AbstractMediaPathStrategy'] = (new \Shopware\Core\Content\Media\Core\Strategy\PathStrategyFactory(new RewindableGenerator(function () use ($container) {
            yield 0 => (new \Shopware\Core\Content\Media\Core\Strategy\FilenamePathStrategy());
            yield 1 => (new \Shopware\Core\Content\Media\Core\Strategy\IdPathStrategy());
            yield 2 => (new \Shopware\Core\Content\Media\Core\Strategy\PhysicalFilenamePathStrategy());
            yield 3 => (new \Shopware\Core\Content\Media\Core\Strategy\PlainPathStrategy());
        }, 4), $a))->factory($container->getEnv('default:default_cdn_strategy:SHOPWARE_CDN_STRATEGY_DEFAULT'));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\Core\Application\AbstractMediaUrlGenerator' shared service.
     *
     * @return \Shopware\Core\Content\Media\Infrastructure\Path\MediaUrlGenerator
     */
    protected static function getAbstractMediaUrlGeneratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Core/Application/AbstractMediaUrlGenerator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Infrastructure/Path/MediaUrlGenerator.php';

        return $container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\AbstractMediaUrlGenerator'] = new \Shopware\Core\Content\Media\Infrastructure\Path\MediaUrlGenerator(($container->services['shopware.filesystem.public'] ?? self::getShopware_Filesystem_PublicService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\Core\Application\MediaLocationBuilder' shared service.
     *
     * @return \Shopware\Core\Content\Media\Infrastructure\Path\SqlMediaLocationBuilder
     */
    protected static function getMediaLocationBuilderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Core/Application/MediaLocationBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Infrastructure/Path/SqlMediaLocationBuilder.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\MediaLocationBuilder'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\MediaLocationBuilder'];
        }

        return $container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\MediaLocationBuilder'] = new \Shopware\Core\Content\Media\Infrastructure\Path\SqlMediaLocationBuilder($a, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\Core\Application\MediaPathUpdater' shared service.
     *
     * @return \Shopware\Core\Content\Media\Core\Application\MediaPathUpdater
     */
    protected static function getMediaPathUpdaterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Core/Application/MediaPathUpdater.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Core/Application/MediaPathStorage.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Infrastructure/Path/SqlMediaPathStorage.php';

        $a = ($container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\MediaLocationBuilder'] ?? self::getMediaLocationBuilderService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\MediaPathUpdater'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\MediaPathUpdater'];
        }

        return $container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\MediaPathUpdater'] = new \Shopware\Core\Content\Media\Core\Application\MediaPathUpdater(($container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\AbstractMediaPathStrategy'] ?? self::getAbstractMediaPathStrategyService($container)), $a, new \Shopware\Core\Content\Media\Infrastructure\Path\SqlMediaPathStorage(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container))));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\Core\Application\MediaUrlLoader' shared service.
     *
     * @return \Shopware\Core\Content\Media\Core\Application\MediaUrlLoader
     */
    protected static function getMediaUrlLoaderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Core/Application/MediaUrlLoader.php';

        return $container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\MediaUrlLoader'] = new \Shopware\Core\Content\Media\Core\Application\MediaUrlLoader(($container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\AbstractMediaUrlGenerator'] ?? self::getAbstractMediaUrlGeneratorService($container)), ($container->privates['Shopware\\Core\\Content\\Media\\Pathname\\UrlGeneratorInterface'] ?? self::getUrlGeneratorInterfaceService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\DataAbstractionLayer\MediaFolderConfigurationIndexer' shared service.
     *
     * @return \Shopware\Core\Content\Media\DataAbstractionLayer\MediaFolderConfigurationIndexer
     */
    protected static function getMediaFolderConfigurationIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/DataAbstractionLayer/MediaFolderConfigurationIndexer.php';

        $a = ($container->services['media_folder_configuration.repository'] ?? self::getMediaFolderConfiguration_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderConfigurationIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderConfigurationIndexer'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderConfigurationIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderConfigurationIndexer'];
        }

        return $container->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderConfigurationIndexer'] = new \Shopware\Core\Content\Media\DataAbstractionLayer\MediaFolderConfigurationIndexer(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $b);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\DataAbstractionLayer\MediaFolderIndexer' shared service.
     *
     * @return \Shopware\Core\Content\Media\DataAbstractionLayer\MediaFolderIndexer
     */
    protected static function getMediaFolderIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/DataAbstractionLayer/MediaFolderIndexer.php';

        $a = ($container->services['media_folder.repository'] ?? self::getMediaFolder_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderIndexer'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderIndexer'];
        }

        return $container->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaFolderIndexer'] = new \Shopware\Core\Content\Media\DataAbstractionLayer\MediaFolderIndexer(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $b, ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\ChildCountUpdater'] ?? self::getChildCountUpdaterService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\TreeUpdater'] ?? self::getTreeUpdaterService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\DataAbstractionLayer\MediaIndexer' shared service.
     *
     * @return \Shopware\Core\Content\Media\DataAbstractionLayer\MediaIndexer
     */
    protected static function getMediaIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/DataAbstractionLayer/MediaIndexer.php';

        $a = ($container->services['media.repository'] ?? self::getMedia_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaIndexer'];
        }
        $b = ($container->services['media_thumbnail.repository'] ?? self::getMediaThumbnail_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaIndexer'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaIndexer'];
        }

        return $container->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaIndexer'] = new \Shopware\Core\Content\Media\DataAbstractionLayer\MediaIndexer(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, $b, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $c);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\File\FileNameProvider' shared service.
     *
     * @return \Shopware\Core\Content\Media\File\WindowsStyleFileNameProvider
     */
    protected static function getFileNameProviderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/File/FileNameProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/File/WindowsStyleFileNameProvider.php';

        $a = ($container->services['media.repository'] ?? self::getMedia_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\File\\FileNameProvider'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\File\\FileNameProvider'];
        }

        return $container->privates['Shopware\\Core\\Content\\Media\\File\\FileNameProvider'] = new \Shopware\Core\Content\Media\File\WindowsStyleFileNameProvider($a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\Infrastructure\Command\UpdatePathCommand' shared service.
     *
     * @return \Shopware\Core\Content\Media\Infrastructure\Command\UpdatePathCommand
     */
    protected static function getUpdatePathCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Infrastructure/Command/UpdatePathCommand.php';

        $container->privates['Shopware\\Core\\Content\\Media\\Infrastructure\\Command\\UpdatePathCommand'] = $instance = new \Shopware\Core\Content\Media\Infrastructure\Command\UpdatePathCommand(($container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\MediaPathUpdater'] ?? self::getMediaPathUpdaterService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)));

        $instance->setName('media:update-path');
        $instance->setDescription('Iterates over the media and updates the path column.');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\Infrastructure\Path\MediaPathPostUpdater' shared service.
     *
     * @return \Shopware\Core\Content\Media\Infrastructure\Path\MediaPathPostUpdater
     */
    protected static function getMediaPathPostUpdaterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/PostUpdateIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Infrastructure/Path/MediaPathPostUpdater.php';

        $a = ($container->privates['Shopware\\Core\\Content\\Media\\Core\\Application\\MediaPathUpdater'] ?? self::getMediaPathUpdaterService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\Infrastructure\\Path\\MediaPathPostUpdater'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\Infrastructure\\Path\\MediaPathPostUpdater'];
        }

        return $container->privates['Shopware\\Core\\Content\\Media\\Infrastructure\\Path\\MediaPathPostUpdater'] = new \Shopware\Core\Content\Media\Infrastructure\Path\MediaPathPostUpdater(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\MediaService' shared service.
     *
     * @return \Shopware\Core\Content\Media\MediaService
     */
    protected static function getMediaServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/MediaService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/File/FileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/File/FileFetcher.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/File/FileUrlValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/File/FileUrlValidator.php';

        $a = ($container->services['media.repository'] ?? self::getMedia_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\MediaService'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\MediaService'];
        }
        $b = ($container->services['media_folder.repository'] ?? self::getMediaFolder_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\MediaService'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\MediaService'];
        }
        $c = ($container->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'] ?? self::getFileSaverService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\MediaService'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\MediaService'];
        }

        return $container->privates['Shopware\\Core\\Content\\Media\\MediaService'] = new \Shopware\Core\Content\Media\MediaService($a, $b, new \Shopware\Core\Content\Media\File\FileLoader(($container->services['shopware.filesystem.public'] ?? self::getShopware_Filesystem_PublicService($container)), ($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)), $a, ($container->privates['Nyholm\\Psr7\\Factory\\Psr17Factory'] ??= new \Nyholm\Psr7\Factory\Psr17Factory())), $c, new \Shopware\Core\Content\Media\File\FileFetcher(new \Shopware\Core\Content\Media\File\FileUrlValidator(), true, false, 0));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\Message\DeleteFileHandler' shared service.
     *
     * @return \Shopware\Core\Content\Media\Message\DeleteFileHandler
     */
    protected static function getDeleteFileHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Message/DeleteFileHandler.php';

        return $container->privates['Shopware\\Core\\Content\\Media\\Message\\DeleteFileHandler'] = new \Shopware\Core\Content\Media\Message\DeleteFileHandler(($container->services['shopware.filesystem.public'] ?? self::getShopware_Filesystem_PublicService($container)), ($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\Message\GenerateThumbnailsHandler' shared service.
     *
     * @return \Shopware\Core\Content\Media\Message\GenerateThumbnailsHandler
     */
    protected static function getGenerateThumbnailsHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Message/GenerateThumbnailsHandler.php';

        $a = ($container->privates['Shopware\\Core\\Content\\Media\\Thumbnail\\ThumbnailService'] ?? self::getThumbnailServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsHandler'];
        }
        $b = ($container->services['media.repository'] ?? self::getMedia_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsHandler'];
        }

        return $container->privates['Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsHandler'] = new \Shopware\Core\Content\Media\Message\GenerateThumbnailsHandler($a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\Pathname\PathnameStrategy\FilenamePathnameStrategy' shared service.
     *
     * @return \Shopware\Core\Content\Media\Pathname\PathnameStrategy\FilenamePathnameStrategy
     */
    protected static function getFilenamePathnameStrategyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/PathnameStrategyInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/AbstractPathNameStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/FilenamePathnameStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/PlainPathnameStrategy.php';

        return new \Shopware\Core\Content\Media\Pathname\PathnameStrategy\FilenamePathnameStrategy(($container->privates['Shopware\\Core\\Content\\Media\\Pathname\\PathnameStrategy\\PlainPathnameStrategy'] ??= new \Shopware\Core\Content\Media\Pathname\PathnameStrategy\PlainPathnameStrategy()));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\Pathname\PathnameStrategy\IdPathnameStrategy' shared service.
     *
     * @return \Shopware\Core\Content\Media\Pathname\PathnameStrategy\IdPathnameStrategy
     */
    protected static function getIdPathnameStrategyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/PathnameStrategyInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/AbstractPathNameStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/IdPathnameStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/PlainPathnameStrategy.php';

        return new \Shopware\Core\Content\Media\Pathname\PathnameStrategy\IdPathnameStrategy(($container->privates['Shopware\\Core\\Content\\Media\\Pathname\\PathnameStrategy\\PlainPathnameStrategy'] ??= new \Shopware\Core\Content\Media\Pathname\PathnameStrategy\PlainPathnameStrategy()));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\Pathname\PathnameStrategy\PhysicalFilenamePathnameStrategy' shared service.
     *
     * @return \Shopware\Core\Content\Media\Pathname\PathnameStrategy\PhysicalFilenamePathnameStrategy
     */
    protected static function getPhysicalFilenamePathnameStrategyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/PathnameStrategyInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/AbstractPathNameStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/PhysicalFilenamePathnameStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/PlainPathnameStrategy.php';

        return new \Shopware\Core\Content\Media\Pathname\PathnameStrategy\PhysicalFilenamePathnameStrategy(($container->privates['Shopware\\Core\\Content\\Media\\Pathname\\PathnameStrategy\\PlainPathnameStrategy'] ??= new \Shopware\Core\Content\Media\Pathname\PathnameStrategy\PlainPathnameStrategy()));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\Pathname\UrlGeneratorInterface' shared service.
     *
     * @return \Shopware\Core\Content\Media\Pathname\UrlGenerator
     */
    protected static function getUrlGeneratorInterfaceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/UrlGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/UrlGenerator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/PathnameStrategyInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Pathname/PathnameStrategy/StrategyFactory.php';

        return $container->privates['Shopware\\Core\\Content\\Media\\Pathname\\UrlGeneratorInterface'] = new \Shopware\Core\Content\Media\Pathname\UrlGenerator((new \Shopware\Core\Content\Media\Pathname\PathnameStrategy\StrategyFactory(new RewindableGenerator(function () use ($container) {
            yield 0 => self::getFilenamePathnameStrategyService($container);
            yield 1 => self::getPhysicalFilenamePathnameStrategyService($container);
            yield 2 => ($container->privates['Shopware\\Core\\Content\\Media\\Pathname\\PathnameStrategy\\PlainPathnameStrategy'] ??= new \Shopware\Core\Content\Media\Pathname\PathnameStrategy\PlainPathnameStrategy());
            yield 3 => self::getIdPathnameStrategyService($container);
        }, 4)))->factory($container->getEnv('default:default_cdn_strategy:SHOPWARE_CDN_STRATEGY_DEFAULT')), ($container->services['shopware.filesystem.public'] ?? self::getShopware_Filesystem_PublicService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\Subscriber\CustomFieldsUnusedMediaSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\Media\Subscriber\CustomFieldsUnusedMediaSubscriber
     */
    protected static function getCustomFieldsUnusedMediaSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Subscriber/CustomFieldsUnusedMediaSubscriber.php';

        return $container->privates['Shopware\\Core\\Content\\Media\\Subscriber\\CustomFieldsUnusedMediaSubscriber'] = new \Shopware\Core\Content\Media\Subscriber\CustomFieldsUnusedMediaSubscriber(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\Subscriber\MediaDeletionSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\Media\Subscriber\MediaDeletionSubscriber
     */
    protected static function getMediaDeletionSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Subscriber/MediaDeletionSubscriber.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaDeletionSubscriber'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaDeletionSubscriber'];
        }
        $b = ($container->services['media_thumbnail.repository'] ?? self::getMediaThumbnail_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaDeletionSubscriber'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaDeletionSubscriber'];
        }
        $c = ($container->services['media.repository'] ?? self::getMedia_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaDeletionSubscriber'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaDeletionSubscriber'];
        }

        return $container->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaDeletionSubscriber'] = new \Shopware\Core\Content\Media\Subscriber\MediaDeletionSubscriber($a, $b, ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container)), ($container->privates['Shopware\\Core\\Content\\Media\\Message\\DeleteFileHandler'] ?? self::getDeleteFileHandlerService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $c);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\Subscriber\MediaLoadedSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\Media\Subscriber\MediaLoadedSubscriber
     */
    protected static function getMediaLoadedSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Subscriber/MediaLoadedSubscriber.php';

        return $container->privates['Shopware\\Core\\Content\\Media\\Subscriber\\MediaLoadedSubscriber'] = new \Shopware\Core\Content\Media\Subscriber\MediaLoadedSubscriber(($container->privates['Shopware\\Core\\Content\\Media\\Pathname\\UrlGeneratorInterface'] ?? self::getUrlGeneratorInterfaceService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\Thumbnail\ThumbnailService' shared service.
     *
     * @return \Shopware\Core\Content\Media\Thumbnail\ThumbnailService
     */
    protected static function getThumbnailServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Thumbnail/ThumbnailService.php';

        $a = ($container->services['media_thumbnail.repository'] ?? self::getMediaThumbnail_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\Thumbnail\\ThumbnailService'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\Thumbnail\\ThumbnailService'];
        }
        $b = ($container->services['media_folder.repository'] ?? self::getMediaFolder_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\Thumbnail\\ThumbnailService'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\Thumbnail\\ThumbnailService'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\Thumbnail\\ThumbnailService'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\Thumbnail\\ThumbnailService'];
        }
        $d = ($container->privates['Shopware\\Core\\Content\\Media\\DataAbstractionLayer\\MediaIndexer'] ?? self::getMediaIndexerService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\Thumbnail\\ThumbnailService'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\Thumbnail\\ThumbnailService'];
        }

        return $container->privates['Shopware\\Core\\Content\\Media\\Thumbnail\\ThumbnailService'] = new \Shopware\Core\Content\Media\Thumbnail\ThumbnailService($a, ($container->services['shopware.filesystem.public'] ?? self::getShopware_Filesystem_PublicService($container)), ($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)), $b, $c, $d, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\TypeDetector\TypeDetector' shared service.
     *
     * @return \Shopware\Core\Content\Media\TypeDetector\TypeDetector
     */
    protected static function getTypeDetectorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/TypeDetector/TypeDetectorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/TypeDetector/TypeDetector.php';

        return $container->privates['Shopware\\Core\\Content\\Media\\TypeDetector\\TypeDetector'] = new \Shopware\Core\Content\Media\TypeDetector\TypeDetector(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Content\\Media\\TypeDetector\\AudioTypeDetector'] ??= new \Shopware\Core\Content\Media\TypeDetector\AudioTypeDetector());
            yield 1 => ($container->privates['Shopware\\Core\\Content\\Media\\TypeDetector\\DocumentTypeDetector'] ??= new \Shopware\Core\Content\Media\TypeDetector\DocumentTypeDetector());
            yield 2 => ($container->privates['Shopware\\Core\\Content\\Media\\TypeDetector\\ImageTypeDetector'] ??= new \Shopware\Core\Content\Media\TypeDetector\ImageTypeDetector());
            yield 3 => ($container->privates['Shopware\\Core\\Content\\Media\\TypeDetector\\VideoTypeDetector'] ??= new \Shopware\Core\Content\Media\TypeDetector\VideoTypeDetector());
            yield 4 => ($container->privates['Shopware\\Core\\Content\\Media\\TypeDetector\\DefaultTypeDetector'] ??= new \Shopware\Core\Content\Media\TypeDetector\DefaultTypeDetector());
        }, 5));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Media\UnusedMediaPurger' shared service.
     *
     * @return \Shopware\Core\Content\Media\UnusedMediaPurger
     */
    protected static function getUnusedMediaPurgerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/UnusedMediaPurger.php';

        $a = ($container->services['media.repository'] ?? self::getMedia_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\UnusedMediaPurger'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\UnusedMediaPurger'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Media\\UnusedMediaPurger'])) {
            return $container->privates['Shopware\\Core\\Content\\Media\\UnusedMediaPurger'];
        }

        return $container->privates['Shopware\\Core\\Content\\Media\\UnusedMediaPurger'] = new \Shopware\Core\Content\Media\UnusedMediaPurger($a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Newsletter\DataAbstractionLayer\Indexing\CustomerNewsletterSalesChannelsUpdater' shared service.
     *
     * @return \Shopware\Core\Content\Newsletter\DataAbstractionLayer\Indexing\CustomerNewsletterSalesChannelsUpdater
     */
    protected static function getCustomerNewsletterSalesChannelsUpdaterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/DataAbstractionLayer/Indexing/CustomerNewsletterSalesChannelsUpdater.php';

        return $container->privates['Shopware\\Core\\Content\\Newsletter\\DataAbstractionLayer\\Indexing\\CustomerNewsletterSalesChannelsUpdater'] = new \Shopware\Core\Content\Newsletter\DataAbstractionLayer\Indexing\CustomerNewsletterSalesChannelsUpdater(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Newsletter\DataAbstractionLayer\NewsletterRecipientIndexer' shared service.
     *
     * @return \Shopware\Core\Content\Newsletter\DataAbstractionLayer\NewsletterRecipientIndexer
     */
    protected static function getNewsletterRecipientIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/DataAbstractionLayer/NewsletterRecipientIndexer.php';

        $a = ($container->services['newsletter_recipient.repository'] ?? self::getNewsletterRecipient_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Newsletter\\DataAbstractionLayer\\NewsletterRecipientIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Newsletter\\DataAbstractionLayer\\NewsletterRecipientIndexer'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Newsletter\\DataAbstractionLayer\\NewsletterRecipientIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Newsletter\\DataAbstractionLayer\\NewsletterRecipientIndexer'];
        }

        return $container->privates['Shopware\\Core\\Content\\Newsletter\\DataAbstractionLayer\\NewsletterRecipientIndexer'] = new \Shopware\Core\Content\Newsletter\DataAbstractionLayer\NewsletterRecipientIndexer(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, ($container->privates['Shopware\\Core\\Content\\Newsletter\\DataAbstractionLayer\\Indexing\\CustomerNewsletterSalesChannelsUpdater'] ?? self::getCustomerNewsletterSalesChannelsUpdaterService($container)), $b);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Newsletter\Event\Subscriber\NewsletterRecipientDeletedSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\Newsletter\Event\Subscriber\NewsletterRecipientDeletedSubscriber
     */
    protected static function getNewsletterRecipientDeletedSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/Event/Subscriber/NewsletterRecipientDeletedSubscriber.php';

        return $container->privates['Shopware\\Core\\Content\\Newsletter\\Event\\Subscriber\\NewsletterRecipientDeletedSubscriber'] = new \Shopware\Core\Content\Newsletter\Event\Subscriber\NewsletterRecipientDeletedSubscriber(($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Newsletter\ScheduledTask\NewsletterRecipientTaskHandler' shared service.
     *
     * @return \Shopware\Core\Content\Newsletter\ScheduledTask\NewsletterRecipientTaskHandler
     */
    protected static function getNewsletterRecipientTaskHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageSubscriberInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/ScheduledTaskHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/ScheduledTask/NewsletterRecipientTaskHandler.php';

        $a = ($container->services['scheduled_task.repository'] ?? self::getScheduledTask_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Newsletter\\ScheduledTask\\NewsletterRecipientTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\Newsletter\\ScheduledTask\\NewsletterRecipientTaskHandler'];
        }
        $b = ($container->services['newsletter_recipient.repository'] ?? self::getNewsletterRecipient_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Newsletter\\ScheduledTask\\NewsletterRecipientTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\Newsletter\\ScheduledTask\\NewsletterRecipientTaskHandler'];
        }

        return $container->privates['Shopware\\Core\\Content\\Newsletter\\ScheduledTask\\NewsletterRecipientTaskHandler'] = new \Shopware\Core\Content\Newsletter\ScheduledTask\NewsletterRecipientTaskHandler($a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Newsletter\Subscriber\NewsletterRecipientSalutationSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\Newsletter\Subscriber\NewsletterRecipientSalutationSubscriber
     */
    protected static function getNewsletterRecipientSalutationSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Newsletter/Subscriber/NewsletterRecipientSalutationSubscriber.php';

        return $container->privates['Shopware\\Core\\Content\\Newsletter\\Subscriber\\NewsletterRecipientSalutationSubscriber'] = new \Shopware\Core\Content\Newsletter\Subscriber\NewsletterRecipientSalutationSubscriber(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\ProductExport\Command\ProductExportGenerateCommand' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\Command\ProductExportGenerateCommand
     */
    protected static function getProductExportGenerateCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Command/ProductExportGenerateCommand.php';

        $container->privates['Shopware\\Core\\Content\\ProductExport\\Command\\ProductExportGenerateCommand'] = $instance = new \Shopware\Core\Content\ProductExport\Command\ProductExportGenerateCommand(($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? self::getSalesChannelContextFactoryService($container)), ($container->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExporter'] ?? self::getProductExporterService($container)));

        $instance->setName('product-export:generate');
        $instance->setDescription('Generates a product export file');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Content\ProductExport\EventListener\ProductExportEventListener' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\EventListener\ProductExportEventListener
     */
    protected static function getProductExportEventListenerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/EventListener/ProductExportEventListener.php';

        $a = ($container->services['product_export.repository'] ?? self::getProductExport_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ProductExport\\EventListener\\ProductExportEventListener'])) {
            return $container->privates['Shopware\\Core\\Content\\ProductExport\\EventListener\\ProductExportEventListener'];
        }

        return $container->privates['Shopware\\Core\\Content\\ProductExport\\EventListener\\ProductExportEventListener'] = new \Shopware\Core\Content\ProductExport\EventListener\ProductExportEventListener($a, ($container->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportFileHandler'] ?? self::getProductExportFileHandlerService($container)), ($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\ProductExport\ScheduledTask\ProductExportGenerateTaskHandler' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\ScheduledTask\ProductExportGenerateTaskHandler
     */
    protected static function getProductExportGenerateTaskHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageSubscriberInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/ScheduledTaskHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/ScheduledTask/ProductExportGenerateTaskHandler.php';

        $a = ($container->services['scheduled_task.repository'] ?? self::getScheduledTask_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'];
        }
        $b = ($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? self::getSalesChannelContextFactoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'];
        }
        $c = ($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'];
        }
        $d = ($container->services['product_export.repository'] ?? self::getProductExport_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'];
        }
        $e = ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'];
        }

        return $container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'] = new \Shopware\Core\Content\ProductExport\ScheduledTask\ProductExportGenerateTaskHandler($a, $b, $c, $d, $e);
    }

    /**
     * Gets the private 'Shopware\Core\Content\ProductExport\ScheduledTask\ProductExportPartialGenerationHandler' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\ScheduledTask\ProductExportPartialGenerationHandler
     */
    protected static function getProductExportPartialGenerationHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/ScheduledTask/ProductExportPartialGenerationHandler.php';

        $a = ($container->services['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportGenerator'] ?? self::getProductExportGeneratorService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'];
        }
        $b = ($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? self::getSalesChannelContextFactoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'];
        }
        $c = ($container->services['product_export.repository'] ?? self::getProductExport_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'];
        }
        $d = ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'];
        }
        $e = ($container->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportRenderer'] ?? self::getProductExportRendererService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'];
        }
        $f = ($container->services['translator'] ?? self::getTranslatorService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'];
        }
        $g = ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? self::getSalesChannelContextServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'];
        }
        $h = ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'] ?? self::getSalesChannelContextPersisterService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'];
        }

        return $container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'] = new \Shopware\Core\Content\ProductExport\ScheduledTask\ProductExportPartialGenerationHandler($a, $b, $c, ($container->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportFileHandler'] ?? self::getProductExportFileHandlerService($container)), $d, $e, $f, $g, $h, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), 100, ($container->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'] ?? self::getLanguageLocaleCodeProviderService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\ProductExport\Service\ProductExportFileHandler' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\Service\ProductExportFileHandler
     */
    protected static function getProductExportFileHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExportFileHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExportFileHandler.php';

        return $container->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportFileHandler'] = new \Shopware\Core\Content\ProductExport\Service\ProductExportFileHandler(($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)), 'export');
    }

    /**
     * Gets the private 'Shopware\Core\Content\ProductExport\Service\ProductExportRenderer' shared service.
     *
     * @return \Shopware\Core\Content\ProductExport\Service\ProductExportRenderer
     */
    protected static function getProductExportRendererService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExportRendererInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExportRenderer.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\StringTemplateRenderer'] ?? self::getStringTemplateRendererService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportRenderer'])) {
            return $container->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportRenderer'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportRenderer'])) {
            return $container->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportRenderer'];
        }

        return $container->privates['Shopware\\Core\\Content\\ProductExport\\Service\\ProductExportRenderer'] = new \Shopware\Core\Content\ProductExport\Service\ProductExportRenderer($a, $b, ($container->services['Shopware\\Core\\Content\\Seo\\SeoUrlPlaceholderHandlerInterface'] ?? self::getSeoUrlPlaceholderHandlerInterfaceService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\ProductStream\DataAbstractionLayer\ProductStreamIndexer' shared service.
     *
     * @return \Shopware\Core\Content\ProductStream\DataAbstractionLayer\ProductStreamIndexer
     */
    protected static function getProductStreamIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/DataAbstractionLayer/ProductStreamIndexer.php';

        $a = ($container->services['product_stream.repository'] ?? self::getProductStream_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ProductStream\\DataAbstractionLayer\\ProductStreamIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\ProductStream\\DataAbstractionLayer\\ProductStreamIndexer'];
        }
        $b = ($container->privates['serializer'] ?? self::getSerializerService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ProductStream\\DataAbstractionLayer\\ProductStreamIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\ProductStream\\DataAbstractionLayer\\ProductStreamIndexer'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ProductStream\\DataAbstractionLayer\\ProductStreamIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\ProductStream\\DataAbstractionLayer\\ProductStreamIndexer'];
        }

        return $container->privates['Shopware\\Core\\Content\\ProductStream\\DataAbstractionLayer\\ProductStreamIndexer'] = new \Shopware\Core\Content\ProductStream\DataAbstractionLayer\ProductStreamIndexer(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, $b, ($container->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? self::getProductDefinitionService($container)), $c);
    }

    /**
     * Gets the private 'Shopware\Core\Content\ProductStream\ScheduledTask\UpdateProductStreamMappingTaskHandler' shared service.
     *
     * @return \Shopware\Core\Content\ProductStream\ScheduledTask\UpdateProductStreamMappingTaskHandler
     */
    protected static function getUpdateProductStreamMappingTaskHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageSubscriberInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/ScheduledTaskHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductStream/ScheduledTask/UpdateProductStreamMappingTaskHandler.php';

        $a = ($container->services['scheduled_task.repository'] ?? self::getScheduledTask_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ProductStream\\ScheduledTask\\UpdateProductStreamMappingTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\ProductStream\\ScheduledTask\\UpdateProductStreamMappingTaskHandler'];
        }
        $b = ($container->services['product_stream.repository'] ?? self::getProductStream_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\ProductStream\\ScheduledTask\\UpdateProductStreamMappingTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\ProductStream\\ScheduledTask\\UpdateProductStreamMappingTaskHandler'];
        }

        return $container->privates['Shopware\\Core\\Content\\ProductStream\\ScheduledTask\\UpdateProductStreamMappingTaskHandler'] = new \Shopware\Core\Content\ProductStream\ScheduledTask\UpdateProductStreamMappingTaskHandler($a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\Api\ProductNumberFkResolver' shared service.
     *
     * @return \Shopware\Core\Content\Product\Api\ProductNumberFkResolver
     */
    protected static function getProductNumberFkResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Sync/AbstractFkResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Api/ProductNumberFkResolver.php';

        return $container->privates['Shopware\\Core\\Content\\Product\\Api\\ProductNumberFkResolver'] = new \Shopware\Core\Content\Product\Api\ProductNumberFkResolver(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\Cart\ProductCartProcessor' shared service.
     *
     * @return \Shopware\Core\Content\Product\Cart\ProductCartProcessor
     */
    protected static function getProductCartProcessorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartProcessorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Cart/CartDataCollectorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cart/ProductCartProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cart/ProductGatewayInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cart/ProductGateway.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cart/ProductFeatureBuilder.php';

        $a = ($container->services['sales_channel.product.repository'] ?? self::getSalesChannel_Product_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'];
        }
        $c = ($container->services['custom_field.repository'] ?? self::getCustomField_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'];
        }
        $d = ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\AppScriptProductPriceCalculator'] ?? self::getAppScriptProductPriceCalculatorService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'];
        }

        return $container->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductCartProcessor'] = new \Shopware\Core\Content\Product\Cart\ProductCartProcessor(new \Shopware\Core\Content\Product\Cart\ProductGateway($a, $b), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] ?? self::getQuantityPriceCalculatorService($container)), new \Shopware\Core\Content\Product\Cart\ProductFeatureBuilder($c, ($container->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'] ?? self::getLanguageLocaleCodeProviderService($container))), $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator()), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\Cart\ProductLineItemCommandValidator' shared service.
     *
     * @return \Shopware\Core\Content\Product\Cart\ProductLineItemCommandValidator
     */
    protected static function getProductLineItemCommandValidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cart/ProductLineItemCommandValidator.php';

        return $container->privates['Shopware\\Core\\Content\\Product\\Cart\\ProductLineItemCommandValidator'] = new \Shopware\Core\Content\Product\Cart\ProductLineItemCommandValidator(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\Cleanup\CleanupProductKeywordDictionaryTaskHandler' shared service.
     *
     * @return \Shopware\Core\Content\Product\Cleanup\CleanupProductKeywordDictionaryTaskHandler
     */
    protected static function getCleanupProductKeywordDictionaryTaskHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageSubscriberInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/ScheduledTaskHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cleanup/CleanupProductKeywordDictionaryTaskHandler.php';

        $a = ($container->services['scheduled_task.repository'] ?? self::getScheduledTask_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupProductKeywordDictionaryTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupProductKeywordDictionaryTaskHandler'];
        }

        return $container->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupProductKeywordDictionaryTaskHandler'] = new \Shopware\Core\Content\Product\Cleanup\CleanupProductKeywordDictionaryTaskHandler($a, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\Cleanup\CleanupUnusedDownloadMediaTaskHandler' shared service.
     *
     * @return \Shopware\Core\Content\Product\Cleanup\CleanupUnusedDownloadMediaTaskHandler
     */
    protected static function getCleanupUnusedDownloadMediaTaskHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageSubscriberInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/ScheduledTaskHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cleanup/CleanupUnusedDownloadMediaTaskHandler.php';

        $a = ($container->services['scheduled_task.repository'] ?? self::getScheduledTask_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupUnusedDownloadMediaTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupUnusedDownloadMediaTaskHandler'];
        }
        $b = ($container->privates['Shopware\\Core\\Content\\Media\\UnusedMediaPurger'] ?? self::getUnusedMediaPurgerService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupUnusedDownloadMediaTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupUnusedDownloadMediaTaskHandler'];
        }

        return $container->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupUnusedDownloadMediaTaskHandler'] = new \Shopware\Core\Content\Product\Cleanup\CleanupUnusedDownloadMediaTaskHandler($a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\Cms\BuyBoxCmsElementResolver' shared service.
     *
     * @return \Shopware\Core\Content\Product\Cms\BuyBoxCmsElementResolver
     */
    protected static function getBuyBoxCmsElementResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/CmsElementResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/AbstractCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cms/AbstractProductDetailCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cms/BuyBoxCmsElementResolver.php';

        $a = ($container->privates['Shopware\\Storefront\\Page\\Product\\Configurator\\ProductPageConfiguratorLoader'] ?? self::getProductPageConfiguratorLoaderService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\Cms\\BuyBoxCmsElementResolver'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\Cms\\BuyBoxCmsElementResolver'];
        }
        $b = ($container->services['product_review.repository'] ?? self::getProductReview_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\Cms\\BuyBoxCmsElementResolver'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\Cms\\BuyBoxCmsElementResolver'];
        }

        return $container->privates['Shopware\\Core\\Content\\Product\\Cms\\BuyBoxCmsElementResolver'] = new \Shopware\Core\Content\Product\Cms\BuyBoxCmsElementResolver($a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\Cms\CrossSellingCmsElementResolver' shared service.
     *
     * @return \Shopware\Core\Content\Product\Cms\CrossSellingCmsElementResolver
     */
    protected static function getCrossSellingCmsElementResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/CmsElementResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/AbstractCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cms/AbstractProductDetailCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cms/CrossSellingCmsElementResolver.php';

        $a = ($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\CrossSelling\\CachedProductCrossSellingRoute'] ?? self::getCachedProductCrossSellingRouteService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\Cms\\CrossSellingCmsElementResolver'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\Cms\\CrossSellingCmsElementResolver'];
        }

        return $container->privates['Shopware\\Core\\Content\\Product\\Cms\\CrossSellingCmsElementResolver'] = new \Shopware\Core\Content\Product\Cms\CrossSellingCmsElementResolver($a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\Cms\ProductBoxCmsElementResolver' shared service.
     *
     * @return \Shopware\Core\Content\Product\Cms\ProductBoxCmsElementResolver
     */
    protected static function getProductBoxCmsElementResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/CmsElementResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/AbstractCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cms/ProductBoxCmsElementResolver.php';

        $a = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductBoxCmsElementResolver'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductBoxCmsElementResolver'];
        }

        return $container->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductBoxCmsElementResolver'] = new \Shopware\Core\Content\Product\Cms\ProductBoxCmsElementResolver($a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\Cms\ProductDescriptionReviewsCmsElementResolver' shared service.
     *
     * @return \Shopware\Core\Content\Product\Cms\ProductDescriptionReviewsCmsElementResolver
     */
    protected static function getProductDescriptionReviewsCmsElementResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/CmsElementResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/AbstractCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cms/AbstractProductDetailCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cms/ProductDescriptionReviewsCmsElementResolver.php';

        $a = ($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Review\\CachedProductReviewRoute'] ?? self::getCachedProductReviewRouteService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductDescriptionReviewsCmsElementResolver'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductDescriptionReviewsCmsElementResolver'];
        }

        return $container->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductDescriptionReviewsCmsElementResolver'] = new \Shopware\Core\Content\Product\Cms\ProductDescriptionReviewsCmsElementResolver($a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\Cms\ProductListingCmsElementResolver' shared service.
     *
     * @return \Shopware\Core\Content\Product\Cms\ProductListingCmsElementResolver
     */
    protected static function getProductListingCmsElementResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/CmsElementResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/AbstractCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cms/ProductListingCmsElementResolver.php';

        $a = ($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ResolveCriteriaProductListingRoute'] ?? self::getResolveCriteriaProductListingRouteService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductListingCmsElementResolver'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductListingCmsElementResolver'];
        }

        return $container->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductListingCmsElementResolver'] = new \Shopware\Core\Content\Product\Cms\ProductListingCmsElementResolver($a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\Cms\ProductSliderCmsElementResolver' shared service.
     *
     * @return \Shopware\Core\Content\Product\Cms\ProductSliderCmsElementResolver
     */
    protected static function getProductSliderCmsElementResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/CmsElementResolverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Cms/DataResolver/Element/AbstractCmsElementResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Cms/ProductSliderCmsElementResolver.php';

        $a = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductSliderCmsElementResolver'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductSliderCmsElementResolver'];
        }

        return $container->privates['Shopware\\Core\\Content\\Product\\Cms\\ProductSliderCmsElementResolver'] = new \Shopware\Core\Content\Product\Cms\ProductSliderCmsElementResolver(($container->services['Shopware\\Core\\Content\\ProductStream\\Service\\ProductStreamBuilder'] ?? self::getProductStreamBuilderService($container)), $a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\DataAbstractionLayer\ProductIndexer' shared service.
     *
     * @return \Shopware\Core\Content\Product\DataAbstractionLayer\ProductIndexer
     */
    protected static function getProductIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/ProductIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/VariantListingUpdater.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/ProductCategoryDenormalizer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/RatingAverageUpdater.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/CheapestPriceUpdater.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/AbstractCheapestPriceQuantitySelector.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/CheapestPriceQuantitySelector.php';

        $a = ($container->services['product.repository'] ?? self::getProduct_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'];
        }
        $b = ($container->privates['Shopware\\Elasticsearch\\Product\\SearchKeywordReplacement'] ?? self::getSearchKeywordReplacementService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'];
        }
        $c = ($container->privates['Shopware\\Core\\Content\\Product\\Stock\\StockStorage'] ?? self::getStockStorageService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'];
        }
        $d = ($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StockUpdater'] ?? self::getStockUpdaterService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'];
        }
        $e = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'];
        }
        $f = ($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductStreamUpdater'] ?? self::getProductStreamUpdaterService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'];
        }
        $g = ($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StatesUpdater'] ?? self::getStatesUpdaterService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'];
        }
        $h = ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'];
        }
        $i = ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container));

        return $container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductIndexer'] = new \Shopware\Core\Content\Product\DataAbstractionLayer\ProductIndexer(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, $i, new \Shopware\Core\Content\Product\DataAbstractionLayer\VariantListingUpdater($i), new \Shopware\Core\Content\Product\DataAbstractionLayer\ProductCategoryDenormalizer($i), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\InheritanceUpdater'] ?? self::getInheritanceUpdaterService($container)), new \Shopware\Core\Content\Product\DataAbstractionLayer\RatingAverageUpdater($i), $b, ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\ChildCountUpdater'] ?? self::getChildCountUpdaterService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\ManyToManyIdFieldUpdater'] ?? self::getManyToManyIdFieldUpdaterService($container)), $c, $d, $e, new \Shopware\Core\Content\Product\DataAbstractionLayer\CheapestPriceUpdater($i, new \Shopware\Core\Content\Product\DataAbstractionLayer\CheapestPriceQuantitySelector()), $f, $g, $h);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\DataAbstractionLayer\ProductStreamUpdater' shared service.
     *
     * @return \Shopware\Core\Content\Product\DataAbstractionLayer\ProductStreamUpdater
     */
    protected static function getProductStreamUpdaterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/AbstractProductStreamUpdater.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/ProductStreamUpdater.php';

        $a = ($container->services['product.repository'] ?? self::getProduct_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductStreamUpdater'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductStreamUpdater'];
        }
        $b = ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductStreamUpdater'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductStreamUpdater'];
        }

        return $container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\ProductStreamUpdater'] = new \Shopware\Core\Content\Product\DataAbstractionLayer\ProductStreamUpdater(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? self::getProductDefinitionService($container)), $a, $b, ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\ManyToManyIdFieldUpdater'] ?? self::getManyToManyIdFieldUpdaterService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\DataAbstractionLayer\StatesUpdater' shared service.
     *
     * @return \Shopware\Core\Content\Product\DataAbstractionLayer\StatesUpdater
     */
    protected static function getStatesUpdaterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/StatesUpdater.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StatesUpdater'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StatesUpdater'];
        }

        return $container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StatesUpdater'] = new \Shopware\Core\Content\Product\DataAbstractionLayer\StatesUpdater(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\DataAbstractionLayer\StockUpdater' shared service.
     *
     * @return \Shopware\Core\Content\Product\DataAbstractionLayer\StockUpdater
     */
    protected static function getStockUpdaterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/StockUpdater.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/StockUpdate/StockUpdateFilterProvider.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StockUpdater'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StockUpdater'];
        }

        return $container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StockUpdater'] = new \Shopware\Core\Content\Product\DataAbstractionLayer\StockUpdater(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $a, new \Shopware\Core\Content\Product\DataAbstractionLayer\StockUpdate\StockUpdateFilterProvider(new RewindableGenerator(fn () => new \EmptyIterator(), 0)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\SalesChannel\Listing\Filter\PropertyListingFilterHandler' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Listing\Filter\PropertyListingFilterHandler
     */
    protected static function getPropertyListingFilterHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Listing/Filter/AbstractListingFilterHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Listing/Filter/PropertyListingFilterHandler.php';

        $a = ($container->services['property_group_option.repository'] ?? self::getPropertyGroupOption_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Filter\\PropertyListingFilterHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Filter\\PropertyListingFilterHandler'];
        }

        return $container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Filter\\PropertyListingFilterHandler'] = new \Shopware\Core\Content\Product\SalesChannel\Listing\Filter\PropertyListingFilterHandler($a, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\SalesChannel\Listing\Processor\AggregationListingProcessor' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Listing\Processor\AggregationListingProcessor
     */
    protected static function getAggregationListingProcessorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Listing/Processor/AbstractListingProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Listing/Processor/AggregationListingProcessor.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Processor\\AggregationListingProcessor'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Processor\\AggregationListingProcessor'];
        }

        return $container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Processor\\AggregationListingProcessor'] = new \Shopware\Core\Content\Product\SalesChannel\Listing\Processor\AggregationListingProcessor(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Filter\\ManufacturerListingFilterHandler'] ??= new \Shopware\Core\Content\Product\SalesChannel\Listing\Filter\ManufacturerListingFilterHandler());
            yield 1 => ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Filter\\PriceListingFilterHandler'] ??= new \Shopware\Core\Content\Product\SalesChannel\Listing\Filter\PriceListingFilterHandler());
            yield 2 => ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Filter\\RatingListingFilterHandler'] ??= new \Shopware\Core\Content\Product\SalesChannel\Listing\Filter\RatingListingFilterHandler());
            yield 3 => ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Filter\\ShippingFreeListingFilterHandler'] ??= new \Shopware\Core\Content\Product\SalesChannel\Listing\Filter\ShippingFreeListingFilterHandler());
            yield 4 => ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Filter\\PropertyListingFilterHandler'] ?? self::getPropertyListingFilterHandlerService($container));
        }, 5), $a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\SalesChannel\Listing\Processor\CompositeListingProcessor' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Listing\Processor\CompositeListingProcessor
     */
    protected static function getCompositeListingProcessorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Listing/Processor/CompositeListingProcessor.php';

        return $container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Processor\\CompositeListingProcessor'] = new \Shopware\Core\Content\Product\SalesChannel\Listing\Processor\CompositeListingProcessor(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Processor\\SortingListingProcessor'] ?? self::getSortingListingProcessorService($container));
            yield 1 => ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Processor\\AggregationListingProcessor'] ?? self::getAggregationListingProcessorService($container));
            yield 2 => ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Processor\\AssociationLoadingListingProcessor'] ??= new \Shopware\Core\Content\Product\SalesChannel\Listing\Processor\AssociationLoadingListingProcessor());
            yield 3 => ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Processor\\PagingListingProcessor'] ?? self::getPagingListingProcessorService($container));
            yield 4 => ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Processor\\BehaviorListingProcessor'] ??= new \Shopware\Core\Content\Product\SalesChannel\Listing\Processor\BehaviorListingProcessor());
        }, 5));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\SalesChannel\Listing\Processor\PagingListingProcessor' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Listing\Processor\PagingListingProcessor
     */
    protected static function getPagingListingProcessorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Listing/Processor/AbstractListingProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Listing/Processor/PagingListingProcessor.php';

        $a = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Processor\\PagingListingProcessor'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Processor\\PagingListingProcessor'];
        }

        return $container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Processor\\PagingListingProcessor'] = new \Shopware\Core\Content\Product\SalesChannel\Listing\Processor\PagingListingProcessor($a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\SalesChannel\Listing\Processor\SortingListingProcessor' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Listing\Processor\SortingListingProcessor
     */
    protected static function getSortingListingProcessorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Listing/Processor/AbstractListingProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Listing/Processor/SortingListingProcessor.php';

        $a = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Processor\\SortingListingProcessor'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Processor\\SortingListingProcessor'];
        }
        $b = ($container->services['product_sorting.repository'] ?? self::getProductSorting_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Processor\\SortingListingProcessor'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Processor\\SortingListingProcessor'];
        }

        return $container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Processor\\SortingListingProcessor'] = new \Shopware\Core\Content\Product\SalesChannel\Listing\Processor\SortingListingProcessor($a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\SalesChannel\Listing\ProductListingFeaturesSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Listing\ProductListingFeaturesSubscriber
     */
    protected static function getProductListingFeaturesSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Listing/ProductListingFeaturesSubscriber.php';

        $a = ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\Processor\\CompositeListingProcessor'] ?? self::getCompositeListingProcessorService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'];
        }

        return $container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingFeaturesSubscriber'] = new \Shopware\Core\Content\Product\SalesChannel\Listing\ProductListingFeaturesSubscriber($a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\SalesChannel\Listing\ProductListingLoader' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Listing\ProductListingLoader
     */
    protected static function getProductListingLoaderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Listing/ProductListingLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/AbstractProductCloseoutFilterFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/ProductCloseoutFilterFactory.php';

        $a = ($container->services['sales_channel.product.repository'] ?? self::getSalesChannel_Product_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingLoader'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingLoader'];
        }
        $b = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingLoader'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingLoader'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingLoader'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingLoader'];
        }

        return $container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Listing\\ProductListingLoader'] = new \Shopware\Core\Content\Product\SalesChannel\Listing\ProductListingLoader($a, $b, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $c, ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\ProductCloseoutFilterFactory'] ??= new \Shopware\Core\Content\Product\SalesChannel\ProductCloseoutFilterFactory()));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\SalesChannel\Price\AppScriptProductPriceCalculator' shared service.
     *
     * @return \Shopware\Core\Content\Product\SalesChannel\Price\AppScriptProductPriceCalculator
     */
    protected static function getAppScriptProductPriceCalculatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Price/AbstractProductPriceCalculator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Price/AppScriptProductPriceCalculator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Price/ProductPriceCalculator.php';

        $a = ($container->services['unit.repository'] ?? self::getUnit_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\AppScriptProductPriceCalculator'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\AppScriptProductPriceCalculator'];
        }

        return $container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\AppScriptProductPriceCalculator'] = new \Shopware\Core\Content\Product\SalesChannel\Price\AppScriptProductPriceCalculator(new \Shopware\Core\Content\Product\SalesChannel\Price\ProductPriceCalculator($a, ($container->privates['Shopware\\Core\\Checkout\\Cart\\Price\\QuantityPriceCalculator'] ?? self::getQuantityPriceCalculatorService($container))), ($container->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'] ?? self::getScriptExecutorService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Facade\\ScriptPriceStubs'] ?? self::getScriptPriceStubsService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\Stock\LoadProductStockSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\Product\Stock\LoadProductStockSubscriber
     */
    protected static function getLoadProductStockSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Stock/LoadProductStockSubscriber.php';

        $a = ($container->privates['Shopware\\Core\\Content\\Product\\Stock\\StockStorage'] ?? self::getStockStorageService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\Stock\\LoadProductStockSubscriber'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\Stock\\LoadProductStockSubscriber'];
        }

        return $container->privates['Shopware\\Core\\Content\\Product\\Stock\\LoadProductStockSubscriber'] = new \Shopware\Core\Content\Product\Stock\LoadProductStockSubscriber($a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\Stock\OrderStockSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\Product\Stock\OrderStockSubscriber
     */
    protected static function getOrderStockSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Stock/OrderStockSubscriber.php';

        $a = ($container->privates['Shopware\\Core\\Content\\Product\\Stock\\StockStorage'] ?? self::getStockStorageService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\Stock\\OrderStockSubscriber'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\Stock\\OrderStockSubscriber'];
        }

        return $container->privates['Shopware\\Core\\Content\\Product\\Stock\\OrderStockSubscriber'] = new \Shopware\Core\Content\Product\Stock\OrderStockSubscriber(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $a, true);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\Stock\StockStorage' shared service.
     *
     * @return \Shopware\Core\Content\Product\Stock\StockStorage
     */
    protected static function getStockStorageService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Stock/AbstractStockStorage.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Stock/StockStorage.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\Stock\\StockStorage'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\Stock\\StockStorage'];
        }

        return $container->privates['Shopware\\Core\\Content\\Product\\Stock\\StockStorage'] = new \Shopware\Core\Content\Product\Stock\StockStorage(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Product\Subscriber\ProductSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\Product\Subscriber\ProductSubscriber
     */
    protected static function getProductSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/Subscriber/ProductSubscriber.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/AbstractProductVariationBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/ProductVariationBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/AbstractPropertyGroupSorter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/PropertyGroupSorter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/AbstractProductMaxPurchaseCalculator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/ProductMaxPurchaseCalculator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/AbstractIsNewDetector.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/IsNewDetector.php';

        $a = ($container->privates['Shopware\\Core\\Content\\Product\\SalesChannel\\Price\\AppScriptProductPriceCalculator'] ?? self::getAppScriptProductPriceCalculatorService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber'];
        }
        $b = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber'];
        }
        $c = ($container->privates['Shopware\\Core\\Content\\Product\\Stock\\StockStorage'] ?? self::getStockStorageService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber'])) {
            return $container->privates['Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber'];
        }

        return $container->privates['Shopware\\Core\\Content\\Product\\Subscriber\\ProductSubscriber'] = new \Shopware\Core\Content\Product\Subscriber\ProductSubscriber(new \Shopware\Core\Content\Product\ProductVariationBuilder(), $a, new \Shopware\Core\Content\Product\PropertyGroupSorter(), new \Shopware\Core\Content\Product\ProductMaxPurchaseCalculator($b), new \Shopware\Core\Content\Product\IsNewDetector($b), $b, $c);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Rule\DataAbstractionLayer\RuleAreaUpdater' shared service.
     *
     * @return \Shopware\Core\Content\Rule\DataAbstractionLayer\RuleAreaUpdater
     */
    protected static function getRuleAreaUpdaterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Rule/DataAbstractionLayer/RuleAreaUpdater.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] ?? self::getCacheInvalidatorService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleAreaUpdater'])) {
            return $container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleAreaUpdater'];
        }

        return $container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleAreaUpdater'] = new \Shopware\Core\Content\Rule\DataAbstractionLayer\RuleAreaUpdater(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['Shopware\\Core\\Content\\Rule\\RuleDefinition'] ?? self::getRuleDefinitionService($container)), ($container->privates['Shopware\\Core\\Framework\\Rule\\Collector\\RuleConditionRegistry'] ?? self::getRuleConditionRegistryService($container)), $a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Rule\DataAbstractionLayer\RuleIndexer' shared service.
     *
     * @return \Shopware\Core\Content\Rule\DataAbstractionLayer\RuleIndexer
     */
    protected static function getRuleIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Rule/DataAbstractionLayer/RuleIndexer.php';

        $a = ($container->services['rule.repository'] ?? self::getRule_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'];
        }
        $b = ($container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleAreaUpdater'] ?? self::getRuleAreaUpdaterService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'])) {
            return $container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'];
        }

        return $container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexer'] = new \Shopware\Core\Content\Rule\DataAbstractionLayer\RuleIndexer(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, ($container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RulePayloadUpdater'] ?? self::getRulePayloadUpdaterService($container)), $b, $c);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Rule\DataAbstractionLayer\RuleIndexerSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\Rule\DataAbstractionLayer\RuleIndexerSubscriber
     */
    protected static function getRuleIndexerSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Rule/DataAbstractionLayer/RuleIndexerSubscriber.php';

        $a = ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'] ?? self::getCartRuleLoaderService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexerSubscriber'])) {
            return $container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexerSubscriber'];
        }

        return $container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RuleIndexerSubscriber'] = new \Shopware\Core\Content\Rule\DataAbstractionLayer\RuleIndexerSubscriber(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Rule\DataAbstractionLayer\RulePayloadSubscriber' shared service.
     *
     * @return \Shopware\Core\Content\Rule\DataAbstractionLayer\RulePayloadSubscriber
     */
    protected static function getRulePayloadSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Rule/DataAbstractionLayer/RulePayloadSubscriber.php';

        return $container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RulePayloadSubscriber'] = new \Shopware\Core\Content\Rule\DataAbstractionLayer\RulePayloadSubscriber(($container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RulePayloadUpdater'] ?? self::getRulePayloadUpdaterService($container)), ($container->privates['Shopware\\Core\\Framework\\Script\\Debugging\\ScriptTraces'] ??= new \Shopware\Core\Framework\Script\Debugging\ScriptTraces()), ($container->targetDir.''.'/twig'), true);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Rule\DataAbstractionLayer\RulePayloadUpdater' shared service.
     *
     * @return \Shopware\Core\Content\Rule\DataAbstractionLayer\RulePayloadUpdater
     */
    protected static function getRulePayloadUpdaterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Rule/DataAbstractionLayer/RulePayloadUpdater.php';

        return $container->privates['Shopware\\Core\\Content\\Rule\\DataAbstractionLayer\\RulePayloadUpdater'] = new \Shopware\Core\Content\Rule\DataAbstractionLayer\RulePayloadUpdater(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\Rule\\Collector\\RuleConditionRegistry'] ?? self::getRuleConditionRegistryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Rule\RuleValidator' shared service.
     *
     * @return \Shopware\Core\Content\Rule\RuleValidator
     */
    protected static function getRuleValidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Rule/RuleValidator.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Rule\\RuleValidator'])) {
            return $container->privates['Shopware\\Core\\Content\\Rule\\RuleValidator'];
        }
        $b = ($container->services['rule_condition.repository'] ?? self::getRuleCondition_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Rule\\RuleValidator'])) {
            return $container->privates['Shopware\\Core\\Content\\Rule\\RuleValidator'];
        }
        $c = ($container->services['app_script_condition.repository'] ?? self::getAppScriptCondition_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Rule\\RuleValidator'])) {
            return $container->privates['Shopware\\Core\\Content\\Rule\\RuleValidator'];
        }

        return $container->privates['Shopware\\Core\\Content\\Rule\\RuleValidator'] = new \Shopware\Core\Content\Rule\RuleValidator($a, ($container->privates['Shopware\\Core\\Framework\\Rule\\Collector\\RuleConditionRegistry'] ?? self::getRuleConditionRegistryService($container)), $b, $c);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Seo\SalesChannel\StoreApiSeoResolver' shared service.
     *
     * @return \Shopware\Core\Content\Seo\SalesChannel\StoreApiSeoResolver
     */
    protected static function getStoreApiSeoResolverService($container)
    {
        $a = ($container->services['sales_channel.seo_url.repository'] ?? self::getSalesChannel_SeoUrl_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Seo\\SalesChannel\\StoreApiSeoResolver'])) {
            return $container->privates['Shopware\\Core\\Content\\Seo\\SalesChannel\\StoreApiSeoResolver'];
        }

        return $container->privates['Shopware\\Core\\Content\\Seo\\SalesChannel\\StoreApiSeoResolver'] = new \Shopware\Core\Content\Seo\SalesChannel\StoreApiSeoResolver($a, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)), ($container->privates['Shopware\\Core\\Content\\Seo\\SeoUrlRoute\\SeoUrlRouteRegistry'] ?? self::getSeoUrlRouteRegistryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Seo\SeoUrlGenerator' shared service.
     *
     * @return \Shopware\Core\Content\Seo\SeoUrlGenerator
     */
    protected static function getSeoUrlGeneratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlGenerator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlTwigFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/TwigVariableParserFactory.php';

        return $container->privates['Shopware\\Core\\Content\\Seo\\SeoUrlGenerator'] = new \Shopware\Core\Content\Seo\SeoUrlGenerator(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->privates['router.default'] ?? self::getRouter_DefaultService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), (new \Shopware\Core\Content\Seo\SeoUrlTwigFactory())->createTwigEnvironment(($container->privates['slugify'] ?? self::getSlugifyService($container)), new RewindableGenerator(fn () => new \EmptyIterator(), 0)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\TwigVariableParserFactory'] ??= new \Shopware\Core\Framework\Adapter\Twig\TwigVariableParserFactory()));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Seo\SeoUrlPersister' shared service.
     *
     * @return \Shopware\Core\Content\Seo\SeoUrlPersister
     */
    protected static function getSeoUrlPersisterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlPersister.php';

        $a = ($container->services['seo_url.repository'] ?? self::getSeoUrl_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Seo\\SeoUrlPersister'])) {
            return $container->privates['Shopware\\Core\\Content\\Seo\\SeoUrlPersister'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Seo\\SeoUrlPersister'])) {
            return $container->privates['Shopware\\Core\\Content\\Seo\\SeoUrlPersister'];
        }

        return $container->privates['Shopware\\Core\\Content\\Seo\\SeoUrlPersister'] = new \Shopware\Core\Content\Seo\SeoUrlPersister(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Seo\SeoUrlRoute\SeoUrlRouteRegistry' shared service.
     *
     * @return \Shopware\Core\Content\Seo\SeoUrlRoute\SeoUrlRouteRegistry
     */
    protected static function getSeoUrlRouteRegistryService($container)
    {
        return $container->privates['Shopware\\Core\\Content\\Seo\\SeoUrlRoute\\SeoUrlRouteRegistry'] = new \Shopware\Core\Content\Seo\SeoUrlRoute\SeoUrlRouteRegistry(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\ProductPageSeoUrlRoute'] ?? self::getProductPageSeoUrlRouteService($container));
            yield 1 => ($container->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\NavigationPageSeoUrlRoute'] ?? self::getNavigationPageSeoUrlRouteService($container));
            yield 2 => ($container->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\LandingPageSeoUrlRoute'] ?? self::getLandingPageSeoUrlRouteService($container));
        }, 3));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Sitemap\Commands\SitemapGenerateCommand' shared service.
     *
     * @return \Shopware\Core\Content\Sitemap\Commands\SitemapGenerateCommand
     */
    protected static function getSitemapGenerateCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Commands/SitemapGenerateCommand.php';

        $container->privates['Shopware\\Core\\Content\\Sitemap\\Commands\\SitemapGenerateCommand'] = $instance = new \Shopware\Core\Content\Sitemap\Commands\SitemapGenerateCommand(($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container)), ($container->privates['Shopware\\Core\\Content\\Sitemap\\Service\\SitemapExporter'] ?? self::getSitemapExporterService($container)), ($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? self::getSalesChannelContextFactoryService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)));

        $instance->setName('sitemap:generate');
        $instance->setDescription('Generates sitemap files');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Content\Sitemap\ConfigHandler\File' shared service.
     *
     * @return \Shopware\Core\Content\Sitemap\ConfigHandler\File
     */
    protected static function getFileService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/ConfigHandler/ConfigHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/ConfigHandler/File.php';

        return $container->privates['Shopware\\Core\\Content\\Sitemap\\ConfigHandler\\File'] = new \Shopware\Core\Content\Sitemap\ConfigHandler\File($container->parameters['shopware.sitemap']);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Sitemap\Provider\CategoryUrlProvider' shared service.
     *
     * @return \Shopware\Core\Content\Sitemap\Provider\CategoryUrlProvider
     */
    protected static function getCategoryUrlProviderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Provider/AbstractUrlProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Provider/CategoryUrlProvider.php';

        return $container->privates['Shopware\\Core\\Content\\Sitemap\\Provider\\CategoryUrlProvider'] = new \Shopware\Core\Content\Sitemap\Provider\CategoryUrlProvider(($container->privates['Shopware\\Core\\Content\\Sitemap\\Service\\ConfigHandler'] ?? self::getConfigHandlerService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['Shopware\\Core\\Content\\Category\\CategoryDefinition'] ?? self::getCategoryDefinitionService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), ($container->services['router'] ?? self::getRouterService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Sitemap\Provider\CustomUrlProvider' shared service.
     *
     * @return \Shopware\Core\Content\Sitemap\Provider\CustomUrlProvider
     */
    protected static function getCustomUrlProviderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Provider/AbstractUrlProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Provider/CustomUrlProvider.php';

        return $container->privates['Shopware\\Core\\Content\\Sitemap\\Provider\\CustomUrlProvider'] = new \Shopware\Core\Content\Sitemap\Provider\CustomUrlProvider(($container->privates['Shopware\\Core\\Content\\Sitemap\\Service\\ConfigHandler'] ?? self::getConfigHandlerService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Sitemap\Provider\ProductUrlProvider' shared service.
     *
     * @return \Shopware\Core\Content\Sitemap\Provider\ProductUrlProvider
     */
    protected static function getProductUrlProviderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Provider/AbstractUrlProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Provider/ProductUrlProvider.php';

        $a = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Sitemap\\Provider\\ProductUrlProvider'])) {
            return $container->privates['Shopware\\Core\\Content\\Sitemap\\Provider\\ProductUrlProvider'];
        }

        return $container->privates['Shopware\\Core\\Content\\Sitemap\\Provider\\ProductUrlProvider'] = new \Shopware\Core\Content\Sitemap\Provider\ProductUrlProvider(($container->privates['Shopware\\Core\\Content\\Sitemap\\Service\\ConfigHandler'] ?? self::getConfigHandlerService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? self::getProductDefinitionService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), ($container->services['router'] ?? self::getRouterService($container)), $a);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Sitemap\ScheduledTask\SitemapGenerateTaskHandler' shared service.
     *
     * @return \Shopware\Core\Content\Sitemap\ScheduledTask\SitemapGenerateTaskHandler
     */
    protected static function getSitemapGenerateTaskHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageSubscriberInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/ScheduledTaskHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/ScheduledTask/SitemapGenerateTaskHandler.php';

        $a = ($container->services['scheduled_task.repository'] ?? self::getScheduledTask_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'];
        }
        $b = ($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'];
        }
        $c = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'];
        }
        $d = ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'];
        }
        $e = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'];
        }

        return $container->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'] = new \Shopware\Core\Content\Sitemap\ScheduledTask\SitemapGenerateTaskHandler($a, $b, $c, $d, $e);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Sitemap\ScheduledTask\SitemapMessageHandler' shared service.
     *
     * @return \Shopware\Core\Content\Sitemap\ScheduledTask\SitemapMessageHandler
     */
    protected static function getSitemapMessageHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/ScheduledTask/SitemapMessageHandler.php';

        $a = ($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? self::getSalesChannelContextFactoryService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapMessageHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapMessageHandler'];
        }
        $b = ($container->privates['Shopware\\Core\\Content\\Sitemap\\Service\\SitemapExporter'] ?? self::getSitemapExporterService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapMessageHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapMessageHandler'];
        }
        $c = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapMessageHandler'])) {
            return $container->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapMessageHandler'];
        }

        return $container->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapMessageHandler'] = new \Shopware\Core\Content\Sitemap\ScheduledTask\SitemapMessageHandler($a, $b, ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), $c);
    }

    /**
     * Gets the private 'Shopware\Core\Content\Sitemap\Service\ConfigHandler' shared service.
     *
     * @return \Shopware\Core\Content\Sitemap\Service\ConfigHandler
     */
    protected static function getConfigHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Service/ConfigHandler.php';

        return $container->privates['Shopware\\Core\\Content\\Sitemap\\Service\\ConfigHandler'] = new \Shopware\Core\Content\Sitemap\Service\ConfigHandler(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Content\\Sitemap\\ConfigHandler\\File'] ?? self::getFileService($container));
        }, 1));
    }

    /**
     * Gets the private 'Shopware\Core\Content\Sitemap\Service\SitemapExporter' shared service.
     *
     * @return \Shopware\Core\Content\Sitemap\Service\SitemapExporter
     */
    protected static function getSitemapExporterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Service/SitemapExporterInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Service/SitemapExporter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Service/SitemapHandleFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Sitemap/Service/SitemapHandleFactory.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Content\\Sitemap\\Service\\SitemapExporter'])) {
            return $container->privates['Shopware\\Core\\Content\\Sitemap\\Service\\SitemapExporter'];
        }

        return $container->privates['Shopware\\Core\\Content\\Sitemap\\Service\\SitemapExporter'] = new \Shopware\Core\Content\Sitemap\Service\SitemapExporter(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Content\\Sitemap\\Provider\\HomeUrlProvider'] ??= new \Shopware\Core\Content\Sitemap\Provider\HomeUrlProvider());
            yield 1 => ($container->privates['Shopware\\Core\\Content\\Sitemap\\Provider\\CategoryUrlProvider'] ?? self::getCategoryUrlProviderService($container));
            yield 2 => ($container->privates['Shopware\\Core\\Content\\Sitemap\\Provider\\CustomUrlProvider'] ?? self::getCustomUrlProviderService($container));
            yield 3 => ($container->privates['Shopware\\Core\\Content\\Sitemap\\Provider\\ProductUrlProvider'] ?? self::getProductUrlProviderService($container));
        }, 4), ($container->services['cache.system'] ?? self::getCache_SystemService($container)), 100, ($container->services['shopware.filesystem.sitemap'] ?? self::getShopware_Filesystem_SitemapService($container)), new \Shopware\Core\Content\Sitemap\Service\SitemapHandleFactory($a), $a);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Adapter\Cache\CacheClearer' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Cache\CacheClearer
     */
    protected static function getCacheClearerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/CacheClearer.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/filesystem/Filesystem.php';

        $a = ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'])) {
            return $container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'] = new \Shopware\Core\Framework\Adapter\Cache\CacheClearer([($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->privates['cache.http'] ?? self::getCache_HttpService($container))], ($container->privates['cache_clearer'] ?? self::getCacheClearer2Service($container)), ($container->privates['filesystem'] ??= new \Symfony\Component\Filesystem\Filesystem()), $container->targetDir.'', 'dev', false, $a);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Adapter\Cache\CacheDecorator' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Cache\CacheDecorator
     */
    protected static function getCacheDecoratorService($container)
    {
        $a = new \Symfony\Component\Cache\Adapter\TagAwareAdapter(($container->privates['.cache.object.inner'] ?? self::get_Cache_Object_InnerService($container)), ($container->privates['cache.tags'] ?? self::getCache_TagsService($container)));
        $a->setLogger(($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));

        return $container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] = new \Shopware\Core\Framework\Adapter\Cache\CacheDecorator($a, ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheTagCollection'] ??= new \Shopware\Core\Framework\Adapter\Cache\CacheTagCollection()));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Adapter\Cache\CacheInvalidationSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Cache\CacheInvalidationSubscriber
     */
    protected static function getCacheInvalidationSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/CacheInvalidationSubscriber.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] ?? self::getCacheInvalidatorService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'])) {
            return $container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidationSubscriber'] = new \Shopware\Core\Framework\Adapter\Cache\CacheInvalidationSubscriber($a, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), true, true);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Adapter\Cache\CacheInvalidator' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Cache\CacheInvalidator
     */
    protected static function getCacheInvalidatorService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'])) {
            return $container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] = new \Shopware\Core\Framework\Adapter\Cache\CacheInvalidator(0, [($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->privates['cache.http'] ?? self::getCache_HttpService($container))], (new \Shopware\Core\Framework\DependencyInjection\TaggedServiceLocator(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'cache' => ['privates', 'shopware.cache.invalidator.storage.cache', 'getShopware_Cache_Invalidator_Storage_CacheService', false],
            'redis' => ['privates', 'shopware.cache.invalidator.storage.redis', 'getShopware_Cache_Invalidator_Storage_RedisService', false],
        ], [
            'cache' => 'Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidatorStorage\\CacheInvalidatorStorage',
            'redis' => 'Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidatorStorage\\RedisInvalidatorStorage',
        ])))->get('cache'), $a, ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Adapter\Cache\CacheStateSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Cache\CacheStateSubscriber
     */
    protected static function getCacheStateSubscriberService($container)
    {
        $a = ($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? self::getCartServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheStateSubscriber'])) {
            return $container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheStateSubscriber'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheStateSubscriber'] = new \Shopware\Core\Framework\Adapter\Cache\CacheStateSubscriber($a);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Adapter\Cache\InvalidateCacheTaskHandler' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Cache\InvalidateCacheTaskHandler
     */
    protected static function getInvalidateCacheTaskHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageSubscriberInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/ScheduledTaskHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/InvalidateCacheTaskHandler.php';

        $a = ($container->services['scheduled_task.repository'] ?? self::getScheduledTask_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidateCacheTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidateCacheTaskHandler'];
        }
        $b = ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] ?? self::getCacheInvalidatorService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidateCacheTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidateCacheTaskHandler'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidateCacheTaskHandler'] = new \Shopware\Core\Framework\Adapter\Cache\InvalidateCacheTaskHandler($a, $b, 0);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Adapter\Cache\Message\CleanupOldCacheFoldersHandler' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Cache\Message\CleanupOldCacheFoldersHandler
     */
    protected static function getCleanupOldCacheFoldersHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/Message/CleanupOldCacheFoldersHandler.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'] ?? self::getCacheClearerService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\Message\\CleanupOldCacheFoldersHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\Message\\CleanupOldCacheFoldersHandler'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\Message\\CleanupOldCacheFoldersHandler'] = new \Shopware\Core\Framework\Adapter\Cache\Message\CleanupOldCacheFoldersHandler($a);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Adapter\Cache\Script\ScriptCacheInvalidationSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Cache\Script\ScriptCacheInvalidationSubscriber
     */
    protected static function getScriptCacheInvalidationSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/Script/ScriptCacheInvalidationSubscriber.php';

        return $container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\Script\\ScriptCacheInvalidationSubscriber'] = new \Shopware\Core\Framework\Adapter\Cache\Script\ScriptCacheInvalidationSubscriber(($container->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'] ?? self::getScriptExecutorService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Adapter\Command\S3FilesystemVisibilityCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Command\S3FilesystemVisibilityCommand
     */
    protected static function getS3FilesystemVisibilityCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Command/S3FilesystemVisibilityCommand.php';

        $container->privates['Shopware\\Core\\Framework\\Adapter\\Command\\S3FilesystemVisibilityCommand'] = $instance = new \Shopware\Core\Framework\Adapter\Command\S3FilesystemVisibilityCommand(($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)), ($container->services['shopware.filesystem.public'] ?? self::getShopware_Filesystem_PublicService($container)), ($container->services['shopware.filesystem.theme'] ?? self::getShopware_Filesystem_ThemeService($container)), ($container->services['shopware.filesystem.sitemap'] ?? self::getShopware_Filesystem_SitemapService($container)), ($container->services['shopware.filesystem.asset'] ?? self::getShopware_Filesystem_AssetService($container)));

        $instance->setName('s3:set-visibility');
        $instance->setDescription('Sets the visibility of all files in the s3 filesystem to public');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Adapter\Filesystem\FilesystemFactory' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Filesystem\FilesystemFactory
     */
    protected static function getFilesystemFactoryService($container)
    {
        return $container->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\FilesystemFactory'] = new \Shopware\Core\Framework\Adapter\Filesystem\FilesystemFactory(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\FilesystemFactory.local'] ??= new \Shopware\Core\Framework\Adapter\Filesystem\Adapter\LocalFactory());
            yield 1 => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\FilesystemFactory.amazon_s3'] ??= new \Shopware\Core\Framework\Adapter\Filesystem\Adapter\AwsS3v3Factory());
            yield 2 => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Filesystem\\FilesystemFactory.google_storage'] ??= new \Shopware\Core\Framework\Adapter\Filesystem\Adapter\GoogleStorageFactory());
        }, 3));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Adapter\Storage\AbstractKeyValueStorage' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Storage\MySQLKeyValueStorage
     */
    protected static function getAbstractKeyValueStorageService($container)
    {
        return $container->privates['Shopware\\Core\\Framework\\Adapter\\Storage\\AbstractKeyValueStorage'] = new \Shopware\Core\Framework\Adapter\Storage\MySQLKeyValueStorage(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Adapter\Translation\TranslatorCacheInvalidate' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Translation\TranslatorCacheInvalidate
     */
    protected static function getTranslatorCacheInvalidateService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Translation/TranslatorCacheInvalidate.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] ?? self::getCacheInvalidatorService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Adapter\\Translation\\TranslatorCacheInvalidate'])) {
            return $container->privates['Shopware\\Core\\Framework\\Adapter\\Translation\\TranslatorCacheInvalidate'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Adapter\\Translation\\TranslatorCacheInvalidate'] = new \Shopware\Core\Framework\Adapter\Translation\TranslatorCacheInvalidate($a, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Adapter\Twig\EntityTemplateLoader' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Twig\EntityTemplateLoader
     */
    protected static function getEntityTemplateLoaderService($container)
    {
        return $container->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\EntityTemplateLoader'] = new \Shopware\Core\Framework\Adapter\Twig\EntityTemplateLoader(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), 'dev');
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Adapter\Twig\NamespaceHierarchy\BundleHierarchyBuilder' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Twig\NamespaceHierarchy\BundleHierarchyBuilder
     */
    protected static function getBundleHierarchyBuilderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/NamespaceHierarchy/BundleHierarchyBuilder.php';

        return $container->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\NamespaceHierarchy\\BundleHierarchyBuilder'] = new \Shopware\Core\Framework\Adapter\Twig\NamespaceHierarchy\BundleHierarchyBuilder(($container->services['kernel'] ?? $container->get('kernel', 1)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Adapter\Twig\StringTemplateRenderer' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Twig\StringTemplateRenderer
     */
    protected static function getStringTemplateRendererService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Twig/StringTemplateRenderer.php';

        $a = ($container->services['twig'] ?? self::getTwigService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\StringTemplateRenderer'])) {
            return $container->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\StringTemplateRenderer'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\StringTemplateRenderer'] = new \Shopware\Core\Framework\Adapter\Twig\StringTemplateRenderer($a, ($container->targetDir.''.'/twig'));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Adapter\Twig\TemplateScopeDetector' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Twig\TemplateScopeDetector
     */
    protected static function getTemplateScopeDetectorService($container)
    {
        return $container->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\TemplateScopeDetector'] = new \Shopware\Core\Framework\Adapter\Twig\TemplateScopeDetector(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Api\Acl\AclAnnotationValidator' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Acl\AclAnnotationValidator
     */
    protected static function getAclAnnotationValidatorService($container)
    {
        return $container->privates['Shopware\\Core\\Framework\\Api\\Acl\\AclAnnotationValidator'] = new \Shopware\Core\Framework\Api\Acl\AclAnnotationValidator(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Api\Acl\AclWriteValidator' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Acl\AclWriteValidator
     */
    protected static function getAclWriteValidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Acl/AclWriteValidator.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Api\\Acl\\AclWriteValidator'])) {
            return $container->privates['Shopware\\Core\\Framework\\Api\\Acl\\AclWriteValidator'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Api\\Acl\\AclWriteValidator'] = new \Shopware\Core\Framework\Api\Acl\AclWriteValidator($a);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Api\ApiDefinition\DefinitionService' shared service.
     *
     * @return \Shopware\Core\Framework\Api\ApiDefinition\DefinitionService
     */
    protected static function getDefinitionServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/ApiDefinition/DefinitionService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/ApiDefinition/ApiDefinitionGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/ApiDefinition/Generator/StoreApiGenerator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/ApiDefinition/Generator/OpenApi/OpenApiSchemaBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/ApiDefinition/Generator/OpenApi/OpenApiDefinitionSchemaBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/ApiDefinition/Generator/BundleSchemaPathCollection.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/ApiDefinition/Generator/OpenApi3Generator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/ApiDefinition/Generator/OpenApi/OpenApiPathBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/ApiDefinition/Generator/CachedEntitySchemaGenerator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/ApiDefinition/Generator/EntitySchemaGenerator.php';

        $a = new \Shopware\Core\Framework\Api\ApiDefinition\Generator\OpenApi\OpenApiSchemaBuilder('6.5.7.3');
        $b = new \Shopware\Core\Framework\Api\ApiDefinition\Generator\OpenApi\OpenApiDefinitionSchemaBuilder();
        $c = new \Shopware\Core\Framework\Api\ApiDefinition\Generator\BundleSchemaPathCollection(($container->privates['kernel.bundles'] ?? self::getKernel_BundlesService($container)));

        return $container->privates['Shopware\\Core\\Framework\\Api\\ApiDefinition\\DefinitionService'] = new \Shopware\Core\Framework\Api\ApiDefinition\DefinitionService(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container)), new \Shopware\Core\Framework\Api\ApiDefinition\Generator\StoreApiGenerator($a, $b, $container->parameters['kernel.bundles_metadata'], $c), new \Shopware\Core\Framework\Api\ApiDefinition\Generator\OpenApi3Generator($a, new \Shopware\Core\Framework\Api\ApiDefinition\Generator\OpenApi\OpenApiPathBuilder(), $b, $container->parameters['kernel.bundles_metadata'], $c), new \Shopware\Core\Framework\Api\ApiDefinition\Generator\CachedEntitySchemaGenerator(new \Shopware\Core\Framework\Api\ApiDefinition\Generator\EntitySchemaGenerator(), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container))));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Api\Command\DumpClassSchemaCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Command\DumpClassSchemaCommand
     */
    protected static function getDumpClassSchemaCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Command/DumpClassSchemaCommand.php';

        $container->privates['Shopware\\Core\\Framework\\Api\\Command\\DumpClassSchemaCommand'] = $instance = new \Shopware\Core\Framework\Api\Command\DumpClassSchemaCommand($container->parameters['kernel.bundles_metadata']);

        $instance->setName('framework:dump:class:schema');
        $instance->setDescription('Dumps the schema of the given entity');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Api\Command\DumpSchemaCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Command\DumpSchemaCommand
     */
    protected static function getDumpSchemaCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/Command/DumpSchemaCommand.php';

        $container->privates['Shopware\\Core\\Framework\\Api\\Command\\DumpSchemaCommand'] = $instance = new \Shopware\Core\Framework\Api\Command\DumpSchemaCommand(($container->privates['Shopware\\Core\\Framework\\Api\\ApiDefinition\\DefinitionService'] ?? self::getDefinitionServiceService($container)));

        $instance->setName('framework:schema');
        $instance->setDescription('Dumps the schema of the given entity');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Api\EventListener\Authentication\ApiAuthenticationListener' shared service.
     *
     * @return \Shopware\Core\Framework\Api\EventListener\Authentication\ApiAuthenticationListener
     */
    protected static function getApiAuthenticationListenerService($container)
    {
        $a = ($container->privates['Shopware\\Core\\Framework\\Api\\OAuth\\AccessTokenRepository'] ??= new \Shopware\Core\Framework\Api\OAuth\AccessTokenRepository());
        $b = ($container->privates['shopware.public_key'] ??= new \League\OAuth2\Server\CryptKey(('file://'.\dirname(__DIR__, 4).'/config/jwt/public.pem')));
        $c = new \League\OAuth2\Server\AuthorizationValidators\BearerTokenValidator($a);
        $c->setPublicKey($b);
        $d = ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container));

        return $container->privates['Shopware\\Core\\Framework\\Api\\EventListener\\Authentication\\ApiAuthenticationListener'] = new \Shopware\Core\Framework\Api\EventListener\Authentication\ApiAuthenticationListener(new \League\OAuth2\Server\ResourceServer($a, $b, new \Shopware\Core\Framework\Api\OAuth\BearerTokenValidator($c, $d, ($container->privates['shopware.jwt_config'] ?? self::getShopware_JwtConfigService($container)))), ($container->privates['shopware.api.authorization_server'] ?? self::getShopware_Api_AuthorizationServerService($container)), new \Shopware\Core\Framework\Api\OAuth\UserRepository($d), ($container->privates['Shopware\\Core\\Framework\\Api\\OAuth\\RefreshTokenRepository'] ?? self::getRefreshTokenRepositoryService($container)), ($container->privates['Symfony\\Bridge\\PsrHttpMessage\\Factory\\PsrHttpFactory'] ?? self::getPsrHttpFactoryService($container)), ($container->privates['Shopware\\Core\\Framework\\Routing\\RouteScopeRegistry'] ?? self::getRouteScopeRegistryService($container)), 'PT10M', 'P1W');
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Api\EventListener\Authentication\SalesChannelAuthenticationListener' shared service.
     *
     * @return \Shopware\Core\Framework\Api\EventListener\Authentication\SalesChannelAuthenticationListener
     */
    protected static function getSalesChannelAuthenticationListenerService($container)
    {
        $a = ($container->privates['Shopware\\Core\\Framework\\Routing\\MaintenanceModeResolver'] ?? self::getMaintenanceModeResolverService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Api\\EventListener\\Authentication\\SalesChannelAuthenticationListener'])) {
            return $container->privates['Shopware\\Core\\Framework\\Api\\EventListener\\Authentication\\SalesChannelAuthenticationListener'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Api\\EventListener\\Authentication\\SalesChannelAuthenticationListener'] = new \Shopware\Core\Framework\Api\EventListener\Authentication\SalesChannelAuthenticationListener(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\Routing\\RouteScopeRegistry'] ?? self::getRouteScopeRegistryService($container)), $a);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Api\EventListener\Authentication\UserCredentialsChangedSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\Api\EventListener\Authentication\UserCredentialsChangedSubscriber
     */
    protected static function getUserCredentialsChangedSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Api/EventListener/Authentication/UserCredentialsChangedSubscriber.php';

        return $container->privates['Shopware\\Core\\Framework\\Api\\EventListener\\Authentication\\UserCredentialsChangedSubscriber'] = new \Shopware\Core\Framework\Api\EventListener\Authentication\UserCredentialsChangedSubscriber(($container->privates['Shopware\\Core\\Framework\\Api\\OAuth\\RefreshTokenRepository'] ?? self::getRefreshTokenRepositoryService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Api\EventListener\ExpectationSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\Api\EventListener\ExpectationSubscriber
     */
    protected static function getExpectationSubscriberService($container)
    {
        return $container->privates['Shopware\\Core\\Framework\\Api\\EventListener\\ExpectationSubscriber'] = new \Shopware\Core\Framework\Api\EventListener\ExpectationSubscriber('6.5.7.3', $container->parameters['kernel.plugin_infos']);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Api\OAuth\RefreshTokenRepository' shared service.
     *
     * @return \Shopware\Core\Framework\Api\OAuth\RefreshTokenRepository
     */
    protected static function getRefreshTokenRepositoryService($container)
    {
        return $container->privates['Shopware\\Core\\Framework\\Api\\OAuth\\RefreshTokenRepository'] = new \Shopware\Core\Framework\Api\OAuth\RefreshTokenRepository(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Api\Serializer\JsonEntityEncoder' shared service.
     *
     * @return \Shopware\Core\Framework\Api\Serializer\JsonEntityEncoder
     */
    protected static function getJsonEntityEncoderService($container)
    {
        $a = ($container->privates['serializer'] ?? self::getSerializerService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Api\\Serializer\\JsonEntityEncoder'])) {
            return $container->privates['Shopware\\Core\\Framework\\Api\\Serializer\\JsonEntityEncoder'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Api\\Serializer\\JsonEntityEncoder'] = new \Shopware\Core\Framework\Api\Serializer\JsonEntityEncoder($a);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\ActionButton\Executor' shared service.
     *
     * @return \Shopware\Core\Framework\App\ActionButton\Executor
     */
    protected static function getExecutorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ActionButton/Executor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ActionButton/Response/ActionButtonResponseFactory.php';

        return $container->privates['Shopware\\Core\\Framework\\App\\ActionButton\\Executor'] = new \Shopware\Core\Framework\App\ActionButton\Executor(($container->privates['shopware.app_system.guzzle'] ?? self::getShopware_AppSystem_GuzzleService($container)), ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), new \Shopware\Core\Framework\App\ActionButton\Response\ActionButtonResponseFactory(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Framework\\App\\ActionButton\\Response\\NotificationResponseFactory'] ??= new \Shopware\Core\Framework\App\ActionButton\Response\NotificationResponseFactory());
            yield 1 => ($container->privates['Shopware\\Core\\Framework\\App\\ActionButton\\Response\\OpenModalResponseFactory'] ?? self::getOpenModalResponseFactoryService($container));
            yield 2 => ($container->privates['Shopware\\Core\\Framework\\App\\ActionButton\\Response\\OpenNewTabResponseFactory'] ?? self::getOpenNewTabResponseFactoryService($container));
            yield 3 => ($container->privates['Shopware\\Core\\Framework\\App\\ActionButton\\Response\\ReloadDataResponseFactory'] ??= new \Shopware\Core\Framework\App\ActionButton\Response\ReloadDataResponseFactory());
        }, 4)), ($container->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'] ?? self::getShopIdProviderService($container)), ($container->services['router'] ?? self::getRouterService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->services['kernel'] ?? $container->get('kernel', 1)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\ActionButton\Response\OpenModalResponseFactory' shared service.
     *
     * @return \Shopware\Core\Framework\App\ActionButton\Response\OpenModalResponseFactory
     */
    protected static function getOpenModalResponseFactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ActionButton/Response/ActionButtonResponseFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ActionButton/Response/OpenModalResponseFactory.php';

        return $container->privates['Shopware\\Core\\Framework\\App\\ActionButton\\Response\\OpenModalResponseFactory'] = new \Shopware\Core\Framework\App\ActionButton\Response\OpenModalResponseFactory(($container->privates['Shopware\\Core\\Framework\\App\\Hmac\\QuerySigner'] ?? self::getQuerySignerService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\ActionButton\Response\OpenNewTabResponseFactory' shared service.
     *
     * @return \Shopware\Core\Framework\App\ActionButton\Response\OpenNewTabResponseFactory
     */
    protected static function getOpenNewTabResponseFactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ActionButton/Response/ActionButtonResponseFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ActionButton/Response/OpenNewTabResponseFactory.php';

        return $container->privates['Shopware\\Core\\Framework\\App\\ActionButton\\Response\\OpenNewTabResponseFactory'] = new \Shopware\Core\Framework\App\ActionButton\Response\OpenNewTabResponseFactory(($container->privates['Shopware\\Core\\Framework\\App\\Hmac\\QuerySigner'] ?? self::getQuerySignerService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\ActiveAppsLoader' shared service.
     *
     * @return \Shopware\Core\Framework\App\ActiveAppsLoader
     */
    protected static function getActiveAppsLoaderService($container)
    {
        return $container->privates['Shopware\\Core\\Framework\\App\\ActiveAppsLoader'] = new \Shopware\Core\Framework\App\ActiveAppsLoader(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] ?? self::getAppLoaderService($container)), \dirname(__DIR__, 4));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\AppPayloadServiceHelper' shared service.
     *
     * @return \Shopware\Core\Framework\App\AppPayloadServiceHelper
     */
    protected static function getAppPayloadServiceHelperService($container)
    {
        return $container->privates['Shopware\\Core\\Framework\\App\\AppPayloadServiceHelper'] = new \Shopware\Core\Framework\App\AppPayloadServiceHelper(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->privates['Shopware\\Core\\Framework\\Api\\Serializer\\JsonEntityEncoder'] ?? self::getJsonEntityEncoderService($container)), ($container->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'] ?? self::getShopIdProviderService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\AppStateService' shared service.
     *
     * @return \Shopware\Core\Framework\App\AppStateService
     */
    protected static function getAppStateServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/AppStateService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Payment/PaymentMethodStateService.php';

        $a = ($container->services['app.repository'] ?? self::getApp_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\AppStateService'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\AppStateService'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\AppStateService'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\AppStateService'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\App\\Template\\TemplateStateService'] ?? self::getTemplateStateServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\AppStateService'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\AppStateService'];
        }
        $d = ($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\ScriptPersister'] ?? self::getScriptPersisterService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\AppStateService'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\AppStateService'];
        }
        $e = ($container->services['payment_method.repository'] ?? self::getPaymentMethod_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\AppStateService'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\AppStateService'];
        }
        $f = ($container->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'] ?? self::getScriptExecutorService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\AppStateService'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\AppStateService'];
        }
        $g = ($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\RuleConditionPersister'] ?? self::getRuleConditionPersisterService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\AppStateService'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\AppStateService'];
        }
        $h = ($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\FlowEventPersister'] ?? self::getFlowEventPersisterService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\AppStateService'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\AppStateService'];
        }

        return $container->privates['Shopware\\Core\\Framework\\App\\AppStateService'] = new \Shopware\Core\Framework\App\AppStateService($a, $b, ($container->privates['Shopware\\Core\\Framework\\App\\ActiveAppsLoader'] ?? self::getActiveAppsLoaderService($container)), $c, $d, new \Shopware\Core\Framework\App\Payment\PaymentMethodStateService($e), $f, $g, $h);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\AppUrlChangeResolver\MoveShopPermanentlyStrategy' shared service.
     *
     * @return \Shopware\Core\Framework\App\AppUrlChangeResolver\MoveShopPermanentlyStrategy
     */
    protected static function getMoveShopPermanentlyStrategyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/AppUrlChangeResolver/AbstractAppUrlChangeStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/AppUrlChangeResolver/MoveShopPermanentlyStrategy.php';

        return $container->privates['Shopware\\Core\\Framework\\App\\AppUrlChangeResolver\\MoveShopPermanentlyStrategy'] = new \Shopware\Core\Framework\App\AppUrlChangeResolver\MoveShopPermanentlyStrategy(($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] ?? self::getAppLoaderService($container)), ($container->services['app.repository'] ?? self::getApp_RepositoryService($container)), ($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Registration\\AppRegistrationService'] ?? self::getAppRegistrationServiceService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\AppUrlChangeResolver\ReinstallAppsStrategy' shared service.
     *
     * @return \Shopware\Core\Framework\App\AppUrlChangeResolver\ReinstallAppsStrategy
     */
    protected static function getReinstallAppsStrategyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/AppUrlChangeResolver/AbstractAppUrlChangeStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/AppUrlChangeResolver/ReinstallAppsStrategy.php';

        return $container->privates['Shopware\\Core\\Framework\\App\\AppUrlChangeResolver\\ReinstallAppsStrategy'] = new \Shopware\Core\Framework\App\AppUrlChangeResolver\ReinstallAppsStrategy(($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] ?? self::getAppLoaderService($container)), ($container->services['app.repository'] ?? self::getApp_RepositoryService($container)), ($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Registration\\AppRegistrationService'] ?? self::getAppRegistrationServiceService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\AppUrlChangeResolver\UninstallAppsStrategy' shared service.
     *
     * @return \Shopware\Core\Framework\App\AppUrlChangeResolver\UninstallAppsStrategy
     */
    protected static function getUninstallAppsStrategyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/AppUrlChangeResolver/AbstractAppUrlChangeStrategy.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/AppUrlChangeResolver/UninstallAppsStrategy.php';

        return $container->privates['Shopware\\Core\\Framework\\App\\AppUrlChangeResolver\\UninstallAppsStrategy'] = new \Shopware\Core\Framework\App\AppUrlChangeResolver\UninstallAppsStrategy(($container->services['app.repository'] ?? self::getApp_RepositoryService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->privates['Shopware\\Storefront\\Theme\\ThemeAppLifecycleHandler'] ?? self::getThemeAppLifecycleHandlerService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Command\ActivateAppCommand' shared service.
     *
     * @return \Shopware\Core\Framework\App\Command\ActivateAppCommand
     */
    protected static function getActivateAppCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Command/AbstractAppActivationCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Command/ActivateAppCommand.php';

        $container->privates['Shopware\\Core\\Framework\\App\\Command\\ActivateAppCommand'] = $instance = new \Shopware\Core\Framework\App\Command\ActivateAppCommand(($container->services['app.repository'] ?? self::getApp_RepositoryService($container)), ($container->privates['Shopware\\Core\\Framework\\App\\AppStateService'] ?? self::getAppStateServiceService($container)));

        $instance->setName('app:activate');
        $instance->setDescription('Activates an app');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Command\AppPrinter' shared service.
     *
     * @return \Shopware\Core\Framework\App\Command\AppPrinter
     */
    protected static function getAppPrinterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Command/AppPrinter.php';

        return $container->privates['Shopware\\Core\\Framework\\App\\Command\\AppPrinter'] = new \Shopware\Core\Framework\App\Command\AppPrinter(($container->services['app.repository'] ?? self::getApp_RepositoryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Command\CreateAppCommand' shared service.
     *
     * @return \Shopware\Core\Framework\App\Command\CreateAppCommand
     */
    protected static function getCreateAppCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Command/CreateAppCommand.php';

        $container->privates['Shopware\\Core\\Framework\\App\\Command\\CreateAppCommand'] = $instance = new \Shopware\Core\Framework\App\Command\CreateAppCommand(($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'] ?? self::getAppLifecycleService($container)), (\dirname(__DIR__, 4).'/custom/apps'));

        $instance->setName('app:create');
        $instance->setDescription('Creates an app skeleton');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Command\DeactivateAppCommand' shared service.
     *
     * @return \Shopware\Core\Framework\App\Command\DeactivateAppCommand
     */
    protected static function getDeactivateAppCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Command/AbstractAppActivationCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Command/DeactivateAppCommand.php';

        $container->privates['Shopware\\Core\\Framework\\App\\Command\\DeactivateAppCommand'] = $instance = new \Shopware\Core\Framework\App\Command\DeactivateAppCommand(($container->services['app.repository'] ?? self::getApp_RepositoryService($container)), ($container->privates['Shopware\\Core\\Framework\\App\\AppStateService'] ?? self::getAppStateServiceService($container)));

        $instance->setName('app:deactivate');
        $instance->setDescription('Deactivates an app');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Command\InstallAppCommand' shared service.
     *
     * @return \Shopware\Core\Framework\App\Command\InstallAppCommand
     */
    protected static function getInstallAppCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Command/InstallAppCommand.php';

        $container->privates['Shopware\\Core\\Framework\\App\\Command\\InstallAppCommand'] = $instance = new \Shopware\Core\Framework\App\Command\InstallAppCommand(($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] ?? self::getAppLoaderService($container)), ($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'] ?? self::getAppLifecycleService($container)), ($container->privates['Shopware\\Core\\Framework\\App\\Command\\AppPrinter'] ?? self::getAppPrinterService($container)), ($container->privates['Shopware\\Core\\Framework\\App\\Validation\\ManifestValidator'] ?? self::getManifestValidatorService($container)));

        $instance->setName('app:install');
        $instance->setDescription('Installs an app');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Command\RefreshAppCommand' shared service.
     *
     * @return \Shopware\Core\Framework\App\Command\RefreshAppCommand
     */
    protected static function getRefreshAppCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Command/RefreshAppCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/AppService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/AppLifecycleIterator.php';

        $a = ($container->services['app.repository'] ?? self::getApp_RepositoryService($container));

        $container->privates['Shopware\\Core\\Framework\\App\\Command\\RefreshAppCommand'] = $instance = new \Shopware\Core\Framework\App\Command\RefreshAppCommand(new \Shopware\Core\Framework\App\AppService(new \Shopware\Core\Framework\App\Lifecycle\AppLifecycleIterator($a, ($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] ?? self::getAppLoaderService($container))), ($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'] ?? self::getAppLifecycleService($container))), ($container->privates['Shopware\\Core\\Framework\\App\\Command\\AppPrinter'] ?? self::getAppPrinterService($container)), ($container->privates['Shopware\\Core\\Framework\\App\\Validation\\ManifestValidator'] ?? self::getManifestValidatorService($container)), ($container->privates['Shopware\\Core\\Framework\\App\\Delta\\AppConfirmationDeltaProvider'] ?? self::getAppConfirmationDeltaProviderService($container)), $a);

        $instance->setName('app:refresh');
        $instance->setAliases(['app:update']);
        $instance->setDescription('Refreshes an app');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Command\ResolveAppUrlChangeCommand' shared service.
     *
     * @return \Shopware\Core\Framework\App\Command\ResolveAppUrlChangeCommand
     */
    protected static function getResolveAppUrlChangeCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Command/ResolveAppUrlChangeCommand.php';

        $container->privates['Shopware\\Core\\Framework\\App\\Command\\ResolveAppUrlChangeCommand'] = $instance = new \Shopware\Core\Framework\App\Command\ResolveAppUrlChangeCommand(($container->services['Shopware\\Core\\Framework\\App\\AppUrlChangeResolver\\Resolver'] ?? self::getResolverService($container)));

        $instance->setName('app:url-change:resolve');
        $instance->setDescription('Resolves app url changes');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Command\UninstallAppCommand' shared service.
     *
     * @return \Shopware\Core\Framework\App\Command\UninstallAppCommand
     */
    protected static function getUninstallAppCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Command/UninstallAppCommand.php';

        $container->privates['Shopware\\Core\\Framework\\App\\Command\\UninstallAppCommand'] = $instance = new \Shopware\Core\Framework\App\Command\UninstallAppCommand(($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'] ?? self::getAppLifecycleService($container)), ($container->services['app.repository'] ?? self::getApp_RepositoryService($container)));

        $instance->setName('app:uninstall');
        $instance->setDescription('Uninstalls an app');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Command\ValidateAppCommand' shared service.
     *
     * @return \Shopware\Core\Framework\App\Command\ValidateAppCommand
     */
    protected static function getValidateAppCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Command/ValidateAppCommand.php';

        $container->privates['Shopware\\Core\\Framework\\App\\Command\\ValidateAppCommand'] = $instance = new \Shopware\Core\Framework\App\Command\ValidateAppCommand((\dirname(__DIR__, 4).'/custom/apps'), ($container->privates['Shopware\\Core\\Framework\\App\\Validation\\ManifestValidator'] ?? self::getManifestValidatorService($container)));

        $instance->setName('app:validate');
        $instance->setDescription('Validates an app');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Delta\AppConfirmationDeltaProvider' shared service.
     *
     * @return \Shopware\Core\Framework\App\Delta\AppConfirmationDeltaProvider
     */
    protected static function getAppConfirmationDeltaProviderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Delta/AppConfirmationDeltaProvider.php';

        return $container->privates['Shopware\\Core\\Framework\\App\\Delta\\AppConfirmationDeltaProvider'] = new \Shopware\Core\Framework\App\Delta\AppConfirmationDeltaProvider(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Framework\\App\\Delta\\PermissionsDeltaProvider'] ??= new \Shopware\Core\Framework\App\Delta\PermissionsDeltaProvider());
            yield 1 => ($container->privates['Shopware\\Core\\Framework\\App\\Delta\\DomainsDeltaProvider'] ??= new \Shopware\Core\Framework\App\Delta\DomainsDeltaProvider());
        }, 2));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Hmac\QuerySigner' shared service.
     *
     * @return \Shopware\Core\Framework\App\Hmac\QuerySigner
     */
    protected static function getQuerySignerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Hmac/QuerySigner.php';

        return $container->privates['Shopware\\Core\\Framework\\App\\Hmac\\QuerySigner'] = new \Shopware\Core\Framework\App\Hmac\QuerySigner($container->getEnv('APP_URL'), '6.5.7.3', ($container->privates['Shopware\\Core\\Framework\\Store\\Authentication\\LocaleProvider'] ?? self::getLocaleProviderService($container)), ($container->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'] ?? self::getShopIdProviderService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Lifecycle\AppLifecycle' shared service.
     *
     * @return \Shopware\Core\Framework\App\Lifecycle\AppLifecycle
     */
    protected static function getAppLifecycleService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/AbstractAppLifecycle.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/AppLifecycle.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Persister/PermissionPersister.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Persister/CustomFieldPersister.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Persister/ActionButtonPersister.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Persister/TemplatePersister.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Template/AbstractTemplateLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/App/Template/IconTemplateLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Template/TemplateLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Persister/WebhookPersister.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Persister/PaymentMethodPersister.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Persister/TaxProviderPersister.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Persister/CmsBlockPersister.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Cms/AbstractBlockTemplateLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Cms/BlockTemplateLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Persister/FlowActionPersister.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/administration/Snippet/AppAdministrationSnippetPersister.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Persister/ShippingMethodPersister.php';

        $a = ($container->services['app.repository'] ?? self::getApp_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $b = ($container->services['custom_field_set.repository'] ?? self::getCustomFieldSet_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $c = ($container->services['app_action_button.repository'] ?? self::getAppActionButton_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $d = ($container->services['app_template.repository'] ?? self::getAppTemplate_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $e = ($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\ScriptPersister'] ?? self::getScriptPersisterService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $f = ($container->services['webhook.repository'] ?? self::getWebhook_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $g = ($container->services['payment_method.repository'] ?? self::getPaymentMethod_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $h = ($container->privates['Shopware\\Core\\Content\\Media\\MediaService'] ?? self::getMediaServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $i = ($container->services['tax_provider.repository'] ?? self::getTaxProvider_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $j = ($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\RuleConditionPersister'] ?? self::getRuleConditionPersisterService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $k = ($container->services['app_cms_block.repository'] ?? self::getAppCmsBlock_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $l = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $m = ($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Registration\\AppRegistrationService'] ?? self::getAppRegistrationServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $n = ($container->privates['Shopware\\Core\\Framework\\App\\AppStateService'] ?? self::getAppStateServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $o = ($container->services['language.repository'] ?? self::getLanguage_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $p = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $q = ($container->services['integration.repository'] ?? self::getIntegration_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $r = ($container->services['acl_role.repository'] ?? self::getAclRole_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $s = ($container->privates['Shopware\\Core\\Framework\\Plugin\\Util\\AssetService'] ?? self::getAssetServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $t = ($container->services['app_flow_action.repository'] ?? self::getAppFlowAction_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $u = ($container->services['app_administration_snippet.repository'] ?? self::getAppAdministrationSnippet_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $v = ($container->services['locale.repository'] ?? self::getLocale_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $w = ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] ?? self::getCacheInvalidatorService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $x = ($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\FlowEventPersister'] ?? self::getFlowEventPersisterService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $y = ($container->services['shipping_method.repository'] ?? self::getShippingMethod_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $z = ($container->services['app_shipping_method.repository'] ?? self::getAppShippingMethod_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $aa = ($container->services['rule.repository'] ?? self::getRule_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $ba = ($container->services['media.repository'] ?? self::getMedia_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $ca = ($container->services['custom_entity.repository'] ?? self::getCustomEntity_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'];
        }
        $da = ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container));
        $ea = ($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] ?? self::getAppLoaderService($container));

        return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'] = new \Shopware\Core\Framework\App\Lifecycle\AppLifecycle($a, new \Shopware\Core\Framework\App\Lifecycle\Persister\PermissionPersister($da), new \Shopware\Core\Framework\App\Lifecycle\Persister\CustomFieldPersister($b), new \Shopware\Core\Framework\App\Lifecycle\Persister\ActionButtonPersister($c), new \Shopware\Core\Framework\App\Lifecycle\Persister\TemplatePersister(new \Shopware\Storefront\Framework\App\Template\IconTemplateLoader(new \Shopware\Core\Framework\App\Template\TemplateLoader($ea), ($container->privates['Shopware\\Storefront\\Theme\\StorefrontPluginConfiguration\\StorefrontPluginConfigurationFactory'] ??= new \Shopware\Storefront\Theme\StorefrontPluginConfiguration\StorefrontPluginConfigurationFactory(\dirname(__DIR__, 4))), $ea, \dirname(__DIR__, 4)), $d, $a), $e, new \Shopware\Core\Framework\App\Lifecycle\Persister\WebhookPersister($f), new \Shopware\Core\Framework\App\Lifecycle\Persister\PaymentMethodPersister($g, $h, $ea), new \Shopware\Core\Framework\App\Lifecycle\Persister\TaxProviderPersister($i), $j, new \Shopware\Core\Framework\App\Lifecycle\Persister\CmsBlockPersister($k, new \Shopware\Core\Framework\App\Cms\BlockTemplateLoader(), ($container->services['Shopware\\Core\\Framework\\Util\\HtmlSanitizer'] ?? self::getHtmlSanitizerService($container))), $ea, $l, $m, $n, $o, $p, ($container->privates['Shopware\\Core\\Framework\\App\\Validation\\ConfigValidator'] ?? self::getConfigValidatorService($container)), $q, $r, $s, ($container->services['Shopware\\Core\\Framework\\Script\\Execution\\ScriptExecutor'] ?? self::getScriptExecutorService($container)), \dirname(__DIR__, 4), $da, new \Shopware\Core\Framework\App\Lifecycle\Persister\FlowActionPersister($t, $ea, $da), new \Shopware\Administration\Snippet\AppAdministrationSnippetPersister($u, $v, $w), ($container->services['Shopware\\Core\\System\\CustomEntity\\Schema\\CustomEntitySchemaUpdater'] ?? self::getCustomEntitySchemaUpdaterService($container)), ($container->privates['Shopware\\Core\\System\\CustomEntity\\CustomEntityLifecycleService'] ?? self::getCustomEntityLifecycleServiceService($container)), '6.5.7.3', $x, 'dev', new \Shopware\Core\Framework\App\Lifecycle\Persister\ShippingMethodPersister($y, $z, $aa, $ba, $h, $ea), $ca);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Lifecycle\AppLoader' shared service.
     *
     * @return \Shopware\Core\Framework\App\Lifecycle\AppLoader
     */
    protected static function getAppLoaderService($container)
    {
        return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] = new \Shopware\Core\Framework\App\Lifecycle\AppLoader((\dirname(__DIR__, 4).'/custom/apps'), \dirname(__DIR__, 4), ($container->privates['Shopware\\Core\\System\\SystemConfig\\Util\\ConfigReader'] ??= new \Shopware\Core\System\SystemConfig\Util\ConfigReader()));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Lifecycle\Persister\FlowEventPersister' shared service.
     *
     * @return \Shopware\Core\Framework\App\Lifecycle\Persister\FlowEventPersister
     */
    protected static function getFlowEventPersisterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Persister/FlowEventPersister.php';

        $a = ($container->services['app_flow_event.repository'] ?? self::getAppFlowEvent_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\FlowEventPersister'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\FlowEventPersister'];
        }

        return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\FlowEventPersister'] = new \Shopware\Core\Framework\App\Lifecycle\Persister\FlowEventPersister($a, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Lifecycle\Persister\RuleConditionPersister' shared service.
     *
     * @return \Shopware\Core\Framework\App\Lifecycle\Persister\RuleConditionPersister
     */
    protected static function getRuleConditionPersisterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Persister/RuleConditionPersister.php';

        $a = ($container->services['app_script_condition.repository'] ?? self::getAppScriptCondition_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\RuleConditionPersister'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\RuleConditionPersister'];
        }
        $b = ($container->services['app.repository'] ?? self::getApp_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\RuleConditionPersister'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\RuleConditionPersister'];
        }

        return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\RuleConditionPersister'] = new \Shopware\Core\Framework\App\Lifecycle\Persister\RuleConditionPersister(($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\ScriptFileReader'] ?? self::getScriptFileReaderService($container)), $a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Lifecycle\Persister\ScriptPersister' shared service.
     *
     * @return \Shopware\Core\Framework\App\Lifecycle\Persister\ScriptPersister
     */
    protected static function getScriptPersisterService($container)
    {
        $a = ($container->services['script.repository'] ?? self::getScript_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\ScriptPersister'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\ScriptPersister'];
        }
        $b = ($container->services['app.repository'] ?? self::getApp_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\ScriptPersister'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\ScriptPersister'];
        }

        return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\ScriptPersister'] = new \Shopware\Core\Framework\App\Lifecycle\Persister\ScriptPersister(($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\ScriptFileReader'] ?? self::getScriptFileReaderService($container)), $a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Lifecycle\Registration\AppRegistrationService' shared service.
     *
     * @return \Shopware\Core\Framework\App\Lifecycle\Registration\AppRegistrationService
     */
    protected static function getAppRegistrationServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Registration/AppRegistrationService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Registration/HandshakeFactory.php';

        $a = ($container->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'] ?? self::getShopIdProviderService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Registration\\AppRegistrationService'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Registration\\AppRegistrationService'];
        }
        $b = ($container->privates['shopware.app_system.guzzle'] ?? self::getShopware_AppSystem_GuzzleService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Registration\\AppRegistrationService'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Registration\\AppRegistrationService'];
        }
        $c = ($container->services['app.repository'] ?? self::getApp_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Registration\\AppRegistrationService'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Registration\\AppRegistrationService'];
        }

        return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Registration\\AppRegistrationService'] = new \Shopware\Core\Framework\App\Lifecycle\Registration\AppRegistrationService(new \Shopware\Core\Framework\App\Lifecycle\Registration\HandshakeFactory($container->getEnv('APP_URL'), $a, ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'] ?? self::getStoreClientService($container)), '6.5.7.3'), $b, $c, $container->getEnv('APP_URL'), $a, '6.5.7.3');
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Lifecycle\ScriptFileReader' shared service.
     *
     * @return \Shopware\Core\Framework\App\Lifecycle\ScriptFileReader
     */
    protected static function getScriptFileReaderService($container)
    {
        return $container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\ScriptFileReader'] = new \Shopware\Core\Framework\App\Lifecycle\ScriptFileReader(($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] ?? self::getAppLoaderService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Payment\Handler\AppAsyncPaymentHandler' shared service.
     *
     * @return \Shopware\Core\Framework\App\Payment\Handler\AppAsyncPaymentHandler
     */
    protected static function getAppAsyncPaymentHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/RefundPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PreparedPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/RecurringPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Payment/Handler/AppPaymentHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/AsynchronousPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Payment/Handler/AppAsyncPaymentHandler.php';

        $a = ($container->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'] ?? self::getOrderTransactionStateHandlerService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppAsyncPaymentHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppAsyncPaymentHandler'];
        }
        $b = ($container->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'] ?? self::getStateMachineRegistryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppAsyncPaymentHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppAsyncPaymentHandler'];
        }
        $c = ($container->services['order_transaction_capture_refund.repository'] ?? self::getOrderTransactionCaptureRefund_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppAsyncPaymentHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppAsyncPaymentHandler'];
        }

        return $container->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppAsyncPaymentHandler'] = new \Shopware\Core\Framework\App\Payment\Handler\AppAsyncPaymentHandler($a, $b, ($container->privates['Shopware\\Core\\Framework\\App\\Payment\\Payload\\PaymentPayloadService'] ?? self::getPaymentPayloadServiceService($container)), $c);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Payment\Handler\AppPaymentHandler' shared service.
     *
     * @return \Shopware\Core\Framework\App\Payment\Handler\AppPaymentHandler
     */
    protected static function getAppPaymentHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/RefundPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PreparedPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/RecurringPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Payment/Handler/AppPaymentHandler.php';

        $a = ($container->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'] ?? self::getOrderTransactionStateHandlerService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppPaymentHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppPaymentHandler'];
        }
        $b = ($container->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'] ?? self::getStateMachineRegistryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppPaymentHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppPaymentHandler'];
        }
        $c = ($container->services['order_transaction_capture_refund.repository'] ?? self::getOrderTransactionCaptureRefund_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppPaymentHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppPaymentHandler'];
        }

        return $container->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppPaymentHandler'] = new \Shopware\Core\Framework\App\Payment\Handler\AppPaymentHandler($a, $b, ($container->privates['Shopware\\Core\\Framework\\App\\Payment\\Payload\\PaymentPayloadService'] ?? self::getPaymentPayloadServiceService($container)), $c);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Payment\Handler\AppSyncPaymentHandler' shared service.
     *
     * @return \Shopware\Core\Framework\App\Payment\Handler\AppSyncPaymentHandler
     */
    protected static function getAppSyncPaymentHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/RefundPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/PreparedPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/RecurringPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Payment/Handler/AppPaymentHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Payment/Cart/PaymentHandler/SynchronousPaymentHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Payment/Handler/AppSyncPaymentHandler.php';

        $a = ($container->privates['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionStateHandler'] ?? self::getOrderTransactionStateHandlerService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler'];
        }
        $b = ($container->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'] ?? self::getStateMachineRegistryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler'];
        }
        $c = ($container->privates['Shopware\\Core\\Framework\\App\\Payment\\Payload\\PaymentPayloadService'] ?? self::getPaymentPayloadServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler'];
        }
        $d = ($container->services['order_transaction_capture_refund.repository'] ?? self::getOrderTransactionCaptureRefund_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler'];
        }

        return $container->privates['Shopware\\Core\\Framework\\App\\Payment\\Handler\\AppSyncPaymentHandler'] = new \Shopware\Core\Framework\App\Payment\Handler\AppSyncPaymentHandler($a, $b, $c, $d);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Payment\Payload\PaymentPayloadService' shared service.
     *
     * @return \Shopware\Core\Framework\App\Payment\Payload\PaymentPayloadService
     */
    protected static function getPaymentPayloadServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Payment/Payload/PaymentPayloadService.php';

        $a = ($container->privates['shopware.app_system.guzzle'] ?? self::getShopware_AppSystem_GuzzleService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\Payment\\Payload\\PaymentPayloadService'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\Payment\\Payload\\PaymentPayloadService'];
        }

        return $container->privates['Shopware\\Core\\Framework\\App\\Payment\\Payload\\PaymentPayloadService'] = new \Shopware\Core\Framework\App\Payment\Payload\PaymentPayloadService(($container->privates['Shopware\\Core\\Framework\\App\\AppPayloadServiceHelper'] ?? self::getAppPayloadServiceHelperService($container)), $a, $container->getEnv('APP_URL'));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\ScheduledTask\DeleteCascadeAppsHandler' shared service.
     *
     * @return \Shopware\Core\Framework\App\ScheduledTask\DeleteCascadeAppsHandler
     */
    protected static function getDeleteCascadeAppsHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageSubscriberInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/ScheduledTaskHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ScheduledTask/DeleteCascadeAppsHandler.php';

        $a = ($container->services['scheduled_task.repository'] ?? self::getScheduledTask_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsHandler'];
        }
        $b = ($container->services['acl_role.repository'] ?? self::getAclRole_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsHandler'];
        }
        $c = ($container->services['integration.repository'] ?? self::getIntegration_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsHandler'];
        }

        return $container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsHandler'] = new \Shopware\Core\Framework\App\ScheduledTask\DeleteCascadeAppsHandler($a, $b, $c);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\ScheduledTask\UpdateAppsHandler' shared service.
     *
     * @return \Shopware\Core\Framework\App\ScheduledTask\UpdateAppsHandler
     */
    protected static function getUpdateAppsHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageSubscriberInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/ScheduledTaskHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/ScheduledTask/UpdateAppsHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Update/AbstractAppUpdater.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Lifecycle/Update/AppUpdater.php';

        $a = ($container->services['scheduled_task.repository'] ?? self::getScheduledTask_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'];
        }
        $b = ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'] ?? self::getAbstractExtensionDataProviderService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'];
        }
        $c = ($container->services['app.repository'] ?? self::getApp_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'];
        }
        $d = ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionDownloader'] ?? self::getExtensionDownloaderService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'];
        }
        $e = ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'] ?? self::getAbstractStoreAppLifecycleServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'];
        }

        return $container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'] = new \Shopware\Core\Framework\App\ScheduledTask\UpdateAppsHandler($a, new \Shopware\Core\Framework\App\Lifecycle\Update\AppUpdater($b, $c, $d, $e));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Subscriber\CustomFieldProtectionSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\App\Subscriber\CustomFieldProtectionSubscriber
     */
    protected static function getCustomFieldProtectionSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Subscriber/CustomFieldProtectionSubscriber.php';

        return $container->privates['Shopware\\Core\\Framework\\App\\Subscriber\\CustomFieldProtectionSubscriber'] = new \Shopware\Core\Framework\App\Subscriber\CustomFieldProtectionSubscriber(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Validation\ConfigValidator' shared service.
     *
     * @return \Shopware\Core\Framework\App\Validation\ConfigValidator
     */
    protected static function getConfigValidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Validation/AbstractManifestValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Validation/ConfigValidator.php';

        return $container->privates['Shopware\\Core\\Framework\\App\\Validation\\ConfigValidator'] = new \Shopware\Core\Framework\App\Validation\ConfigValidator(($container->privates['Shopware\\Core\\System\\SystemConfig\\Util\\ConfigReader'] ??= new \Shopware\Core\System\SystemConfig\Util\ConfigReader()));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Validation\HookableValidator' shared service.
     *
     * @return \Shopware\Core\Framework\App\Validation\HookableValidator
     */
    protected static function getHookableValidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Validation/AbstractManifestValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Validation/HookableValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/Hookable/HookableEventCollector.php';

        return $container->privates['Shopware\\Core\\Framework\\App\\Validation\\HookableValidator'] = new \Shopware\Core\Framework\App\Validation\HookableValidator(new \Shopware\Core\Framework\Webhook\Hookable\HookableEventCollector(($container->services['Shopware\\Core\\Framework\\Event\\BusinessEventCollector'] ?? self::getBusinessEventCollectorService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container))));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\App\Validation\ManifestValidator' shared service.
     *
     * @return \Shopware\Core\Framework\App\Validation\ManifestValidator
     */
    protected static function getManifestValidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Validation/ManifestValidator.php';

        return $container->privates['Shopware\\Core\\Framework\\App\\Validation\\ManifestValidator'] = new \Shopware\Core\Framework\App\Validation\ManifestValidator(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Framework\\App\\Validation\\TranslationValidator'] ??= new \Shopware\Core\Framework\App\Validation\TranslationValidator());
            yield 1 => ($container->privates['Shopware\\Core\\Framework\\App\\Validation\\AppNameValidator'] ??= new \Shopware\Core\Framework\App\Validation\AppNameValidator());
            yield 2 => ($container->privates['Shopware\\Core\\Framework\\App\\Validation\\ConfigValidator'] ?? self::getConfigValidatorService($container));
            yield 3 => ($container->privates['Shopware\\Core\\Framework\\App\\Validation\\HookableValidator'] ?? self::getHookableValidatorService($container));
        }, 4));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Changelog\Command\ChangelogChangeCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Changelog\Command\ChangelogChangeCommand
     */
    protected static function getChangelogChangeCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Command/ChangelogChangeCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Processor/ChangelogProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Processor/ChangelogReleaseExporter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/ChangelogParser.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/filesystem/Filesystem.php';

        $container->privates['Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogChangeCommand'] = $instance = new \Shopware\Core\Framework\Changelog\Command\ChangelogChangeCommand(new \Shopware\Core\Framework\Changelog\Processor\ChangelogReleaseExporter(($container->privates['Shopware\\Core\\Framework\\Changelog\\ChangelogParser'] ??= new \Shopware\Core\Framework\Changelog\ChangelogParser()), ($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->privates['filesystem'] ??= new \Symfony\Component\Filesystem\Filesystem()), \dirname(__DIR__, 4), $container->parameters['shopware.feature.flags']));

        $instance->setName('changelog:change');
        $instance->setDescription('Changes the changelog of a release');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Changelog\Command\ChangelogCheckCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Changelog\Command\ChangelogCheckCommand
     */
    protected static function getChangelogCheckCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Command/ChangelogCheckCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Processor/ChangelogProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Processor/ChangelogValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/ChangelogParser.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/filesystem/Filesystem.php';

        $container->privates['Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCheckCommand'] = $instance = new \Shopware\Core\Framework\Changelog\Command\ChangelogCheckCommand(new \Shopware\Core\Framework\Changelog\Processor\ChangelogValidator(($container->privates['Shopware\\Core\\Framework\\Changelog\\ChangelogParser'] ??= new \Shopware\Core\Framework\Changelog\ChangelogParser()), ($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->privates['filesystem'] ??= new \Symfony\Component\Filesystem\Filesystem()), \dirname(__DIR__, 4), $container->parameters['shopware.feature.flags']));

        $instance->setName('changelog:check');
        $instance->setDescription('Checks the changelog for errors');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Changelog\Command\ChangelogCreateCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Changelog\Command\ChangelogCreateCommand
     */
    protected static function getChangelogCreateCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Command/ChangelogCreateCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Processor/ChangelogProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Processor/ChangelogGenerator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/ChangelogParser.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/filesystem/Filesystem.php';

        $container->privates['Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogCreateCommand'] = $instance = new \Shopware\Core\Framework\Changelog\Command\ChangelogCreateCommand(new \Shopware\Core\Framework\Changelog\Processor\ChangelogGenerator(($container->privates['Shopware\\Core\\Framework\\Changelog\\ChangelogParser'] ??= new \Shopware\Core\Framework\Changelog\ChangelogParser()), ($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->privates['filesystem'] ??= new \Symfony\Component\Filesystem\Filesystem()), \dirname(__DIR__, 4), $container->parameters['shopware.feature.flags']));

        $instance->setName('changelog:create');
        $instance->setDescription('Creates a changelog file');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Changelog\Command\ChangelogReleaseCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Changelog\Command\ChangelogReleaseCommand
     */
    protected static function getChangelogReleaseCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Command/ChangelogReleaseCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Processor/ChangelogProcessor.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/Processor/ChangelogReleaseCreator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Changelog/ChangelogParser.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/filesystem/Filesystem.php';

        $container->privates['Shopware\\Core\\Framework\\Changelog\\Command\\ChangelogReleaseCommand'] = $instance = new \Shopware\Core\Framework\Changelog\Command\ChangelogReleaseCommand(new \Shopware\Core\Framework\Changelog\Processor\ChangelogReleaseCreator(($container->privates['Shopware\\Core\\Framework\\Changelog\\ChangelogParser'] ??= new \Shopware\Core\Framework\Changelog\ChangelogParser()), ($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->privates['filesystem'] ??= new \Symfony\Component\Filesystem\Filesystem()), \dirname(__DIR__, 4), $container->parameters['shopware.feature.flags']));

        $instance->setName('changelog:release');
        $instance->setDescription('Creates a new changelog release');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Command\CreateEntitiesCommand' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Command\CreateEntitiesCommand
     */
    protected static function getCreateEntitiesCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Command/CreateEntitiesCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/EntityGenerator.php';

        $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateEntitiesCommand'] = $instance = new \Shopware\Core\Framework\DataAbstractionLayer\Command\CreateEntitiesCommand(new \Shopware\Core\Framework\DataAbstractionLayer\EntityGenerator(), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), \dirname(__DIR__, 4));

        $instance->setName('dal:create:entities');
        $instance->setDescription('Creates the entity classes');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Command\CreateHydratorCommand' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Command\CreateHydratorCommand
     */
    protected static function getCreateHydratorCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Command/CreateHydratorCommand.php';

        $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateHydratorCommand'] = $instance = new \Shopware\Core\Framework\DataAbstractionLayer\Command\CreateHydratorCommand(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), \dirname(__DIR__, 4));

        $instance->setName('dal:create:hydrators');
        $instance->setDescription('Creates the hydrator classes');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Command\CreateSchemaCommand' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Command\CreateSchemaCommand
     */
    protected static function getCreateSchemaCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Command/CreateSchemaCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/SchemaGenerator.php';

        $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\CreateSchemaCommand'] = $instance = new \Shopware\Core\Framework\DataAbstractionLayer\Command\CreateSchemaCommand(new \Shopware\Core\Framework\DataAbstractionLayer\SchemaGenerator(), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), \dirname(__DIR__, 4));

        $instance->setName('dal:create:schema');
        $instance->setDescription('Creates the database schema');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Command\DataAbstractionLayerValidateCommand' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Command\DataAbstractionLayerValidateCommand
     */
    protected static function getDataAbstractionLayerValidateCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Command/DataAbstractionLayerValidateCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/DefinitionValidator.php';

        $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\DataAbstractionLayerValidateCommand'] = $instance = new \Shopware\Core\Framework\DataAbstractionLayer\Command\DataAbstractionLayerValidateCommand(new \Shopware\Core\Framework\DataAbstractionLayer\DefinitionValidator(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container))));

        $instance->setName('dal:validate');
        $instance->setDescription('Validates the DAL definitions');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Command\RefreshIndexCommand' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Command\RefreshIndexCommand
     */
    protected static function getRefreshIndexCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Command/ConsoleProgressTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Command/RefreshIndexCommand.php';

        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'] ?? self::getEntityIndexerRegistryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand'])) {
            return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand'])) {
            return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand'];
        }

        $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Command\\RefreshIndexCommand'] = $instance = new \Shopware\Core\Framework\DataAbstractionLayer\Command\RefreshIndexCommand($a, $b);

        $instance->setName('dal:refresh:index');
        $instance->setDescription('Refreshes the index for a given entity');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\Common\IteratorFactory' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\Common\IteratorFactory
     */
    protected static function getIteratorFactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Dbal/Common/IteratorFactory.php';

        return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\Common\IteratorFactory(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Dbal\CriteriaQueryBuilder' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Dbal\CriteriaQueryBuilder
     */
    protected static function getCriteriaQueryBuilderService($container)
    {
        $a = ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Parser\\SqlQueryParser'] ?? self::getSqlQueryParserService($container));

        return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\CriteriaQueryBuilder'] = new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\CriteriaQueryBuilder($a, ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityDefinitionQueryHelper()), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\SearchTermInterpreter'] ?? self::getSearchTermInterpreterService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\EntityScoreQueryBuilder'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Search\Term\EntityScoreQueryBuilder()), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\JoinGroupBuilder'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\JoinGroupBuilder()), new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\FieldResolver\CriteriaPartResolver(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $a));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Facade\AppContextCreator' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Facade\AppContextCreator
     */
    protected static function getAppContextCreatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Facade/AppContextCreator.php';

        return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Facade\\AppContextCreator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Facade\AppContextCreator(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Indexing\ChildCountUpdater' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Indexing\ChildCountUpdater
     */
    protected static function getChildCountUpdaterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/ChildCountUpdater.php';

        return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\ChildCountUpdater'] = new \Shopware\Core\Framework\DataAbstractionLayer\Indexing\ChildCountUpdater(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Indexing\InheritanceUpdater' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Indexing\InheritanceUpdater
     */
    protected static function getInheritanceUpdaterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/InheritanceUpdater.php';

        return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\InheritanceUpdater'] = new \Shopware\Core\Framework\DataAbstractionLayer\Indexing\InheritanceUpdater(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Indexing\ManyToManyIdFieldUpdater' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Indexing\ManyToManyIdFieldUpdater
     */
    protected static function getManyToManyIdFieldUpdaterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/ManyToManyIdFieldUpdater.php';

        return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\ManyToManyIdFieldUpdater'] = new \Shopware\Core\Framework\DataAbstractionLayer\Indexing\ManyToManyIdFieldUpdater(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Indexing\Subscriber\EntityIndexingSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Indexing\Subscriber\EntityIndexingSubscriber
     */
    protected static function getEntityIndexingSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/Subscriber/EntityIndexingSubscriber.php';

        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'] ?? self::getEntityIndexerRegistryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\Subscriber\\EntityIndexingSubscriber'])) {
            return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\Subscriber\\EntityIndexingSubscriber'];
        }

        return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\Subscriber\\EntityIndexingSubscriber'] = new \Shopware\Core\Framework\DataAbstractionLayer\Indexing\Subscriber\EntityIndexingSubscriber($a);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Indexing\Subscriber\RegisteredIndexerSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Indexing\Subscriber\RegisteredIndexerSubscriber
     */
    protected static function getRegisteredIndexerSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/Subscriber/RegisteredIndexerSubscriber.php';

        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'] ?? self::getEntityIndexerRegistryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\Subscriber\\RegisteredIndexerSubscriber'])) {
            return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\Subscriber\\RegisteredIndexerSubscriber'];
        }

        return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\Subscriber\\RegisteredIndexerSubscriber'] = new \Shopware\Core\Framework\DataAbstractionLayer\Indexing\Subscriber\RegisteredIndexerSubscriber(($container->services['Shopware\\Core\\Framework\\Migration\\IndexerQueuer'] ?? self::getIndexerQueuerService($container)), $a);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Indexing\TreeUpdater' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Indexing\TreeUpdater
     */
    protected static function getTreeUpdaterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/TreeUpdater.php';

        return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\TreeUpdater'] = new \Shopware\Core\Framework\DataAbstractionLayer\Indexing\TreeUpdater(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Search\ApiCriteriaValidator' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Search\ApiCriteriaValidator
     */
    protected static function getApiCriteriaValidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/ApiCriteriaValidator.php';

        return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\ApiCriteriaValidator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Search\ApiCriteriaValidator(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Search\CriteriaArrayConverter' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Search\CriteriaArrayConverter
     */
    protected static function getCriteriaArrayConverterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/CriteriaArrayConverter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/Parser/AggregationParser.php';

        return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\CriteriaArrayConverter'] = new \Shopware\Core\Framework\DataAbstractionLayer\Search\CriteriaArrayConverter(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Parser\\AggregationParser'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Search\Parser\AggregationParser()));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Search\Parser\SqlQueryParser' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Search\Parser\SqlQueryParser
     */
    protected static function getSqlQueryParserService($container)
    {
        return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Parser\\SqlQueryParser'] = new \Shopware\Core\Framework\DataAbstractionLayer\Search\Parser\SqlQueryParser(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityDefinitionQueryHelper()), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Search\RequestCriteriaBuilder' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Search\RequestCriteriaBuilder
     */
    protected static function getRequestCriteriaBuilderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/RequestCriteriaBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/Parser/AggregationParser.php';

        return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\RequestCriteriaBuilder'] = new \Shopware\Core\Framework\DataAbstractionLayer\Search\RequestCriteriaBuilder(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Parser\\AggregationParser'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Search\Parser\AggregationParser()), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\ApiCriteriaValidator'] ?? self::getApiCriteriaValidatorService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\CriteriaArrayConverter'] ?? self::getCriteriaArrayConverterService($container)), 100);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Search\Term\Filter\TokenFilter' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Search\Term\Filter\TokenFilter
     */
    protected static function getTokenFilterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/Term/Filter/AbstractTokenFilter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/Term/Filter/TokenFilter.php';

        return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Filter\\TokenFilter'] = new \Shopware\Core\Framework\DataAbstractionLayer\Search\Term\Filter\TokenFilter(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Search\Term\SearchTermInterpreter' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Search\Term\SearchTermInterpreter
     */
    protected static function getSearchTermInterpreterService($container)
    {
        return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\SearchTermInterpreter'] = new \Shopware\Core\Framework\DataAbstractionLayer\Search\Term\SearchTermInterpreter(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Tokenizer'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Search\Term\Tokenizer($container->getEnv('int:SHOPWARE_DBAL_TOKEN_MINIMUM_LENGTH'))));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Validation\EntityExistsValidator' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Validation\EntityExistsValidator
     */
    protected static function getEntityExistsValidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Validation/EntityExistsValidator.php';

        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityExistsValidator'])) {
            return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityExistsValidator'];
        }

        return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityExistsValidator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Validation\EntityExistsValidator(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), $a);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Validation\EntityNotExistsValidator' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Validation\EntityNotExistsValidator
     */
    protected static function getEntityNotExistsValidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Validation/EntityNotExistsValidator.php';

        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\EntitySearcherInterface'] ?? self::getEntitySearcherInterfaceService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityNotExistsValidator'])) {
            return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityNotExistsValidator'];
        }

        return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityNotExistsValidator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Validation\EntityNotExistsValidator(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), $a);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Version\Cleanup\CleanupVersionTaskHandler' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Version\Cleanup\CleanupVersionTaskHandler
     */
    protected static function getCleanupVersionTaskHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageSubscriberInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/ScheduledTaskHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Version/Cleanup/CleanupVersionTaskHandler.php';

        $a = ($container->services['scheduled_task.repository'] ?? self::getScheduledTask_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Cleanup\\CleanupVersionTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Cleanup\\CleanupVersionTaskHandler'];
        }

        return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Cleanup\\CleanupVersionTaskHandler'] = new \Shopware\Core\Framework\DataAbstractionLayer\Version\Cleanup\CleanupVersionTaskHandler($a, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), 30);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Write\Validation\LockValidator' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Write\Validation\LockValidator
     */
    protected static function getLockValidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Write/Validation/LockValidator.php';

        return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\LockValidator'] = new \Shopware\Core\Framework\DataAbstractionLayer\Write\Validation\LockValidator(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\DataAbstractionLayer\Write\WriteCommandExtractor' shared service.
     *
     * @return \Shopware\Core\Framework\DataAbstractionLayer\Write\WriteCommandExtractor
     */
    protected static function getWriteCommandExtractorService($container)
    {
        $a = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriteGatewayInterface'] ?? self::getEntityWriteGatewayInterfaceService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\WriteCommandExtractor'])) {
            return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\WriteCommandExtractor'];
        }

        return $container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\WriteCommandExtractor'] = new \Shopware\Core\Framework\DataAbstractionLayer\Write\WriteCommandExtractor($a);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Demodata\Command\DemodataCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Command\DemodataCommand
     */
    protected static function getDemodataCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Command/DemodataCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataService.php';

        $container->privates['Shopware\\Core\\Framework\\Demodata\\Command\\DemodataCommand'] = $instance = new \Shopware\Core\Framework\Demodata\Command\DemodataCommand(new \Shopware\Core\Framework\Demodata\DemodataService(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\RuleGenerator'] ?? self::getRuleGeneratorService($container));
            yield 1 => ($container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\CustomerGenerator'] ?? self::getCustomerGeneratorService($container));
            yield 2 => ($container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\PropertyGroupGenerator'] ?? self::getPropertyGroupGeneratorService($container));
            yield 3 => ($container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\CategoryGenerator'] ?? self::getCategoryGeneratorService($container));
            yield 4 => ($container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\ProductManufacturerGenerator'] ?? self::getProductManufacturerGeneratorService($container));
            yield 5 => ($container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\TagGenerator'] ?? self::getTagGeneratorService($container));
            yield 6 => ($container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\ProductReviewGenerator'] ?? self::getProductReviewGeneratorService($container));
            yield 7 => ($container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\ProductGenerator'] ?? self::getProductGeneratorService($container));
            yield 8 => ($container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\PromotionGenerator'] ?? self::getPromotionGeneratorService($container));
            yield 9 => ($container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\FlowGenerator'] ?? self::getFlowGeneratorService($container));
            yield 10 => ($container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\MediaGenerator'] ?? self::getMediaGeneratorService($container));
            yield 11 => ($container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\ProductStreamGenerator'] ?? self::getProductStreamGeneratorService($container));
            yield 12 => ($container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\OrderGenerator'] ?? self::getOrderGeneratorService($container));
            yield 13 => ($container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\CustomFieldGenerator'] ?? self::getCustomFieldGeneratorService($container));
            yield 14 => ($container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\MailTemplateGenerator'] ?? self::getMailTemplateGeneratorService($container));
            yield 15 => ($container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\MailHeaderFooterGenerator'] ?? self::getMailHeaderFooterGeneratorService($container));
            yield 16 => ($container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\UserGenerator'] ?? self::getUserGeneratorService($container));
        }, 17), \dirname(__DIR__, 4), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container))), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), 'dev');

        $instance->addDefault('rules', 25);
        $instance->addOption('rules', NULL, 4, 'Rules count');
        $instance->addDefault('customers', 60);
        $instance->addOption('customers', NULL, 4, 'Customers count');
        $instance->addDefault('properties', 10);
        $instance->addOption('properties', NULL, 4, 'Property group count (option count rand(30-300))');
        $instance->addDefault('categories', 10);
        $instance->addOption('categories', NULL, 4, 'Categories count');
        $instance->addDefault('manufacturers', 60);
        $instance->addOption('manufacturers', NULL, 4, 'Manufacturers count');
        $instance->addDefault('tags', 50);
        $instance->addOption('tags', NULL, 4, 'Tags count');
        $instance->addDefault('reviews', 20);
        $instance->addOption('reviews', NULL, 4, 'Reviews count');
        $instance->addDefault('products', 1000);
        $instance->addOption('products', NULL, 4, 'Products count');
        $instance->addDefault('promotions', 50);
        $instance->addOption('promotions', NULL, 4, 'Promotions count');
        $instance->addDefault('flows', 0);
        $instance->addOption('flows', NULL, 4, 'Flows count');
        $instance->addDefault('media', 300);
        $instance->addOption('media', NULL, 4, 'Media count');
        $instance->addDefault('product-streams', 10);
        $instance->addOption('product-streams', NULL, 4, 'Product-streams count');
        $instance->addDefault('orders', 60);
        $instance->addOption('orders', NULL, 4, 'Orders count');
        $instance->addDefault('attribute-sets', 4);
        $instance->addOption('attribute-sets', NULL, 4, 'CustomField set count');
        $instance->addDefault('mail-template', 10);
        $instance->addOption('mail-template', NULL, 4, 'Mail-template count');
        $instance->addDefault('mail-header-footer', 3);
        $instance->addOption('mail-header-footer', NULL, 4, 'Mail header/footer count');
        $instance->addDefault('users', 0);
        $instance->addOption('users', NULL, 4, 'Users count');
        $instance->setName('framework:demodata');
        $instance->setDescription('Generates demo data');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\CategoryGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\CategoryGenerator
     */
    protected static function getCategoryGeneratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/CategoryGenerator.php';

        return $container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\CategoryGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\CategoryGenerator(($container->services['category.repository'] ?? self::getCategory_RepositoryService($container)), ($container->services['cms_page.repository'] ?? self::getCmsPage_RepositoryService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\CustomFieldGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\CustomFieldGenerator
     */
    protected static function getCustomFieldGeneratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/CustomFieldGenerator.php';

        return $container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\CustomFieldGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\CustomFieldGenerator(($container->services['custom_field_set.repository'] ?? self::getCustomFieldSet_RepositoryService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\CustomerGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\CustomerGenerator
     */
    protected static function getCustomerGeneratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/CustomerGenerator.php';

        return $container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\CustomerGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\CustomerGenerator(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? self::getEntityWriterService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['customer_group.repository'] ?? self::getCustomerGroup_RepositoryService($container)), ($container->services['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\NumberRangeValueGeneratorInterface'] ?? self::getNumberRangeValueGeneratorInterfaceService($container)), ($container->services['Shopware\\Core\\Checkout\\Customer\\CustomerDefinition'] ?? self::getCustomerDefinitionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\FlowGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\FlowGenerator
     */
    protected static function getFlowGeneratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/FlowGenerator.php';

        return $container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\FlowGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\FlowGenerator(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->services['Shopware\\Core\\Framework\\Event\\BusinessEventCollector'] ?? self::getBusinessEventCollectorService($container)), ($container->privates['Shopware\\Core\\Content\\Flow\\Api\\FlowActionCollector'] ?? self::getFlowActionCollectorService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\MailHeaderFooterGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\MailHeaderFooterGenerator
     */
    protected static function getMailHeaderFooterGeneratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/MailHeaderFooterGenerator.php';

        return $container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\MailHeaderFooterGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\MailHeaderFooterGenerator(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? self::getEntityWriterService($container)), ($container->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooter\\MailHeaderFooterDefinition'] ?? self::getMailHeaderFooterDefinitionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\MailTemplateGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\MailTemplateGenerator
     */
    protected static function getMailTemplateGeneratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/MailTemplateGenerator.php';

        return $container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\MailTemplateGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\MailTemplateGenerator(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? self::getEntityWriterService($container)), ($container->services['mail_template_type.repository'] ?? self::getMailTemplateType_RepositoryService($container)), ($container->services['Shopware\\Core\\Content\\MailTemplate\\MailTemplateDefinition'] ?? self::getMailTemplateDefinitionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\MediaGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\MediaGenerator
     */
    protected static function getMediaGeneratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/MediaGenerator.php';

        return $container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\MediaGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\MediaGenerator(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? self::getEntityWriterService($container)), ($container->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'] ?? self::getFileSaverService($container)), ($container->privates['Shopware\\Core\\Content\\Media\\File\\FileNameProvider'] ?? self::getFileNameProviderService($container)), ($container->services['media_default_folder.repository'] ?? self::getMediaDefaultFolder_RepositoryService($container)), ($container->services['media_folder.repository'] ?? self::getMediaFolder_RepositoryService($container)), ($container->services['Shopware\\Core\\Content\\Media\\MediaDefinition'] ?? self::getMediaDefinitionService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\OrderGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\OrderGenerator
     */
    protected static function getOrderGeneratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/OrderGenerator.php';

        return $container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\OrderGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\OrderGenerator(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? self::getSalesChannelContextFactoryService($container)), ($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? self::getCartServiceService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'] ?? self::getOrderConverterService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? self::getEntityWriterService($container)), ($container->services['Shopware\\Core\\Checkout\\Order\\OrderDefinition'] ?? self::getOrderDefinitionService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartCalculator'] ?? self::getCartCalculatorService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\ProductGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\ProductGenerator
     */
    protected static function getProductGeneratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/ProductGenerator.php';

        return $container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\ProductGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\ProductGenerator(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\InheritanceUpdater'] ?? self::getInheritanceUpdaterService($container)), ($container->privates['Shopware\\Core\\Content\\Product\\DataAbstractionLayer\\StatesUpdater'] ?? self::getStatesUpdaterService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\ProductManufacturerGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\ProductManufacturerGenerator
     */
    protected static function getProductManufacturerGeneratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/ProductManufacturerGenerator.php';

        return $container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\ProductManufacturerGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\ProductManufacturerGenerator(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? self::getEntityWriterService($container)), ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturer\\ProductManufacturerDefinition'] ?? self::getProductManufacturerDefinitionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\ProductReviewGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\ProductReviewGenerator
     */
    protected static function getProductReviewGeneratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/ProductReviewGenerator.php';

        return $container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\ProductReviewGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\ProductReviewGenerator(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? self::getEntityWriterService($container)), ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductReview\\ProductReviewDefinition'] ?? self::getProductReviewDefinitionService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Checkout\\Customer\\Service\\ProductReviewCountService'] ?? self::getProductReviewCountServiceService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\ProductStreamGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\ProductStreamGenerator
     */
    protected static function getProductStreamGeneratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/ProductStreamGenerator.php';

        return $container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\ProductStreamGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\ProductStreamGenerator(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? self::getEntityWriterService($container)), ($container->services['Shopware\\Core\\Content\\ProductStream\\ProductStreamDefinition'] ?? self::getProductStreamDefinitionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\PromotionGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\PromotionGenerator
     */
    protected static function getPromotionGeneratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/PromotionGenerator.php';

        return $container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\PromotionGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\PromotionGenerator(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\PropertyGroupGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\PropertyGroupGenerator
     */
    protected static function getPropertyGroupGeneratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/PropertyGroupGenerator.php';

        return $container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\PropertyGroupGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\PropertyGroupGenerator(($container->services['property_group.repository'] ?? self::getPropertyGroup_RepositoryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\RuleGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\RuleGenerator
     */
    protected static function getRuleGeneratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/RuleGenerator.php';

        return $container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\RuleGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\RuleGenerator(($container->services['rule.repository'] ?? self::getRule_RepositoryService($container)), ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? self::getEntityWriterService($container)), ($container->services['payment_method.repository'] ?? self::getPaymentMethod_RepositoryService($container)), ($container->services['shipping_method.repository'] ?? self::getShippingMethod_RepositoryService($container)), ($container->services['Shopware\\Core\\Content\\Rule\\RuleDefinition'] ?? self::getRuleDefinitionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\TagGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\TagGenerator
     */
    protected static function getTagGeneratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/TagGenerator.php';

        return $container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\TagGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\TagGenerator(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? self::getEntityWriterService($container)), ($container->services['Shopware\\Core\\System\\Tag\\TagDefinition'] ?? self::getTagDefinitionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Demodata\Generator\UserGenerator' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\Generator\UserGenerator
     */
    protected static function getUserGeneratorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/DemodataGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/Generator/UserGenerator.php';

        return $container->privates['Shopware\\Core\\Framework\\Demodata\\Generator\\UserGenerator'] = new \Shopware\Core\Framework\Demodata\Generator\UserGenerator(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\EntityWriter'] ?? self::getEntityWriterService($container)), ($container->services['Shopware\\Core\\System\\User\\UserDefinition'] ?? self::getUserDefinitionService($container)), ($container->services['language.repository'] ?? self::getLanguage_RepositoryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Demodata\PersonalData\CleanPersonalDataCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Demodata\PersonalData\CleanPersonalDataCommand
     */
    protected static function getCleanPersonalDataCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Demodata/PersonalData/CleanPersonalDataCommand.php';

        $container->privates['Shopware\\Core\\Framework\\Demodata\\PersonalData\\CleanPersonalDataCommand'] = $instance = new \Shopware\Core\Framework\Demodata\PersonalData\CleanPersonalDataCommand(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container)));

        $instance->setName('database:clean-personal-data');
        $instance->setDescription('Cleans personal data from the database');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Event\Command\DebugDumpBusinessEventsCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Event\Command\DebugDumpBusinessEventsCommand
     */
    protected static function getDebugDumpBusinessEventsCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Event/Command/DebugDumpBusinessEventsCommand.php';

        $container->privates['Shopware\\Core\\Framework\\Event\\Command\\DebugDumpBusinessEventsCommand'] = $instance = new \Shopware\Core\Framework\Event\Command\DebugDumpBusinessEventsCommand(($container->services['Shopware\\Core\\Framework\\Event\\BusinessEventCollector'] ?? self::getBusinessEventCollectorService($container)));

        $instance->setName('debug:business-events');
        $instance->setDescription('Dumps all business events');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Feature\Command\FeatureDumpCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Feature\Command\FeatureDumpCommand
     */
    protected static function getFeatureDumpCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Feature/Command/FeatureDumpCommand.php';

        $container->privates['Shopware\\Core\\Framework\\Feature\\Command\\FeatureDumpCommand'] = $instance = new \Shopware\Core\Framework\Feature\Command\FeatureDumpCommand(($container->services['kernel'] ?? $container->get('kernel', 1)));

        $instance->setName('feature:dump');
        $instance->setAliases(['administration:dump:features', 'administration:dump:features']);
        $instance->setDescription('Dumps all features');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Log\LoggingService' shared service.
     *
     * @return \Shopware\Core\Framework\Log\LoggingService
     */
    protected static function getLoggingServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Log/LoggingService.php';

        return $container->privates['Shopware\\Core\\Framework\\Log\\LoggingService'] = new \Shopware\Core\Framework\Log\LoggingService('dev', ($container->services['monolog.logger.business_events'] ?? self::getMonolog_Logger_BusinessEventsService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Log\Monolog\ExcludeFlowEventHandler' shared service.
     *
     * @return \Shopware\Core\Framework\Log\Monolog\ExcludeFlowEventHandler
     */
    protected static function getExcludeFlowEventHandlerService($container)
    {
        $a = new \Monolog\Handler\StreamHandler((\dirname(__DIR__, 3).'/log/dev.log'), 100, true, NULL, false);
        $a->pushProcessor(($container->privates['monolog.processor.psr_log_message'] ??= new \Monolog\Processor\PsrLogMessageProcessor()));

        return $container->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] = new \Shopware\Core\Framework\Log\Monolog\ExcludeFlowEventHandler(new \Shopware\Core\Framework\Log\Monolog\ErrorCodeLogLevelHandler(new \Shopware\Core\Framework\Log\Monolog\ExcludeExceptionHandler($a, $container->parameters['shopware.logger.exclude_exception']), $container->parameters['shopware.logger.error_code_log_levels']), $container->parameters['shopware.logger.exclude_events']);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Log\ScheduledTask\LogCleanupTaskHandler' shared service.
     *
     * @return \Shopware\Core\Framework\Log\ScheduledTask\LogCleanupTaskHandler
     */
    protected static function getLogCleanupTaskHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageSubscriberInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/ScheduledTaskHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Log/ScheduledTask/LogCleanupTaskHandler.php';

        $a = ($container->services['scheduled_task.repository'] ?? self::getScheduledTask_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Log\\ScheduledTask\\LogCleanupTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\Log\\ScheduledTask\\LogCleanupTaskHandler'];
        }
        $b = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Log\\ScheduledTask\\LogCleanupTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\Log\\ScheduledTask\\LogCleanupTaskHandler'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Log\\ScheduledTask\\LogCleanupTaskHandler'] = new \Shopware\Core\Framework\Log\ScheduledTask\LogCleanupTaskHandler($a, $b, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\MessageQueue\Command\ListScheduledTaskCommand' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\Command\ListScheduledTaskCommand
     */
    protected static function getListScheduledTaskCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/Command/ListScheduledTaskCommand.php';

        $container->privates['Shopware\\Core\\Framework\\MessageQueue\\Command\\ListScheduledTaskCommand'] = $instance = new \Shopware\Core\Framework\MessageQueue\Command\ListScheduledTaskCommand(($container->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Registry\\TaskRegistry'] ?? self::getTaskRegistryService($container)));

        $instance->setName('scheduled-task:list');
        $instance->setDescription('List all scheduled tasks');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\MessageQueue\Command\RegisterScheduledTasksCommand' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\Command\RegisterScheduledTasksCommand
     */
    protected static function getRegisterScheduledTasksCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/Command/RegisterScheduledTasksCommand.php';

        $container->privates['Shopware\\Core\\Framework\\MessageQueue\\Command\\RegisterScheduledTasksCommand'] = $instance = new \Shopware\Core\Framework\MessageQueue\Command\RegisterScheduledTasksCommand(($container->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Registry\\TaskRegistry'] ?? self::getTaskRegistryService($container)));

        $instance->setName('scheduled-task:register');
        $instance->setDescription('Registers all scheduled tasks');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\MessageQueue\Command\RunSingleScheduledTaskCommand' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\Command\RunSingleScheduledTaskCommand
     */
    protected static function getRunSingleScheduledTaskCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/Command/RunSingleScheduledTaskCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/Scheduler/TaskRunner.php';

        $container->privates['Shopware\\Core\\Framework\\MessageQueue\\Command\\RunSingleScheduledTaskCommand'] = $instance = new \Shopware\Core\Framework\MessageQueue\Command\RunSingleScheduledTaskCommand(new \Shopware\Core\Framework\MessageQueue\ScheduledTask\Scheduler\TaskRunner(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Framework\\Log\\ScheduledTask\\LogCleanupTaskHandler'] ?? self::getLogCleanupTaskHandlerService($container));
            yield 1 => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidateCacheTaskHandler'] ?? self::getInvalidateCacheTaskHandlerService($container));
            yield 2 => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\Message\\CleanupOldCacheFoldersHandler'] ?? self::getCleanupOldCacheFoldersHandlerService($container));
            yield 3 => ($container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler'] ?? self::getUpdateAppsHandlerService($container));
            yield 4 => ($container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsHandler'] ?? self::getDeleteCascadeAppsHandlerService($container));
            yield 5 => ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'] ?? self::getEntityIndexerRegistryService($container));
            yield 6 => ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Cleanup\\CleanupVersionTaskHandler'] ?? self::getCleanupVersionTaskHandlerService($container));
            yield 7 => ($container->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\MessageQueue\\RegisterScheduledTaskHandler'] ?? self::getRegisterScheduledTaskHandlerService($container));
            yield 8 => ($container->privates['Shopware\\Core\\Framework\\Webhook\\Handler\\WebhookEventMessageHandler'] ?? self::getWebhookEventMessageHandlerService($container));
            yield 9 => ($container->privates['Shopware\\Core\\Framework\\Webhook\\ScheduledTask\\CleanupWebhookEventLogTaskHandler'] ?? self::getCleanupWebhookEventLogTaskHandlerService($container));
            yield 10 => ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\Cleanup\\CleanupSalesChannelContextTaskHandler'] ?? self::getCleanupSalesChannelContextTaskHandlerService($container));
            yield 11 => ($container->privates['Shopware\\Core\\System\\UsageData\\EntitySync\\IterateEntityMessageHandler'] ?? self::getIterateEntityMessageHandlerService($container));
            yield 12 => ($container->privates['Shopware\\Core\\System\\UsageData\\EntitySync\\DispatchEntityMessageHandler'] ?? self::getDispatchEntityMessageHandlerService($container));
            yield 13 => ($container->privates['Shopware\\Core\\System\\UsageData\\EntitySync\\CollectEntityDataMessageHandler'] ?? self::getCollectEntityDataMessageHandlerService($container));
            yield 14 => ($container->privates['Shopware\\Core\\System\\UsageData\\ScheduledTask\\CollectEntityDataTaskHandler'] ?? self::getCollectEntityDataTaskHandlerService($container));
            yield 15 => ($container->privates['Shopware\\Core\\System\\UsageData\\ScheduledTask\\CheckIntegrationChangedTaskHandler'] ?? self::getCheckIntegrationChangedTaskHandlerService($container));
            yield 16 => ($container->privates['Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsHandler'] ?? self::getGenerateThumbnailsHandlerService($container));
            yield 17 => ($container->privates['Shopware\\Core\\Content\\Media\\Message\\DeleteFileHandler'] ?? self::getDeleteFileHandlerService($container));
            yield 18 => ($container->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupProductKeywordDictionaryTaskHandler'] ?? self::getCleanupProductKeywordDictionaryTaskHandlerService($container));
            yield 19 => ($container->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupUnusedDownloadMediaTaskHandler'] ?? self::getCleanupUnusedDownloadMediaTaskHandlerService($container));
            yield 20 => ($container->privates['Shopware\\Core\\Content\\Newsletter\\ScheduledTask\\NewsletterRecipientTaskHandler'] ?? self::getNewsletterRecipientTaskHandlerService($container));
            yield 21 => ($container->privates['Shopware\\Core\\Content\\ProductStream\\ScheduledTask\\UpdateProductStreamMappingTaskHandler'] ?? self::getUpdateProductStreamMappingTaskHandlerService($container));
            yield 22 => ($container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler'] ?? self::getProductExportGenerateTaskHandlerService($container));
            yield 23 => ($container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler'] ?? self::getProductExportPartialGenerationHandlerService($container));
            yield 24 => ($container->services['Shopware\\Core\\Content\\ImportExport\\Message\\ImportExportHandler'] ?? self::getImportExportHandlerService($container));
            yield 25 => ($container->privates['Shopware\\Core\\Content\\ImportExport\\Message\\DeleteFileHandler'] ?? self::getDeleteFileHandler2Service($container));
            yield 26 => ($container->privates['Shopware\\Core\\Content\\ImportExport\\ScheduledTask\\CleanupImportExportFileTaskHandler'] ?? self::getCleanupImportExportFileTaskHandlerService($container));
            yield 27 => ($container->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler'] ?? self::getSitemapGenerateTaskHandlerService($container));
            yield 28 => ($container->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapMessageHandler'] ?? self::getSitemapMessageHandlerService($container));
            yield 29 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Cleanup\\CleanupCartTaskHandler'] ?? self::getCleanupCartTaskHandlerService($container));
            yield 30 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\DeleteUnusedGuestCustomerHandler'] ?? self::getDeleteUnusedGuestCustomerHandlerService($container));
            yield 31 => ($container->services['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler'] ?? self::getCreateAliasTaskHandlerService($container));
            yield 32 => ($container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'] ?? self::getElasticsearchIndexerService($container));
            yield 33 => ($container->privates['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry'] ?? self::getAdminSearchRegistryService($container));
            yield 34 => ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\CacheWarmerTaskHandler'] ?? self::getCacheWarmerTaskHandlerService($container));
            yield 35 => ($container->privates['Shopware\\Storefront\\Theme\\Message\\DeleteThemeFilesHandler'] ?? self::getDeleteThemeFilesHandlerService($container));
            yield 36 => ($container->privates['Shopware\\Storefront\\Theme\\Message\\CompileThemeHandler'] ?? self::getCompileThemeHandlerService($container));
            yield 37 => ($container->privates['mailer.messenger.message_handler'] ?? self::getMailer_Messenger_MessageHandlerService($container));
            yield 38 => ($container->privates['messenger.redispatch_message_handler'] ?? self::getMessenger_RedispatchMessageHandlerService($container));
        }, 39), ($container->services['scheduled_task.repository'] ?? self::getScheduledTask_RepositoryService($container))));

        $instance->setName('scheduled-task:run-single');
        $instance->setDescription('Allows to run one single scheduled task regardless of its schedule.');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\MessageQueue\Command\ScheduledTaskRunner' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\Command\ScheduledTaskRunner
     */
    protected static function getScheduledTaskRunnerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/Command/ScheduledTaskRunner.php';

        $container->privates['Shopware\\Core\\Framework\\MessageQueue\\Command\\ScheduledTaskRunner'] = $instance = new \Shopware\Core\Framework\MessageQueue\Command\ScheduledTaskRunner(($container->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Scheduler\\TaskScheduler'] ?? self::getTaskSchedulerService($container)), ($container->privates['cache.messenger.restart_workers_signal'] ?? self::getCache_Messenger_RestartWorkersSignalService($container)));

        $instance->setName('scheduled-task:run');
        $instance->setDescription('Runs scheduled tasks');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\MessageQueue\ScheduledTask\MessageQueue\RegisterScheduledTaskHandler' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\ScheduledTask\MessageQueue\RegisterScheduledTaskHandler
     */
    protected static function getRegisterScheduledTaskHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/MessageQueue/RegisterScheduledTaskHandler.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Registry\\TaskRegistry'] ?? self::getTaskRegistryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\MessageQueue\\RegisterScheduledTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\MessageQueue\\RegisterScheduledTaskHandler'];
        }

        return $container->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\MessageQueue\\RegisterScheduledTaskHandler'] = new \Shopware\Core\Framework\MessageQueue\ScheduledTask\MessageQueue\RegisterScheduledTaskHandler($a);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\MessageQueue\ScheduledTask\Registry\TaskRegistry' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\ScheduledTask\Registry\TaskRegistry
     */
    protected static function getTaskRegistryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/Registry/TaskRegistry.php';

        $a = ($container->services['scheduled_task.repository'] ?? self::getScheduledTask_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Registry\\TaskRegistry'])) {
            return $container->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Registry\\TaskRegistry'];
        }

        return $container->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Registry\\TaskRegistry'] = new \Shopware\Core\Framework\MessageQueue\ScheduledTask\Registry\TaskRegistry(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Framework\\Log\\ScheduledTask\\LogCleanupTask'] ??= new \Shopware\Core\Framework\Log\ScheduledTask\LogCleanupTask());
            yield 1 => ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidateCacheTask'] ??= new \Shopware\Core\Framework\Adapter\Cache\InvalidateCacheTask());
            yield 2 => ($container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsTask'] ??= new \Shopware\Core\Framework\App\ScheduledTask\UpdateAppsTask());
            yield 3 => ($container->privates['Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsTask'] ??= new \Shopware\Core\Framework\App\ScheduledTask\DeleteCascadeAppsTask());
            yield 4 => ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Cleanup\\CleanupVersionTask'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Version\Cleanup\CleanupVersionTask());
            yield 5 => ($container->privates['Shopware\\Core\\Framework\\Webhook\\ScheduledTask\\CleanupWebhookEventLogTask'] ??= new \Shopware\Core\Framework\Webhook\ScheduledTask\CleanupWebhookEventLogTask());
            yield 6 => ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\Cleanup\\CleanupSalesChannelContextTask'] ??= new \Shopware\Core\System\SalesChannel\Context\Cleanup\CleanupSalesChannelContextTask());
            yield 7 => ($container->privates['Shopware\\Core\\System\\UsageData\\ScheduledTask\\CollectEntityDataTask'] ??= new \Shopware\Core\System\UsageData\ScheduledTask\CollectEntityDataTask());
            yield 8 => ($container->privates['Shopware\\Core\\System\\UsageData\\ScheduledTask\\CheckIntegrationChangedTask'] ??= new \Shopware\Core\System\UsageData\ScheduledTask\CheckIntegrationChangedTask());
            yield 9 => ($container->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupProductKeywordDictionaryTask'] ??= new \Shopware\Core\Content\Product\Cleanup\CleanupProductKeywordDictionaryTask());
            yield 10 => ($container->privates['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupUnusedDownloadMediaTask'] ??= new \Shopware\Core\Content\Product\Cleanup\CleanupUnusedDownloadMediaTask());
            yield 11 => ($container->privates['Shopware\\Core\\Content\\Newsletter\\ScheduledTask\\NewsletterRecipientTask'] ??= new \Shopware\Core\Content\Newsletter\ScheduledTask\NewsletterRecipientTask());
            yield 12 => ($container->privates['Shopware\\Core\\Content\\ProductStream\\ScheduledTask\\UpdateProductStreamMappingTask'] ??= new \Shopware\Core\Content\ProductStream\ScheduledTask\UpdateProductStreamMappingTask());
            yield 13 => ($container->privates['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTask'] ??= new \Shopware\Core\Content\ProductExport\ScheduledTask\ProductExportGenerateTask());
            yield 14 => ($container->privates['Shopware\\Core\\Content\\ImportExport\\ScheduledTask\\CleanupImportExportFileTask'] ??= new \Shopware\Core\Content\ImportExport\ScheduledTask\CleanupImportExportFileTask());
            yield 15 => ($container->privates['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTask'] ??= new \Shopware\Core\Content\Sitemap\ScheduledTask\SitemapGenerateTask());
            yield 16 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Cleanup\\CleanupCartTask'] ??= new \Shopware\Core\Checkout\Cart\Cleanup\CleanupCartTask());
            yield 17 => ($container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTask'] ??= new \Shopware\Elasticsearch\Framework\Indexing\CreateAliasTask());
        }, 18), $a, ($container->privates['parameter_bag'] ??= new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\MessageQueue\ScheduledTask\Scheduler\TaskScheduler' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\ScheduledTask\Scheduler\TaskScheduler
     */
    protected static function getTaskSchedulerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/Scheduler/TaskScheduler.php';

        return $container->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Scheduler\\TaskScheduler'] = new \Shopware\Core\Framework\MessageQueue\ScheduledTask\Scheduler\TaskScheduler(($container->services['scheduled_task.repository'] ?? self::getScheduledTask_RepositoryService($container)), ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container)), ($container->privates['parameter_bag'] ??= new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\MessageQueue\Subscriber\MessageQueueStatsSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\Subscriber\MessageQueueStatsSubscriber
     */
    protected static function getMessageQueueStatsSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/Subscriber/MessageQueueStatsSubscriber.php';

        return $container->privates['Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\MessageQueueStatsSubscriber'] = new \Shopware\Core\Framework\MessageQueue\Subscriber\MessageQueueStatsSubscriber(($container->services['shopware.increment.gateway.registry'] ?? self::getShopware_Increment_Gateway_RegistryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\MessageQueue\Subscriber\PluginLifecycleSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\Subscriber\PluginLifecycleSubscriber
     */
    protected static function getPluginLifecycleSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/Subscriber/PluginLifecycleSubscriber.php';

        return $container->privates['Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\PluginLifecycleSubscriber'] = new \Shopware\Core\Framework\MessageQueue\Subscriber\PluginLifecycleSubscriber(($container->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Registry\\TaskRegistry'] ?? self::getTaskRegistryService($container)), ($container->privates['cache.messenger.restart_workers_signal'] ?? self::getCache_Messenger_RestartWorkersSignalService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\MessageQueue\Subscriber\UpdatePostFinishSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\MessageQueue\Subscriber\UpdatePostFinishSubscriber
     */
    protected static function getUpdatePostFinishSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/Subscriber/UpdatePostFinishSubscriber.php';

        return $container->privates['Shopware\\Core\\Framework\\MessageQueue\\Subscriber\\UpdatePostFinishSubscriber'] = new \Shopware\Core\Framework\MessageQueue\Subscriber\UpdatePostFinishSubscriber(($container->privates['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\Registry\\TaskRegistry'] ?? self::getTaskRegistryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Migration\Command\CreateMigrationCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Migration\Command\CreateMigrationCommand
     */
    protected static function getCreateMigrationCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/Command/CreateMigrationCommand.php';

        $container->privates['Shopware\\Core\\Framework\\Migration\\Command\\CreateMigrationCommand'] = $instance = new \Shopware\Core\Framework\Migration\Command\CreateMigrationCommand(($container->services['Shopware\\Core\\Framework\\Plugin\\KernelPluginCollection'] ?? self::getKernelPluginCollectionService($container)), (\dirname(__DIR__, 4).'/vendor/shopware/core'), '6.5.7.3');

        $instance->setName('database:create-migration');
        $instance->setDescription('Creates a new migration file');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Migration\Command\MigrationCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Migration\Command\MigrationCommand
     */
    protected static function getMigrationCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/Command/MigrationCommand.php';

        $container->privates['Shopware\\Core\\Framework\\Migration\\Command\\MigrationCommand'] = $instance = new \Shopware\Core\Framework\Migration\Command\MigrationCommand(($container->services['Shopware\\Core\\Framework\\Migration\\MigrationCollectionLoader'] ?? self::getMigrationCollectionLoaderService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), '6.5.7.3');

        $instance->setName('database:migrate');
        $instance->setDescription('Executes all migrations');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Migration\Command\MigrationDestructiveCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Migration\Command\MigrationDestructiveCommand
     */
    protected static function getMigrationDestructiveCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/Command/MigrationCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/Command/MigrationDestructiveCommand.php';

        $container->privates['Shopware\\Core\\Framework\\Migration\\Command\\MigrationDestructiveCommand'] = $instance = new \Shopware\Core\Framework\Migration\Command\MigrationDestructiveCommand(($container->services['Shopware\\Core\\Framework\\Migration\\MigrationCollectionLoader'] ?? self::getMigrationCollectionLoaderService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), '6.5.7.3');

        $instance->setName('database:migrate-destructive');
        $instance->setDescription('Executes all migrations');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Migration\Command\RefreshMigrationCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Migration\Command\RefreshMigrationCommand
     */
    protected static function getRefreshMigrationCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/Command/RefreshMigrationCommand.php';

        $container->privates['Shopware\\Core\\Framework\\Migration\\Command\\RefreshMigrationCommand'] = $instance = new \Shopware\Core\Framework\Migration\Command\RefreshMigrationCommand();

        $instance->setName('database:refresh-migration');
        $instance->setDescription('Refreshes the migration state');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Migration\MigrationSource.core.V6_3' shared service.
     *
     * @return \Shopware\Core\Framework\Migration\MigrationSource
     */
    protected static function getMigrationSource_Core_V63Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/MigrationSource.php';

        $container->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource.core.V6_3'] = $instance = new \Shopware\Core\Framework\Migration\MigrationSource('core.V6_3');

        $instance->addDirectory((\dirname(__DIR__, 4).'/vendor/shopware/core/Migration/V6_3'), 'Shopware\\Core\\Migration\\V6_3');
        $instance->addDirectory((\dirname(__DIR__, 4).'/vendor/shopware/storefront/Migration/V6_3'), 'Shopware\\Storefront\\Migration\\V6_3');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Migration\MigrationSource.core.V6_4' shared service.
     *
     * @return \Shopware\Core\Framework\Migration\MigrationSource
     */
    protected static function getMigrationSource_Core_V64Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/MigrationSource.php';

        $container->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource.core.V6_4'] = $instance = new \Shopware\Core\Framework\Migration\MigrationSource('core.V6_4');

        $instance->addDirectory((\dirname(__DIR__, 4).'/vendor/shopware/core/Migration/V6_4'), 'Shopware\\Core\\Migration\\V6_4');
        $instance->addDirectory((\dirname(__DIR__, 4).'/vendor/shopware/administration/Migration/V6_4'), 'Shopware\\Administration\\Migration\\V6_4');
        $instance->addDirectory((\dirname(__DIR__, 4).'/vendor/shopware/storefront/Migration/V6_4'), 'Shopware\\Storefront\\Migration\\V6_4');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Migration\MigrationSource.core.V6_5' shared service.
     *
     * @return \Shopware\Core\Framework\Migration\MigrationSource
     */
    protected static function getMigrationSource_Core_V65Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/MigrationSource.php';

        $container->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource.core.V6_5'] = $instance = new \Shopware\Core\Framework\Migration\MigrationSource('core.V6_5');

        $instance->addDirectory((\dirname(__DIR__, 4).'/vendor/shopware/core/Migration/V6_5'), 'Shopware\\Core\\Migration\\V6_5');
        $instance->addDirectory((\dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Migration/V6_5'), 'Shopware\\Elasticsearch\\Migration\\V6_5');
        $instance->addDirectory((\dirname(__DIR__, 4).'/vendor/shopware/storefront/Migration/V6_5'), 'Shopware\\Storefront\\Migration\\V6_5');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Migration\MigrationSource.core.V6_6' shared service.
     *
     * @return \Shopware\Core\Framework\Migration\MigrationSource
     */
    protected static function getMigrationSource_Core_V66Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/MigrationSource.php';

        $container->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource.core.V6_6'] = $instance = new \Shopware\Core\Framework\Migration\MigrationSource('core.V6_6');

        $instance->addDirectory((\dirname(__DIR__, 4).'/vendor/shopware/core/Migration/V6_6'), 'Shopware\\Core\\Migration\\V6_6');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Migration\MigrationSource.core.V6_7' shared service.
     *
     * @return \Shopware\Core\Framework\Migration\MigrationSource
     */
    protected static function getMigrationSource_Core_V67Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Migration/MigrationSource.php';

        $container->privates['Shopware\\Core\\Framework\\Migration\\MigrationSource.core.V6_7'] = $instance = new \Shopware\Core\Framework\Migration\MigrationSource('core.V6_7');

        $instance->addDirectory((\dirname(__DIR__, 4).'/vendor/shopware/core/Migration/V6_7'), 'Shopware\\Core\\Migration\\V6_7');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Plugin\Command\BundleDumpCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Command\BundleDumpCommand
     */
    protected static function getBundleDumpCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/BundleDumpCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/BundleConfigGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/BundleConfigGenerator.php';

        $container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\BundleDumpCommand'] = $instance = new \Shopware\Core\Framework\Plugin\Command\BundleDumpCommand(new \Shopware\Core\Framework\Plugin\BundleConfigGenerator(($container->services['kernel'] ?? $container->get('kernel', 1)), ($container->privates['Shopware\\Core\\Framework\\App\\ActiveAppsLoader'] ?? self::getActiveAppsLoaderService($container))), \dirname(__DIR__, 4));

        $instance->setName('bundle:dump');
        $instance->setAliases(['administration:dump:plugins', 'administration:dump:bundles']);
        $instance->setDescription('Dumps the bundle configuration for a plugin');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginActivateCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginActivateCommand
     */
    protected static function getPluginActivateCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/Lifecycle/AbstractPluginLifecycleCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/Lifecycle/PluginActivateCommand.php';

        $container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginActivateCommand'] = $instance = new \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginActivateCommand(($container->privates['Shopware\\Core\\Framework\\Plugin\\PluginLifecycleService'] ?? self::getPluginLifecycleServiceService($container)), ($container->services['plugin.repository'] ?? self::getPlugin_RepositoryService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'] ?? self::getCacheClearerService($container)));

        $instance->setName('plugin:activate');
        $instance->setDescription('Activate a plugin');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginDeactivateCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginDeactivateCommand
     */
    protected static function getPluginDeactivateCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/Lifecycle/AbstractPluginLifecycleCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/Lifecycle/PluginDeactivateCommand.php';

        $container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginDeactivateCommand'] = $instance = new \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginDeactivateCommand(($container->privates['Shopware\\Core\\Framework\\Plugin\\PluginLifecycleService'] ?? self::getPluginLifecycleServiceService($container)), ($container->services['plugin.repository'] ?? self::getPlugin_RepositoryService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'] ?? self::getCacheClearerService($container)));

        $instance->setName('plugin:deactivate');
        $instance->setDescription('Deactivates a plugin');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginInstallCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginInstallCommand
     */
    protected static function getPluginInstallCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/Lifecycle/AbstractPluginLifecycleCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/Lifecycle/PluginInstallCommand.php';

        $container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginInstallCommand'] = $instance = new \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginInstallCommand(($container->privates['Shopware\\Core\\Framework\\Plugin\\PluginLifecycleService'] ?? self::getPluginLifecycleServiceService($container)), ($container->services['plugin.repository'] ?? self::getPlugin_RepositoryService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'] ?? self::getCacheClearerService($container)));

        $instance->setName('plugin:install');
        $instance->setDescription('Installs a plugin');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginUninstallCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginUninstallCommand
     */
    protected static function getPluginUninstallCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/Lifecycle/AbstractPluginLifecycleCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/Lifecycle/PluginUninstallCommand.php';

        $container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUninstallCommand'] = $instance = new \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginUninstallCommand(($container->privates['Shopware\\Core\\Framework\\Plugin\\PluginLifecycleService'] ?? self::getPluginLifecycleServiceService($container)), ($container->services['plugin.repository'] ?? self::getPlugin_RepositoryService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'] ?? self::getCacheClearerService($container)));

        $instance->setName('plugin:uninstall');
        $instance->setDescription('Uninstall a plugin');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginUpdateAllCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginUpdateAllCommand
     */
    protected static function getPluginUpdateAllCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/Lifecycle/PluginUpdateAllCommand.php';

        $container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUpdateAllCommand'] = $instance = new \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginUpdateAllCommand(($container->privates['Shopware\\Core\\Framework\\Plugin\\PluginService'] ?? self::getPluginServiceService($container)), ($container->services['plugin.repository'] ?? self::getPlugin_RepositoryService($container)), ($container->privates['Shopware\\Core\\Framework\\Plugin\\PluginLifecycleService'] ?? self::getPluginLifecycleServiceService($container)));

        $instance->setName('plugin:update:all');
        $instance->setDescription('Install all available plugin updates');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginUpdateCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginUpdateCommand
     */
    protected static function getPluginUpdateCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/Lifecycle/AbstractPluginLifecycleCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/Lifecycle/PluginUpdateCommand.php';

        $container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Lifecycle\\PluginUpdateCommand'] = $instance = new \Shopware\Core\Framework\Plugin\Command\Lifecycle\PluginUpdateCommand(($container->privates['Shopware\\Core\\Framework\\Plugin\\PluginLifecycleService'] ?? self::getPluginLifecycleServiceService($container)), ($container->services['plugin.repository'] ?? self::getPlugin_RepositoryService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'] ?? self::getCacheClearerService($container)));

        $instance->setName('plugin:update');
        $instance->setDescription('Updates a plugin');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Plugin\Command\PluginCreateCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Command\PluginCreateCommand
     */
    protected static function getPluginCreateCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/PluginCreateCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/Scaffolding/ScaffoldingCollector.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/Scaffolding/ScaffoldingWriter.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/filesystem/Filesystem.php';

        $a = ($container->privates['filesystem'] ??= new \Symfony\Component\Filesystem\Filesystem());

        $container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\PluginCreateCommand'] = $instance = new \Shopware\Core\Framework\Plugin\Command\PluginCreateCommand(\dirname(__DIR__, 4), new \Shopware\Core\Framework\Plugin\Command\Scaffolding\ScaffoldingCollector(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\ComposerGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\ComposerGenerator());
            yield 1 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\PluginClassGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\PluginClassGenerator());
            yield 2 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\TestsGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\TestsGenerator());
            yield 3 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\CommandGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\CommandGenerator());
            yield 4 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\ScheduledTaskGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\ScheduledTaskGenerator());
            yield 5 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\EventSubscriberGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\EventSubscriberGenerator());
            yield 6 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\StorefrontControllerGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\StorefrontControllerGenerator());
            yield 7 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\StoreApiRouteGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\StoreApiRouteGenerator());
            yield 8 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\EntityGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\EntityGenerator());
            yield 9 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\ConfigGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\ConfigGenerator());
            yield 10 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\JavascriptPluginGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\JavascriptPluginGenerator());
            yield 11 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\AdminModuleGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\AdminModuleGenerator());
            yield 12 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\CustomFieldsetGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\CustomFieldsetGenerator());
        }, 13)), new \Shopware\Core\Framework\Plugin\Command\Scaffolding\ScaffoldingWriter($a), $a, new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\ComposerGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\ComposerGenerator());
            yield 1 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\PluginClassGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\PluginClassGenerator());
            yield 2 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\TestsGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\TestsGenerator());
            yield 3 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\CommandGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\CommandGenerator());
            yield 4 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\ScheduledTaskGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\ScheduledTaskGenerator());
            yield 5 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\EventSubscriberGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\EventSubscriberGenerator());
            yield 6 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\StorefrontControllerGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\StorefrontControllerGenerator());
            yield 7 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\StoreApiRouteGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\StoreApiRouteGenerator());
            yield 8 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\EntityGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\EntityGenerator());
            yield 9 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\ConfigGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\ConfigGenerator());
            yield 10 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\JavascriptPluginGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\JavascriptPluginGenerator());
            yield 11 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\AdminModuleGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\AdminModuleGenerator());
            yield 12 => ($container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\Scaffolding\\Generator\\CustomFieldsetGenerator'] ??= new \Shopware\Core\Framework\Plugin\Command\Scaffolding\Generator\CustomFieldsetGenerator());
        }, 13));

        $instance->setName('plugin:create');
        $instance->setDescription('Creates a new plugin');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Plugin\Command\PluginListCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Command\PluginListCommand
     */
    protected static function getPluginListCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/PluginListCommand.php';

        $container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\PluginListCommand'] = $instance = new \Shopware\Core\Framework\Plugin\Command\PluginListCommand(($container->services['plugin.repository'] ?? self::getPlugin_RepositoryService($container)));

        $instance->setName('plugin:list');
        $instance->setDescription('Lists all plugins');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Plugin\Command\PluginRefreshCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Command\PluginRefreshCommand
     */
    protected static function getPluginRefreshCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/PluginRefreshCommand.php';

        $container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\PluginRefreshCommand'] = $instance = new \Shopware\Core\Framework\Plugin\Command\PluginRefreshCommand(($container->privates['Shopware\\Core\\Framework\\Plugin\\PluginService'] ?? self::getPluginServiceService($container)));

        $instance->setName('plugin:refresh');
        $instance->setDescription('Refreshes the plugin list');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Plugin\Command\PluginZipImportCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Command\PluginZipImportCommand
     */
    protected static function getPluginZipImportCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Command/PluginZipImportCommand.php';

        $container->privates['Shopware\\Core\\Framework\\Plugin\\Command\\PluginZipImportCommand'] = $instance = new \Shopware\Core\Framework\Plugin\Command\PluginZipImportCommand(($container->privates['Shopware\\Core\\Framework\\Plugin\\PluginManagementService'] ?? self::getPluginManagementServiceService($container)), ($container->privates['Shopware\\Core\\Framework\\Plugin\\PluginService'] ?? self::getPluginServiceService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'] ?? self::getCacheClearerService($container)));

        $instance->setName('plugin:zip-import');
        $instance->setDescription('Imports a plugin from a zip file');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Plugin\Composer\CommandExecutor' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Composer\CommandExecutor
     */
    protected static function getCommandExecutorService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['Shopware\\Core\\Framework\\Plugin\\Composer\\CommandExecutor'] = $container->createProxy('CommandExecutorGhostE8b86ba', static fn () => \CommandExecutorGhostE8b86ba::createLazyGhost(static fn ($proxy) => self::getCommandExecutorService($container, $proxy)));
        }

        return ($lazyLoad->__construct(\dirname(__DIR__, 4)) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Plugin\PluginLifecycleService' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\PluginLifecycleService
     */
    protected static function getPluginLifecycleServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/PluginLifecycleService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Requirement/RequirementsValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Util/VersionSanitizer.php';

        $a = ($container->services['plugin.repository'] ?? self::getPlugin_RepositoryService($container));

        return $container->privates['Shopware\\Core\\Framework\\Plugin\\PluginLifecycleService'] = new \Shopware\Core\Framework\Plugin\PluginLifecycleService($a, ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Framework\\Plugin\\KernelPluginCollection'] ?? self::getKernelPluginCollectionService($container)), $container, ($container->services['Shopware\\Core\\Framework\\Migration\\MigrationCollectionLoader'] ?? self::getMigrationCollectionLoaderService($container)), ($container->privates['Shopware\\Core\\Framework\\Plugin\\Util\\AssetService'] ?? self::getAssetServiceService($container)), ($container->privates['Shopware\\Core\\Framework\\Plugin\\Composer\\CommandExecutor'] ?? self::getCommandExecutorService($container)), new \Shopware\Core\Framework\Plugin\Requirement\RequirementsValidator($a, \dirname(__DIR__, 4)), ($container->privates['cache.messenger.restart_workers_signal'] ?? self::getCache_Messenger_RestartWorkersSignalService($container)), '6.5.7.3', ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->privates['Shopware\\Core\\System\\CustomEntity\\Schema\\CustomEntityPersister'] ?? self::getCustomEntityPersisterService($container)), ($container->services['Shopware\\Core\\System\\CustomEntity\\Schema\\CustomEntitySchemaUpdater'] ?? self::getCustomEntitySchemaUpdaterService($container)), ($container->privates['Shopware\\Core\\System\\CustomEntity\\CustomEntityLifecycleService'] ?? self::getCustomEntityLifecycleServiceService($container)), ($container->privates['Shopware\\Core\\Framework\\Plugin\\PluginService'] ?? self::getPluginServiceService($container)), ($container->privates['Shopware\\Core\\Framework\\Plugin\\Util\\VersionSanitizer'] ??= new \Shopware\Core\Framework\Plugin\Util\VersionSanitizer()));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Plugin\PluginManagementService' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\PluginManagementService
     */
    protected static function getPluginManagementServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/PluginManagementService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/PluginZipDetector.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/PluginExtractor.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/filesystem/Filesystem.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\Plugin\\PluginService'] ?? self::getPluginServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Plugin\\PluginManagementService'])) {
            return $container->privates['Shopware\\Core\\Framework\\Plugin\\PluginManagementService'];
        }
        $b = ($container->privates['filesystem'] ??= new \Symfony\Component\Filesystem\Filesystem());

        return $container->privates['Shopware\\Core\\Framework\\Plugin\\PluginManagementService'] = new \Shopware\Core\Framework\Plugin\PluginManagementService(\dirname(__DIR__, 4), new \Shopware\Core\Framework\Plugin\PluginZipDetector(), new \Shopware\Core\Framework\Plugin\PluginExtractor(['plugin' => (\dirname(__DIR__, 4).'/custom/plugins'), 'app' => (\dirname(__DIR__, 4).'/custom/apps')], $b), $a, $b, ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'] ?? self::getCacheClearerService($container)), new \GuzzleHttp\Client());
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Plugin\PluginService' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\PluginService
     */
    protected static function getPluginServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/PluginService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Util/PluginFinder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Composer/PackageProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Util/VersionSanitizer.php';

        $a = ($container->services['plugin.repository'] ?? self::getPlugin_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Plugin\\PluginService'])) {
            return $container->privates['Shopware\\Core\\Framework\\Plugin\\PluginService'];
        }
        $b = ($container->services['language.repository'] ?? self::getLanguage_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Plugin\\PluginService'])) {
            return $container->privates['Shopware\\Core\\Framework\\Plugin\\PluginService'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Plugin\\PluginService'] = new \Shopware\Core\Framework\Plugin\PluginService((\dirname(__DIR__, 4).'/custom/plugins'), \dirname(__DIR__, 4), $a, $b, new \Shopware\Core\Framework\Plugin\Util\PluginFinder(new \Shopware\Core\Framework\Plugin\Composer\PackageProvider()), ($container->privates['Shopware\\Core\\Framework\\Plugin\\Util\\VersionSanitizer'] ??= new \Shopware\Core\Framework\Plugin\Util\VersionSanitizer()));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Plugin\Subscriber\PluginAclPrivilegesSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Subscriber\PluginAclPrivilegesSubscriber
     */
    protected static function getPluginAclPrivilegesSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Subscriber/PluginAclPrivilegesSubscriber.php';

        return $container->privates['Shopware\\Core\\Framework\\Plugin\\Subscriber\\PluginAclPrivilegesSubscriber'] = new \Shopware\Core\Framework\Plugin\Subscriber\PluginAclPrivilegesSubscriber(($container->services['Shopware\\Core\\Framework\\Plugin\\KernelPluginCollection'] ?? self::getKernelPluginCollectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Plugin\Util\AssetService' shared service.
     *
     * @return \Shopware\Core\Framework\Plugin\Util\AssetService
     */
    protected static function getAssetServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/Util/AssetService.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] ?? self::getCacheInvalidatorService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Plugin\\Util\\AssetService'])) {
            return $container->privates['Shopware\\Core\\Framework\\Plugin\\Util\\AssetService'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Plugin\\Util\\AssetService'] = new \Shopware\Core\Framework\Plugin\Util\AssetService(($container->services['shopware.filesystem.asset'] ?? self::getShopware_Filesystem_AssetService($container)), ($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)), ($container->services['kernel'] ?? $container->get('kernel', 1)), ($container->services['Shopware\\Core\\Framework\\Plugin\\KernelPluginLoader\\KernelPluginLoader'] ?? self::getKernelPluginLoaderService($container)), $a, ($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] ?? self::getAppLoaderService($container)), ($container->privates['parameter_bag'] ??= new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Routing\ContextResolverListener' shared service.
     *
     * @return \Shopware\Core\Framework\Routing\ContextResolverListener
     */
    protected static function getContextResolverListenerService($container)
    {
        $a = ($container->privates['Shopware\\Core\\Framework\\Routing\\SalesChannelRequestContextResolver'] ?? self::getSalesChannelRequestContextResolverService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Routing\\ContextResolverListener'])) {
            return $container->privates['Shopware\\Core\\Framework\\Routing\\ContextResolverListener'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Routing\\ContextResolverListener'] = new \Shopware\Core\Framework\Routing\ContextResolverListener($a);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Routing\CoreSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\Routing\CoreSubscriber
     */
    protected static function getCoreSubscriberService($container)
    {
        return $container->privates['Shopware\\Core\\Framework\\Routing\\CoreSubscriber'] = new \Shopware\Core\Framework\Routing\CoreSubscriber($container->parameters['shopware.security.csp_templates']);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Routing\MaintenanceModeResolver' shared service.
     *
     * @return \Shopware\Core\Framework\Routing\MaintenanceModeResolver
     */
    protected static function getMaintenanceModeResolverService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Routing\\MaintenanceModeResolver'])) {
            return $container->privates['Shopware\\Core\\Framework\\Routing\\MaintenanceModeResolver'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Routing\\MaintenanceModeResolver'] = new \Shopware\Core\Framework\Routing\MaintenanceModeResolver($a);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Routing\RouteEventSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\Routing\RouteEventSubscriber
     */
    protected static function getRouteEventSubscriberService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Routing\\RouteEventSubscriber'])) {
            return $container->privates['Shopware\\Core\\Framework\\Routing\\RouteEventSubscriber'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Routing\\RouteEventSubscriber'] = new \Shopware\Core\Framework\Routing\RouteEventSubscriber($a);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Routing\RouteScopeListener' shared service.
     *
     * @return \Shopware\Core\Framework\Routing\RouteScopeListener
     */
    protected static function getRouteScopeListenerService($container)
    {
        return $container->privates['Shopware\\Core\\Framework\\Routing\\RouteScopeListener'] = new \Shopware\Core\Framework\Routing\RouteScopeListener(($container->privates['Shopware\\Core\\Framework\\Routing\\RouteScopeRegistry'] ?? self::getRouteScopeRegistryService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Framework\\Routing\\SymfonyRouteScopeWhitelist'] ??= new \Shopware\Core\Framework\Routing\SymfonyRouteScopeWhitelist());
            yield 1 => ($container->privates['Shopware\\Core\\Framework\\Routing\\PaymentScopeWhitelist'] ??= new \Shopware\Core\Framework\Routing\PaymentScopeWhitelist());
            yield 2 => ($container->privates['Shopware\\Core\\Profiling\\Routing\\ProfilerWhitelist'] ??= new \Shopware\Core\Profiling\Routing\ProfilerWhitelist());
        }, 3));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Routing\RouteScopeRegistry' shared service.
     *
     * @return \Shopware\Core\Framework\Routing\RouteScopeRegistry
     */
    protected static function getRouteScopeRegistryService($container)
    {
        return $container->privates['Shopware\\Core\\Framework\\Routing\\RouteScopeRegistry'] = new \Shopware\Core\Framework\Routing\RouteScopeRegistry(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Framework\\Routing\\RouteScope'] ??= new \Shopware\Core\Framework\Routing\RouteScope());
            yield 1 => ($container->privates['Shopware\\Core\\Framework\\Routing\\ApiRouteScope'] ??= new \Shopware\Core\Framework\Routing\ApiRouteScope());
            yield 2 => ($container->privates['Shopware\\Core\\Framework\\Routing\\StoreApiRouteScope'] ??= new \Shopware\Core\Framework\Routing\StoreApiRouteScope());
            yield 3 => ($container->privates['Shopware\\Administration\\Framework\\Routing\\AdministrationRouteScope'] ??= new \Shopware\Administration\Framework\Routing\AdministrationRouteScope($container->getEnv('resolve:SHOPWARE_ADMINISTRATION_PATH_NAME')));
            yield 4 => ($container->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontRouteScope'] ??= new \Shopware\Storefront\Framework\Routing\StorefrontRouteScope());
        }, 5));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Routing\SalesChannelRequestContextResolver' shared service.
     *
     * @return \Shopware\Core\Framework\Routing\SalesChannelRequestContextResolver
     */
    protected static function getSalesChannelRequestContextResolverService($container)
    {
        $a = ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? self::getSalesChannelContextServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Routing\\SalesChannelRequestContextResolver'])) {
            return $container->privates['Shopware\\Core\\Framework\\Routing\\SalesChannelRequestContextResolver'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Routing\\SalesChannelRequestContextResolver'])) {
            return $container->privates['Shopware\\Core\\Framework\\Routing\\SalesChannelRequestContextResolver'];
        }
        $c = ($container->privates['Shopware\\Core\\Framework\\Routing\\RouteScopeRegistry'] ?? self::getRouteScopeRegistryService($container));

        return $container->privates['Shopware\\Core\\Framework\\Routing\\SalesChannelRequestContextResolver'] = new \Shopware\Core\Framework\Routing\SalesChannelRequestContextResolver(new \Shopware\Core\Framework\Routing\ApiRequestContextResolver(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $c), $a, $b, $c);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Rule\Collector\RuleConditionRegistry' shared service.
     *
     * @return \Shopware\Core\Framework\Rule\Collector\RuleConditionRegistry
     */
    protected static function getRuleConditionRegistryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Rule/Collector/RuleConditionRegistry.php';

        return $container->privates['Shopware\\Core\\Framework\\Rule\\Collector\\RuleConditionRegistry'] = new \Shopware\Core\Framework\Rule\Collector\RuleConditionRegistry(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Framework\\Rule\\Container\\AndRule'] ??= new \Shopware\Core\Framework\Rule\Container\AndRule());
            yield 1 => ($container->privates['Shopware\\Core\\Framework\\Rule\\Container\\NotRule'] ??= new \Shopware\Core\Framework\Rule\Container\NotRule());
            yield 2 => ($container->privates['Shopware\\Core\\Framework\\Rule\\Container\\OrRule'] ??= new \Shopware\Core\Framework\Rule\Container\OrRule());
            yield 3 => ($container->privates['Shopware\\Core\\Framework\\Rule\\Container\\XorRule'] ??= new \Shopware\Core\Framework\Rule\Container\XorRule());
            yield 4 => ($container->privates['Shopware\\Core\\Framework\\Rule\\Container\\MatchAllLineItemsRule'] ??= new \Shopware\Core\Framework\Rule\Container\MatchAllLineItemsRule());
            yield 5 => ($container->privates['Shopware\\Core\\Framework\\Rule\\ScriptRule'] ??= new \Shopware\Core\Framework\Rule\ScriptRule());
            yield 6 => ($container->privates['Shopware\\Core\\Framework\\Rule\\DateRangeRule'] ??= new \Shopware\Core\Framework\Rule\DateRangeRule());
            yield 7 => ($container->privates['Shopware\\Core\\Framework\\Rule\\SimpleRule'] ??= new \Shopware\Core\Framework\Rule\SimpleRule());
            yield 8 => ($container->privates['Shopware\\Core\\Framework\\Rule\\SalesChannelRule'] ??= new \Shopware\Core\Framework\Rule\SalesChannelRule());
            yield 9 => ($container->privates['Shopware\\Core\\Framework\\Rule\\TimeRangeRule'] ??= new \Shopware\Core\Framework\Rule\TimeRangeRule());
            yield 10 => ($container->privates['Shopware\\Core\\Framework\\Rule\\WeekdayRule'] ??= new \Shopware\Core\Framework\Rule\WeekdayRule());
            yield 11 => ($container->privates['Shopware\\Core\\System\\Language\\Rule\\LanguageRule'] ??= new \Shopware\Core\System\Language\Rule\LanguageRule());
            yield 12 => ($container->privates['Shopware\\Core\\System\\Currency\\Rule\\CurrencyRule'] ??= new \Shopware\Core\System\Currency\Rule\CurrencyRule());
            yield 13 => ($container->privates['Shopware\\Core\\Content\\Flow\\Rule\\OrderTagRule'] ??= new \Shopware\Core\Content\Flow\Rule\OrderTagRule());
            yield 14 => ($container->privates['Shopware\\Core\\Content\\Flow\\Rule\\OrderTrackingCodeRule'] ??= new \Shopware\Core\Content\Flow\Rule\OrderTrackingCodeRule());
            yield 15 => ($container->privates['Shopware\\Core\\Content\\Flow\\Rule\\OrderDeliveryStatusRule'] ??= new \Shopware\Core\Content\Flow\Rule\OrderDeliveryStatusRule());
            yield 16 => ($container->privates['Shopware\\Core\\Content\\Flow\\Rule\\OrderCreatedByAdminRule'] ??= new \Shopware\Core\Content\Flow\Rule\OrderCreatedByAdminRule());
            yield 17 => ($container->privates['Shopware\\Core\\Content\\Flow\\Rule\\OrderTransactionStatusRule'] ??= new \Shopware\Core\Content\Flow\Rule\OrderTransactionStatusRule());
            yield 18 => ($container->privates['Shopware\\Core\\Content\\Flow\\Rule\\OrderStatusRule'] ??= new \Shopware\Core\Content\Flow\Rule\OrderStatusRule());
            yield 19 => ($container->privates['Shopware\\Core\\Content\\Flow\\Rule\\OrderCustomFieldRule'] ??= new \Shopware\Core\Content\Flow\Rule\OrderCustomFieldRule());
            yield 20 => ($container->privates['Shopware\\Core\\Content\\Flow\\Rule\\OrderDocumentTypeRule'] ??= new \Shopware\Core\Content\Flow\Rule\OrderDocumentTypeRule());
            yield 21 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartAmountRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\CartAmountRule());
            yield 22 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartPositionPriceRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\CartPositionPriceRule());
            yield 23 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\GoodsCountRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\GoodsCountRule());
            yield 24 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\GoodsPriceRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\GoodsPriceRule());
            yield 25 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemOfTypeRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemOfTypeRule());
            yield 26 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemRule());
            yield 27 => ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionLineItemRule'] ??= new \Shopware\Core\Checkout\Promotion\Rule\PromotionLineItemRule());
            yield 28 => ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionCodeOfTypeRule'] ??= new \Shopware\Core\Checkout\Promotion\Rule\PromotionCodeOfTypeRule());
            yield 29 => ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionValueRule'] ??= new \Shopware\Core\Checkout\Promotion\Rule\PromotionValueRule());
            yield 30 => ($container->privates['Shopware\\Core\\Checkout\\Promotion\\Rule\\PromotionsInCartCountRule'] ??= new \Shopware\Core\Checkout\Promotion\Rule\PromotionsInCartCountRule());
            yield 31 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemTotalPriceRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemTotalPriceRule());
            yield 32 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemUnitPriceRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemUnitPriceRule());
            yield 33 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemWithQuantityRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemWithQuantityRule());
            yield 34 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemWrapperRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemWrapperRule());
            yield 35 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartShippingCostRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\CartShippingCostRule());
            yield 36 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartWeightRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\CartWeightRule());
            yield 37 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartVolumeRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\CartVolumeRule());
            yield 38 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartHasDeliveryFreeItemRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\CartHasDeliveryFreeItemRule());
            yield 39 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingCountryRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\BillingCountryRule());
            yield 40 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingStreetRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\BillingStreetRule());
            yield 41 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingZipCodeRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\BillingZipCodeRule());
            yield 42 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerGroupRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\CustomerGroupRule());
            yield 43 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerTagRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\CustomerTagRule());
            yield 44 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerNumberRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\CustomerNumberRule());
            yield 45 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\DifferentAddressesRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\DifferentAddressesRule());
            yield 46 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\EmailRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\EmailRule());
            yield 47 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsNewCustomerRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\IsNewCustomerRule());
            yield 48 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsActiveRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\IsActiveRule());
            yield 49 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\LastNameRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\LastNameRule());
            yield 50 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsCompanyRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\IsCompanyRule());
            yield 51 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartTaxDisplayRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\CartTaxDisplayRule());
            yield 52 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\CartTotalPurchasePriceRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\CartTotalPurchasePriceRule());
            yield 53 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsGuestCustomerRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\IsGuestCustomerRule());
            yield 54 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\IsNewsletterRecipientRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\IsNewsletterRecipientRule());
            yield 55 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingCountryRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\ShippingCountryRule());
            yield 56 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingStreetRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\ShippingStreetRule());
            yield 57 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingCityRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\BillingCityRule());
            yield 58 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingCityRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\ShippingCityRule());
            yield 59 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\BillingStateRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\BillingStateRule());
            yield 60 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingStateRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\ShippingStateRule());
            yield 61 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\ShippingZipCodeRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\ShippingZipCodeRule());
            yield 62 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerLoggedInRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\CustomerLoggedInRule());
            yield 63 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemsInCartCountRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemsInCartCountRule());
            yield 64 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\NumberOfReviewsRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\NumberOfReviewsRule());
            yield 65 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\OrderCountRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\OrderCountRule());
            yield 66 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\DaysSinceLastOrderRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\DaysSinceLastOrderRule());
            yield 67 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemTagRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemTagRule());
            yield 68 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\AlwaysValidRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\AlwaysValidRule());
            yield 69 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemPropertyRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemPropertyRule());
            yield 70 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemIsNewRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemIsNewRule());
            yield 71 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemOfManufacturerRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemOfManufacturerRule());
            yield 72 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemPurchasePriceRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemPurchasePriceRule());
            yield 73 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemCreationDateRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemCreationDateRule());
            yield 74 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemReleaseDateRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemReleaseDateRule());
            yield 75 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemClearanceSaleRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemClearanceSaleRule());
            yield 76 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemPromotedRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemPromotedRule());
            yield 77 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemInCategoryRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemInCategoryRule());
            yield 78 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemInProductStreamRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemInProductStreamRule());
            yield 79 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemTaxationRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemTaxationRule());
            yield 80 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionWidthRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemDimensionWidthRule());
            yield 81 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionHeightRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemDimensionHeightRule());
            yield 82 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionLengthRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemDimensionLengthRule());
            yield 83 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionWeightRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemDimensionWeightRule());
            yield 84 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemDimensionVolumeRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemDimensionVolumeRule());
            yield 85 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemListPriceRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemListPriceRule());
            yield 86 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemListPriceRatioRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemListPriceRatioRule());
            yield 87 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemCustomFieldRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemCustomFieldRule());
            yield 88 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemStockRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemStockRule());
            yield 89 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemActualStockRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemActualStockRule());
            yield 90 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\PaymentMethodRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\PaymentMethodRule());
            yield 91 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\ShippingMethodRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\ShippingMethodRule());
            yield 92 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemGoodsTotalRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemGoodsTotalRule());
            yield 93 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\OrderTotalAmountRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\OrderTotalAmountRule());
            yield 94 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerCustomFieldRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\CustomerCustomFieldRule());
            yield 95 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerBirthdayRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\CustomerBirthdayRule());
            yield 96 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerCreatedByAdminRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\CustomerCreatedByAdminRule());
            yield 97 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemProductStatesRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemProductStatesRule());
            yield 98 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerAgeRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\CustomerAgeRule());
            yield 99 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerSalutationRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\CustomerSalutationRule());
            yield 100 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\DaysSinceLastLoginRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\DaysSinceLastLoginRule());
            yield 101 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\DaysSinceFirstLoginRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\DaysSinceFirstLoginRule());
            yield 102 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\AffiliateCodeRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\AffiliateCodeRule());
            yield 103 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CampaignCodeRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\CampaignCodeRule());
            yield 104 => ($container->privates['Shopware\\Core\\Checkout\\Customer\\Rule\\CustomerDefaultPaymentMethodRule'] ??= new \Shopware\Core\Checkout\Customer\Rule\CustomerDefaultPaymentMethodRule());
            yield 105 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemPropertyValueRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemPropertyValueRule());
            yield 106 => ($container->privates['Shopware\\Core\\Checkout\\Cart\\Rule\\LineItemVariantValueRule'] ??= new \Shopware\Core\Checkout\Cart\Rule\LineItemVariantValueRule());
        }, 107));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Script\Api\ScriptResponseEncoder' shared service.
     *
     * @return \Shopware\Core\Framework\Script\Api\ScriptResponseEncoder
     */
    protected static function getScriptResponseEncoderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Script/Api/ScriptResponseEncoder.php';

        return $container->privates['Shopware\\Core\\Framework\\Script\\Api\\ScriptResponseEncoder'] = new \Shopware\Core\Framework\Script\Api\ScriptResponseEncoder(($container->privates['Shopware\\Core\\System\\SalesChannel\\Api\\StructEncoder'] ?? self::getStructEncoderService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Script\Execution\ScriptLoader' shared service.
     *
     * @return \Shopware\Core\Framework\Script\Execution\ScriptLoader
     */
    protected static function getScriptLoaderService($container)
    {
        $a = ($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\Persister\\ScriptPersister'] ?? self::getScriptPersisterService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Script\\Execution\\ScriptLoader'])) {
            return $container->privates['Shopware\\Core\\Framework\\Script\\Execution\\ScriptLoader'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Script\\Execution\\ScriptLoader'] = new \Shopware\Core\Framework\Script\Execution\ScriptLoader(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $a, ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), ($container->targetDir.''.'/twig'), true);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Store\Authentication\LocaleProvider' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Authentication\LocaleProvider
     */
    protected static function getLocaleProviderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Authentication/LocaleProvider.php';

        $a = ($container->services['user.repository'] ?? self::getUser_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Store\\Authentication\\LocaleProvider'])) {
            return $container->privates['Shopware\\Core\\Framework\\Store\\Authentication\\LocaleProvider'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Store\\Authentication\\LocaleProvider'] = new \Shopware\Core\Framework\Store\Authentication\LocaleProvider($a);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Store\Command\StoreDownloadCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Command\StoreDownloadCommand
     */
    protected static function getStoreDownloadCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Command/StoreDownloadCommand.php';

        $container->privates['Shopware\\Core\\Framework\\Store\\Command\\StoreDownloadCommand'] = $instance = new \Shopware\Core\Framework\Store\Command\StoreDownloadCommand(($container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'] ?? self::getStoreClientService($container)), ($container->services['plugin.repository'] ?? self::getPlugin_RepositoryService($container)), ($container->privates['Shopware\\Core\\Framework\\Plugin\\PluginManagementService'] ?? self::getPluginManagementServiceService($container)), ($container->privates['Shopware\\Core\\Framework\\Plugin\\PluginLifecycleService'] ?? self::getPluginLifecycleServiceService($container)), ($container->services['user.repository'] ?? self::getUser_RepositoryService($container)), (\dirname(__DIR__, 4).'/custom/plugins'), \dirname(__DIR__, 4));

        $instance->setName('store:download');
        $instance->setDescription('Downloads a plugin from the store');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Store\Command\StoreLoginCommand' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Command\StoreLoginCommand
     */
    protected static function getStoreLoginCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Command/StoreLoginCommand.php';

        $container->privates['Shopware\\Core\\Framework\\Store\\Command\\StoreLoginCommand'] = $instance = new \Shopware\Core\Framework\Store\Command\StoreLoginCommand(($container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'] ?? self::getStoreClientService($container)), ($container->services['user.repository'] ?? self::getUser_RepositoryService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)));

        $instance->setName('store:login');
        $instance->setDescription('Login to the store');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Store\Services\AbstractExtensionDataProvider' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\ExtensionDataProvider
     */
    protected static function getAbstractExtensionDataProviderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/AbstractExtensionDataProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/ExtensionDataProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/ExtensionListingLoader.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLoader'] ?? self::getExtensionLoaderService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'])) {
            return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'];
        }
        $b = ($container->services['app.repository'] ?? self::getApp_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'])) {
            return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'];
        }
        $c = ($container->services['plugin.repository'] ?? self::getPlugin_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'])) {
            return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'];
        }
        $d = ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'] ?? self::getStoreClientService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'])) {
            return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractExtensionDataProvider'] = new \Shopware\Core\Framework\Store\Services\ExtensionDataProvider($a, $b, $c, new \Shopware\Core\Framework\Store\Services\ExtensionListingLoader($d));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Store\Services\AbstractStoreAppLifecycleService' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\StoreAppLifecycleService
     */
    protected static function getAbstractStoreAppLifecycleServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/AbstractStoreAppLifecycleService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/StoreAppLifecycleService.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLifecycle'] ?? self::getAppLifecycleService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'])) {
            return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'];
        }
        $b = ($container->services['app.repository'] ?? self::getApp_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'])) {
            return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'];
        }
        $c = ($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'])) {
            return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'];
        }
        $d = ($container->services['theme.repository'] ?? self::getTheme_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'])) {
            return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'];
        }
        $e = ($container->privates['Shopware\\Core\\Framework\\App\\AppStateService'] ?? self::getAppStateServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'])) {
            return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'] = new \Shopware\Core\Framework\Store\Services\StoreAppLifecycleService(($container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'] ?? self::getStoreClientService($container)), ($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] ?? self::getAppLoaderService($container)), $a, $b, $c, $d, $e, ($container->privates['Shopware\\Core\\Framework\\App\\Delta\\AppConfirmationDeltaProvider'] ?? self::getAppConfirmationDeltaProviderService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Store\Services\ExtensionDownloader' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\ExtensionDownloader
     */
    protected static function getExtensionDownloaderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/ExtensionDownloader.php';

        $a = ($container->services['plugin.repository'] ?? self::getPlugin_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionDownloader'])) {
            return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionDownloader'];
        }
        $b = ($container->privates['Shopware\\Core\\Framework\\Plugin\\PluginManagementService'] ?? self::getPluginManagementServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionDownloader'])) {
            return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionDownloader'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionDownloader'] = new \Shopware\Core\Framework\Store\Services\ExtensionDownloader($a, ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'] ?? self::getStoreClientService($container)), $b, (\dirname(__DIR__, 4).'/custom/plugins'), \dirname(__DIR__, 4));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Store\Services\ExtensionLifecycleService' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\ExtensionLifecycleService
     */
    protected static function getExtensionLifecycleServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/AbstractExtensionLifecycle.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/ExtensionLifecycleService.php';

        return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLifecycleService'] = new \Shopware\Core\Framework\Store\Services\ExtensionLifecycleService(($container->privates['Shopware\\Core\\Framework\\Store\\Services\\AbstractStoreAppLifecycleService'] ?? self::getAbstractStoreAppLifecycleServiceService($container)), ($container->privates['Shopware\\Core\\Framework\\Plugin\\PluginService'] ?? self::getPluginServiceService($container)), ($container->privates['Shopware\\Core\\Framework\\Plugin\\PluginLifecycleService'] ?? self::getPluginLifecycleServiceService($container)), ($container->privates['Shopware\\Core\\Framework\\Plugin\\PluginManagementService'] ?? self::getPluginManagementServiceService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Store\Services\ExtensionLoader' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\ExtensionLoader
     */
    protected static function getExtensionLoaderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/ExtensionLoader.php';

        $a = ($container->services['theme.repository'] ?? self::getTheme_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLoader'])) {
            return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLoader'];
        }
        $b = ($container->privates['Shopware\\Core\\System\\SystemConfig\\Service\\ConfigurationService'] ?? self::getConfigurationServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLoader'])) {
            return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLoader'];
        }
        $c = ($container->privates['Shopware\\Core\\Framework\\Store\\Authentication\\LocaleProvider'] ?? self::getLocaleProviderService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLoader'])) {
            return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLoader'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLoader'] = new \Shopware\Core\Framework\Store\Services\ExtensionLoader($a, ($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] ?? self::getAppLoaderService($container)), $b, $c, ($container->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'] ?? self::getLanguageLocaleCodeProviderService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Store\Services\FirstRunWizardService' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\FirstRunWizardService
     */
    protected static function getFirstRunWizardServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/FirstRunWizardService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/FirstRunWizardClient.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Authentication/AbstractStoreRequestOptionsProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Authentication/FrwRequestOptionsProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/InstanceService.php';

        $a = ($container->services['user_config.repository'] ?? self::getUserConfig_RepositoryService($container));

        return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\FirstRunWizardService'] = new \Shopware\Core\Framework\Store\Services\FirstRunWizardService(($container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreService'] ?? self::getStoreServiceService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)), ($container->services['shopware.filesystem.public'] ?? self::getShopware_Filesystem_PublicService($container)), '1', ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), new \Shopware\Core\Framework\Store\Services\FirstRunWizardClient(($container->services['shopware.frw_client'] ?? self::getShopware_FrwClientService($container)), new \Shopware\Core\Framework\Store\Authentication\FrwRequestOptionsProvider(($container->services['Shopware\\Core\\Framework\\Store\\Authentication\\StoreRequestOptionsProvider'] ?? self::getStoreRequestOptionsProviderService($container)), $a), ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\InstanceService'] ??= new \Shopware\Core\Framework\Store\Services\InstanceService('6.5.7.3', $container->getEnv('INSTANCE_ID')))), $a, ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\TrackingEventClient'] ?? self::getTrackingEventClientService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Store\Services\StoreClient' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\StoreClient
     */
    protected static function getStoreClientService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/StoreClient.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/InstanceService.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreService'] ?? self::getStoreServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'])) {
            return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'];
        }
        $b = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'])) {
            return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'];
        }
        $c = ($container->services['Shopware\\Core\\Framework\\Store\\Authentication\\StoreRequestOptionsProvider'] ?? self::getStoreRequestOptionsProviderService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'])) {
            return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'];
        }
        $d = ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\ExtensionLoader'] ?? self::getExtensionLoaderService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'])) {
            return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClient'] = new \Shopware\Core\Framework\Store\Services\StoreClient($container->parameters['shopware.store_endpoints'], $a, $b, $c, $d, ($container->services['shopware.store_client'] ?? self::getShopware_StoreClientService($container)), ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\InstanceService'] ??= new \Shopware\Core\Framework\Store\Services\InstanceService('6.5.7.3', $container->getEnv('INSTANCE_ID'))));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Store\Services\StoreClientFactory' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\StoreClientFactory
     */
    protected static function getStoreClientFactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/StoreClientFactory.php';

        $a = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClientFactory'])) {
            return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClientFactory'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreClientFactory'] = new \Shopware\Core\Framework\Store\Services\StoreClientFactory($a);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Store\Services\StoreService' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\StoreService
     */
    protected static function getStoreServiceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\StoreService'] = $container->createProxy('StoreServiceGhost6a43734', static fn () => \StoreServiceGhost6a43734::createLazyGhost(static fn ($proxy) => self::getStoreServiceService($container, $proxy)));
        }

        return ($lazyLoad->__construct(($container->services['user.repository'] ?? self::getUser_RepositoryService($container)), ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\TrackingEventClient'] ?? self::getTrackingEventClientService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Store\Services\TrackingEventClient' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Services\TrackingEventClient
     */
    protected static function getTrackingEventClientService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/TrackingEventClient.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/InstanceService.php';

        $a = ($container->services['shopware.store_client'] ?? self::getShopware_StoreClientService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Store\\Services\\TrackingEventClient'])) {
            return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\TrackingEventClient'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Store\\Services\\TrackingEventClient'] = new \Shopware\Core\Framework\Store\Services\TrackingEventClient($a, ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\InstanceService'] ??= new \Shopware\Core\Framework\Store\Services\InstanceService('6.5.7.3', $container->getEnv('INSTANCE_ID'))));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Store\Subscriber\LicenseHostChangedSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\Store\Subscriber\LicenseHostChangedSubscriber
     */
    protected static function getLicenseHostChangedSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Subscriber/LicenseHostChangedSubscriber.php';

        $a = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Store\\Subscriber\\LicenseHostChangedSubscriber'])) {
            return $container->privates['Shopware\\Core\\Framework\\Store\\Subscriber\\LicenseHostChangedSubscriber'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Store\\Subscriber\\LicenseHostChangedSubscriber'] = new \Shopware\Core\Framework\Store\Subscriber\LicenseHostChangedSubscriber($a, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Validation\DataValidator' shared service.
     *
     * @return \Shopware\Core\Framework\Validation\DataValidator
     */
    protected static function getDataValidatorService($container)
    {
        $a = ($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'])) {
            return $container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Validation\\DataValidator'] = new \Shopware\Core\Framework\Validation\DataValidator($a);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Validation\HappyPathValidator' shared service.
     *
     * @return \Shopware\Core\Framework\Validation\HappyPathValidator
     */
    protected static function getHappyPathValidatorService($container)
    {
        $a = ($container->privates['validator.builder'] ?? self::getValidator_BuilderService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'])) {
            return $container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] = new \Shopware\Core\Framework\Validation\HappyPathValidator($a->getValidator());
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Webhook\BusinessEventEncoder' shared service.
     *
     * @return \Shopware\Core\Framework\Webhook\BusinessEventEncoder
     */
    protected static function getBusinessEventEncoderService($container)
    {
        $a = ($container->privates['Shopware\\Core\\Framework\\Api\\Serializer\\JsonEntityEncoder'] ?? self::getJsonEntityEncoderService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Webhook\\BusinessEventEncoder'])) {
            return $container->privates['Shopware\\Core\\Framework\\Webhook\\BusinessEventEncoder'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Webhook\\BusinessEventEncoder'] = new \Shopware\Core\Framework\Webhook\BusinessEventEncoder($a, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Webhook\Handler\WebhookEventMessageHandler' shared service.
     *
     * @return \Shopware\Core\Framework\Webhook\Handler\WebhookEventMessageHandler
     */
    protected static function getWebhookEventMessageHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/Handler/WebhookEventMessageHandler.php';

        $a = ($container->privates['shopware.app_system.guzzle'] ?? self::getShopware_AppSystem_GuzzleService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Webhook\\Handler\\WebhookEventMessageHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\Webhook\\Handler\\WebhookEventMessageHandler'];
        }
        $b = ($container->services['webhook.repository'] ?? self::getWebhook_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Webhook\\Handler\\WebhookEventMessageHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\Webhook\\Handler\\WebhookEventMessageHandler'];
        }
        $c = ($container->services['webhook_event_log.repository'] ?? self::getWebhookEventLog_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Webhook\\Handler\\WebhookEventMessageHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\Webhook\\Handler\\WebhookEventMessageHandler'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Webhook\\Handler\\WebhookEventMessageHandler'] = new \Shopware\Core\Framework\Webhook\Handler\WebhookEventMessageHandler($a, $b, $c);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Webhook\Hookable\HookableEventFactory' shared service.
     *
     * @return \Shopware\Core\Framework\Webhook\Hookable\HookableEventFactory
     */
    protected static function getHookableEventFactoryService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['Shopware\\Core\\Framework\\Webhook\\Hookable\\HookableEventFactory'] = $container->createProxy('HookableEventFactoryGhost35f7785', static fn () => \HookableEventFactoryGhost35f7785::createLazyGhost(static fn ($proxy) => self::getHookableEventFactoryService($container, $proxy)));
        }

        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/Hookable/WriteResultMerger.php';

        return ($lazyLoad->__construct(($container->privates['Shopware\\Core\\Framework\\Webhook\\BusinessEventEncoder'] ?? self::getBusinessEventEncoderService($container)), new \Shopware\Core\Framework\Webhook\Hookable\WriteResultMerger(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Webhook\ScheduledTask\CleanupWebhookEventLogTaskHandler' shared service.
     *
     * @return \Shopware\Core\Framework\Webhook\ScheduledTask\CleanupWebhookEventLogTaskHandler
     */
    protected static function getCleanupWebhookEventLogTaskHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageSubscriberInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/ScheduledTaskHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/ScheduledTask/CleanupWebhookEventLogTaskHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/Service/WebhookCleanup.php';

        $a = ($container->services['scheduled_task.repository'] ?? self::getScheduledTask_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Webhook\\ScheduledTask\\CleanupWebhookEventLogTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\Webhook\\ScheduledTask\\CleanupWebhookEventLogTaskHandler'];
        }
        $b = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Webhook\\ScheduledTask\\CleanupWebhookEventLogTaskHandler'])) {
            return $container->privates['Shopware\\Core\\Framework\\Webhook\\ScheduledTask\\CleanupWebhookEventLogTaskHandler'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Webhook\\ScheduledTask\\CleanupWebhookEventLogTaskHandler'] = new \Shopware\Core\Framework\Webhook\ScheduledTask\CleanupWebhookEventLogTaskHandler($a, new \Shopware\Core\Framework\Webhook\Service\WebhookCleanup($b, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container))));
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Webhook\Subscriber\RetryWebhookMessageFailedSubscriber' shared service.
     *
     * @return \Shopware\Core\Framework\Webhook\Subscriber\RetryWebhookMessageFailedSubscriber
     */
    protected static function getRetryWebhookMessageFailedSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/Subscriber/RetryWebhookMessageFailedSubscriber.php';

        $a = ($container->services['webhook.repository'] ?? self::getWebhook_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Webhook\\Subscriber\\RetryWebhookMessageFailedSubscriber'])) {
            return $container->privates['Shopware\\Core\\Framework\\Webhook\\Subscriber\\RetryWebhookMessageFailedSubscriber'];
        }
        $b = ($container->services['webhook_event_log.repository'] ?? self::getWebhookEventLog_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Webhook\\Subscriber\\RetryWebhookMessageFailedSubscriber'])) {
            return $container->privates['Shopware\\Core\\Framework\\Webhook\\Subscriber\\RetryWebhookMessageFailedSubscriber'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Webhook\\Subscriber\\RetryWebhookMessageFailedSubscriber'] = new \Shopware\Core\Framework\Webhook\Subscriber\RetryWebhookMessageFailedSubscriber($a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Webhook\WebhookCacheClearer' shared service.
     *
     * @return \Shopware\Core\Framework\Webhook\WebhookCacheClearer
     */
    protected static function getWebhookCacheClearerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Webhook/WebhookCacheClearer.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\Webhook\\WebhookDispatcher'] ?? self::getWebhookDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Webhook\\WebhookCacheClearer'])) {
            return $container->privates['Shopware\\Core\\Framework\\Webhook\\WebhookCacheClearer'];
        }

        return $container->privates['Shopware\\Core\\Framework\\Webhook\\WebhookCacheClearer'] = new \Shopware\Core\Framework\Webhook\WebhookCacheClearer($a);
    }

    /**
     * Gets the private 'Shopware\Core\Framework\Webhook\WebhookDispatcher' shared service.
     *
     * @return \Shopware\Core\Framework\Webhook\WebhookDispatcher
     */
    protected static function getWebhookDispatcherService($container)
    {
        $a = ($container->services['Shopware\\Core\\Content\\Flow\\Dispatching\\FlowFactory'] ?? self::getFlowFactoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Webhook\\WebhookDispatcher'])) {
            return $container->privates['Shopware\\Core\\Framework\\Webhook\\WebhookDispatcher'];
        }
        $b = ($container->privates['shopware.app_system.guzzle'] ?? self::getShopware_AppSystem_GuzzleService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Webhook\\WebhookDispatcher'])) {
            return $container->privates['Shopware\\Core\\Framework\\Webhook\\WebhookDispatcher'];
        }
        $c = ($container->privates['Shopware\\Core\\Framework\\Webhook\\Hookable\\HookableEventFactory'] ?? self::getHookableEventFactoryService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Webhook\\WebhookDispatcher'])) {
            return $container->privates['Shopware\\Core\\Framework\\Webhook\\WebhookDispatcher'];
        }
        $d = ($container->privates['messenger.bus.default'] ?? self::getMessenger_Bus_DefaultService($container));

        if (isset($container->privates['Shopware\\Core\\Framework\\Webhook\\WebhookDispatcher'])) {
            return $container->privates['Shopware\\Core\\Framework\\Webhook\\WebhookDispatcher'];
        }
        $e = new \Shopware\Core\Content\Flow\Dispatching\FlowDispatcher(new \Symfony\Component\EventDispatcher\EventDispatcher(), ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), $a);
        $e->setContainer($container);

        return $container->privates['Shopware\\Core\\Framework\\Webhook\\WebhookDispatcher'] = new \Shopware\Core\Framework\Webhook\WebhookDispatcher($e, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $b, $container->getEnv('APP_URL'), $container, $c, '6.5.7.3', $d, true);
    }

    /**
     * Gets the private 'Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelCreateCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelCreateCommand
     */
    protected static function getSalesChannelCreateCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/SalesChannel/Command/SalesChannelCreateCommand.php';

        $container->privates['Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelCreateCommand'] = $instance = new \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelCreateCommand(($container->services['Shopware\\Core\\Maintenance\\SalesChannel\\Service\\SalesChannelCreator'] ?? self::getSalesChannelCreatorService($container)));

        $instance->setName('sales-channel:create');
        $instance->setDescription('Creates a new sales channel');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelListCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelListCommand
     */
    protected static function getSalesChannelListCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/SalesChannel/Command/SalesChannelListCommand.php';

        $container->privates['Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelListCommand'] = $instance = new \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelListCommand(($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container)));

        $instance->setName('sales-channel:list');
        $instance->setDescription('Lists all sales channels');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelMaintenanceDisableCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelMaintenanceDisableCommand
     */
    protected static function getSalesChannelMaintenanceDisableCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/SalesChannel/Command/SalesChannelMaintenanceEnableCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/SalesChannel/Command/SalesChannelMaintenanceDisableCommand.php';

        $container->privates['Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceDisableCommand'] = $instance = new \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelMaintenanceDisableCommand(($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container)));

        $instance->setName('sales-channel:maintenance:disable');
        $instance->setDescription('Disable maintenance mode for a sales channel');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelMaintenanceEnableCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelMaintenanceEnableCommand
     */
    protected static function getSalesChannelMaintenanceEnableCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/SalesChannel/Command/SalesChannelMaintenanceEnableCommand.php';

        $container->privates['Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelMaintenanceEnableCommand'] = $instance = new \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelMaintenanceEnableCommand(($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container)));

        $instance->setName('sales-channel:maintenance:enable');
        $instance->setDescription('Enable maintenance mode for a sales channel');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelUpdateDomainCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelUpdateDomainCommand
     */
    protected static function getSalesChannelUpdateDomainCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/SalesChannel/Command/SalesChannelUpdateDomainCommand.php';

        $container->privates['Shopware\\Core\\Maintenance\\SalesChannel\\Command\\SalesChannelUpdateDomainCommand'] = $instance = new \Shopware\Core\Maintenance\SalesChannel\Command\SalesChannelUpdateDomainCommand(($container->services['sales_channel_domain.repository'] ?? self::getSalesChannelDomain_RepositoryService($container)));

        $instance->setName('sales-channel:update:domain');
        $instance->setDescription('Updates a sales channel domain');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Maintenance\System\Command\SystemConfigureShopCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\System\Command\SystemConfigureShopCommand
     */
    protected static function getSystemConfigureShopCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Command/SystemConfigureShopCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Service/ShopConfigurator.php';

        $container->privates['Shopware\\Core\\Maintenance\\System\\Command\\SystemConfigureShopCommand'] = $instance = new \Shopware\Core\Maintenance\System\Command\SystemConfigureShopCommand(new \Shopware\Core\Maintenance\System\Service\ShopConfigurator(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container))), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheClearer'] ?? self::getCacheClearerService($container)));

        $instance->setName('system:configure-shop');
        $instance->setDescription('Configure shop');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Maintenance\System\Command\SystemGenerateAppSecretCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\System\Command\SystemGenerateAppSecretCommand
     */
    protected static function getSystemGenerateAppSecretCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Command/SystemGenerateAppSecretCommand.php';

        $container->privates['Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateAppSecretCommand'] = $instance = new \Shopware\Core\Maintenance\System\Command\SystemGenerateAppSecretCommand();

        $instance->setName('system:generate-app-secret');
        $instance->setDescription('Generates a new app secret');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Maintenance\System\Command\SystemGenerateJwtSecretCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\System\Command\SystemGenerateJwtSecretCommand
     */
    protected static function getSystemGenerateJwtSecretCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Command/SystemGenerateJwtSecretCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Service/JwtCertificateGenerator.php';

        $container->privates['Shopware\\Core\\Maintenance\\System\\Command\\SystemGenerateJwtSecretCommand'] = $instance = new \Shopware\Core\Maintenance\System\Command\SystemGenerateJwtSecretCommand(\dirname(__DIR__, 4), ($container->privates['Shopware\\Core\\Maintenance\\System\\Service\\JwtCertificateGenerator'] ??= new \Shopware\Core\Maintenance\System\Service\JwtCertificateGenerator()));

        $instance->setName('system:generate-jwt-secret');
        $instance->setDescription('Generates a new JWT secret');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Maintenance\System\Command\SystemInstallCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\System\Command\SystemInstallCommand
     */
    protected static function getSystemInstallCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Command/SystemInstallCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Service/SetupDatabaseAdapter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Service/DatabaseConnectionFactory.php';

        $container->privates['Shopware\\Core\\Maintenance\\System\\Command\\SystemInstallCommand'] = $instance = new \Shopware\Core\Maintenance\System\Command\SystemInstallCommand(\dirname(__DIR__, 4), new \Shopware\Core\Maintenance\System\Service\SetupDatabaseAdapter(), new \Shopware\Core\Maintenance\System\Service\DatabaseConnectionFactory());

        $instance->setName('system:install');
        $instance->setDescription('Installs the Shopware 6 system');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Maintenance\System\Command\SystemIsInstalledCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\System\Command\SystemIsInstalledCommand
     */
    protected static function getSystemIsInstalledCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Command/SystemIsInstalledCommand.php';

        $container->privates['Shopware\\Core\\Maintenance\\System\\Command\\SystemIsInstalledCommand'] = $instance = new \Shopware\Core\Maintenance\System\Command\SystemIsInstalledCommand(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));

        $instance->setName('system:is-installed');
        $instance->setDescription('Checks if the system is installed and returns exit code 0 if Shopware is installed');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Maintenance\System\Command\SystemSetupCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\System\Command\SystemSetupCommand
     */
    protected static function getSystemSetupCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Command/SystemSetupCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Service/JwtCertificateGenerator.php';

        $container->privates['Shopware\\Core\\Maintenance\\System\\Command\\SystemSetupCommand'] = $instance = new \Shopware\Core\Maintenance\System\Command\SystemSetupCommand(\dirname(__DIR__, 4), ($container->privates['Shopware\\Core\\Maintenance\\System\\Service\\JwtCertificateGenerator'] ??= new \Shopware\Core\Maintenance\System\Service\JwtCertificateGenerator()), ($container->privates['Symfony\\Component\\Dotenv\\Command\\DotenvDumpCommand'] ?? self::getDotenvDumpCommandService($container)));

        $instance->setName('system:setup');
        $instance->setDescription('Setup the system');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Maintenance\System\Command\SystemUpdateFinishCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\System\Command\SystemUpdateFinishCommand
     */
    protected static function getSystemUpdateFinishCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Command/SystemUpdateFinishCommand.php';

        $container->privates['Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdateFinishCommand'] = $instance = new \Shopware\Core\Maintenance\System\Command\SystemUpdateFinishCommand($container, '6.5.7.3');

        $instance->setName('system:update:finish');
        $instance->setDescription('Finishes the update process');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Maintenance\System\Command\SystemUpdatePrepareCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\System\Command\SystemUpdatePrepareCommand
     */
    protected static function getSystemUpdatePrepareCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/System/Command/SystemUpdatePrepareCommand.php';

        $container->privates['Shopware\\Core\\Maintenance\\System\\Command\\SystemUpdatePrepareCommand'] = $instance = new \Shopware\Core\Maintenance\System\Command\SystemUpdatePrepareCommand($container, '6.5.7.3');

        $instance->setName('system:update:prepare');
        $instance->setDescription('Prepares the update process');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Maintenance\User\Command\UserChangePasswordCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\User\Command\UserChangePasswordCommand
     */
    protected static function getUserChangePasswordCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/User/Command/UserChangePasswordCommand.php';

        $container->privates['Shopware\\Core\\Maintenance\\User\\Command\\UserChangePasswordCommand'] = $instance = new \Shopware\Core\Maintenance\User\Command\UserChangePasswordCommand(($container->services['user.repository'] ?? self::getUser_RepositoryService($container)));

        $instance->setName('user:change-password');
        $instance->setDescription('Change the password of a user');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Maintenance\User\Command\UserCreateCommand' shared autowired service.
     *
     * @return \Shopware\Core\Maintenance\User\Command\UserCreateCommand
     */
    protected static function getUserCreateCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/User/Command/UserCreateCommand.php';

        $container->privates['Shopware\\Core\\Maintenance\\User\\Command\\UserCreateCommand'] = $instance = new \Shopware\Core\Maintenance\User\Command\UserCreateCommand(($container->services['Shopware\\Core\\Maintenance\\User\\Service\\UserProvisioner'] ?? self::getUserProvisionerService($container)));

        $instance->setName('user:create');
        $instance->setDescription('Creates a new user');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\Profiling\Integration\Stopwatch' shared service.
     *
     * @return \Shopware\Core\Profiling\Integration\Stopwatch
     */
    protected static function getStopwatchService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Profiling/Integration/ProfilerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Profiling/Integration/Stopwatch.php';

        return $container->privates['Shopware\\Core\\Profiling\\Integration\\Stopwatch'] = new \Shopware\Core\Profiling\Integration\Stopwatch(($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)));
    }

    /**
     * Gets the private 'Shopware\Core\Profiling\Subscriber\ActiveRulesDataCollectorSubscriber' shared service.
     *
     * @return \Shopware\Core\Profiling\Subscriber\ActiveRulesDataCollectorSubscriber
     */
    protected static function getActiveRulesDataCollectorSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Profiling/Subscriber/ActiveRulesDataCollectorSubscriber.php';

        $a = ($container->services['rule.repository'] ?? self::getRule_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\Profiling\\Subscriber\\ActiveRulesDataCollectorSubscriber'])) {
            return $container->privates['Shopware\\Core\\Profiling\\Subscriber\\ActiveRulesDataCollectorSubscriber'];
        }

        return $container->privates['Shopware\\Core\\Profiling\\Subscriber\\ActiveRulesDataCollectorSubscriber'] = new \Shopware\Core\Profiling\Subscriber\ActiveRulesDataCollectorSubscriber($a);
    }

    /**
     * Gets the private 'Shopware\Core\System\CustomEntity\CustomEntityLifecycleService' shared service.
     *
     * @return \Shopware\Core\System\CustomEntity\CustomEntityLifecycleService
     */
    protected static function getCustomEntityLifecycleServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomEntity/CustomEntityLifecycleService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomEntity/Xml/Config/CustomEntityEnrichmentService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomEntity/Xml/Config/AdminUi/AdminUiXmlSchemaValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomEntity/Xml/CustomEntityXmlSchemaValidator.php';

        return $container->privates['Shopware\\Core\\System\\CustomEntity\\CustomEntityLifecycleService'] = new \Shopware\Core\System\CustomEntity\CustomEntityLifecycleService(($container->privates['Shopware\\Core\\System\\CustomEntity\\Schema\\CustomEntityPersister'] ?? self::getCustomEntityPersisterService($container)), ($container->services['Shopware\\Core\\System\\CustomEntity\\Schema\\CustomEntitySchemaUpdater'] ?? self::getCustomEntitySchemaUpdaterService($container)), new \Shopware\Core\System\CustomEntity\Xml\Config\CustomEntityEnrichmentService(new \Shopware\Core\System\CustomEntity\Xml\Config\AdminUi\AdminUiXmlSchemaValidator()), new \Shopware\Core\System\CustomEntity\Xml\CustomEntityXmlSchemaValidator(), \dirname(__DIR__, 4), ($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] ?? self::getAppLoaderService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\System\CustomEntity\Schema\CustomEntityPersister' shared service.
     *
     * @return \Shopware\Core\System\CustomEntity\Schema\CustomEntityPersister
     */
    protected static function getCustomEntityPersisterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/CustomEntity/Schema/CustomEntityPersister.php';

        return $container->privates['Shopware\\Core\\System\\CustomEntity\\Schema\\CustomEntityPersister'] = new \Shopware\Core\System\CustomEntity\Schema\CustomEntityPersister(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\System\CustomField\CustomFieldService' shared service.
     *
     * @return \Shopware\Core\System\CustomField\CustomFieldService
     */
    protected static function getCustomFieldServiceService($container)
    {
        return $container->privates['Shopware\\Core\\System\\CustomField\\CustomFieldService'] = new \Shopware\Core\System\CustomField\CustomFieldService(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\System\Language\CachedLanguageLoader' shared service.
     *
     * @return \Shopware\Core\System\Language\CachedLanguageLoader
     */
    protected static function getCachedLanguageLoaderService($container)
    {
        return $container->privates['Shopware\\Core\\System\\Language\\CachedLanguageLoader'] = new \Shopware\Core\System\Language\CachedLanguageLoader(new \Shopware\Core\System\Language\LanguageLoader(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container))), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\System\Language\LanguageValidator' shared service.
     *
     * @return \Shopware\Core\System\Language\LanguageValidator
     */
    protected static function getLanguageValidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Language/LanguageValidator.php';

        return $container->privates['Shopware\\Core\\System\\Language\\LanguageValidator'] = new \Shopware\Core\System\Language\LanguageValidator(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\System\Locale\LanguageLocaleCodeProvider' shared service.
     *
     * @return \Shopware\Core\System\Locale\LanguageLocaleCodeProvider
     */
    protected static function getLanguageLocaleCodeProviderService($container)
    {
        return $container->privates['Shopware\\Core\\System\\Locale\\LanguageLocaleCodeProvider'] = new \Shopware\Core\System\Locale\LanguageLocaleCodeProvider(($container->privates['Shopware\\Core\\System\\Language\\CachedLanguageLoader'] ?? self::getCachedLanguageLoaderService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\System\NumberRange\Command\MigrateIncrementStorageCommand' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\Command\MigrateIncrementStorageCommand
     */
    protected static function getMigrateIncrementStorageCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/Command/MigrateIncrementStorageCommand.php';

        $container->privates['Shopware\\Core\\System\\NumberRange\\Command\\MigrateIncrementStorageCommand'] = $instance = new \Shopware\Core\System\NumberRange\Command\MigrateIncrementStorageCommand(($container->privates['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\Pattern\\IncrementStorage\\IncrementStorageRegistry'] ?? self::getIncrementStorageRegistryService($container)));

        $instance->setName('number-range:migrate');
        $instance->setDescription('Migrate the increment storage of a number range');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\System\NumberRange\ValueGenerator\Pattern\IncrementStorage\IncrementSqlStorage' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\ValueGenerator\Pattern\IncrementStorage\IncrementSqlStorage
     */
    protected static function getIncrementSqlStorageService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/ValueGenerator/Pattern/IncrementStorage/AbstractIncrementStorage.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/ValueGenerator/Pattern/IncrementStorage/IncrementSqlStorage.php';

        return $container->privates['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\Pattern\\IncrementStorage\\IncrementSqlStorage'] = new \Shopware\Core\System\NumberRange\ValueGenerator\Pattern\IncrementStorage\IncrementSqlStorage(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\System\NumberRange\ValueGenerator\Pattern\IncrementStorage\IncrementStorageRegistry' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\ValueGenerator\Pattern\IncrementStorage\IncrementStorageRegistry
     */
    protected static function getIncrementStorageRegistryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/ValueGenerator/Pattern/IncrementStorage/IncrementStorageRegistry.php';

        return $container->privates['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\Pattern\\IncrementStorage\\IncrementStorageRegistry'] = new \Shopware\Core\System\NumberRange\ValueGenerator\Pattern\IncrementStorage\IncrementStorageRegistry(new RewindableGenerator(function () use ($container) {
            yield 'SQL' => ($container->privates['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\Pattern\\IncrementStorage\\IncrementSqlStorage'] ?? self::getIncrementSqlStorageService($container));
        }, 1), 'SQL');
    }

    /**
     * Gets the private 'Shopware\Core\System\NumberRange\ValueGenerator\Pattern\ValueGeneratorPatternIncrement' shared service.
     *
     * @return \Shopware\Core\System\NumberRange\ValueGenerator\Pattern\ValueGeneratorPatternIncrement
     */
    protected static function getValueGeneratorPatternIncrementService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/ValueGenerator/Pattern/AbstractValueGenerator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/ValueGenerator/Pattern/ValueGeneratorPatternIncrement.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/NumberRange/ValueGenerator/Pattern/IncrementStorage/AbstractIncrementStorage.php';

        return $container->privates['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\Pattern\\ValueGeneratorPatternIncrement'] = new \Shopware\Core\System\NumberRange\ValueGenerator\Pattern\ValueGeneratorPatternIncrement(($container->privates['Shopware\\Core\\System\\NumberRange\\ValueGenerator\\Pattern\\IncrementStorage\\IncrementStorageRegistry'] ?? self::getIncrementStorageRegistryService($container))->getStorage());
    }

    /**
     * Gets the private 'Shopware\Core\System\SalesChannel\Api\StoreApiResponseListener' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Api\StoreApiResponseListener
     */
    protected static function getStoreApiResponseListenerService($container)
    {
        return $container->privates['Shopware\\Core\\System\\SalesChannel\\Api\\StoreApiResponseListener'] = new \Shopware\Core\System\SalesChannel\Api\StoreApiResponseListener(($container->privates['Shopware\\Core\\System\\SalesChannel\\Api\\StructEncoder'] ?? self::getStructEncoderService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\System\SalesChannel\Api\StructEncoder' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Api\StructEncoder
     */
    protected static function getStructEncoderService($container)
    {
        $a = ($container->privates['serializer'] ?? self::getSerializerService($container));

        if (isset($container->privates['Shopware\\Core\\System\\SalesChannel\\Api\\StructEncoder'])) {
            return $container->privates['Shopware\\Core\\System\\SalesChannel\\Api\\StructEncoder'];
        }

        return $container->privates['Shopware\\Core\\System\\SalesChannel\\Api\\StructEncoder'] = new \Shopware\Core\System\SalesChannel\Api\StructEncoder(new \Shopware\Core\System\SalesChannel\Entity\DefinitionRegistryChain(($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)), ($container->services['Shopware\\Core\\System\\SalesChannel\\Entity\\SalesChannelDefinitionInstanceRegistry'] ?? self::getSalesChannelDefinitionInstanceRegistryService($container))), $a);
    }

    /**
     * Gets the private 'Shopware\Core\System\SalesChannel\Context\CartRestorer' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Context\CartRestorer
     */
    protected static function getCartRestorerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/CartRestorer.php';

        $a = ($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? self::getSalesChannelContextFactoryService($container));

        if (isset($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'])) {
            return $container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'];
        }
        $b = ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'] ?? self::getSalesChannelContextPersisterService($container));

        if (isset($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'])) {
            return $container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'];
        }
        $c = ($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? self::getCartServiceService($container));

        if (isset($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'])) {
            return $container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'];
        }
        $d = ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'] ?? self::getCartRuleLoaderService($container));

        if (isset($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'])) {
            return $container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'];
        }
        $e = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'])) {
            return $container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'];
        }

        return $container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\CartRestorer'] = new \Shopware\Core\System\SalesChannel\Context\CartRestorer($a, $b, $c, $d, $e);
    }

    /**
     * Gets the private 'Shopware\Core\System\SalesChannel\Context\Cleanup\CleanupSalesChannelContextTaskHandler' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Context\Cleanup\CleanupSalesChannelContextTaskHandler
     */
    protected static function getCleanupSalesChannelContextTaskHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageSubscriberInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/ScheduledTaskHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/Cleanup/CleanupSalesChannelContextTaskHandler.php';

        $a = ($container->services['scheduled_task.repository'] ?? self::getScheduledTask_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\Cleanup\\CleanupSalesChannelContextTaskHandler'])) {
            return $container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\Cleanup\\CleanupSalesChannelContextTaskHandler'];
        }

        return $container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\Cleanup\\CleanupSalesChannelContextTaskHandler'] = new \Shopware\Core\System\SalesChannel\Context\Cleanup\CleanupSalesChannelContextTaskHandler($a, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), 120);
    }

    /**
     * Gets the private 'Shopware\Core\System\SalesChannel\Context\SalesChannelContextPersister' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Context\SalesChannelContextPersister
     */
    protected static function getSalesChannelContextPersisterService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'])) {
            return $container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'];
        }
        $b = ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] ?? self::getCartPersisterService($container));

        if (isset($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'])) {
            return $container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'];
        }

        return $container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'] = new \Shopware\Core\System\SalesChannel\Context\SalesChannelContextPersister(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $a, $b, 'P1D');
    }

    /**
     * Gets the private 'Shopware\Core\System\SalesChannel\Context\SalesChannelContextRestorer' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Context\SalesChannelContextRestorer
     */
    protected static function getSalesChannelContextRestorerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Context/SalesChannelContextRestorer.php';

        $a = ($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? self::getSalesChannelContextFactoryService($container));

        if (isset($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'])) {
            return $container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'];
        }
        $b = ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'] ?? self::getCartRuleLoaderService($container));

        if (isset($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'])) {
            return $container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'];
        }
        $c = ($container->privates['Shopware\\Core\\Checkout\\Cart\\Order\\OrderConverter'] ?? self::getOrderConverterService($container));

        if (isset($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'])) {
            return $container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'];
        }
        $d = ($container->services['order.repository'] ?? self::getOrder_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'])) {
            return $container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'];
        }
        $e = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'])) {
            return $container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'];
        }

        return $container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextRestorer'] = new \Shopware\Core\System\SalesChannel\Context\SalesChannelContextRestorer($a, $b, $c, $d, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $e);
    }

    /**
     * Gets the private 'Shopware\Core\System\SalesChannel\Context\SalesChannelContextService' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Context\SalesChannelContextService
     */
    protected static function getSalesChannelContextServiceService($container)
    {
        $a = ($container->services['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextFactory'] ?? self::getSalesChannelContextFactoryService($container));

        if (isset($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'])) {
            return $container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'];
        }
        $b = ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartRuleLoader'] ?? self::getCartRuleLoaderService($container));

        if (isset($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'])) {
            return $container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'];
        }
        $c = ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextPersister'] ?? self::getSalesChannelContextPersisterService($container));

        if (isset($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'])) {
            return $container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'];
        }
        $d = ($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? self::getCartServiceService($container));

        if (isset($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'])) {
            return $container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'];
        }
        $e = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'])) {
            return $container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'];
        }

        return $container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] = new \Shopware\Core\System\SalesChannel\Context\SalesChannelContextService($a, $b, $c, $d, $e);
    }

    /**
     * Gets the private 'Shopware\Core\System\SalesChannel\DataAbstractionLayer\SalesChannelIndexer' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\DataAbstractionLayer\SalesChannelIndexer
     */
    protected static function getSalesChannelIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/DataAbstractionLayer/SalesChannelIndexer.php';

        $a = ($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\System\\SalesChannel\\DataAbstractionLayer\\SalesChannelIndexer'])) {
            return $container->privates['Shopware\\Core\\System\\SalesChannel\\DataAbstractionLayer\\SalesChannelIndexer'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\System\\SalesChannel\\DataAbstractionLayer\\SalesChannelIndexer'])) {
            return $container->privates['Shopware\\Core\\System\\SalesChannel\\DataAbstractionLayer\\SalesChannelIndexer'];
        }

        return $container->privates['Shopware\\Core\\System\\SalesChannel\\DataAbstractionLayer\\SalesChannelIndexer'] = new \Shopware\Core\System\SalesChannel\DataAbstractionLayer\SalesChannelIndexer(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, $b, ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\ManyToManyIdFieldUpdater'] ?? self::getManyToManyIdFieldUpdaterService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\System\SalesChannel\StoreApiCustomFieldMapper' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\StoreApiCustomFieldMapper
     */
    protected static function getStoreApiCustomFieldMapperService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/StoreApiCustomFieldMapper.php';

        return $container->privates['Shopware\\Core\\System\\SalesChannel\\StoreApiCustomFieldMapper'] = new \Shopware\Core\System\SalesChannel\StoreApiCustomFieldMapper(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\System\SalesChannel\Validation\SalesChannelValidator' shared service.
     *
     * @return \Shopware\Core\System\SalesChannel\Validation\SalesChannelValidator
     */
    protected static function getSalesChannelValidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SalesChannel/Validation/SalesChannelValidator.php';

        return $container->privates['Shopware\\Core\\System\\SalesChannel\\Validation\\SalesChannelValidator'] = new \Shopware\Core\System\SalesChannel\Validation\SalesChannelValidator(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\System\Snippet\Command\ValidateSnippetsCommand' shared service.
     *
     * @return \Shopware\Core\System\Snippet\Command\ValidateSnippetsCommand
     */
    protected static function getValidateSnippetsCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/Command/ValidateSnippetsCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/SnippetValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/SnippetValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/SnippetFileHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/SnippetFixer.php';

        $a = new \Shopware\Core\System\Snippet\SnippetFileHandler();

        $container->privates['Shopware\\Core\\System\\Snippet\\Command\\ValidateSnippetsCommand'] = $instance = new \Shopware\Core\System\Snippet\Command\ValidateSnippetsCommand(new \Shopware\Core\System\Snippet\SnippetValidator(($container->services['Shopware\\Core\\System\\Snippet\\Files\\SnippetFileCollection'] ?? self::getSnippetFileCollectionService($container)), $a, (\dirname(__DIR__, 4).'/')), new \Shopware\Core\System\Snippet\SnippetFixer($a));

        $instance->setName('snippets:validate');
        $instance->setDescription('Validates snippets');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\System\Snippet\SnippetService' shared service.
     *
     * @return \Shopware\Core\System\Snippet\SnippetService
     */
    protected static function getSnippetServiceService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['Shopware\\Core\\System\\Snippet\\SnippetService'] = $container->createProxy('SnippetServiceGhost4734c54', static fn () => \SnippetServiceGhost4734c54::createLazyGhost(static fn ($proxy) => self::getSnippetServiceService($container, $proxy)));
        }

        return ($lazyLoad->__construct(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['Shopware\\Core\\System\\Snippet\\Files\\SnippetFileCollection'] ?? self::getSnippetFileCollectionService($container)), ($container->services['snippet.repository'] ?? self::getSnippet_RepositoryService($container)), ($container->services['snippet_set.repository'] ?? self::getSnippetSet_RepositoryService($container)), ($container->services['sales_channel_domain.repository'] ?? self::getSalesChannelDomain_RepositoryService($container)), ($container->services['Shopware\\Core\\System\\Snippet\\Filter\\SnippetFilterFactory'] ?? self::getSnippetFilterFactoryService($container)), $container, ($container->services['Shopware\\Storefront\\Theme\\SalesChannelThemeLoader'] ?? self::getSalesChannelThemeLoaderService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'Shopware\Core\System\Snippet\Subscriber\CustomFieldSubscriber' shared service.
     *
     * @return \Shopware\Core\System\Snippet\Subscriber\CustomFieldSubscriber
     */
    protected static function getCustomFieldSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Snippet/Subscriber/CustomFieldSubscriber.php';

        return $container->privates['Shopware\\Core\\System\\Snippet\\Subscriber\\CustomFieldSubscriber'] = new \Shopware\Core\System\Snippet\Subscriber\CustomFieldSubscriber(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\System\StateMachine\Command\WorkflowDumpCommand' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\Command\WorkflowDumpCommand
     */
    protected static function getWorkflowDumpCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/Command/WorkflowDumpCommand.php';

        $container->privates['Shopware\\Core\\System\\StateMachine\\Command\\WorkflowDumpCommand'] = $instance = new \Shopware\Core\System\StateMachine\Command\WorkflowDumpCommand(($container->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'] ?? self::getStateMachineRegistryService($container)));

        $instance->setName('state-machine:dump');
        $instance->setDescription('Dumps a state machine to a graphviz file');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\System\StateMachine\Loader\InitialStateIdLoader' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\Loader\InitialStateIdLoader
     */
    protected static function getInitialStateIdLoaderService($container)
    {
        return $container->privates['Shopware\\Core\\System\\StateMachine\\Loader\\InitialStateIdLoader'] = new \Shopware\Core\System\StateMachine\Loader\InitialStateIdLoader(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\System\StateMachine\StateMachineRegistry' shared service.
     *
     * @return \Shopware\Core\System\StateMachine\StateMachineRegistry
     */
    protected static function getStateMachineRegistryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/StateMachine/StateMachineRegistry.php';

        $a = ($container->services['state_machine.repository'] ?? self::getStateMachine_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'])) {
            return $container->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'];
        }
        $b = ($container->services['state_machine_state.repository'] ?? self::getStateMachineState_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'])) {
            return $container->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'];
        }
        $c = ($container->services['state_machine_history.repository'] ?? self::getStateMachineHistory_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'])) {
            return $container->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'])) {
            return $container->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'];
        }

        return $container->privates['Shopware\\Core\\System\\StateMachine\\StateMachineRegistry'] = new \Shopware\Core\System\StateMachine\StateMachineRegistry($a, $b, $c, $d, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\DefinitionInstanceRegistry'] ?? self::getDefinitionInstanceRegistryService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\System\SystemConfig\Command\ConfigGet' shared service.
     *
     * @return \Shopware\Core\System\SystemConfig\Command\ConfigGet
     */
    protected static function getConfigGetService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/Command/ConfigGet.php';

        $container->privates['Shopware\\Core\\System\\SystemConfig\\Command\\ConfigGet'] = $instance = new \Shopware\Core\System\SystemConfig\Command\ConfigGet(($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)));

        $instance->setName('system:config:get');
        $instance->setDescription('Get a config value');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\System\SystemConfig\Command\ConfigSet' shared service.
     *
     * @return \Shopware\Core\System\SystemConfig\Command\ConfigSet
     */
    protected static function getConfigSetService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/Command/ConfigSet.php';

        $container->privates['Shopware\\Core\\System\\SystemConfig\\Command\\ConfigSet'] = $instance = new \Shopware\Core\System\SystemConfig\Command\ConfigSet(($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)));

        $instance->setName('system:config:set');
        $instance->setDescription('Get a config value');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Core\System\SystemConfig\Service\ConfigurationService' shared service.
     *
     * @return \Shopware\Core\System\SystemConfig\Service\ConfigurationService
     */
    protected static function getConfigurationServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/SystemConfig/Service/ConfigurationService.php';

        $a = ($container->services['app.repository'] ?? self::getApp_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\System\\SystemConfig\\Service\\ConfigurationService'])) {
            return $container->privates['Shopware\\Core\\System\\SystemConfig\\Service\\ConfigurationService'];
        }
        $b = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Core\\System\\SystemConfig\\Service\\ConfigurationService'])) {
            return $container->privates['Shopware\\Core\\System\\SystemConfig\\Service\\ConfigurationService'];
        }

        return $container->privates['Shopware\\Core\\System\\SystemConfig\\Service\\ConfigurationService'] = new \Shopware\Core\System\SystemConfig\Service\ConfigurationService(($container->privates['kernel.bundles'] ?? self::getKernel_BundlesService($container)), ($container->privates['Shopware\\Core\\System\\SystemConfig\\Util\\ConfigReader'] ??= new \Shopware\Core\System\SystemConfig\Util\ConfigReader()), ($container->privates['Shopware\\Core\\Framework\\App\\Lifecycle\\AppLoader'] ?? self::getAppLoaderService($container)), $a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\System\UsageData\Consent\ConsentService' shared service.
     *
     * @return \Shopware\Core\System\UsageData\Consent\ConsentService
     */
    protected static function getConsentServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/UsageData/Consent/ConsentService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/UsageData/Consent/ConsentReporter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/InstanceService.php';
        include_once \dirname(__DIR__, 4).'/vendor/psr/clock/src/ClockInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/clock/ClockInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/clock/Clock.php';

        $a = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Core\\System\\UsageData\\Consent\\ConsentService'])) {
            return $container->privates['Shopware\\Core\\System\\UsageData\\Consent\\ConsentService'];
        }
        $b = ($container->services['system_config.repository'] ?? self::getSystemConfig_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\System\\UsageData\\Consent\\ConsentService'])) {
            return $container->privates['Shopware\\Core\\System\\UsageData\\Consent\\ConsentService'];
        }
        $c = ($container->services['user_config.repository'] ?? self::getUserConfig_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\System\\UsageData\\Consent\\ConsentService'])) {
            return $container->privates['Shopware\\Core\\System\\UsageData\\Consent\\ConsentService'];
        }
        $d = ($container->services['integration.repository'] ?? self::getIntegration_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\System\\UsageData\\Consent\\ConsentService'])) {
            return $container->privates['Shopware\\Core\\System\\UsageData\\Consent\\ConsentService'];
        }
        $e = ($container->privates['Shopware\\Core\\System\\UsageData\\Services\\ShopIdProvider'] ?? self::getShopIdProvider2Service($container));

        return $container->privates['Shopware\\Core\\System\\UsageData\\Consent\\ConsentService'] = new \Shopware\Core\System\UsageData\Consent\ConsentService($a, $b, $c, $d, new \Shopware\Core\System\UsageData\Consent\ConsentReporter(($container->privates['shopware.usage_data.gateway.client'] ?? self::getShopware_UsageData_Gateway_ClientService($container)), $e, $a, ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\InstanceService'] ??= new \Shopware\Core\Framework\Store\Services\InstanceService('6.5.7.3', $container->getEnv('INSTANCE_ID')))), $e, ($container->privates['clock'] ??= new \Symfony\Component\Clock\Clock()), $container->getEnv('APP_URL'));
    }

    /**
     * Gets the private 'Shopware\Core\System\UsageData\EntitySync\CollectEntityDataMessageHandler' shared service.
     *
     * @return \Shopware\Core\System\UsageData\EntitySync\CollectEntityDataMessageHandler
     */
    protected static function getCollectEntityDataMessageHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/UsageData/EntitySync/CollectEntityDataMessageHandler.php';

        $a = ($container->privates['Shopware\\Core\\System\\UsageData\\Services\\EntityDispatchService'] ?? self::getEntityDispatchServiceService($container));

        if (isset($container->privates['Shopware\\Core\\System\\UsageData\\EntitySync\\CollectEntityDataMessageHandler'])) {
            return $container->privates['Shopware\\Core\\System\\UsageData\\EntitySync\\CollectEntityDataMessageHandler'];
        }

        return $container->privates['Shopware\\Core\\System\\UsageData\\EntitySync\\CollectEntityDataMessageHandler'] = new \Shopware\Core\System\UsageData\EntitySync\CollectEntityDataMessageHandler($a);
    }

    /**
     * Gets the private 'Shopware\Core\System\UsageData\EntitySync\DispatchEntityMessageHandler' shared service.
     *
     * @return \Shopware\Core\System\UsageData\EntitySync\DispatchEntityMessageHandler
     */
    protected static function getDispatchEntityMessageHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/UsageData/EntitySync/DispatchEntityMessageHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/UsageData/Services/ManyToManyAssociationService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/UsageData/EntitySync/EntityDispatcher.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/UsageData/Services/UsageDataAllowListService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Store/Services/InstanceService.php';
        include_once \dirname(__DIR__, 4).'/vendor/psr/clock/src/ClockInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/clock/ClockInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/clock/Clock.php';

        $a = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Core\\System\\UsageData\\EntitySync\\DispatchEntityMessageHandler'])) {
            return $container->privates['Shopware\\Core\\System\\UsageData\\EntitySync\\DispatchEntityMessageHandler'];
        }
        $b = ($container->privates['Shopware\\Core\\System\\UsageData\\Consent\\ConsentService'] ?? self::getConsentServiceService($container));

        if (isset($container->privates['Shopware\\Core\\System\\UsageData\\EntitySync\\DispatchEntityMessageHandler'])) {
            return $container->privates['Shopware\\Core\\System\\UsageData\\EntitySync\\DispatchEntityMessageHandler'];
        }
        $c = ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container));

        return $container->privates['Shopware\\Core\\System\\UsageData\\EntitySync\\DispatchEntityMessageHandler'] = new \Shopware\Core\System\UsageData\EntitySync\DispatchEntityMessageHandler(($container->privates['Shopware\\Core\\System\\UsageData\\Services\\EntityDefinitionService'] ?? self::getEntityDefinitionServiceService($container)), new \Shopware\Core\System\UsageData\Services\ManyToManyAssociationService($c), ($container->privates['Shopware\\Core\\System\\UsageData\\Services\\UsageDataAllowListService'] ??= new \Shopware\Core\System\UsageData\Services\UsageDataAllowListService()), $c, new \Shopware\Core\System\UsageData\EntitySync\EntityDispatcher(($container->privates['shopware.usage_data.gateway.client'] ?? self::getShopware_UsageData_Gateway_ClientService($container)), ($container->privates['Shopware\\Core\\System\\UsageData\\Services\\ShopIdProvider'] ?? self::getShopIdProvider2Service($container)), ($container->privates['Shopware\\Core\\Framework\\Store\\Services\\InstanceService'] ??= new \Shopware\Core\Framework\Store\Services\InstanceService('6.5.7.3', $container->getEnv('INSTANCE_ID'))), $a, ($container->privates['clock'] ??= new \Symfony\Component\Clock\Clock()), 'dev'), $b);
    }

    /**
     * Gets the private 'Shopware\Core\System\UsageData\EntitySync\IterateEntityMessageHandler' shared service.
     *
     * @return \Shopware\Core\System\UsageData\EntitySync\IterateEntityMessageHandler
     */
    protected static function getIterateEntityMessageHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/UsageData/EntitySync/IterateEntityMessageHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/UsageData/EntitySync/IterateEntitiesQueryBuilder.php';

        $a = ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container));

        if (isset($container->privates['Shopware\\Core\\System\\UsageData\\EntitySync\\IterateEntityMessageHandler'])) {
            return $container->privates['Shopware\\Core\\System\\UsageData\\EntitySync\\IterateEntityMessageHandler'];
        }
        $b = ($container->privates['Shopware\\Core\\System\\UsageData\\Consent\\ConsentService'] ?? self::getConsentServiceService($container));

        if (isset($container->privates['Shopware\\Core\\System\\UsageData\\EntitySync\\IterateEntityMessageHandler'])) {
            return $container->privates['Shopware\\Core\\System\\UsageData\\EntitySync\\IterateEntityMessageHandler'];
        }
        $c = ($container->privates['Shopware\\Core\\System\\UsageData\\Services\\EntityDefinitionService'] ?? self::getEntityDefinitionServiceService($container));
        $d = ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container));

        return $container->privates['Shopware\\Core\\System\\UsageData\\EntitySync\\IterateEntityMessageHandler'] = new \Shopware\Core\System\UsageData\EntitySync\IterateEntityMessageHandler($a, new \Shopware\Core\System\UsageData\EntitySync\IterateEntitiesQueryBuilder($c, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), 50, $d), $b, $c, $d);
    }

    /**
     * Gets the private 'Shopware\Core\System\UsageData\ScheduledTask\CheckIntegrationChangedTaskHandler' shared service.
     *
     * @return \Shopware\Core\System\UsageData\ScheduledTask\CheckIntegrationChangedTaskHandler
     */
    protected static function getCheckIntegrationChangedTaskHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageSubscriberInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/ScheduledTaskHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/UsageData/ScheduledTask/CheckIntegrationChangedTaskHandler.php';

        $a = ($container->services['scheduled_task.repository'] ?? self::getScheduledTask_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\System\\UsageData\\ScheduledTask\\CheckIntegrationChangedTaskHandler'])) {
            return $container->privates['Shopware\\Core\\System\\UsageData\\ScheduledTask\\CheckIntegrationChangedTaskHandler'];
        }
        $b = ($container->services['Shopware\\Core\\System\\UsageData\\Services\\IntegrationChangedService'] ?? self::getIntegrationChangedServiceService($container));

        if (isset($container->privates['Shopware\\Core\\System\\UsageData\\ScheduledTask\\CheckIntegrationChangedTaskHandler'])) {
            return $container->privates['Shopware\\Core\\System\\UsageData\\ScheduledTask\\CheckIntegrationChangedTaskHandler'];
        }

        return $container->privates['Shopware\\Core\\System\\UsageData\\ScheduledTask\\CheckIntegrationChangedTaskHandler'] = new \Shopware\Core\System\UsageData\ScheduledTask\CheckIntegrationChangedTaskHandler($a, $b);
    }

    /**
     * Gets the private 'Shopware\Core\System\UsageData\ScheduledTask\CollectEntityDataTaskHandler' shared service.
     *
     * @return \Shopware\Core\System\UsageData\ScheduledTask\CollectEntityDataTaskHandler
     */
    protected static function getCollectEntityDataTaskHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageHandlerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/MessageSubscriberInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/MessageQueue/ScheduledTask/ScheduledTaskHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/UsageData/ScheduledTask/CollectEntityDataTaskHandler.php';

        $a = ($container->services['scheduled_task.repository'] ?? self::getScheduledTask_RepositoryService($container));

        if (isset($container->privates['Shopware\\Core\\System\\UsageData\\ScheduledTask\\CollectEntityDataTaskHandler'])) {
            return $container->privates['Shopware\\Core\\System\\UsageData\\ScheduledTask\\CollectEntityDataTaskHandler'];
        }

        return $container->privates['Shopware\\Core\\System\\UsageData\\ScheduledTask\\CollectEntityDataTaskHandler'] = new \Shopware\Core\System\UsageData\ScheduledTask\CollectEntityDataTaskHandler($a, ($container->privates['Shopware\\Core\\System\\UsageData\\Services\\EntityDispatchService'] ?? self::getEntityDispatchServiceService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\System\UsageData\Services\EntityDefinitionService' shared service.
     *
     * @return \Shopware\Core\System\UsageData\Services\EntityDefinitionService
     */
    protected static function getEntityDefinitionServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/UsageData/Services/EntityDefinitionService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/UsageData/Services/UsageDataAllowListService.php';

        return $container->privates['Shopware\\Core\\System\\UsageData\\Services\\EntityDefinitionService'] = new \Shopware\Core\System\UsageData\Services\EntityDefinitionService(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->services['Shopware\\Core\\Framework\\Log\\LogEntryDefinition'] ?? self::getLogEntryDefinitionService($container));
            yield 1 => ($container->services['Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclRoleDefinition'] ?? self::getAclRoleDefinitionService($container));
            yield 2 => ($container->services['Shopware\\Core\\Framework\\Api\\Acl\\Role\\AclUserRoleDefinition'] ?? self::getAclUserRoleDefinitionService($container));
            yield 3 => ($container->services['Shopware\\Core\\Framework\\App\\AppDefinition'] ?? self::getAppDefinitionService($container));
            yield 4 => ($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\AppTranslation\\AppTranslationDefinition'] ?? self::getAppTranslationDefinitionService($container));
            yield 5 => ($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\ActionButton\\ActionButtonDefinition'] ?? self::getActionButtonDefinitionService($container));
            yield 6 => ($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\ActionButtonTranslation\\ActionButtonTranslationDefinition'] ?? self::getActionButtonTranslationDefinitionService($container));
            yield 7 => ($container->services['Shopware\\Core\\Framework\\App\\Template\\TemplateDefinition'] ?? self::getTemplateDefinitionService($container));
            yield 8 => ($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\AppPaymentMethod\\AppPaymentMethodDefinition'] ?? self::getAppPaymentMethodDefinitionService($container));
            yield 9 => ($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptCondition\\AppScriptConditionDefinition'] ?? self::getAppScriptConditionDefinitionService($container));
            yield 10 => ($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\AppScriptConditionTranslation\\AppScriptConditionTranslationDefinition'] ?? self::getAppScriptConditionTranslationDefinitionService($container));
            yield 11 => ($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlock\\AppCmsBlockDefinition'] ?? self::getAppCmsBlockDefinitionService($container));
            yield 12 => ($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\CmsBlockTranslation\\AppCmsBlockTranslationDefinition'] ?? self::getAppCmsBlockTranslationDefinitionService($container));
            yield 13 => ($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\FlowAction\\AppFlowActionDefinition'] ?? self::getAppFlowActionDefinitionService($container));
            yield 14 => ($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\FlowActionTranslation\\AppFlowActionTranslationDefinition'] ?? self::getAppFlowActionTranslationDefinitionService($container));
            yield 15 => ($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\FlowEvent\\AppFlowEventDefinition'] ?? self::getAppFlowEventDefinitionService($container));
            yield 16 => ($container->services['Shopware\\Core\\Framework\\App\\Aggregate\\AppShippingMethod\\AppShippingMethodDefinition'] ?? self::getAppShippingMethodDefinitionService($container));
            yield 17 => ($container->services['Shopware\\Core\\System\\CustomField\\CustomFieldDefinition'] ?? self::getCustomFieldDefinitionService($container));
            yield 18 => ($container->services['Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSet\\CustomFieldSetDefinition'] ?? self::getCustomFieldSetDefinitionService($container));
            yield 19 => ($container->services['Shopware\\Core\\System\\CustomField\\Aggregate\\CustomFieldSetRelation\\CustomFieldSetRelationDefinition'] ?? self::getCustomFieldSetRelationDefinitionService($container));
            yield 20 => ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\VersionDefinition'] ?? self::getVersionDefinitionService($container));
            yield 21 => ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommit\\VersionCommitDefinition'] ?? self::getVersionCommitDefinitionService($container));
            yield 22 => ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Aggregate\\VersionCommitData\\VersionCommitDataDefinition'] ?? self::getVersionCommitDataDefinitionService($container));
            yield 23 => ($container->services['Shopware\\Core\\Framework\\Plugin\\PluginDefinition'] ?? self::getPluginDefinitionService($container));
            yield 24 => ($container->services['Shopware\\Core\\Framework\\Plugin\\Aggregate\\PluginTranslation\\PluginTranslationDefinition'] ?? self::getPluginTranslationDefinitionService($container));
            yield 25 => ($container->services['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\ScheduledTaskDefinition'] ?? self::getScheduledTaskDefinitionService($container));
            yield 26 => ($container->services['Shopware\\Core\\Framework\\Script\\ScriptDefinition'] ?? self::getScriptDefinitionService($container));
            yield 27 => ($container->services['Shopware\\Core\\System\\Language\\LanguageDefinition'] ?? self::getLanguageDefinitionService($container));
            yield 28 => ($container->services['Shopware\\Core\\Content\\Seo\\SeoUrl\\SeoUrlDefinition'] ?? self::getSeoUrlDefinitionService($container));
            yield 29 => ($container->services['Shopware\\Core\\Content\\Seo\\SeoUrlTemplate\\SeoUrlTemplateDefinition'] ?? self::getSeoUrlTemplateDefinitionService($container));
            yield 30 => ($container->services['Shopware\\Core\\Content\\Seo\\MainCategory\\MainCategoryDefinition'] ?? self::getMainCategoryDefinitionService($container));
            yield 31 => ($container->services['Shopware\\Core\\Framework\\Webhook\\WebhookDefinition'] ?? self::getWebhookDefinitionService($container));
            yield 32 => ($container->services['Shopware\\Core\\Framework\\Webhook\\EventLog\\WebhookEventLogDefinition'] ?? self::getWebhookEventLogDefinitionService($container));
            yield 33 => ($container->services['Shopware\\Core\\System\\SalesChannel\\SalesChannelDefinition'] ?? self::getSalesChannelDefinitionService($container));
            yield 34 => ($container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTranslation\\SalesChannelTranslationDefinition'] ?? self::getSalesChannelTranslationDefinitionService($container));
            yield 35 => ($container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCountry\\SalesChannelCountryDefinition'] ?? self::getSalesChannelCountryDefinition2Service($container));
            yield 36 => ($container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelCurrency\\SalesChannelCurrencyDefinition'] ?? self::getSalesChannelCurrencyDefinition2Service($container));
            yield 37 => ($container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelDomain\\SalesChannelDomainDefinition'] ?? self::getSalesChannelDomainDefinitionService($container));
            yield 38 => ($container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelLanguage\\SalesChannelLanguageDefinition'] ?? self::getSalesChannelLanguageDefinition2Service($container));
            yield 39 => ($container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelPaymentMethod\\SalesChannelPaymentMethodDefinition'] ?? self::getSalesChannelPaymentMethodDefinition2Service($container));
            yield 40 => ($container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelShippingMethod\\SalesChannelShippingMethodDefinition'] ?? self::getSalesChannelShippingMethodDefinition2Service($container));
            yield 41 => ($container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelType\\SalesChannelTypeDefinition'] ?? self::getSalesChannelTypeDefinitionService($container));
            yield 42 => ($container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelTypeTranslation\\SalesChannelTypeTranslationDefinition'] ?? self::getSalesChannelTypeTranslationDefinitionService($container));
            yield 43 => ($container->services['Shopware\\Core\\System\\SalesChannel\\Aggregate\\SalesChannelAnalytics\\SalesChannelAnalyticsDefinition'] ?? self::getSalesChannelAnalyticsDefinitionService($container));
            yield 44 => ($container->services['Shopware\\Core\\System\\Country\\CountryDefinition'] ?? self::getCountryDefinitionService($container));
            yield 45 => ($container->services['Shopware\\Core\\System\\Country\\Aggregate\\CountryState\\CountryStateDefinition'] ?? self::getCountryStateDefinitionService($container));
            yield 46 => ($container->services['Shopware\\Core\\System\\Country\\Aggregate\\CountryStateTranslation\\CountryStateTranslationDefinition'] ?? self::getCountryStateTranslationDefinitionService($container));
            yield 47 => ($container->services['Shopware\\Core\\System\\Country\\Aggregate\\CountryTranslation\\CountryTranslationDefinition'] ?? self::getCountryTranslationDefinitionService($container));
            yield 48 => ($container->services['Shopware\\Core\\System\\Currency\\CurrencyDefinition'] ?? self::getCurrencyDefinitionService($container));
            yield 49 => ($container->services['Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyCountryRounding\\CurrencyCountryRoundingDefinition'] ?? self::getCurrencyCountryRoundingDefinitionService($container));
            yield 50 => ($container->services['Shopware\\Core\\System\\Currency\\Aggregate\\CurrencyTranslation\\CurrencyTranslationDefinition'] ?? self::getCurrencyTranslationDefinitionService($container));
            yield 51 => ($container->services['Shopware\\Core\\System\\CustomEntity\\CustomEntityDefinition'] ?? self::getCustomEntityDefinitionService($container));
            yield 52 => ($container->services['Shopware\\Core\\System\\Locale\\LocaleDefinition'] ?? self::getLocaleDefinitionService($container));
            yield 53 => ($container->services['Shopware\\Core\\System\\Locale\\Aggregate\\LocaleTranslation\\LocaleTranslationDefinition'] ?? self::getLocaleTranslationDefinitionService($container));
            yield 54 => ($container->services['Shopware\\Core\\System\\Snippet\\Aggregate\\SnippetSet\\SnippetSetDefinition'] ?? self::getSnippetSetDefinitionService($container));
            yield 55 => ($container->services['Shopware\\Core\\System\\Snippet\\SnippetDefinition'] ?? self::getSnippetDefinitionService($container));
            yield 56 => ($container->services['Shopware\\Core\\System\\Salutation\\SalutationDefinition'] ?? self::getSalutationDefinitionService($container));
            yield 57 => ($container->services['Shopware\\Core\\System\\Salutation\\Aggregate\\SalutationTranslation\\SalutationTranslationDefinition'] ?? self::getSalutationTranslationDefinitionService($container));
            yield 58 => ($container->services['Shopware\\Core\\System\\Tax\\TaxDefinition'] ?? self::getTaxDefinitionService($container));
            yield 59 => ($container->services['Shopware\\Core\\System\\Tax\\Aggregate\\TaxRule\\TaxRuleDefinition'] ?? self::getTaxRuleDefinitionService($container));
            yield 60 => ($container->services['Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleType\\TaxRuleTypeDefinition'] ?? self::getTaxRuleTypeDefinitionService($container));
            yield 61 => ($container->services['Shopware\\Core\\System\\Tax\\Aggregate\\TaxRuleTypeTranslation\\TaxRuleTypeTranslationDefinition'] ?? self::getTaxRuleTypeTranslationDefinitionService($container));
            yield 62 => ($container->services['Shopware\\Core\\System\\TaxProvider\\TaxProviderDefinition'] ?? self::getTaxProviderDefinitionService($container));
            yield 63 => ($container->services['Shopware\\Core\\System\\TaxProvider\\Aggregate\\TaxProviderTranslation\\TaxProviderTranslationDefinition'] ?? self::getTaxProviderTranslationDefinitionService($container));
            yield 64 => ($container->services['Shopware\\Core\\System\\Unit\\UnitDefinition'] ?? self::getUnitDefinitionService($container));
            yield 65 => ($container->services['Shopware\\Core\\System\\Unit\\Aggregate\\UnitTranslation\\UnitTranslationDefinition'] ?? self::getUnitTranslationDefinitionService($container));
            yield 66 => ($container->services['Shopware\\Core\\System\\User\\UserDefinition'] ?? self::getUserDefinitionService($container));
            yield 67 => ($container->services['Shopware\\Core\\System\\User\\Aggregate\\UserConfig\\UserConfigDefinition'] ?? self::getUserConfigDefinitionService($container));
            yield 68 => ($container->services['Shopware\\Core\\System\\User\\Aggregate\\UserAccessKey\\UserAccessKeyDefinition'] ?? self::getUserAccessKeyDefinitionService($container));
            yield 69 => ($container->services['Shopware\\Core\\System\\User\\Aggregate\\UserRecovery\\UserRecoveryDefinition'] ?? self::getUserRecoveryDefinitionService($container));
            yield 70 => ($container->services['Shopware\\Core\\System\\Integration\\IntegrationDefinition'] ?? self::getIntegrationDefinitionService($container));
            yield 71 => ($container->services['Shopware\\Core\\System\\Integration\\Aggregate\\IntegrationRole\\IntegrationRoleDefinition'] ?? self::getIntegrationRoleDefinitionService($container));
            yield 72 => ($container->services['Shopware\\Core\\System\\StateMachine\\StateMachineDefinition'] ?? self::getStateMachineDefinitionService($container));
            yield 73 => ($container->services['Shopware\\Core\\System\\StateMachine\\StateMachineTranslationDefinition'] ?? self::getStateMachineTranslationDefinitionService($container));
            yield 74 => ($container->services['Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateDefinition'] ?? self::getStateMachineStateDefinitionService($container));
            yield 75 => ($container->services['Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineState\\StateMachineStateTranslationDefinition'] ?? self::getStateMachineStateTranslationDefinitionService($container));
            yield 76 => ($container->services['Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineTransition\\StateMachineTransitionDefinition'] ?? self::getStateMachineTransitionDefinitionService($container));
            yield 77 => ($container->services['Shopware\\Core\\System\\StateMachine\\Aggregation\\StateMachineHistory\\StateMachineHistoryDefinition'] ?? self::getStateMachineHistoryDefinitionService($container));
            yield 78 => ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigDefinition'] ?? self::getSystemConfigDefinitionService($container));
            yield 79 => ($container->services['Shopware\\Core\\System\\NumberRange\\NumberRangeDefinition'] ?? self::getNumberRangeDefinitionService($container));
            yield 80 => ($container->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeSalesChannel\\NumberRangeSalesChannelDefinition'] ?? self::getNumberRangeSalesChannelDefinitionService($container));
            yield 81 => ($container->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeState\\NumberRangeStateDefinition'] ?? self::getNumberRangeStateDefinitionService($container));
            yield 82 => ($container->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeType\\NumberRangeTypeDefinition'] ?? self::getNumberRangeTypeDefinitionService($container));
            yield 83 => ($container->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTypeTranslation\\NumberRangeTypeTranslationDefinition'] ?? self::getNumberRangeTypeTranslationDefinitionService($container));
            yield 84 => ($container->services['Shopware\\Core\\System\\NumberRange\\Aggregate\\NumberRangeTranslation\\NumberRangeTranslationDefinition'] ?? self::getNumberRangeTranslationDefinitionService($container));
            yield 85 => ($container->services['Shopware\\Core\\System\\Tag\\TagDefinition'] ?? self::getTagDefinitionService($container));
            yield 86 => ($container->services['Shopware\\Core\\Content\\Category\\CategoryDefinition'] ?? self::getCategoryDefinitionService($container));
            yield 87 => ($container->services['Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTranslation\\CategoryTranslationDefinition'] ?? self::getCategoryTranslationDefinitionService($container));
            yield 88 => ($container->services['Shopware\\Core\\Content\\Category\\Aggregate\\CategoryTag\\CategoryTagDefinition'] ?? self::getCategoryTagDefinitionService($container));
            yield 89 => ($container->services['Shopware\\Core\\Content\\Media\\MediaDefinition'] ?? self::getMediaDefinitionService($container));
            yield 90 => ($container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaDefaultFolder\\MediaDefaultFolderDefinition'] ?? self::getMediaDefaultFolderDefinitionService($container));
            yield 91 => ($container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnail\\MediaThumbnailDefinition'] ?? self::getMediaThumbnailDefinitionService($container));
            yield 92 => ($container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaTranslation\\MediaTranslationDefinition'] ?? self::getMediaTranslationDefinitionService($container));
            yield 93 => ($container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolder\\MediaFolderDefinition'] ?? self::getMediaFolderDefinitionService($container));
            yield 94 => ($container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaThumbnailSize\\MediaThumbnailSizeDefinition'] ?? self::getMediaThumbnailSizeDefinitionService($container));
            yield 95 => ($container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfiguration\\MediaFolderConfigurationDefinition'] ?? self::getMediaFolderConfigurationDefinitionService($container));
            yield 96 => ($container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaFolderConfigurationMediaThumbnailSize\\MediaFolderConfigurationMediaThumbnailSizeDefinition'] ?? self::getMediaFolderConfigurationMediaThumbnailSizeDefinitionService($container));
            yield 97 => ($container->services['Shopware\\Core\\Content\\Media\\Aggregate\\MediaTag\\MediaTagDefinition'] ?? self::getMediaTagDefinitionService($container));
            yield 98 => ($container->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? self::getProductDefinitionService($container));
            yield 99 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductStreamMapping\\ProductStreamMappingDefinition'] ?? self::getProductStreamMappingDefinitionService($container));
            yield 100 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategory\\ProductCategoryDefinition'] ?? self::getProductCategoryDefinitionService($container));
            yield 101 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCustomFieldSet\\ProductCustomFieldSetDefinition'] ?? self::getProductCustomFieldSetDefinitionService($container));
            yield 102 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductTag\\ProductTagDefinition'] ?? self::getProductTagDefinitionService($container));
            yield 103 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductConfiguratorSetting\\ProductConfiguratorSettingDefinition'] ?? self::getProductConfiguratorSettingDefinitionService($container));
            yield 104 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductPrice\\ProductPriceDefinition'] ?? self::getProductPriceDefinitionService($container));
            yield 105 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductProperty\\ProductPropertyDefinition'] ?? self::getProductPropertyDefinitionService($container));
            yield 106 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchKeyword\\ProductSearchKeywordDefinition'] ?? self::getProductSearchKeywordDefinitionService($container));
            yield 107 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductKeywordDictionary\\ProductKeywordDictionaryDefinition'] ?? self::getProductKeywordDictionaryDefinitionService($container));
            yield 108 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductReview\\ProductReviewDefinition'] ?? self::getProductReviewDefinitionService($container));
            yield 109 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturer\\ProductManufacturerDefinition'] ?? self::getProductManufacturerDefinitionService($container));
            yield 110 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductManufacturerTranslation\\ProductManufacturerTranslationDefinition'] ?? self::getProductManufacturerTranslationDefinitionService($container));
            yield 111 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductMedia\\ProductMediaDefinition'] ?? self::getProductMediaDefinitionService($container));
            yield 112 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductDownload\\ProductDownloadDefinition'] ?? self::getProductDownloadDefinitionService($container));
            yield 113 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductTranslation\\ProductTranslationDefinition'] ?? self::getProductTranslationDefinitionService($container));
            yield 114 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductOption\\ProductOptionDefinition'] ?? self::getProductOptionDefinitionService($container));
            yield 115 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCategoryTree\\ProductCategoryTreeDefinition'] ?? self::getProductCategoryTreeDefinitionService($container));
            yield 116 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSelling\\ProductCrossSellingDefinition'] ?? self::getProductCrossSellingDefinitionService($container));
            yield 117 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingTranslation\\ProductCrossSellingTranslationDefinition'] ?? self::getProductCrossSellingTranslationDefinitionService($container));
            yield 118 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductCrossSellingAssignedProducts\\ProductCrossSellingAssignedProductsDefinition'] ?? self::getProductCrossSellingAssignedProductsDefinitionService($container));
            yield 119 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSet\\ProductFeatureSetDefinition'] ?? self::getProductFeatureSetDefinitionService($container));
            yield 120 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductFeatureSetTranslation\\ProductFeatureSetTranslationDefinition'] ?? self::getProductFeatureSetTranslationDefinitionService($container));
            yield 121 => ($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingDefinition'] ?? self::getProductSortingDefinitionService($container));
            yield 122 => ($container->services['Shopware\\Core\\Content\\Product\\SalesChannel\\Sorting\\ProductSortingTranslationDefinition'] ?? self::getProductSortingTranslationDefinitionService($container));
            yield 123 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfig\\ProductSearchConfigDefinition'] ?? self::getProductSearchConfigDefinitionService($container));
            yield 124 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductSearchConfigField\\ProductSearchConfigFieldDefinition'] ?? self::getProductSearchConfigFieldDefinitionService($container));
            yield 125 => ($container->services['Shopware\\Core\\Content\\Product\\Aggregate\\ProductVisibility\\ProductVisibilityDefinition'] ?? self::getProductVisibilityDefinitionService($container));
            yield 126 => ($container->services['Shopware\\Core\\System\\DeliveryTime\\DeliveryTimeDefinition'] ?? self::getDeliveryTimeDefinitionService($container));
            yield 127 => ($container->services['Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipient\\NewsletterRecipientDefinition'] ?? self::getNewsletterRecipientDefinitionService($container));
            yield 128 => ($container->services['Shopware\\Core\\Content\\Newsletter\\Aggregate\\NewsletterRecipientTag\\NewsletterRecipientTagDefinition'] ?? self::getNewsletterRecipientTagDefinitionService($container));
            yield 129 => ($container->services['Shopware\\Core\\Content\\Rule\\RuleDefinition'] ?? self::getRuleDefinitionService($container));
            yield 130 => ($container->services['Shopware\\Core\\Content\\Rule\\Aggregate\\RuleCondition\\RuleConditionDefinition'] ?? self::getRuleConditionDefinitionService($container));
            yield 131 => ($container->services['Shopware\\Core\\Content\\Rule\\Aggregate\\RuleTag\\RuleTagDefinition'] ?? self::getRuleTagDefinitionService($container));
            yield 132 => ($container->services['Shopware\\Core\\Content\\ProductStream\\ProductStreamDefinition'] ?? self::getProductStreamDefinitionService($container));
            yield 133 => ($container->services['Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamTranslation\\ProductStreamTranslationDefinition'] ?? self::getProductStreamTranslationDefinitionService($container));
            yield 134 => ($container->services['Shopware\\Core\\Content\\ProductStream\\Aggregate\\ProductStreamFilter\\ProductStreamFilterDefinition'] ?? self::getProductStreamFilterDefinitionService($container));
            yield 135 => ($container->services['Shopware\\Core\\Content\\ProductExport\\ProductExportDefinition'] ?? self::getProductExportDefinitionService($container));
            yield 136 => ($container->services['Shopware\\Core\\Content\\Property\\PropertyGroupDefinition'] ?? self::getPropertyGroupDefinitionService($container));
            yield 137 => ($container->services['Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOption\\PropertyGroupOptionDefinition'] ?? self::getPropertyGroupOptionDefinitionService($container));
            yield 138 => ($container->services['Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupOptionTranslation\\PropertyGroupOptionTranslationDefinition'] ?? self::getPropertyGroupOptionTranslationDefinitionService($container));
            yield 139 => ($container->services['Shopware\\Core\\Content\\Property\\Aggregate\\PropertyGroupTranslation\\PropertyGroupTranslationDefinition'] ?? self::getPropertyGroupTranslationDefinitionService($container));
            yield 140 => ($container->services['Shopware\\Core\\Content\\Cms\\CmsPageDefinition'] ?? self::getCmsPageDefinitionService($container));
            yield 141 => ($container->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsPageTranslation\\CmsPageTranslationDefinition'] ?? self::getCmsPageTranslationDefinitionService($container));
            yield 142 => ($container->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSection\\CmsSectionDefinition'] ?? self::getCmsSectionDefinitionService($container));
            yield 143 => ($container->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsBlock\\CmsBlockDefinition'] ?? self::getCmsBlockDefinitionService($container));
            yield 144 => ($container->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlot\\CmsSlotDefinition'] ?? self::getCmsSlotDefinitionService($container));
            yield 145 => ($container->services['Shopware\\Core\\Content\\Cms\\Aggregate\\CmsSlotTranslation\\CmsSlotTranslationDefinition'] ?? self::getCmsSlotTranslationDefinitionService($container));
            yield 146 => ($container->services['Shopware\\Core\\Content\\MailTemplate\\MailTemplateDefinition'] ?? self::getMailTemplateDefinitionService($container));
            yield 147 => ($container->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTranslation\\MailTemplateTranslationDefinition'] ?? self::getMailTemplateTranslationDefinitionService($container));
            yield 148 => ($container->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateType\\MailTemplateTypeDefinition'] ?? self::getMailTemplateTypeDefinitionService($container));
            yield 149 => ($container->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateTypeTranslation\\MailTemplateTypeTranslationDefinition'] ?? self::getMailTemplateTypeTranslationDefinitionService($container));
            yield 150 => ($container->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailTemplateMedia\\MailTemplateMediaDefinition'] ?? self::getMailTemplateMediaDefinitionService($container));
            yield 151 => ($container->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooter\\MailHeaderFooterDefinition'] ?? self::getMailHeaderFooterDefinitionService($container));
            yield 152 => ($container->services['Shopware\\Core\\Content\\MailTemplate\\Aggregate\\MailHeaderFooterTranslation\\MailHeaderFooterTranslationDefinition'] ?? self::getMailHeaderFooterTranslationDefinitionService($container));
            yield 153 => ($container->services['Shopware\\Core\\System\\DeliveryTime\\Aggregate\\DeliveryTimeTranslation\\DeliveryTimeTranslationDefinition'] ?? self::getDeliveryTimeTranslationDefinitionService($container));
            yield 154 => ($container->services['Shopware\\Core\\Content\\ImportExport\\ImportExportProfileDefinition'] ?? self::getImportExportProfileDefinitionService($container));
            yield 155 => ($container->services['Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportLog\\ImportExportLogDefinition'] ?? self::getImportExportLogDefinitionService($container));
            yield 156 => ($container->services['Shopware\\Core\\Content\\ImportExport\\Aggregate\\ImportExportFile\\ImportExportFileDefinition'] ?? self::getImportExportFileDefinitionService($container));
            yield 157 => ($container->services['Shopware\\Core\\Content\\ImportExport\\ImportExportProfileTranslationDefinition'] ?? self::getImportExportProfileTranslationDefinitionService($container));
            yield 158 => ($container->services['Shopware\\Core\\Content\\LandingPage\\LandingPageDefinition'] ?? self::getLandingPageDefinitionService($container));
            yield 159 => ($container->services['Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTranslation\\LandingPageTranslationDefinition'] ?? self::getLandingPageTranslationDefinitionService($container));
            yield 160 => ($container->services['Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageTag\\LandingPageTagDefinition'] ?? self::getLandingPageTagDefinitionService($container));
            yield 161 => ($container->services['Shopware\\Core\\Content\\LandingPage\\Aggregate\\LandingPageSalesChannel\\LandingPageSalesChannelDefinition'] ?? self::getLandingPageSalesChannelDefinitionService($container));
            yield 162 => ($container->services['Shopware\\Core\\Content\\Flow\\FlowDefinition'] ?? self::getFlowDefinitionService($container));
            yield 163 => ($container->services['Shopware\\Core\\Content\\Flow\\Aggregate\\FlowSequence\\FlowSequenceDefinition'] ?? self::getFlowSequenceDefinitionService($container));
            yield 164 => ($container->services['Shopware\\Core\\Content\\Flow\\Aggregate\\FlowTemplate\\FlowTemplateDefinition'] ?? self::getFlowTemplateDefinitionService($container));
            yield 165 => ($container->services['Shopware\\Core\\Checkout\\Customer\\CustomerDefinition'] ?? self::getCustomerDefinitionService($container));
            yield 166 => ($container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupTranslation\\CustomerGroupTranslationDefinition'] ?? self::getCustomerGroupTranslationDefinitionService($container));
            yield 167 => ($container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerAddress\\CustomerAddressDefinition'] ?? self::getCustomerAddressDefinitionService($container));
            yield 168 => ($container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerRecovery\\CustomerRecoveryDefinition'] ?? self::getCustomerRecoveryDefinitionService($container));
            yield 169 => ($container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroup\\CustomerGroupDefinition'] ?? self::getCustomerGroupDefinitionService($container));
            yield 170 => ($container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerGroupRegistrationSalesChannel\\CustomerGroupRegistrationSalesChannelDefinition'] ?? self::getCustomerGroupRegistrationSalesChannelDefinitionService($container));
            yield 171 => ($container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerTag\\CustomerTagDefinition'] ?? self::getCustomerTagDefinitionService($container));
            yield 172 => ($container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlist\\CustomerWishlistDefinition'] ?? self::getCustomerWishlistDefinitionService($container));
            yield 173 => ($container->services['Shopware\\Core\\Checkout\\Customer\\Aggregate\\CustomerWishlistProduct\\CustomerWishlistProductDefinition'] ?? self::getCustomerWishlistProductDefinitionService($container));
            yield 174 => ($container->services['Shopware\\Core\\Checkout\\Document\\DocumentDefinition'] ?? self::getDocumentDefinitionService($container));
            yield 175 => ($container->services['Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentType\\DocumentTypeDefinition'] ?? self::getDocumentTypeDefinitionService($container));
            yield 176 => ($container->services['Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentTypeTranslation\\DocumentTypeTranslationDefinition'] ?? self::getDocumentTypeTranslationDefinitionService($container));
            yield 177 => ($container->services['Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfig\\DocumentBaseConfigDefinition'] ?? self::getDocumentBaseConfigDefinitionService($container));
            yield 178 => ($container->services['Shopware\\Core\\Checkout\\Document\\Aggregate\\DocumentBaseConfigSalesChannel\\DocumentBaseConfigSalesChannelDefinition'] ?? self::getDocumentBaseConfigSalesChannelDefinitionService($container));
            yield 179 => ($container->services['Shopware\\Core\\Checkout\\Order\\OrderDefinition'] ?? self::getOrderDefinitionService($container));
            yield 180 => ($container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderAddress\\OrderAddressDefinition'] ?? self::getOrderAddressDefinitionService($container));
            yield 181 => ($container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderCustomer\\OrderCustomerDefinition'] ?? self::getOrderCustomerDefinitionService($container));
            yield 182 => ($container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDelivery\\OrderDeliveryDefinition'] ?? self::getOrderDeliveryDefinitionService($container));
            yield 183 => ($container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderDeliveryPosition\\OrderDeliveryPositionDefinition'] ?? self::getOrderDeliveryPositionDefinitionService($container));
            yield 184 => ($container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItem\\OrderLineItemDefinition'] ?? self::getOrderLineItemDefinitionService($container));
            yield 185 => ($container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderLineItemDownload\\OrderLineItemDownloadDefinition'] ?? self::getOrderLineItemDownloadDefinitionService($container));
            yield 186 => ($container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTag\\OrderTagDefinition'] ?? self::getOrderTagDefinitionService($container));
            yield 187 => ($container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransaction\\OrderTransactionDefinition'] ?? self::getOrderTransactionDefinitionService($container));
            yield 188 => ($container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCapture\\OrderTransactionCaptureDefinition'] ?? self::getOrderTransactionCaptureDefinitionService($container));
            yield 189 => ($container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefund\\OrderTransactionCaptureRefundDefinition'] ?? self::getOrderTransactionCaptureRefundDefinitionService($container));
            yield 190 => ($container->services['Shopware\\Core\\Checkout\\Order\\Aggregate\\OrderTransactionCaptureRefundPosition\\OrderTransactionCaptureRefundPositionDefinition'] ?? self::getOrderTransactionCaptureRefundPositionDefinitionService($container));
            yield 191 => ($container->services['Shopware\\Core\\Checkout\\Payment\\PaymentMethodDefinition'] ?? self::getPaymentMethodDefinitionService($container));
            yield 192 => ($container->services['Shopware\\Core\\Checkout\\Payment\\Aggregate\\PaymentMethodTranslation\\PaymentMethodTranslationDefinition'] ?? self::getPaymentMethodTranslationDefinitionService($container));
            yield 193 => ($container->services['Shopware\\Core\\Checkout\\Promotion\\PromotionDefinition'] ?? self::getPromotionDefinitionService($container));
            yield 194 => ($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSalesChannel\\PromotionSalesChannelDefinition'] ?? self::getPromotionSalesChannelDefinitionService($container));
            yield 195 => ($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionIndividualCode\\PromotionIndividualCodeDefinition'] ?? self::getPromotionIndividualCodeDefinitionService($container));
            yield 196 => ($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscount\\PromotionDiscountDefinition'] ?? self::getPromotionDiscountDefinitionService($container));
            yield 197 => ($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountRule\\PromotionDiscountRuleDefinition'] ?? self::getPromotionDiscountRuleDefinitionService($container));
            yield 198 => ($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroup\\PromotionSetGroupDefinition'] ?? self::getPromotionSetGroupDefinitionService($container));
            yield 199 => ($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionSetGroupRule\\PromotionSetGroupRuleDefinition'] ?? self::getPromotionSetGroupRuleDefinitionService($container));
            yield 200 => ($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionOrderRule\\PromotionOrderRuleDefinition'] ?? self::getPromotionOrderRuleDefinitionService($container));
            yield 201 => ($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaCustomer\\PromotionPersonaCustomerDefinition'] ?? self::getPromotionPersonaCustomerDefinitionService($container));
            yield 202 => ($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionPersonaRule\\PromotionPersonaRuleDefinition'] ?? self::getPromotionPersonaRuleDefinitionService($container));
            yield 203 => ($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionCartRule\\PromotionCartRuleDefinition'] ?? self::getPromotionCartRuleDefinitionService($container));
            yield 204 => ($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionTranslation\\PromotionTranslationDefinition'] ?? self::getPromotionTranslationDefinitionService($container));
            yield 205 => ($container->services['Shopware\\Core\\Checkout\\Promotion\\Aggregate\\PromotionDiscountPrice\\PromotionDiscountPriceDefinition'] ?? self::getPromotionDiscountPriceDefinitionService($container));
            yield 206 => ($container->services['Shopware\\Core\\Checkout\\Shipping\\ShippingMethodDefinition'] ?? self::getShippingMethodDefinitionService($container));
            yield 207 => ($container->services['Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTag\\ShippingMethodTagDefinition'] ?? self::getShippingMethodTagDefinitionService($container));
            yield 208 => ($container->services['Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodPrice\\ShippingMethodPriceDefinition'] ?? self::getShippingMethodPriceDefinitionService($container));
            yield 209 => ($container->services['Shopware\\Core\\Checkout\\Shipping\\Aggregate\\ShippingMethodTranslation\\ShippingMethodTranslationDefinition'] ?? self::getShippingMethodTranslationDefinitionService($container));
            yield 210 => ($container->services['Shopware\\Administration\\Snippet\\AppAdministrationSnippetDefinition'] ?? self::getAppAdministrationSnippetDefinitionService($container));
            yield 211 => ($container->services['Shopware\\Administration\\Notification\\NotificationDefinition'] ?? self::getNotificationDefinitionService($container));
            yield 212 => ($container->services['Shopware\\Storefront\\Theme\\ThemeDefinition'] ?? self::getThemeDefinitionService($container));
            yield 213 => ($container->services['Shopware\\Storefront\\Theme\\Aggregate\\ThemeTranslationDefinition'] ?? self::getThemeTranslationDefinitionService($container));
            yield 214 => ($container->services['Shopware\\Storefront\\Theme\\Aggregate\\ThemeSalesChannelDefinition'] ?? self::getThemeSalesChannelDefinitionService($container));
            yield 215 => ($container->services['Shopware\\Storefront\\Theme\\Aggregate\\ThemeMediaDefinition'] ?? self::getThemeMediaDefinitionService($container));
            yield 216 => ($container->services['Shopware\\Storefront\\Theme\\Aggregate\\ThemeChildDefinition'] ?? self::getThemeChildDefinitionService($container));
        }, 217), ($container->privates['Shopware\\Core\\System\\UsageData\\Services\\UsageDataAllowListService'] ??= new \Shopware\Core\System\UsageData\Services\UsageDataAllowListService()));
    }

    /**
     * Gets the private 'Shopware\Core\System\UsageData\Services\EntityDispatchService' shared service.
     *
     * @return \Shopware\Core\System\UsageData\Services\EntityDispatchService
     */
    protected static function getEntityDispatchServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/UsageData/Services/EntityDispatchService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/UsageData/Services/GatewayStatusService.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/UsageData/Client/GatewayClient.php';
        include_once \dirname(__DIR__, 4).'/vendor/psr/clock/src/ClockInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/clock/ClockInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/clock/Clock.php';

        $a = ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container));

        if (isset($container->privates['Shopware\\Core\\System\\UsageData\\Services\\EntityDispatchService'])) {
            return $container->privates['Shopware\\Core\\System\\UsageData\\Services\\EntityDispatchService'];
        }
        $b = ($container->privates['Shopware\\Core\\System\\UsageData\\Consent\\ConsentService'] ?? self::getConsentServiceService($container));

        if (isset($container->privates['Shopware\\Core\\System\\UsageData\\Services\\EntityDispatchService'])) {
            return $container->privates['Shopware\\Core\\System\\UsageData\\Services\\EntityDispatchService'];
        }

        return $container->privates['Shopware\\Core\\System\\UsageData\\Services\\EntityDispatchService'] = new \Shopware\Core\System\UsageData\Services\EntityDispatchService(($container->privates['Shopware\\Core\\System\\UsageData\\Services\\EntityDefinitionService'] ?? self::getEntityDefinitionServiceService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Storage\\AbstractKeyValueStorage'] ?? self::getAbstractKeyValueStorageService($container)), $a, ($container->privates['clock'] ??= new \Symfony\Component\Clock\Clock()), $b, new \Shopware\Core\System\UsageData\Services\GatewayStatusService(new \Shopware\Core\System\UsageData\Client\GatewayClient(($container->privates['shopware.usage_data.gateway.client'] ?? self::getShopware_UsageData_Gateway_ClientService($container)), ($container->privates['Shopware\\Core\\System\\UsageData\\Services\\ShopIdProvider'] ?? self::getShopIdProvider2Service($container)))));
    }

    /**
     * Gets the private 'Shopware\Core\System\UsageData\Services\ShopIdProvider' shared service.
     *
     * @return \Shopware\Core\System\UsageData\Services\ShopIdProvider
     */
    protected static function getShopIdProvider2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/UsageData/Services/ShopIdProvider.php';

        return $container->privates['Shopware\\Core\\System\\UsageData\\Services\\ShopIdProvider'] = new \Shopware\Core\System\UsageData\Services\ShopIdProvider(($container->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'] ?? self::getShopIdProviderService($container)));
    }

    /**
     * Gets the private 'Shopware\Core\System\UsageData\Subscriber\EntityDeleteSubscriber' shared service.
     *
     * @return \Shopware\Core\System\UsageData\Subscriber\EntityDeleteSubscriber
     */
    protected static function getEntityDeleteSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/UsageData/Subscriber/EntityDeleteSubscriber.php';
        include_once \dirname(__DIR__, 4).'/vendor/psr/clock/src/ClockInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/clock/ClockInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/clock/Clock.php';

        $a = ($container->privates['Shopware\\Core\\System\\UsageData\\Consent\\ConsentService'] ?? self::getConsentServiceService($container));

        if (isset($container->privates['Shopware\\Core\\System\\UsageData\\Subscriber\\EntityDeleteSubscriber'])) {
            return $container->privates['Shopware\\Core\\System\\UsageData\\Subscriber\\EntityDeleteSubscriber'];
        }

        return $container->privates['Shopware\\Core\\System\\UsageData\\Subscriber\\EntityDeleteSubscriber'] = new \Shopware\Core\System\UsageData\Subscriber\EntityDeleteSubscriber(($container->privates['Shopware\\Core\\System\\UsageData\\Services\\EntityDefinitionService'] ?? self::getEntityDefinitionServiceService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['clock'] ??= new \Symfony\Component\Clock\Clock()), $a);
    }

    /**
     * Gets the private 'Shopware\Core\System\UsageData\Subscriber\UsageDataApprovalSubscriber' shared service.
     *
     * @return \Shopware\Core\System\UsageData\Subscriber\UsageDataApprovalSubscriber
     */
    protected static function getUsageDataApprovalSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/UsageData/Subscriber/UsageDataApprovalSubscriber.php';

        return $container->privates['Shopware\\Core\\System\\UsageData\\Subscriber\\UsageDataApprovalSubscriber'] = new \Shopware\Core\System\UsageData\Subscriber\UsageDataApprovalSubscriber(($container->privates['Shopware\\Core\\System\\UsageData\\Services\\EntityDispatchService'] ?? self::getEntityDispatchServiceService($container)));
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Admin\AdminSearchRegistry' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\AdminSearchRegistry
     */
    protected static function getAdminSearchRegistryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/AdminSearchRegistry.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/AdminElasticsearchHelper.php';

        $a = ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry'])) {
            return $container->privates['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry'])) {
            return $container->privates['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry'] = new \Shopware\Elasticsearch\Admin\AdminSearchRegistry(new RewindableGenerator(function () use ($container) {
            yield 'cms_page' => ($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CmsPageAdminSearchIndexer'] ?? self::getCmsPageAdminSearchIndexerService($container));
            yield 'customer' => ($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CustomerAdminSearchIndexer'] ?? self::getCustomerAdminSearchIndexerService($container));
            yield 'customer_group' => ($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CustomerGroupAdminSearchIndexer'] ?? self::getCustomerGroupAdminSearchIndexerService($container));
            yield 'landing_page' => ($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\LandingPageAdminSearchIndexer'] ?? self::getLandingPageAdminSearchIndexerService($container));
            yield 'product_manufacturer' => ($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ManufacturerAdminSearchIndexer'] ?? self::getManufacturerAdminSearchIndexerService($container));
            yield 'media' => ($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\MediaAdminSearchIndexer'] ?? self::getMediaAdminSearchIndexerService($container));
            yield 'order' => ($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\OrderAdminSearchIndexer'] ?? self::getOrderAdminSearchIndexerService($container));
            yield 'payment_method' => ($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PaymentMethodAdminSearchIndexer'] ?? self::getPaymentMethodAdminSearchIndexerService($container));
            yield 'product' => ($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ProductAdminSearchIndexer'] ?? self::getProductAdminSearchIndexerService($container));
            yield 'promotion' => ($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PromotionAdminSearchIndexer'] ?? self::getPromotionAdminSearchIndexerService($container));
            yield 'property_group' => ($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PropertyGroupAdminSearchIndexer'] ?? self::getPropertyGroupAdminSearchIndexerService($container));
            yield 'sales_channel' => ($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\SalesChannelAdminSearchIndexer'] ?? self::getSalesChannelAdminSearchIndexerService($container));
            yield 'shipping_method' => ($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ShippingMethodAdminSearchIndexer'] ?? self::getShippingMethodAdminSearchIndexerService($container));
            yield 'category' => ($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CategoryAdminSearchIndexer'] ?? self::getCategoryAdminSearchIndexerService($container));
            yield 'newsletter_recipient' => ($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\NewsletterRecipientAdminSearchIndexer'] ?? self::getNewsletterRecipientAdminSearchIndexerService($container));
            yield 'product_stream' => ($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ProductStreamAdminSearchIndexer'] ?? self::getProductStreamAdminSearchIndexerService($container));
        }, 16), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $a, $b, ($container->services['admin.openSearch.client'] ?? self::getAdmin_OpenSearch_ClientService($container)), ($container->services['Shopware\\Elasticsearch\\Admin\\AdminElasticsearchHelper'] ??= new \Shopware\Elasticsearch\Admin\AdminElasticsearchHelper($container->getEnv('bool:SHOPWARE_ADMIN_ES_ENABLED'), $container->getEnv('bool:SHOPWARE_ADMIN_ES_REFRESH_INDICES'), $container->getEnv('string:SHOPWARE_ADMIN_ES_INDEX_PREFIX'))), $container->parameters['elasticsearch.administration.index.config'], $container->parameters['elasticsearch.administration.index.mapping']);
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Admin\AdminSearcher' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\AdminSearcher
     */
    protected static function getAdminSearcherService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/AdminSearcher.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/AdminElasticsearchHelper.php';

        return $container->privates['Shopware\\Elasticsearch\\Admin\\AdminSearcher'] = new \Shopware\Elasticsearch\Admin\AdminSearcher(($container->services['admin.openSearch.client'] ?? self::getAdmin_OpenSearch_ClientService($container)), ($container->privates['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry'] ?? self::getAdminSearchRegistryService($container)), ($container->services['Shopware\\Elasticsearch\\Admin\\AdminElasticsearchHelper'] ??= new \Shopware\Elasticsearch\Admin\AdminElasticsearchHelper($container->getEnv('bool:SHOPWARE_ADMIN_ES_ENABLED'), $container->getEnv('bool:SHOPWARE_ADMIN_ES_REFRESH_INDICES'), $container->getEnv('string:SHOPWARE_ADMIN_ES_INDEX_PREFIX'))), '5s', 300);
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\CategoryAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\CategoryAdminSearchIndexer
     */
    protected static function getCategoryAdminSearchIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/CategoryAdminSearchIndexer.php';

        $a = ($container->services['category.repository'] ?? self::getCategory_RepositoryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CategoryAdminSearchIndexer'])) {
            return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CategoryAdminSearchIndexer'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CategoryAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\CategoryAdminSearchIndexer(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, $container->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\CmsPageAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\CmsPageAdminSearchIndexer
     */
    protected static function getCmsPageAdminSearchIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/CmsPageAdminSearchIndexer.php';

        $a = ($container->services['cms_page.repository'] ?? self::getCmsPage_RepositoryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CmsPageAdminSearchIndexer'])) {
            return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CmsPageAdminSearchIndexer'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CmsPageAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\CmsPageAdminSearchIndexer(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, $container->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\CustomerAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\CustomerAdminSearchIndexer
     */
    protected static function getCustomerAdminSearchIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/CustomerAdminSearchIndexer.php';

        $a = ($container->services['customer.repository'] ?? self::getCustomer_RepositoryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CustomerAdminSearchIndexer'])) {
            return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CustomerAdminSearchIndexer'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CustomerAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\CustomerAdminSearchIndexer(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, $container->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\CustomerGroupAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\CustomerGroupAdminSearchIndexer
     */
    protected static function getCustomerGroupAdminSearchIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/CustomerGroupAdminSearchIndexer.php';

        $a = ($container->services['customer_group.repository'] ?? self::getCustomerGroup_RepositoryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CustomerGroupAdminSearchIndexer'])) {
            return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CustomerGroupAdminSearchIndexer'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\CustomerGroupAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\CustomerGroupAdminSearchIndexer(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, $container->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\LandingPageAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\LandingPageAdminSearchIndexer
     */
    protected static function getLandingPageAdminSearchIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/LandingPageAdminSearchIndexer.php';

        $a = ($container->services['landing_page.repository'] ?? self::getLandingPage_RepositoryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\LandingPageAdminSearchIndexer'])) {
            return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\LandingPageAdminSearchIndexer'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\LandingPageAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\LandingPageAdminSearchIndexer(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, $container->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\ManufacturerAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\ManufacturerAdminSearchIndexer
     */
    protected static function getManufacturerAdminSearchIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/ManufacturerAdminSearchIndexer.php';

        $a = ($container->services['product_manufacturer.repository'] ?? self::getProductManufacturer_RepositoryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ManufacturerAdminSearchIndexer'])) {
            return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ManufacturerAdminSearchIndexer'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ManufacturerAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\ManufacturerAdminSearchIndexer(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, $container->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\MediaAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\MediaAdminSearchIndexer
     */
    protected static function getMediaAdminSearchIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/MediaAdminSearchIndexer.php';

        $a = ($container->services['media.repository'] ?? self::getMedia_RepositoryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\MediaAdminSearchIndexer'])) {
            return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\MediaAdminSearchIndexer'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\MediaAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\MediaAdminSearchIndexer(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, $container->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\NewsletterRecipientAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\NewsletterRecipientAdminSearchIndexer
     */
    protected static function getNewsletterRecipientAdminSearchIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/NewsletterRecipientAdminSearchIndexer.php';

        $a = ($container->services['newsletter_recipient.repository'] ?? self::getNewsletterRecipient_RepositoryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\NewsletterRecipientAdminSearchIndexer'])) {
            return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\NewsletterRecipientAdminSearchIndexer'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\NewsletterRecipientAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\NewsletterRecipientAdminSearchIndexer(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, $container->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\OrderAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\OrderAdminSearchIndexer
     */
    protected static function getOrderAdminSearchIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/OrderAdminSearchIndexer.php';

        $a = ($container->services['order.repository'] ?? self::getOrder_RepositoryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\OrderAdminSearchIndexer'])) {
            return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\OrderAdminSearchIndexer'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\OrderAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\OrderAdminSearchIndexer(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, $container->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\PaymentMethodAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\PaymentMethodAdminSearchIndexer
     */
    protected static function getPaymentMethodAdminSearchIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/PaymentMethodAdminSearchIndexer.php';

        $a = ($container->services['payment_method.repository'] ?? self::getPaymentMethod_RepositoryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PaymentMethodAdminSearchIndexer'])) {
            return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PaymentMethodAdminSearchIndexer'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PaymentMethodAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\PaymentMethodAdminSearchIndexer(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, $container->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\ProductAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\ProductAdminSearchIndexer
     */
    protected static function getProductAdminSearchIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/ProductAdminSearchIndexer.php';

        $a = ($container->services['product.repository'] ?? self::getProduct_RepositoryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ProductAdminSearchIndexer'])) {
            return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ProductAdminSearchIndexer'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ProductAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\ProductAdminSearchIndexer(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, $container->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\ProductStreamAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\ProductStreamAdminSearchIndexer
     */
    protected static function getProductStreamAdminSearchIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/ProductStreamAdminSearchIndexer.php';

        $a = ($container->services['product_stream.repository'] ?? self::getProductStream_RepositoryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ProductStreamAdminSearchIndexer'])) {
            return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ProductStreamAdminSearchIndexer'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ProductStreamAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\ProductStreamAdminSearchIndexer(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, $container->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\PromotionAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\PromotionAdminSearchIndexer
     */
    protected static function getPromotionAdminSearchIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/PromotionAdminSearchIndexer.php';

        $a = ($container->services['promotion.repository'] ?? self::getPromotion_RepositoryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PromotionAdminSearchIndexer'])) {
            return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PromotionAdminSearchIndexer'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PromotionAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\PromotionAdminSearchIndexer(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, $container->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\PropertyGroupAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\PropertyGroupAdminSearchIndexer
     */
    protected static function getPropertyGroupAdminSearchIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/PropertyGroupAdminSearchIndexer.php';

        $a = ($container->services['property_group.repository'] ?? self::getPropertyGroup_RepositoryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PropertyGroupAdminSearchIndexer'])) {
            return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PropertyGroupAdminSearchIndexer'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\PropertyGroupAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\PropertyGroupAdminSearchIndexer(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, $container->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\SalesChannelAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\SalesChannelAdminSearchIndexer
     */
    protected static function getSalesChannelAdminSearchIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/SalesChannelAdminSearchIndexer.php';

        $a = ($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\SalesChannelAdminSearchIndexer'])) {
            return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\SalesChannelAdminSearchIndexer'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\SalesChannelAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\SalesChannelAdminSearchIndexer(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, $container->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Admin\Indexer\ShippingMethodAdminSearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Indexer\ShippingMethodAdminSearchIndexer
     */
    protected static function getShippingMethodAdminSearchIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/AbstractAdminIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Indexer/ShippingMethodAdminSearchIndexer.php';

        $a = ($container->services['shipping_method.repository'] ?? self::getShippingMethod_RepositoryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ShippingMethodAdminSearchIndexer'])) {
            return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ShippingMethodAdminSearchIndexer'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Admin\\Indexer\\ShippingMethodAdminSearchIndexer'] = new \Shopware\Elasticsearch\Admin\Indexer\ShippingMethodAdminSearchIndexer(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, $container->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'));
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Admin\Subscriber\RefreshIndexSubscriber' shared service.
     *
     * @return \Shopware\Elasticsearch\Admin\Subscriber\RefreshIndexSubscriber
     */
    protected static function getRefreshIndexSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/Subscriber/RefreshIndexSubscriber.php';

        $a = ($container->privates['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry'] ?? self::getAdminSearchRegistryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Admin\\Subscriber\\RefreshIndexSubscriber'])) {
            return $container->privates['Shopware\\Elasticsearch\\Admin\\Subscriber\\RefreshIndexSubscriber'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Admin\\Subscriber\\RefreshIndexSubscriber'] = new \Shopware\Elasticsearch\Admin\Subscriber\RefreshIndexSubscriber($a);
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminIndexingCommand' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminIndexingCommand
     */
    protected static function getElasticsearchAdminIndexingCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Command/ConsoleProgressTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Command/ElasticsearchAdminIndexingCommand.php';

        $a = ($container->privates['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry'] ?? self::getAdminSearchRegistryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand'])) {
            return $container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand'];
        }

        $container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminIndexingCommand'] = $instance = new \Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminIndexingCommand($a);

        $instance->setName('es:admin:index');
        $instance->setDescription('Index the elasticsearch for the admin search');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminResetCommand' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminResetCommand
     */
    protected static function getElasticsearchAdminResetCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Command/ElasticsearchAdminResetCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Admin/AdminElasticsearchHelper.php';

        $container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminResetCommand'] = $instance = new \Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminResetCommand(($container->services['OpenSearch\\Client'] ?? self::getClientService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['shopware.increment.gateway.registry'] ?? self::getShopware_Increment_Gateway_RegistryService($container)), ($container->services['Shopware\\Elasticsearch\\Admin\\AdminElasticsearchHelper'] ??= new \Shopware\Elasticsearch\Admin\AdminElasticsearchHelper($container->getEnv('bool:SHOPWARE_ADMIN_ES_ENABLED'), $container->getEnv('bool:SHOPWARE_ADMIN_ES_REFRESH_INDICES'), $container->getEnv('string:SHOPWARE_ADMIN_ES_INDEX_PREFIX'))));

        $instance->setName('es:admin:reset');
        $instance->setDescription('Reset Admin Elasticsearch indexing');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminTestCommand' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminTestCommand
     */
    protected static function getElasticsearchAdminTestCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Command/ElasticsearchAdminTestCommand.php';

        $container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminTestCommand'] = $instance = new \Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminTestCommand(($container->privates['Shopware\\Elasticsearch\\Admin\\AdminSearcher'] ?? self::getAdminSearcherService($container)));

        $instance->setName('es:admin:test');
        $instance->setDescription('Allows you to test the admin search index');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminUpdateMappingCommand' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminUpdateMappingCommand
     */
    protected static function getElasticsearchAdminUpdateMappingCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Command/ElasticsearchAdminUpdateMappingCommand.php';

        $container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchAdminUpdateMappingCommand'] = $instance = new \Shopware\Elasticsearch\Framework\Command\ElasticsearchAdminUpdateMappingCommand(($container->privates['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry'] ?? self::getAdminSearchRegistryService($container)));

        $instance->setName('es:admin:mapping:update');
        $instance->setDescription('Update the Elasticsearch indices mapping');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Framework\Command\ElasticsearchCleanIndicesCommand' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Command\ElasticsearchCleanIndicesCommand
     */
    protected static function getElasticsearchCleanIndicesCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Command/ElasticsearchCleanIndicesCommand.php';

        $container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCleanIndicesCommand'] = $instance = new \Shopware\Elasticsearch\Framework\Command\ElasticsearchCleanIndicesCommand(($container->services['OpenSearch\\Client'] ?? self::getClientService($container)), ($container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchOutdatedIndexDetector'] ?? self::getElasticsearchOutdatedIndexDetectorService($container)));

        $instance->setName('es:index:cleanup');
        $instance->setDescription('Clean outdated indices');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Framework\Command\ElasticsearchCreateAliasCommand' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Command\ElasticsearchCreateAliasCommand
     */
    protected static function getElasticsearchCreateAliasCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Command/ElasticsearchCreateAliasCommand.php';

        $container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchCreateAliasCommand'] = $instance = new \Shopware\Elasticsearch\Framework\Command\ElasticsearchCreateAliasCommand(($container->services['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler'] ?? self::getCreateAliasTaskHandlerService($container)));

        $instance->setName('es:create:alias');
        $instance->setDescription('Create the elasticsearch alias');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Framework\Command\ElasticsearchIndexingCommand' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Command\ElasticsearchIndexingCommand
     */
    protected static function getElasticsearchIndexingCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Command/ConsoleProgressTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Command/ElasticsearchIndexingCommand.php';

        $container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchIndexingCommand'] = $instance = new \Shopware\Elasticsearch\Framework\Command\ElasticsearchIndexingCommand(($container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'] ?? self::getElasticsearchIndexerService($container)), ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container)), ($container->services['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler'] ?? self::getCreateAliasTaskHandlerService($container)), $container->getEnv('bool:SHOPWARE_ES_INDEXING_ENABLED'));

        $instance->setName('es:index');
        $instance->setDescription('Index all entities into elasticsearch');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Framework\Command\ElasticsearchResetCommand' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Command\ElasticsearchResetCommand
     */
    protected static function getElasticsearchResetCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Command/ElasticsearchResetCommand.php';

        $container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchResetCommand'] = $instance = new \Shopware\Elasticsearch\Framework\Command\ElasticsearchResetCommand(($container->services['OpenSearch\\Client'] ?? self::getClientService($container)), ($container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchOutdatedIndexDetector'] ?? self::getElasticsearchOutdatedIndexDetectorService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->services['shopware.increment.gateway.registry'] ?? self::getShopware_Increment_Gateway_RegistryService($container)));

        $instance->setName('es:reset');
        $instance->setDescription('Reset the elasticsearch index');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Framework\Command\ElasticsearchStatusCommand' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Command\ElasticsearchStatusCommand
     */
    protected static function getElasticsearchStatusCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Command/ConsoleProgressTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Command/ElasticsearchStatusCommand.php';

        $container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchStatusCommand'] = $instance = new \Shopware\Elasticsearch\Framework\Command\ElasticsearchStatusCommand(($container->services['OpenSearch\\Client'] ?? self::getClientService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));

        $instance->setName('es:status');
        $instance->setDescription('Show the status of the elasticsearch index');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Framework\Command\ElasticsearchTestAnalyzerCommand' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Command\ElasticsearchTestAnalyzerCommand
     */
    protected static function getElasticsearchTestAnalyzerCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Command/ElasticsearchTestAnalyzerCommand.php';

        $container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchTestAnalyzerCommand'] = $instance = new \Shopware\Elasticsearch\Framework\Command\ElasticsearchTestAnalyzerCommand(($container->services['OpenSearch\\Client'] ?? self::getClientService($container)));

        $instance->setName('es:test:analyzer');
        $instance->setDescription('Test the elasticsearch analyzer');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Framework\Command\ElasticsearchUpdateMappingCommand' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Command\ElasticsearchUpdateMappingCommand
     */
    protected static function getElasticsearchUpdateMappingCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Command/ElasticsearchUpdateMappingCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Indexing/IndexMappingUpdater.php';

        $container->privates['Shopware\\Elasticsearch\\Framework\\Command\\ElasticsearchUpdateMappingCommand'] = $instance = new \Shopware\Elasticsearch\Framework\Command\ElasticsearchUpdateMappingCommand(new \Shopware\Elasticsearch\Framework\Indexing\IndexMappingUpdater(($container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchRegistry'] ?? self::getElasticsearchRegistryService($container)), ($container->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'] ?? self::getElasticsearchHelperService($container)), ($container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchLanguageProvider'] ?? self::getElasticsearchLanguageProviderService($container)), ($container->services['OpenSearch\\Client'] ?? self::getClientService($container)), ($container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\IndexMappingProvider'] ?? self::getIndexMappingProviderService($container))));

        $instance->setName('es:mapping:update');
        $instance->setDescription('Update the Elasticsearch indices mapping');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Framework\DataAbstractionLayer\CriteriaParser' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\DataAbstractionLayer\CriteriaParser
     */
    protected static function getCriteriaParserService($container)
    {
        return $container->privates['Shopware\\Elasticsearch\\Framework\\DataAbstractionLayer\\CriteriaParser'] = new \Shopware\Elasticsearch\Framework\DataAbstractionLayer\CriteriaParser(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityDefinitionQueryHelper()), ($container->privates['Shopware\\Core\\System\\CustomField\\CustomFieldService'] ?? self::getCustomFieldServiceService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Storage\\AbstractKeyValueStorage'] ?? self::getAbstractKeyValueStorageService($container)));
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Framework\ElasticsearchLanguageProvider' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\ElasticsearchLanguageProvider
     */
    protected static function getElasticsearchLanguageProviderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/ElasticsearchLanguageProvider.php';

        $a = ($container->services['language.repository'] ?? self::getLanguage_RepositoryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchLanguageProvider'])) {
            return $container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchLanguageProvider'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchLanguageProvider'])) {
            return $container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchLanguageProvider'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchLanguageProvider'] = new \Shopware\Elasticsearch\Framework\ElasticsearchLanguageProvider($a, $b);
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Framework\ElasticsearchOutdatedIndexDetector' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\ElasticsearchOutdatedIndexDetector
     */
    protected static function getElasticsearchOutdatedIndexDetectorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/ElasticsearchOutdatedIndexDetector.php';

        $a = ($container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchRegistry'] ?? self::getElasticsearchRegistryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchOutdatedIndexDetector'])) {
            return $container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchOutdatedIndexDetector'];
        }
        $b = ($container->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'] ?? self::getElasticsearchHelperService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchOutdatedIndexDetector'])) {
            return $container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchOutdatedIndexDetector'];
        }
        $c = ($container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchLanguageProvider'] ?? self::getElasticsearchLanguageProviderService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchOutdatedIndexDetector'])) {
            return $container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchOutdatedIndexDetector'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchOutdatedIndexDetector'] = new \Shopware\Elasticsearch\Framework\ElasticsearchOutdatedIndexDetector(($container->services['OpenSearch\\Client'] ?? self::getClientService($container)), $a, $b, $c);
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Framework\ElasticsearchRegistry' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\ElasticsearchRegistry
     */
    protected static function getElasticsearchRegistryService($container)
    {
        return $container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchRegistry'] = new \Shopware\Elasticsearch\Framework\ElasticsearchRegistry(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Elasticsearch\\Product\\ElasticsearchProductDefinition'] ?? self::getElasticsearchProductDefinitionService($container));
        }, 1));
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Framework\Indexing\ElasticsearchIndexer' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Indexing\ElasticsearchIndexer
     */
    protected static function getElasticsearchIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Indexing/ElasticsearchIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Indexing/IndexCreator.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Indexing/MultilingualEsIndexer.php';

        $a = ($container->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'] ?? self::getElasticsearchHelperService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'])) {
            return $container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'];
        }
        $b = ($container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchRegistry'] ?? self::getElasticsearchRegistryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'])) {
            return $container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'];
        }
        $c = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'])) {
            return $container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'];
        }
        $d = ($container->services['currency.repository'] ?? self::getCurrency_RepositoryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'])) {
            return $container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'];
        }
        $e = ($container->services['language.repository'] ?? self::getLanguage_RepositoryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'])) {
            return $container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'];
        }
        $f = ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'])) {
            return $container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'];
        }
        $g = ($container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchLanguageProvider'] ?? self::getElasticsearchLanguageProviderService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'])) {
            return $container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'];
        }
        $h = ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container));
        $i = ($container->services['OpenSearch\\Client'] ?? self::getClientService($container));

        $j = new \Shopware\Elasticsearch\Framework\Indexing\IndexCreator($i, $container->parameters['elasticsearch.index.config'], ($container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\IndexMappingProvider'] ?? self::getIndexMappingProviderService($container)), $c);
        $k = ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container));
        $l = ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container));

        return $container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'] = new \Shopware\Elasticsearch\Framework\Indexing\ElasticsearchIndexer($h, $a, $b, $j, $k, $i, $l, $d, $e, $container->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'), $f, new \Shopware\Elasticsearch\Framework\Indexing\MultilingualEsIndexer($h, $a, $b, $j, $k, $i, $l, $container->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE')), $g, 'dev');
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Framework\Indexing\IndexMappingProvider' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\Indexing\IndexMappingProvider
     */
    protected static function getIndexMappingProviderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/Indexing/IndexMappingProvider.php';

        return $container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\IndexMappingProvider'] = new \Shopware\Elasticsearch\Framework\Indexing\IndexMappingProvider($container->parameters['elasticsearch.index.mapping']);
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Framework\SystemUpdateListener' shared service.
     *
     * @return \Shopware\Elasticsearch\Framework\SystemUpdateListener
     */
    protected static function getSystemUpdateListenerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/SystemUpdateListener.php';

        $a = ($container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'] ?? self::getElasticsearchIndexerService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Framework\\SystemUpdateListener'])) {
            return $container->privates['Shopware\\Elasticsearch\\Framework\\SystemUpdateListener'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Framework\\SystemUpdateListener'] = new \Shopware\Elasticsearch\Framework\SystemUpdateListener(($container->privates['Shopware\\Core\\Framework\\Adapter\\Storage\\AbstractKeyValueStorage'] ?? self::getAbstractKeyValueStorageService($container)), $a, ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container)));
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Product\AbstractProductSearchQueryBuilder' shared service.
     *
     * @return \Shopware\Elasticsearch\Product\ProductSearchQueryBuilder
     */
    protected static function getAbstractProductSearchQueryBuilderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Product/AbstractProductSearchQueryBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Product/ProductSearchQueryBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Search/Term/Filter/AbstractTokenFilter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Product/StopwordTokenFilter.php';

        $a = ($container->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'] ?? self::getElasticsearchHelperService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Product\\AbstractProductSearchQueryBuilder'])) {
            return $container->privates['Shopware\\Elasticsearch\\Product\\AbstractProductSearchQueryBuilder'];
        }
        $b = ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container));

        return $container->privates['Shopware\\Elasticsearch\\Product\\AbstractProductSearchQueryBuilder'] = new \Shopware\Elasticsearch\Product\ProductSearchQueryBuilder($b, ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\EntityDefinitionQueryHelper'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Dbal\EntityDefinitionQueryHelper()), ($container->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? self::getProductDefinitionService($container)), new \Shopware\Elasticsearch\Product\StopwordTokenFilter(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Filter\\TokenFilter'] ?? self::getTokenFilterService($container)), $b), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Tokenizer'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Search\Term\Tokenizer($container->getEnv('int:SHOPWARE_DBAL_TOKEN_MINIMUM_LENGTH'))), $a);
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Product\CustomFieldUpdater' shared service.
     *
     * @return \Shopware\Elasticsearch\Product\CustomFieldUpdater
     */
    protected static function getCustomFieldUpdaterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Product/CustomFieldUpdater.php';

        $a = ($container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchOutdatedIndexDetector'] ?? self::getElasticsearchOutdatedIndexDetectorService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Product\\CustomFieldUpdater'])) {
            return $container->privates['Shopware\\Elasticsearch\\Product\\CustomFieldUpdater'];
        }
        $b = ($container->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'] ?? self::getElasticsearchHelperService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Product\\CustomFieldUpdater'])) {
            return $container->privates['Shopware\\Elasticsearch\\Product\\CustomFieldUpdater'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Product\\CustomFieldUpdater'] = new \Shopware\Elasticsearch\Product\CustomFieldUpdater($a, ($container->services['OpenSearch\\Client'] ?? self::getClientService($container)), $b, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Product\ElasticsearchProductDefinition' shared service.
     *
     * @return \Shopware\Elasticsearch\Product\ElasticsearchProductDefinition
     */
    protected static function getElasticsearchProductDefinitionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/AbstractElasticsearchDefinition.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Product/ElasticsearchProductDefinition.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Product\\ElasticsearchProductDefinition'])) {
            return $container->privates['Shopware\\Elasticsearch\\Product\\ElasticsearchProductDefinition'];
        }
        $b = ($container->privates['Shopware\\Elasticsearch\\Product\\AbstractProductSearchQueryBuilder'] ?? self::getAbstractProductSearchQueryBuilderService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Product\\ElasticsearchProductDefinition'])) {
            return $container->privates['Shopware\\Elasticsearch\\Product\\ElasticsearchProductDefinition'];
        }
        $c = ($container->services['Shopware\\Elasticsearch\\Product\\EsProductDefinition'] ?? self::getEsProductDefinitionService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Product\\ElasticsearchProductDefinition'])) {
            return $container->privates['Shopware\\Elasticsearch\\Product\\ElasticsearchProductDefinition'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Product\\ElasticsearchProductDefinition'] = new \Shopware\Elasticsearch\Product\ElasticsearchProductDefinition(($container->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? self::getProductDefinitionService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), [], $a, $b, $c, $container->getEnv('bool:SHOPWARE_ES_EXCLUDE_SOURCE'), 'dev');
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Product\LanguageSubscriber' shared service.
     *
     * @return \Shopware\Elasticsearch\Product\LanguageSubscriber
     */
    protected static function getLanguageSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Product/LanguageSubscriber.php';

        $a = ($container->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'] ?? self::getElasticsearchHelperService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Product\\LanguageSubscriber'])) {
            return $container->privates['Shopware\\Elasticsearch\\Product\\LanguageSubscriber'];
        }
        $b = ($container->privates['Shopware\\Elasticsearch\\Framework\\ElasticsearchRegistry'] ?? self::getElasticsearchRegistryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Product\\LanguageSubscriber'])) {
            return $container->privates['Shopware\\Elasticsearch\\Product\\LanguageSubscriber'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Product\\LanguageSubscriber'] = new \Shopware\Elasticsearch\Product\LanguageSubscriber($a, $b, ($container->services['OpenSearch\\Client'] ?? self::getClientService($container)), ($container->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? self::getProductDefinitionService($container)), ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container)));
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Product\ProductSearchBuilder' shared service.
     *
     * @return \Shopware\Elasticsearch\Product\ProductSearchBuilder
     */
    protected static function getProductSearchBuilderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SearchKeyword/ProductSearchBuilderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Product/ProductSearchBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SearchKeyword/ProductSearchBuilder.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SearchKeyword/ProductSearchTermInterpreterInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SearchKeyword/ProductSearchTermInterpreter.php';

        return $container->privates['Shopware\\Elasticsearch\\Product\\ProductSearchBuilder'] = new \Shopware\Elasticsearch\Product\ProductSearchBuilder(new \Shopware\Core\Content\Product\SearchKeyword\ProductSearchBuilder(new \Shopware\Core\Content\Product\SearchKeyword\ProductSearchTermInterpreter(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Tokenizer'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Search\Term\Tokenizer($container->getEnv('int:SHOPWARE_DBAL_TOKEN_MINIMUM_LENGTH'))), ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Filter\\TokenFilter'] ?? self::getTokenFilterService($container)))), ($container->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'] ?? self::getElasticsearchHelperService($container)), ($container->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? self::getProductDefinitionService($container)), 300);
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Product\ProductUpdater' shared service.
     *
     * @return \Shopware\Elasticsearch\Product\ProductUpdater
     */
    protected static function getProductUpdaterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Product/ProductUpdater.php';

        $a = ($container->privates['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer'] ?? self::getElasticsearchIndexerService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Product\\ProductUpdater'])) {
            return $container->privates['Shopware\\Elasticsearch\\Product\\ProductUpdater'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Product\\ProductUpdater'] = new \Shopware\Elasticsearch\Product\ProductUpdater($a, ($container->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? self::getProductDefinitionService($container)));
    }

    /**
     * Gets the private 'Shopware\Elasticsearch\Product\SearchKeywordReplacement' shared service.
     *
     * @return \Shopware\Elasticsearch\Product\SearchKeywordReplacement
     */
    protected static function getSearchKeywordReplacementService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/DataAbstractionLayer/SearchKeywordUpdater.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Product/SearchKeywordReplacement.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SearchKeyword/ProductSearchKeywordAnalyzerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SearchKeyword/ProductSearchKeywordAnalyzer.php';

        $a = ($container->services['language.repository'] ?? self::getLanguage_RepositoryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Product\\SearchKeywordReplacement'])) {
            return $container->privates['Shopware\\Elasticsearch\\Product\\SearchKeywordReplacement'];
        }
        $b = ($container->services['product.repository'] ?? self::getProduct_RepositoryService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Product\\SearchKeywordReplacement'])) {
            return $container->privates['Shopware\\Elasticsearch\\Product\\SearchKeywordReplacement'];
        }
        $c = ($container->services['Shopware\\Elasticsearch\\Framework\\ElasticsearchHelper'] ?? self::getElasticsearchHelperService($container));

        if (isset($container->privates['Shopware\\Elasticsearch\\Product\\SearchKeywordReplacement'])) {
            return $container->privates['Shopware\\Elasticsearch\\Product\\SearchKeywordReplacement'];
        }

        return $container->privates['Shopware\\Elasticsearch\\Product\\SearchKeywordReplacement'] = new \Shopware\Elasticsearch\Product\SearchKeywordReplacement(new \Shopware\Core\Content\Product\DataAbstractionLayer\SearchKeywordUpdater(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $a, $b, new \Shopware\Core\Content\Product\SearchKeyword\ProductSearchKeywordAnalyzer(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Tokenizer'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Search\Term\Tokenizer($container->getEnv('int:SHOPWARE_DBAL_TOKEN_MINIMUM_LENGTH'))), ($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Search\\Term\\Filter\\TokenFilter'] ?? self::getTokenFilterService($container)))), $c);
    }

    /**
     * Gets the private 'Shopware\Storefront\Checkout\Cart\SalesChannel\StorefrontCartFacade' shared autowired service.
     *
     * @return \Shopware\Storefront\Checkout\Cart\SalesChannel\StorefrontCartFacade
     */
    protected static function getStorefrontCartFacadeService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Checkout/Cart/SalesChannel/StorefrontCartFacade.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Checkout/Shipping/BlockedShippingMethodSwitcher.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Checkout/Payment/BlockedPaymentMethodSwitcher.php';

        return $container->privates['Shopware\\Storefront\\Checkout\\Cart\\SalesChannel\\StorefrontCartFacade'] = new \Shopware\Storefront\Checkout\Cart\SalesChannel\StorefrontCartFacade(($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? self::getCartServiceService($container)), new \Shopware\Storefront\Checkout\Shipping\BlockedShippingMethodSwitcher(($container->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SortedShippingMethodRoute'] ?? self::getSortedShippingMethodRouteService($container))), new \Shopware\Storefront\Checkout\Payment\BlockedPaymentMethodSwitcher(($container->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SortedPaymentMethodRoute'] ?? self::getSortedPaymentMethodRouteService($container))), ($container->services['Shopware\\Core\\System\\SalesChannel\\SalesChannel\\ContextSwitchRoute'] ?? self::getContextSwitchRouteService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartCalculator'] ?? self::getCartCalculatorService($container)), ($container->privates['Shopware\\Core\\Checkout\\Cart\\CartPersister'] ?? self::getCartPersisterService($container)));
    }

    /**
     * Gets the private 'Shopware\Storefront\Event\CartMergedSubscriber' shared autowired service.
     *
     * @return \Shopware\Storefront\Event\CartMergedSubscriber
     */
    protected static function getCartMergedSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Event/CartMergedSubscriber.php';

        $a = ($container->services['translator'] ?? self::getTranslatorService($container));

        if (isset($container->privates['Shopware\\Storefront\\Event\\CartMergedSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Event\\CartMergedSubscriber'];
        }

        return $container->privates['Shopware\\Storefront\\Event\\CartMergedSubscriber'] = new \Shopware\Storefront\Event\CartMergedSubscriber($a, ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the private 'Shopware\Storefront\Framework\Cache\CacheResponseSubscriber' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Cache\CacheResponseSubscriber
     */
    protected static function getCacheResponseSubscriberService($container)
    {
        $a = ($container->services['Shopware\\Core\\Checkout\\Cart\\SalesChannel\\CartService'] ?? self::getCartServiceService($container));

        if (isset($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheResponseSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheResponseSubscriber'];
        }

        return $container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheResponseSubscriber'] = new \Shopware\Storefront\Framework\Cache\CacheResponseSubscriber($a, $container->getEnv('default:shopware_http_cache_default_ttl_default:SHOPWARE_HTTP_DEFAULT_TTL'), $container->getEnv('default:shopware_http_cache_enabled_default:SHOPWARE_HTTP_CACHE_ENABLED'), ($container->privates['Shopware\\Storefront\\Framework\\Routing\\MaintenanceModeResolver'] ?? self::getMaintenanceModeResolver2Service($container)), false, NULL, NULL);
    }

    /**
     * Gets the private 'Shopware\Storefront\Framework\Cache\CacheTracer' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Cache\CacheTracer
     */
    protected static function getCacheTracerService($container)
    {
        $a = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'])) {
            return $container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'];
        }
        $b = ($container->services['translator'] ?? self::getTranslatorService($container));

        if (isset($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'])) {
            return $container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'];
        }
        $c = ($container->privates['Shopware\\Storefront\\Theme\\ThemeConfigValueAccessor'] ?? self::getThemeConfigValueAccessorService($container));

        if (isset($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'])) {
            return $container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'];
        }

        return $container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] = new \Shopware\Storefront\Framework\Cache\CacheTracer(new \Shopware\Core\Framework\Adapter\Cache\CacheTracer($a, $b, ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheTagCollection'] ??= new \Shopware\Core\Framework\Adapter\Cache\CacheTagCollection())), $c);
    }

    /**
     * Gets the private 'Shopware\Storefront\Framework\Cache\CacheWarmer\CacheWarmer' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Cache\CacheWarmer\CacheWarmer
     */
    protected static function getCacheWarmer2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheWarmer/CacheWarmer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheWarmer/CacheRouteWarmerRegistry.php';

        return $container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\CacheWarmer'] = new \Shopware\Storefront\Framework\Cache\CacheWarmer\CacheWarmer(($container->services['sales_channel_domain.repository'] ?? self::getSalesChannelDomain_RepositoryService($container)), ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container)), new \Shopware\Storefront\Framework\Cache\CacheWarmer\CacheRouteWarmerRegistry(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\Product\\ProductRouteWarmer'] ?? self::getProductRouteWarmerService($container));
            yield 1 => ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\Navigation\\NavigationRouteWarmer'] ?? self::getNavigationRouteWarmerService($container));
        }, 2)), ($container->services['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheIdLoader'] ?? self::getCacheIdLoaderService($container)));
    }

    /**
     * Gets the private 'Shopware\Storefront\Framework\Cache\CacheWarmer\CacheWarmerTaskHandler' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Cache\CacheWarmer\CacheWarmerTaskHandler
     */
    protected static function getCacheWarmerTaskHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheWarmer/CacheWarmerTaskHandler.php';

        return $container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\CacheWarmerTaskHandler'] = new \Shopware\Storefront\Framework\Cache\CacheWarmer\CacheWarmerTaskHandler(($container->services['kernel'] ?? $container->get('kernel', 1)), ($container->services['router'] ?? self::getRouterService($container)), ($container->services['Shopware\\Core\\Framework\\Routing\\RequestTransformerInterface'] ?? self::getRequestTransformerInterfaceService($container)), ($container->services['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheIdLoader'] ?? self::getCacheIdLoaderService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheTagCollection'] ??= new \Shopware\Core\Framework\Adapter\Cache\CacheTagCollection()));
    }

    /**
     * Gets the private 'Shopware\Storefront\Framework\Cache\CacheWarmer\Navigation\NavigationRouteWarmer' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Cache\CacheWarmer\Navigation\NavigationRouteWarmer
     */
    protected static function getNavigationRouteWarmerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheWarmer/CacheRouteWarmer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheWarmer/Navigation/NavigationRouteWarmer.php';

        return $container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\Navigation\\NavigationRouteWarmer'] = new \Shopware\Storefront\Framework\Cache\CacheWarmer\Navigation\NavigationRouteWarmer(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), ($container->services['Shopware\\Core\\Content\\Category\\CategoryDefinition'] ?? self::getCategoryDefinitionService($container)));
    }

    /**
     * Gets the private 'Shopware\Storefront\Framework\Cache\CacheWarmer\Product\ProductRouteWarmer' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Cache\CacheWarmer\Product\ProductRouteWarmer
     */
    protected static function getProductRouteWarmerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheWarmer/CacheRouteWarmer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Cache/CacheWarmer/Product/ProductRouteWarmer.php';

        return $container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\Product\\ProductRouteWarmer'] = new \Shopware\Storefront\Framework\Cache\CacheWarmer\Product\ProductRouteWarmer(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), ($container->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? self::getProductDefinitionService($container)));
    }

    /**
     * Gets the private 'Shopware\Storefront\Framework\Captcha\BasicCaptcha' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Captcha\BasicCaptcha
     */
    protected static function getBasicCaptchaService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Captcha/AbstractCaptcha.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Captcha/BasicCaptcha.php';

        $a = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Storefront\\Framework\\Captcha\\BasicCaptcha'])) {
            return $container->privates['Shopware\\Storefront\\Framework\\Captcha\\BasicCaptcha'];
        }

        return $container->privates['Shopware\\Storefront\\Framework\\Captcha\\BasicCaptcha'] = new \Shopware\Storefront\Framework\Captcha\BasicCaptcha(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $a);
    }

    /**
     * Gets the private 'Shopware\Storefront\Framework\Captcha\CaptchaRouteListener' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Captcha\CaptchaRouteListener
     */
    protected static function getCaptchaRouteListenerService($container)
    {
        $a = ($container->services['Shopware\\Storefront\\Controller\\ErrorController'] ?? self::getErrorControllerService($container));

        if (isset($container->privates['Shopware\\Storefront\\Framework\\Captcha\\CaptchaRouteListener'])) {
            return $container->privates['Shopware\\Storefront\\Framework\\Captcha\\CaptchaRouteListener'];
        }
        $b = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Storefront\\Framework\\Captcha\\CaptchaRouteListener'])) {
            return $container->privates['Shopware\\Storefront\\Framework\\Captcha\\CaptchaRouteListener'];
        }

        return $container->privates['Shopware\\Storefront\\Framework\\Captcha\\CaptchaRouteListener'] = new \Shopware\Storefront\Framework\Captcha\CaptchaRouteListener(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Storefront\\Framework\\Captcha\\HoneypotCaptcha'] ?? self::getHoneypotCaptchaService($container));
            yield 1 => ($container->privates['Shopware\\Storefront\\Framework\\Captcha\\BasicCaptcha'] ?? self::getBasicCaptchaService($container));
            yield 2 => ($container->privates['Shopware\\Storefront\\Framework\\Captcha\\GoogleReCaptchaV2'] ?? self::getGoogleReCaptchaV2Service($container));
            yield 3 => ($container->privates['Shopware\\Storefront\\Framework\\Captcha\\GoogleReCaptchaV3'] ?? self::getGoogleReCaptchaV3Service($container));
        }, 4), $a, $b);
    }

    /**
     * Gets the private 'Shopware\Storefront\Framework\Captcha\GoogleReCaptchaV2' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Captcha\GoogleReCaptchaV2
     */
    protected static function getGoogleReCaptchaV2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Captcha/AbstractCaptcha.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Captcha/GoogleReCaptchaV2.php';

        return $container->privates['Shopware\\Storefront\\Framework\\Captcha\\GoogleReCaptchaV2'] = new \Shopware\Storefront\Framework\Captcha\GoogleReCaptchaV2(($container->privates['shopware.captcha.client'] ??= new \GuzzleHttp\Client()));
    }

    /**
     * Gets the private 'Shopware\Storefront\Framework\Captcha\GoogleReCaptchaV3' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Captcha\GoogleReCaptchaV3
     */
    protected static function getGoogleReCaptchaV3Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Captcha/AbstractCaptcha.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Captcha/GoogleReCaptchaV3.php';

        return $container->privates['Shopware\\Storefront\\Framework\\Captcha\\GoogleReCaptchaV3'] = new \Shopware\Storefront\Framework\Captcha\GoogleReCaptchaV3(($container->privates['shopware.captcha.client'] ??= new \GuzzleHttp\Client()));
    }

    /**
     * Gets the private 'Shopware\Storefront\Framework\Captcha\HoneypotCaptcha' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Captcha\HoneypotCaptcha
     */
    protected static function getHoneypotCaptchaService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Captcha/AbstractCaptcha.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Captcha/HoneypotCaptcha.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container));

        if (isset($container->privates['Shopware\\Storefront\\Framework\\Captcha\\HoneypotCaptcha'])) {
            return $container->privates['Shopware\\Storefront\\Framework\\Captcha\\HoneypotCaptcha'];
        }

        return $container->privates['Shopware\\Storefront\\Framework\\Captcha\\HoneypotCaptcha'] = new \Shopware\Storefront\Framework\Captcha\HoneypotCaptcha($a);
    }

    /**
     * Gets the private 'Shopware\Storefront\Framework\Command\HttpCacheWarmUpCommand' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Command\HttpCacheWarmUpCommand
     */
    protected static function getHttpCacheWarmUpCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Command/HttpCacheWarmUpCommand.php';

        $container->privates['Shopware\\Storefront\\Framework\\Command\\HttpCacheWarmUpCommand'] = $instance = new \Shopware\Storefront\Framework\Command\HttpCacheWarmUpCommand(($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\CacheWarmer'] ?? self::getCacheWarmer2Service($container)), ($container->services['kernel'] ?? $container->get('kernel', 1)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));

        $instance->setName('http:cache:warm:up');
        $instance->setDescription('Warm up the http cache');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Storefront\Framework\Command\SalesChannelCreateStorefrontCommand' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Command\SalesChannelCreateStorefrontCommand
     */
    protected static function getSalesChannelCreateStorefrontCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/SalesChannel/Command/SalesChannelCreateCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Command/SalesChannelCreateStorefrontCommand.php';

        $container->privates['Shopware\\Storefront\\Framework\\Command\\SalesChannelCreateStorefrontCommand'] = $instance = new \Shopware\Storefront\Framework\Command\SalesChannelCreateStorefrontCommand(($container->services['snippet_set.repository'] ?? self::getSnippetSet_RepositoryService($container)), ($container->services['Shopware\\Core\\Maintenance\\SalesChannel\\Service\\SalesChannelCreator'] ?? self::getSalesChannelCreatorService($container)));

        $instance->setName('sales-channel:create:storefront');
        $instance->setDescription('Creates a new storefront sales channel');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Storefront\Framework\Routing\CachedDomainLoaderInvalidator' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Routing\CachedDomainLoaderInvalidator
     */
    protected static function getCachedDomainLoaderInvalidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Routing/CachedDomainLoaderInvalidator.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] ?? self::getCacheInvalidatorService($container));

        if (isset($container->privates['Shopware\\Storefront\\Framework\\Routing\\CachedDomainLoaderInvalidator'])) {
            return $container->privates['Shopware\\Storefront\\Framework\\Routing\\CachedDomainLoaderInvalidator'];
        }

        return $container->privates['Shopware\\Storefront\\Framework\\Routing\\CachedDomainLoaderInvalidator'] = new \Shopware\Storefront\Framework\Routing\CachedDomainLoaderInvalidator($a);
    }

    /**
     * Gets the private 'Shopware\Storefront\Framework\Routing\MaintenanceModeResolver' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Routing\MaintenanceModeResolver
     */
    protected static function getMaintenanceModeResolver2Service($container)
    {
        $a = ($container->privates['Shopware\\Core\\Framework\\Routing\\MaintenanceModeResolver'] ?? self::getMaintenanceModeResolverService($container));

        if (isset($container->privates['Shopware\\Storefront\\Framework\\Routing\\MaintenanceModeResolver'])) {
            return $container->privates['Shopware\\Storefront\\Framework\\Routing\\MaintenanceModeResolver'];
        }

        return $container->privates['Shopware\\Storefront\\Framework\\Routing\\MaintenanceModeResolver'] = new \Shopware\Storefront\Framework\Routing\MaintenanceModeResolver(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $a);
    }

    /**
     * Gets the private 'Shopware\Storefront\Framework\Routing\NotFound\NotFoundSubscriber' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Routing\NotFound\NotFoundSubscriber
     */
    protected static function getNotFoundSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Routing/NotFound/NotFoundSubscriber.php';

        $a = ($container->services['Shopware\\Storefront\\Controller\\ErrorController'] ?? self::getErrorControllerService($container));

        if (isset($container->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'];
        }
        $b = ($container->privates['Shopware\\Core\\System\\SalesChannel\\Context\\SalesChannelContextService'] ?? self::getSalesChannelContextServiceService($container));

        if (isset($container->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'];
        }
        $c = ($container->privates['Shopware\\Storefront\\Framework\\Cache\\CacheTracer'] ?? self::getCacheTracerService($container));

        if (isset($container->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'];
        }
        $d = ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] ?? self::getCacheInvalidatorService($container));

        if (isset($container->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'];
        }
        $e = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'];
        }

        return $container->privates['Shopware\\Storefront\\Framework\\Routing\\NotFound\\NotFoundSubscriber'] = new \Shopware\Storefront\Framework\Routing\NotFound\NotFoundSubscriber($a, ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $b, true, ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)), $c, ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Cache\\EntityCacheKeyGenerator'] ??= new \Shopware\Core\Framework\DataAbstractionLayer\Cache\EntityCacheKeyGenerator()), $d, $e);
    }

    /**
     * Gets the private 'Shopware\Storefront\Framework\Routing\StorefrontSubscriber' shared autowired service.
     *
     * @return \Shopware\Storefront\Framework\Routing\StorefrontSubscriber
     */
    protected static function getStorefrontSubscriberService($container)
    {
        $a = ($container->privates['Shopware\\Storefront\\Framework\\Routing\\MaintenanceModeResolver'] ?? self::getMaintenanceModeResolver2Service($container));

        if (isset($container->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'];
        }
        $b = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'];
        }

        return $container->privates['Shopware\\Storefront\\Framework\\Routing\\StorefrontSubscriber'] = new \Shopware\Storefront\Framework\Routing\StorefrontSubscriber(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->services['router'] ?? self::getRouterService($container)), new \Shopware\Core\Content\Seo\HreflangLoader(($container->privates['router.default'] ?? self::getRouter_DefaultService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container))), $a, ($container->services['Shopware\\Core\\Framework\\App\\ShopId\\ShopIdProvider'] ?? self::getShopIdProviderService($container)), ($container->privates['Shopware\\Core\\Framework\\App\\ActiveAppsLoader'] ?? self::getActiveAppsLoaderService($container)), $b, ($container->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? self::getStorefrontPluginRegistryService($container)));
    }

    /**
     * Gets the private 'Shopware\Storefront\Framework\Seo\SeoUrlRoute\LandingPageSeoUrlRoute' shared service.
     *
     * @return \Shopware\Storefront\Framework\Seo\SeoUrlRoute\LandingPageSeoUrlRoute
     */
    protected static function getLandingPageSeoUrlRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlRoute/SeoUrlRouteInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Seo/SeoUrlRoute/LandingPageSeoUrlRoute.php';

        return $container->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\LandingPageSeoUrlRoute'] = new \Shopware\Storefront\Framework\Seo\SeoUrlRoute\LandingPageSeoUrlRoute(($container->services['Shopware\\Core\\Content\\LandingPage\\LandingPageDefinition'] ?? self::getLandingPageDefinitionService($container)));
    }

    /**
     * Gets the private 'Shopware\Storefront\Framework\Seo\SeoUrlRoute\NavigationPageSeoUrlRoute' shared service.
     *
     * @return \Shopware\Storefront\Framework\Seo\SeoUrlRoute\NavigationPageSeoUrlRoute
     */
    protected static function getNavigationPageSeoUrlRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlRoute/SeoUrlRouteInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Seo/SeoUrlRoute/NavigationPageSeoUrlRoute.php';

        return $container->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\NavigationPageSeoUrlRoute'] = new \Shopware\Storefront\Framework\Seo\SeoUrlRoute\NavigationPageSeoUrlRoute(($container->services['Shopware\\Core\\Content\\Category\\CategoryDefinition'] ?? self::getCategoryDefinitionService($container)), ($container->privates['Shopware\\Core\\Content\\Category\\Service\\CategoryBreadcrumbBuilder'] ?? self::getCategoryBreadcrumbBuilderService($container)));
    }

    /**
     * Gets the private 'Shopware\Storefront\Framework\Seo\SeoUrlRoute\ProductPageSeoUrlRoute' shared service.
     *
     * @return \Shopware\Storefront\Framework\Seo\SeoUrlRoute\ProductPageSeoUrlRoute
     */
    protected static function getProductPageSeoUrlRouteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlRoute/SeoUrlRouteInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Seo/SeoUrlRoute/ProductPageSeoUrlRoute.php';

        return $container->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\ProductPageSeoUrlRoute'] = new \Shopware\Storefront\Framework\Seo\SeoUrlRoute\ProductPageSeoUrlRoute(($container->services['Shopware\\Core\\Content\\Product\\ProductDefinition'] ?? self::getProductDefinitionService($container)));
    }

    /**
     * Gets the private 'Shopware\Storefront\Framework\Seo\SeoUrlRoute\SeoUrlUpdateListener' shared service.
     *
     * @return \Shopware\Storefront\Framework\Seo\SeoUrlRoute\SeoUrlUpdateListener
     */
    protected static function getSeoUrlUpdateListenerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Framework/Seo/SeoUrlRoute/SeoUrlUpdateListener.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Seo/SeoUrlUpdater.php';

        $a = ($container->services['language.repository'] ?? self::getLanguage_RepositoryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'])) {
            return $container->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'];
        }
        $b = ($container->privates['Shopware\\Core\\Content\\Seo\\SeoUrlPersister'] ?? self::getSeoUrlPersisterService($container));

        if (isset($container->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'])) {
            return $container->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'];
        }
        $c = ($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'])) {
            return $container->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'];
        }
        $d = ($container->services['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry'] ?? self::getEntityIndexerRegistryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'])) {
            return $container->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'];
        }
        $e = ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container));

        return $container->privates['Shopware\\Storefront\\Framework\\Seo\\SeoUrlRoute\\SeoUrlUpdateListener'] = new \Shopware\Storefront\Framework\Seo\SeoUrlRoute\SeoUrlUpdateListener(new \Shopware\Core\Content\Seo\SeoUrlUpdater($a, ($container->privates['Shopware\\Core\\Content\\Seo\\SeoUrlRoute\\SeoUrlRouteRegistry'] ?? self::getSeoUrlRouteRegistryService($container)), ($container->privates['Shopware\\Core\\Content\\Seo\\SeoUrlGenerator'] ?? self::getSeoUrlGeneratorService($container)), $b, $e, $c), $e, $d);
    }

    /**
     * Gets the private 'Shopware\Storefront\Page\Account\Login\AccountLoginPageLoader' shared autowired service.
     *
     * @return \Shopware\Storefront\Page\Account\Login\AccountLoginPageLoader
     */
    protected static function getAccountLoginPageLoaderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Account/Login/AccountLoginPageLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Salutation/AbstractSalutationsSorter.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/System/Salutation/SalutationSorter.php';

        return $container->privates['Shopware\\Storefront\\Page\\Account\\Login\\AccountLoginPageLoader'] = new \Shopware\Storefront\Page\Account\Login\AccountLoginPageLoader(($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] ?? self::getGenericPageLoaderService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\System\\Country\\SalesChannel\\CachedCountryRoute'] ?? self::getCachedCountryRouteService($container)), ($container->services['Shopware\\Core\\System\\Salutation\\SalesChannel\\CachedSalutationRoute'] ?? self::getCachedSalutationRouteService($container)), ($container->privates['Shopware\\Core\\System\\Salutation\\AbstractSalutationsSorter'] ??= new \Shopware\Core\System\Salutation\SalutationSorter()));
    }

    /**
     * Gets the private 'Shopware\Storefront\Page\Cms\DefaultMediaResolver' shared autowired service.
     *
     * @return \Shopware\Storefront\Page\Cms\DefaultMediaResolver
     */
    protected static function getDefaultMediaResolverService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Cms/AbstractDefaultMediaResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Cms/DefaultMediaResolver.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Media/Cms/DefaultMediaResolver.php';

        $a = ($container->services['translator'] ?? self::getTranslatorService($container));

        if (isset($container->privates['Shopware\\Storefront\\Page\\Cms\\DefaultMediaResolver'])) {
            return $container->privates['Shopware\\Storefront\\Page\\Cms\\DefaultMediaResolver'];
        }

        return $container->privates['Shopware\\Storefront\\Page\\Cms\\DefaultMediaResolver'] = new \Shopware\Storefront\Page\Cms\DefaultMediaResolver(new \Shopware\Core\Content\Media\Cms\DefaultMediaResolver(($container->services['shopware.filesystem.public'] ?? self::getShopware_Filesystem_PublicService($container))), $a, ($container->privates['assets.packages'] ?? self::getAssets_PackagesService($container)));
    }

    /**
     * Gets the private 'Shopware\Storefront\Page\GenericPageLoader' shared autowired service.
     *
     * @return \Shopware\Storefront\Page\GenericPageLoader
     */
    protected static function getGenericPageLoaderService($container)
    {
        $a = ($container->privates['Shopware\\Storefront\\Pagelet\\Header\\HeaderPageletLoader'] ?? self::getHeaderPageletLoaderService($container));

        if (isset($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'])) {
            return $container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'];
        }
        $b = ($container->privates['Shopware\\Storefront\\Pagelet\\Footer\\FooterPageletLoader'] ?? self::getFooterPageletLoaderService($container));

        if (isset($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'])) {
            return $container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'];
        }
        $c = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'])) {
            return $container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'];
        }
        $d = ($container->services['Shopware\\Core\\Checkout\\Payment\\SalesChannel\\SortedPaymentMethodRoute'] ?? self::getSortedPaymentMethodRouteService($container));

        if (isset($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'])) {
            return $container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'];
        }
        $e = ($container->services['Shopware\\Core\\Checkout\\Shipping\\SalesChannel\\SortedShippingMethodRoute'] ?? self::getSortedShippingMethodRouteService($container));

        if (isset($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'])) {
            return $container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'];
        }
        $f = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'])) {
            return $container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'];
        }

        return $container->privates['Shopware\\Storefront\\Page\\GenericPageLoader'] = new \Shopware\Storefront\Page\GenericPageLoader($a, $b, $c, $d, $e, $f);
    }

    /**
     * Gets the private 'Shopware\Storefront\Page\Product\Configurator\ProductPageConfiguratorLoader' shared autowired service.
     *
     * @return \Shopware\Storefront\Page\Product\Configurator\ProductPageConfiguratorLoader
     */
    protected static function getProductPageConfiguratorLoaderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Detail/ProductConfiguratorLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Product/Configurator/ProductPageConfiguratorLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Detail/AbstractAvailableCombinationLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Product/SalesChannel/Detail/AvailableCombinationLoader.php';

        $a = ($container->services['product_configurator_setting.repository'] ?? self::getProductConfiguratorSetting_RepositoryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Page\\Product\\Configurator\\ProductPageConfiguratorLoader'])) {
            return $container->privates['Shopware\\Storefront\\Page\\Product\\Configurator\\ProductPageConfiguratorLoader'];
        }
        $b = ($container->privates['Shopware\\Core\\Content\\Product\\Stock\\StockStorage'] ?? self::getStockStorageService($container));

        if (isset($container->privates['Shopware\\Storefront\\Page\\Product\\Configurator\\ProductPageConfiguratorLoader'])) {
            return $container->privates['Shopware\\Storefront\\Page\\Product\\Configurator\\ProductPageConfiguratorLoader'];
        }

        return $container->privates['Shopware\\Storefront\\Page\\Product\\Configurator\\ProductPageConfiguratorLoader'] = new \Shopware\Storefront\Page\Product\Configurator\ProductPageConfiguratorLoader(new \Shopware\Core\Content\Product\SalesChannel\Detail\ProductConfiguratorLoader($a, new \Shopware\Core\Content\Product\SalesChannel\Detail\AvailableCombinationLoader(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $b)));
    }

    /**
     * Gets the private 'Shopware\Storefront\Pagelet\Footer\FooterPageletLoader' shared autowired service.
     *
     * @return \Shopware\Storefront\Pagelet\Footer\FooterPageletLoader
     */
    protected static function getFooterPageletLoaderService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Storefront\\Pagelet\\Footer\\FooterPageletLoader'])) {
            return $container->privates['Shopware\\Storefront\\Pagelet\\Footer\\FooterPageletLoader'];
        }
        $b = ($container->privates['Shopware\\Core\\Content\\Category\\Service\\NavigationLoader'] ?? self::getNavigationLoaderService($container));

        if (isset($container->privates['Shopware\\Storefront\\Pagelet\\Footer\\FooterPageletLoader'])) {
            return $container->privates['Shopware\\Storefront\\Pagelet\\Footer\\FooterPageletLoader'];
        }

        return $container->privates['Shopware\\Storefront\\Pagelet\\Footer\\FooterPageletLoader'] = new \Shopware\Storefront\Pagelet\Footer\FooterPageletLoader($a, $b);
    }

    /**
     * Gets the private 'Shopware\Storefront\Pagelet\Header\HeaderPageletLoader' shared autowired service.
     *
     * @return \Shopware\Storefront\Pagelet\Header\HeaderPageletLoader
     */
    protected static function getHeaderPageletLoaderService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Storefront\\Pagelet\\Header\\HeaderPageletLoader'])) {
            return $container->privates['Shopware\\Storefront\\Pagelet\\Header\\HeaderPageletLoader'];
        }
        $b = ($container->services['Shopware\\Core\\System\\Currency\\SalesChannel\\CachedCurrencyRoute'] ?? self::getCachedCurrencyRouteService($container));

        if (isset($container->privates['Shopware\\Storefront\\Pagelet\\Header\\HeaderPageletLoader'])) {
            return $container->privates['Shopware\\Storefront\\Pagelet\\Header\\HeaderPageletLoader'];
        }
        $c = ($container->services['Shopware\\Core\\System\\Language\\SalesChannel\\CachedLanguageRoute'] ?? self::getCachedLanguageRouteService($container));

        if (isset($container->privates['Shopware\\Storefront\\Pagelet\\Header\\HeaderPageletLoader'])) {
            return $container->privates['Shopware\\Storefront\\Pagelet\\Header\\HeaderPageletLoader'];
        }
        $d = ($container->privates['Shopware\\Core\\Content\\Category\\Service\\NavigationLoader'] ?? self::getNavigationLoaderService($container));

        if (isset($container->privates['Shopware\\Storefront\\Pagelet\\Header\\HeaderPageletLoader'])) {
            return $container->privates['Shopware\\Storefront\\Pagelet\\Header\\HeaderPageletLoader'];
        }

        return $container->privates['Shopware\\Storefront\\Pagelet\\Header\\HeaderPageletLoader'] = new \Shopware\Storefront\Pagelet\Header\HeaderPageletLoader($a, $b, $c, $d);
    }

    /**
     * Gets the private 'Shopware\Storefront\Pagelet\Newsletter\Account\NewsletterAccountPageletLoader' shared autowired service.
     *
     * @return \Shopware\Storefront\Pagelet\Newsletter\Account\NewsletterAccountPageletLoader
     */
    protected static function getNewsletterAccountPageletLoaderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Newsletter/Account/NewsletterAccountPageletLoader.php';

        return $container->privates['Shopware\\Storefront\\Pagelet\\Newsletter\\Account\\NewsletterAccountPageletLoader'] = new \Shopware\Storefront\Pagelet\Newsletter\Account\NewsletterAccountPageletLoader(($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->services['Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterSubscribeRoute'] ?? self::getNewsletterSubscribeRouteService($container)), ($container->services['Shopware\\Core\\Content\\Newsletter\\SalesChannel\\NewsletterUnsubscribeRoute'] ?? self::getNewsletterUnsubscribeRouteService($container)), ($container->services['Shopware\\Core\\Checkout\\Customer\\SalesChannel\\AccountNewsletterRecipientRoute'] ?? self::getAccountNewsletterRecipientRouteService($container)), ($container->services['translator'] ?? self::getTranslatorService($container)), ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container)));
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\CachedResolvedConfigLoader.inner' shared service.
     *
     * @return \Shopware\Storefront\Theme\ResolvedConfigLoader
     */
    protected static function getCachedResolvedConfigLoader_InnerService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['Shopware\\Storefront\\Theme\\CachedResolvedConfigLoader.inner'] = $container->createProxy('ResolvedConfigLoaderGhostC35c4d4', static fn () => \ResolvedConfigLoaderGhostC35c4d4::createLazyGhost(static fn ($proxy) => self::getCachedResolvedConfigLoader_InnerService($container, $proxy)));
        }

        return ($lazyLoad->__construct(($container->services['media.repository'] ?? self::getMedia_RepositoryService($container)), ($container->privates['Shopware\\Storefront\\Theme\\ThemeService'] ?? self::getThemeServiceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\CachedResolvedConfigLoaderInvalidator' shared service.
     *
     * @return \Shopware\Storefront\Theme\CachedResolvedConfigLoaderInvalidator
     */
    protected static function getCachedResolvedConfigLoaderInvalidatorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/CachedResolvedConfigLoaderInvalidator.php';

        $a = ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] ?? self::getCacheInvalidatorService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\CachedResolvedConfigLoaderInvalidator'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\CachedResolvedConfigLoaderInvalidator'];
        }

        return $container->privates['Shopware\\Storefront\\Theme\\CachedResolvedConfigLoaderInvalidator'] = new \Shopware\Storefront\Theme\CachedResolvedConfigLoaderInvalidator($a, true);
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\Command\ThemeChangeCommand' shared service.
     *
     * @return \Shopware\Storefront\Theme\Command\ThemeChangeCommand
     */
    protected static function getThemeChangeCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Command/ThemeChangeCommand.php';

        $container->privates['Shopware\\Storefront\\Theme\\Command\\ThemeChangeCommand'] = $instance = new \Shopware\Storefront\Theme\Command\ThemeChangeCommand(($container->privates['Shopware\\Storefront\\Theme\\ThemeService'] ?? self::getThemeServiceService($container)), ($container->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? self::getStorefrontPluginRegistryService($container)), ($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container)), ($container->services['theme.repository'] ?? self::getTheme_RepositoryService($container)), ($container->services['theme_sales_channel.repository'] ?? self::getThemeSalesChannel_RepositoryService($container)), ($container->services['media_thumbnail.repository'] ?? self::getMediaThumbnail_RepositoryService($container)));

        $instance->setName('theme:change');
        $instance->setDescription('Change the active theme for a sales channel');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\Command\ThemeCompileCommand' shared service.
     *
     * @return \Shopware\Storefront\Theme\Command\ThemeCompileCommand
     */
    protected static function getThemeCompileCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Command/ThemeCompileCommand.php';

        $container->privates['Shopware\\Storefront\\Theme\\Command\\ThemeCompileCommand'] = $instance = new \Shopware\Storefront\Theme\Command\ThemeCompileCommand(($container->privates['Shopware\\Storefront\\Theme\\ThemeService'] ?? self::getThemeServiceService($container)), ($container->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseAvailableThemeProvider'] ?? self::getDatabaseAvailableThemeProviderService($container)));

        $instance->setName('theme:compile');
        $instance->setDescription('Compile the theme');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\Command\ThemeCreateCommand' shared service.
     *
     * @return \Shopware\Storefront\Theme\Command\ThemeCreateCommand
     */
    protected static function getThemeCreateCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Command/ThemeCreateCommand.php';

        $container->privates['Shopware\\Storefront\\Theme\\Command\\ThemeCreateCommand'] = $instance = new \Shopware\Storefront\Theme\Command\ThemeCreateCommand(\dirname(__DIR__, 4));

        $instance->setName('theme:create');
        $instance->setDescription('Create a new theme');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\Command\ThemeDumpCommand' shared service.
     *
     * @return \Shopware\Storefront\Theme\Command\ThemeDumpCommand
     */
    protected static function getThemeDumpCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Command/ThemeDumpCommand.php';

        $container->privates['Shopware\\Storefront\\Theme\\Command\\ThemeDumpCommand'] = $instance = new \Shopware\Storefront\Theme\Command\ThemeDumpCommand(($container->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? self::getStorefrontPluginRegistryService($container)), ($container->privates['Shopware\\Storefront\\Theme\\ThemeFileResolver'] ?? self::getThemeFileResolverService($container)), ($container->services['theme.repository'] ?? self::getTheme_RepositoryService($container)), \dirname(__DIR__, 4), ($container->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\StaticFileConfigDumper'] ?? self::getStaticFileConfigDumperService($container)));

        $instance->setName('theme:dump');
        $instance->setDescription('Dump the theme configuration');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\Command\ThemePrepareIconsCommand' shared service.
     *
     * @return \Shopware\Storefront\Theme\Command\ThemePrepareIconsCommand
     */
    protected static function getThemePrepareIconsCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Command/ThemePrepareIconsCommand.php';

        $container->privates['Shopware\\Storefront\\Theme\\Command\\ThemePrepareIconsCommand'] = $instance = new \Shopware\Storefront\Theme\Command\ThemePrepareIconsCommand();

        $instance->setName('theme:prepare-icons');
        $instance->setDescription('Prepare the theme icons');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\Command\ThemeRefreshCommand' shared service.
     *
     * @return \Shopware\Storefront\Theme\Command\ThemeRefreshCommand
     */
    protected static function getThemeRefreshCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Command/ThemeRefreshCommand.php';

        $container->privates['Shopware\\Storefront\\Theme\\Command\\ThemeRefreshCommand'] = $instance = new \Shopware\Storefront\Theme\Command\ThemeRefreshCommand(($container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'] ?? self::getThemeLifecycleServiceService($container)));

        $instance->setName('theme:refresh');
        $instance->setDescription('Refresh the theme configuration');

        return $instance;
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\ConfigLoader\DatabaseAvailableThemeProvider' shared service.
     *
     * @return \Shopware\Storefront\Theme\ConfigLoader\DatabaseAvailableThemeProvider
     */
    protected static function getDatabaseAvailableThemeProviderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ConfigLoader/AbstractAvailableThemeProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ConfigLoader/DatabaseAvailableThemeProvider.php';

        $a = ($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseAvailableThemeProvider'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseAvailableThemeProvider'];
        }

        return $container->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseAvailableThemeProvider'] = new \Shopware\Storefront\Theme\ConfigLoader\DatabaseAvailableThemeProvider($a);
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\ConfigLoader\DatabaseConfigLoader' shared service.
     *
     * @return \Shopware\Storefront\Theme\ConfigLoader\DatabaseConfigLoader
     */
    protected static function getDatabaseConfigLoaderService($container)
    {
        $a = ($container->services['theme.repository'] ?? self::getTheme_RepositoryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseConfigLoader'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseConfigLoader'];
        }
        $b = ($container->services['media.repository'] ?? self::getMedia_RepositoryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseConfigLoader'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseConfigLoader'];
        }

        return $container->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseConfigLoader'] = new \Shopware\Storefront\Theme\ConfigLoader\DatabaseConfigLoader($a, ($container->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? self::getStorefrontPluginRegistryService($container)), $b);
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\ConfigLoader\StaticFileConfigDumper' shared service.
     *
     * @return \Shopware\Storefront\Theme\ConfigLoader\StaticFileConfigDumper
     */
    protected static function getStaticFileConfigDumperService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ConfigLoader/StaticFileConfigDumper.php';

        $a = ($container->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseAvailableThemeProvider'] ?? self::getDatabaseAvailableThemeProviderService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\StaticFileConfigDumper'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\StaticFileConfigDumper'];
        }

        return $container->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\StaticFileConfigDumper'] = new \Shopware\Storefront\Theme\ConfigLoader\StaticFileConfigDumper(($container->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseConfigLoader'] ?? self::getDatabaseConfigLoaderService($container)), $a, ($container->services['shopware.filesystem.private'] ?? self::getShopware_Filesystem_PrivateService($container)));
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\DataAbstractionLayer\ThemeIndexer' shared service.
     *
     * @return \Shopware\Storefront\Theme\DataAbstractionLayer\ThemeIndexer
     */
    protected static function getThemeIndexerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/DataAbstractionLayer/Indexing/EntityIndexer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/DataAbstractionLayer/ThemeIndexer.php';

        $a = ($container->services['theme.repository'] ?? self::getTheme_RepositoryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\DataAbstractionLayer\\ThemeIndexer'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\DataAbstractionLayer\\ThemeIndexer'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\DataAbstractionLayer\\ThemeIndexer'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\DataAbstractionLayer\\ThemeIndexer'];
        }

        return $container->privates['Shopware\\Storefront\\Theme\\DataAbstractionLayer\\ThemeIndexer'] = new \Shopware\Storefront\Theme\DataAbstractionLayer\ThemeIndexer(($container->privates['Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Common\\IteratorFactory'] ?? self::getIteratorFactoryService($container)), $a, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $b);
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\Message\CompileThemeHandler' shared service.
     *
     * @return \Shopware\Storefront\Theme\Message\CompileThemeHandler
     */
    protected static function getCompileThemeHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Message/CompileThemeHandler.php';

        $a = ($container->privates['Shopware\\Storefront\\Theme\\ThemeCompiler'] ?? self::getThemeCompilerService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\Message\\CompileThemeHandler'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\Message\\CompileThemeHandler'];
        }
        $b = ($container->services['Shopware\\Administration\\Notification\\NotificationService'] ?? self::getNotificationServiceService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\Message\\CompileThemeHandler'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\Message\\CompileThemeHandler'];
        }
        $c = ($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\Message\\CompileThemeHandler'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\Message\\CompileThemeHandler'];
        }

        return $container->privates['Shopware\\Storefront\\Theme\\Message\\CompileThemeHandler'] = new \Shopware\Storefront\Theme\Message\CompileThemeHandler($a, ($container->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseConfigLoader'] ?? self::getDatabaseConfigLoaderService($container)), ($container->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? self::getStorefrontPluginRegistryService($container)), $b, $c);
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\Message\DeleteThemeFilesHandler' shared service.
     *
     * @return \Shopware\Storefront\Theme\Message\DeleteThemeFilesHandler
     */
    protected static function getDeleteThemeFilesHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Message/DeleteThemeFilesHandler.php';

        return $container->privates['Shopware\\Storefront\\Theme\\Message\\DeleteThemeFilesHandler'] = new \Shopware\Storefront\Theme\Message\DeleteThemeFilesHandler(($container->services['shopware.filesystem.theme'] ?? self::getShopware_Filesystem_ThemeService($container)), ($container->privates['Shopware\\Storefront\\Theme\\SeedingThemePathBuilder'] ?? self::getSeedingThemePathBuilderService($container)));
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\SeedingThemePathBuilder' shared service.
     *
     * @return \Shopware\Storefront\Theme\SeedingThemePathBuilder
     */
    protected static function getSeedingThemePathBuilderService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['Shopware\\Storefront\\Theme\\SeedingThemePathBuilder'] = $container->createProxy('SeedingThemePathBuilderGhost96d383c', static fn () => \SeedingThemePathBuilderGhost96d383c::createLazyGhost(static fn ($proxy) => self::getSeedingThemePathBuilderService($container, $proxy)));
        }

        return ($lazyLoad->__construct(($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\Subscriber\AppLifecycleSubscriber' shared service.
     *
     * @return \Shopware\Storefront\Theme\Subscriber\AppLifecycleSubscriber
     */
    protected static function getAppLifecycleSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Subscriber/AppLifecycleSubscriber.php';

        $a = ($container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'] ?? self::getThemeLifecycleServiceService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\AppLifecycleSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\Subscriber\\AppLifecycleSubscriber'];
        }
        $b = ($container->services['app.repository'] ?? self::getApp_RepositoryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\AppLifecycleSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\Subscriber\\AppLifecycleSubscriber'];
        }

        return $container->privates['Shopware\\Storefront\\Theme\\Subscriber\\AppLifecycleSubscriber'] = new \Shopware\Storefront\Theme\Subscriber\AppLifecycleSubscriber($a, $b);
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\Subscriber\FirstRunWizardSubscriber' shared service.
     *
     * @return \Shopware\Storefront\Theme\Subscriber\FirstRunWizardSubscriber
     */
    protected static function getFirstRunWizardSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Subscriber/FirstRunWizardSubscriber.php';

        $a = ($container->privates['Shopware\\Storefront\\Theme\\ThemeService'] ?? self::getThemeServiceService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'];
        }
        $b = ($container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'] ?? self::getThemeLifecycleServiceService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'];
        }
        $c = ($container->services['theme.repository'] ?? self::getTheme_RepositoryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'];
        }
        $d = ($container->services['theme_sales_channel.repository'] ?? self::getThemeSalesChannel_RepositoryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'];
        }
        $e = ($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'];
        }

        return $container->privates['Shopware\\Storefront\\Theme\\Subscriber\\FirstRunWizardSubscriber'] = new \Shopware\Storefront\Theme\Subscriber\FirstRunWizardSubscriber($a, $b, $c, $d, $e);
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\Subscriber\PluginLifecycleSubscriber' shared service.
     *
     * @return \Shopware\Storefront\Theme\Subscriber\PluginLifecycleSubscriber
     */
    protected static function getPluginLifecycleSubscriber2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Subscriber/PluginLifecycleSubscriber.php';

        $a = ($container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleHandler'] ?? self::getThemeLifecycleHandlerService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber'];
        }
        $b = ($container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'] ?? self::getThemeLifecycleServiceService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber'];
        }

        return $container->privates['Shopware\\Storefront\\Theme\\Subscriber\\PluginLifecycleSubscriber'] = new \Shopware\Storefront\Theme\Subscriber\PluginLifecycleSubscriber(($container->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? self::getStorefrontPluginRegistryService($container)), \dirname(__DIR__, 4), ($container->privates['Shopware\\Storefront\\Theme\\StorefrontPluginConfiguration\\StorefrontPluginConfigurationFactory'] ??= new \Shopware\Storefront\Theme\StorefrontPluginConfiguration\StorefrontPluginConfigurationFactory(\dirname(__DIR__, 4))), $a, $b);
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\Subscriber\ThemeCompilerEnrichScssVarSubscriber' shared service.
     *
     * @return \Shopware\Storefront\Theme\Subscriber\ThemeCompilerEnrichScssVarSubscriber
     */
    protected static function getThemeCompilerEnrichScssVarSubscriberService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Subscriber/ThemeCompilerEnrichScssVarSubscriber.php';

        $a = ($container->privates['Shopware\\Core\\System\\SystemConfig\\Service\\ConfigurationService'] ?? self::getConfigurationServiceService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\ThemeCompilerEnrichScssVarSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\Subscriber\\ThemeCompilerEnrichScssVarSubscriber'];
        }

        return $container->privates['Shopware\\Storefront\\Theme\\Subscriber\\ThemeCompilerEnrichScssVarSubscriber'] = new \Shopware\Storefront\Theme\Subscriber\ThemeCompilerEnrichScssVarSubscriber($a, ($container->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? self::getStorefrontPluginRegistryService($container)));
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\Subscriber\UnusedMediaSubscriber' shared service.
     *
     * @return \Shopware\Storefront\Theme\Subscriber\UnusedMediaSubscriber
     */
    protected static function getUnusedMediaSubscriber2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Subscriber/UnusedMediaSubscriber.php';

        $a = ($container->services['theme.repository'] ?? self::getTheme_RepositoryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\UnusedMediaSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\Subscriber\\UnusedMediaSubscriber'];
        }
        $b = ($container->privates['Shopware\\Storefront\\Theme\\ThemeService'] ?? self::getThemeServiceService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\UnusedMediaSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\Subscriber\\UnusedMediaSubscriber'];
        }

        return $container->privates['Shopware\\Storefront\\Theme\\Subscriber\\UnusedMediaSubscriber'] = new \Shopware\Storefront\Theme\Subscriber\UnusedMediaSubscriber($a, $b);
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\Subscriber\UpdateSubscriber' shared service.
     *
     * @return \Shopware\Storefront\Theme\Subscriber\UpdateSubscriber
     */
    protected static function getUpdateSubscriber2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/Subscriber/UpdateSubscriber.php';

        $a = ($container->privates['Shopware\\Storefront\\Theme\\ThemeService'] ?? self::getThemeServiceService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\UpdateSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\Subscriber\\UpdateSubscriber'];
        }
        $b = ($container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'] ?? self::getThemeLifecycleServiceService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\UpdateSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\Subscriber\\UpdateSubscriber'];
        }
        $c = ($container->services['sales_channel.repository'] ?? self::getSalesChannel_RepositoryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\Subscriber\\UpdateSubscriber'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\Subscriber\\UpdateSubscriber'];
        }

        return $container->privates['Shopware\\Storefront\\Theme\\Subscriber\\UpdateSubscriber'] = new \Shopware\Storefront\Theme\Subscriber\UpdateSubscriber($a, $b, $c);
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\ThemeAppLifecycleHandler' shared service.
     *
     * @return \Shopware\Storefront\Theme\ThemeAppLifecycleHandler
     */
    protected static function getThemeAppLifecycleHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ThemeAppLifecycleHandler.php';

        $a = ($container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleHandler'] ?? self::getThemeLifecycleHandlerService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeAppLifecycleHandler'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeAppLifecycleHandler'];
        }

        return $container->privates['Shopware\\Storefront\\Theme\\ThemeAppLifecycleHandler'] = new \Shopware\Storefront\Theme\ThemeAppLifecycleHandler(($container->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? self::getStorefrontPluginRegistryService($container)), ($container->privates['Shopware\\Storefront\\Theme\\StorefrontPluginConfiguration\\StorefrontPluginConfigurationFactory'] ??= new \Shopware\Storefront\Theme\StorefrontPluginConfiguration\StorefrontPluginConfigurationFactory(\dirname(__DIR__, 4))), $a);
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\ThemeCompiler' shared service.
     *
     * @return \Shopware\Storefront\Theme\ThemeCompiler
     */
    protected static function getThemeCompilerService($container)
    {
        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeCompiler'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeCompiler'];
        }
        $b = ($container->privates['shopware.asset.theme'] ?? self::getShopware_Asset_ThemeService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeCompiler'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeCompiler'];
        }
        $c = ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheInvalidator'] ?? self::getCacheInvalidatorService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeCompiler'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeCompiler'];
        }
        $d = ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeCompiler'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeCompiler'];
        }

        return $container->privates['Shopware\\Storefront\\Theme\\ThemeCompiler'] = new \Shopware\Storefront\Theme\ThemeCompiler(($container->services['shopware.filesystem.theme'] ?? self::getShopware_Filesystem_ThemeService($container)), ($container->services['shopware.filesystem.temp'] ?? self::getShopware_Filesystem_TempService($container)), ($container->privates['Shopware\\Storefront\\Theme\\ThemeFileResolver'] ?? self::getThemeFileResolverService($container)), true, $a, ($container->privates['Shopware\\Storefront\\Theme\\ThemeFileImporter'] ??= new \Shopware\Storefront\Theme\ThemeFileImporter(\dirname(__DIR__, 4))), ['public' => ($container->privates['shopware.asset.public'] ?? self::getShopware_Asset_PublicService($container)), 'asset' => ($container->privates['shopware.asset.asset'] ?? self::getShopware_Asset_AssetService($container)), 'sitemap' => ($container->privates['shopware.asset.sitemap'] ?? self::getShopware_Asset_SitemapService($container)), 'theme' => $b], $c, ($container->privates['Shopware\\Storefront\\Theme\\SeedingThemePathBuilder'] ?? self::getSeedingThemePathBuilderService($container)), \dirname(__DIR__, 4), new \Shopware\Storefront\Theme\ScssPhpCompiler(), $d, 900, false);
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\ThemeConfigValueAccessor' shared autowired service.
     *
     * @return \Shopware\Storefront\Theme\ThemeConfigValueAccessor
     */
    protected static function getThemeConfigValueAccessorService($container)
    {
        $a = ($container->privates['Shopware\\Storefront\\Theme\\CachedResolvedConfigLoader.inner'] ?? self::getCachedResolvedConfigLoader_InnerService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeConfigValueAccessor'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeConfigValueAccessor'];
        }

        return $container->privates['Shopware\\Storefront\\Theme\\ThemeConfigValueAccessor'] = new \Shopware\Storefront\Theme\ThemeConfigValueAccessor(new \Shopware\Storefront\Theme\CachedResolvedConfigLoader($a, ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container))), true);
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\ThemeFileResolver' shared service.
     *
     * @return \Shopware\Storefront\Theme\ThemeFileResolver
     */
    protected static function getThemeFileResolverService($container)
    {
        return $container->privates['Shopware\\Storefront\\Theme\\ThemeFileResolver'] = new \Shopware\Storefront\Theme\ThemeFileResolver(($container->privates['Shopware\\Storefront\\Theme\\ThemeFileImporter'] ??= new \Shopware\Storefront\Theme\ThemeFileImporter(\dirname(__DIR__, 4))));
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\ThemeLifecycleHandler' shared service.
     *
     * @return \Shopware\Storefront\Theme\ThemeLifecycleHandler
     */
    protected static function getThemeLifecycleHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ThemeLifecycleHandler.php';

        $a = ($container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'] ?? self::getThemeLifecycleServiceService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleHandler'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleHandler'];
        }
        $b = ($container->privates['Shopware\\Storefront\\Theme\\ThemeService'] ?? self::getThemeServiceService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleHandler'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleHandler'];
        }
        $c = ($container->services['theme.repository'] ?? self::getTheme_RepositoryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleHandler'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleHandler'];
        }

        return $container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleHandler'] = new \Shopware\Storefront\Theme\ThemeLifecycleHandler($a, $b, $c, ($container->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? self::getStorefrontPluginRegistryService($container)), ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\ThemeLifecycleService' shared service.
     *
     * @return \Shopware\Storefront\Theme\ThemeLifecycleService
     */
    protected static function getThemeLifecycleServiceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/storefront/Theme/ThemeLifecycleService.php';

        $a = ($container->services['theme.repository'] ?? self::getTheme_RepositoryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'];
        }
        $b = ($container->services['media.repository'] ?? self::getMedia_RepositoryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'];
        }
        $c = ($container->services['media_folder.repository'] ?? self::getMediaFolder_RepositoryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'];
        }
        $d = ($container->services['theme_media.repository'] ?? self::getThemeMedia_RepositoryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'];
        }
        $e = ($container->services['Shopware\\Core\\Content\\Media\\File\\FileSaver'] ?? self::getFileSaverService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'];
        }
        $f = ($container->privates['Shopware\\Core\\Content\\Media\\File\\FileNameProvider'] ?? self::getFileNameProviderService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'];
        }
        $g = ($container->services['language.repository'] ?? self::getLanguage_RepositoryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'];
        }
        $h = ($container->services['theme_child.repository'] ?? self::getThemeChild_RepositoryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'];
        }

        return $container->privates['Shopware\\Storefront\\Theme\\ThemeLifecycleService'] = new \Shopware\Storefront\Theme\ThemeLifecycleService(($container->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? self::getStorefrontPluginRegistryService($container)), $a, $b, $c, $d, $e, $f, ($container->privates['Shopware\\Storefront\\Theme\\ThemeFileImporter'] ??= new \Shopware\Storefront\Theme\ThemeFileImporter(\dirname(__DIR__, 4))), $g, $h, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), ($container->privates['Shopware\\Storefront\\Theme\\StorefrontPluginConfiguration\\StorefrontPluginConfigurationFactory'] ??= new \Shopware\Storefront\Theme\StorefrontPluginConfiguration\StorefrontPluginConfigurationFactory(\dirname(__DIR__, 4))));
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\ThemeService' shared service.
     *
     * @return \Shopware\Storefront\Theme\ThemeService
     */
    protected static function getThemeServiceService($container)
    {
        $a = ($container->services['theme.repository'] ?? self::getTheme_RepositoryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeService'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeService'];
        }
        $b = ($container->services['theme_sales_channel.repository'] ?? self::getThemeSalesChannel_RepositoryService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeService'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeService'];
        }
        $c = ($container->privates['Shopware\\Storefront\\Theme\\ThemeCompiler'] ?? self::getThemeCompilerService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeService'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeService'];
        }
        $d = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeService'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeService'];
        }
        $e = ($container->privates['Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseConfigLoader'] ?? self::getDatabaseConfigLoaderService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeService'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeService'];
        }
        $f = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeService'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeService'];
        }
        $g = ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeService'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeService'];
        }
        $h = ($container->services['Shopware\\Administration\\Notification\\NotificationService'] ?? self::getNotificationServiceService($container));

        if (isset($container->privates['Shopware\\Storefront\\Theme\\ThemeService'])) {
            return $container->privates['Shopware\\Storefront\\Theme\\ThemeService'];
        }

        return $container->privates['Shopware\\Storefront\\Theme\\ThemeService'] = new \Shopware\Storefront\Theme\ThemeService(($container->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? self::getStorefrontPluginRegistryService($container)), $a, $b, $c, $d, $e, ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)), $f, $g, $h);
    }

    /**
     * Gets the private 'Shopware\Storefront\Theme\Twig\ThemeNamespaceHierarchyBuilder' shared service.
     *
     * @return \Shopware\Storefront\Theme\Twig\ThemeNamespaceHierarchyBuilder
     */
    protected static function getThemeNamespaceHierarchyBuilderService($container)
    {
        return $container->privates['Shopware\\Storefront\\Theme\\Twig\\ThemeNamespaceHierarchyBuilder'] = new \Shopware\Storefront\Theme\Twig\ThemeNamespaceHierarchyBuilder(new \Shopware\Storefront\Theme\Twig\ThemeInheritanceBuilder(($container->services['Shopware\\Storefront\\Theme\\StorefrontPluginRegistry'] ?? self::getStorefrontPluginRegistryService($container))), ($container->services['Shopware\\Storefront\\Theme\\SalesChannelThemeLoader'] ?? self::getSalesChannelThemeLoaderService($container)));
    }

    /**
     * Gets the private 'Symfony\Bridge\PsrHttpMessage\Factory\PsrHttpFactory' shared service.
     *
     * @return \Symfony\Bridge\PsrHttpMessage\Factory\PsrHttpFactory
     */
    protected static function getPsrHttpFactoryService($container)
    {
        $a = ($container->privates['Nyholm\\Psr7\\Factory\\Psr17Factory'] ??= new \Nyholm\Psr7\Factory\Psr17Factory());

        return $container->privates['Symfony\\Bridge\\PsrHttpMessage\\Factory\\PsrHttpFactory'] = new \Symfony\Bridge\PsrHttpMessage\Factory\PsrHttpFactory($a, $a, $a, $a);
    }

    /**
     * Gets the private 'Symfony\Component\Dotenv\Command\DotenvDumpCommand' shared autowired service.
     *
     * @return \Symfony\Component\Dotenv\Command\DotenvDumpCommand
     */
    protected static function getDotenvDumpCommandService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/dotenv/Command/DotenvDumpCommand.php';

        $container->privates['Symfony\\Component\\Dotenv\\Command\\DotenvDumpCommand'] = $instance = new \Symfony\Component\Dotenv\Command\DotenvDumpCommand(\dirname(__DIR__, 4));

        $instance->setName('dotenv:dump');
        $instance->setDescription('Compiles .env files to .env.local.php');

        return $instance;
    }

    /**
     * Gets the private 'annotations.cache_adapter' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\PhpArrayAdapter
     */
    protected static function getAnnotations_CacheAdapterService($container)
    {
        return \Symfony\Component\Cache\Adapter\PhpArrayAdapter::create(($container->targetDir.''.'/annotations.php'), ($container->privates['cache.annotations'] ?? self::getCache_AnnotationsService($container)));
    }

    /**
     * Gets the private 'annotations.cache_warmer' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\CacheWarmer\AnnotationsCacheWarmer
     */
    protected static function getAnnotations_CacheWarmerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheWarmer/CacheWarmerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/CacheWarmer/AbstractPhpFileCacheWarmer.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/CacheWarmer/AnnotationsCacheWarmer.php';

        return $container->privates['annotations.cache_warmer'] = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\AnnotationsCacheWarmer(($container->privates['annotations.reader'] ?? self::getAnnotations_ReaderService($container)), ($container->targetDir.''.'/annotations.php'), '#^Symfony\\\\(?:Component\\\\HttpKernel\\\\|Bundle\\\\FrameworkBundle\\\\Controller\\\\(?!.*Controller$))#', true);
    }

    /**
     * Gets the private 'annotations.cached_reader' shared service.
     *
     * @return \Doctrine\Common\Annotations\PsrCachedReader
     */
    protected static function getAnnotations_CachedReaderService($container)
    {
        return $container->privates['annotations.cached_reader'] = new \Doctrine\Common\Annotations\PsrCachedReader(($container->privates['annotations.reader'] ?? self::getAnnotations_ReaderService($container)), self::getAnnotations_CacheAdapterService($container), true);
    }

    /**
     * Gets the private 'annotations.reader' shared service.
     *
     * @return \Doctrine\Common\Annotations\AnnotationReader
     */
    protected static function getAnnotations_ReaderService($container)
    {
        $container->privates['annotations.reader'] = $instance = new \Doctrine\Common\Annotations\AnnotationReader();

        $instance->addGlobalIgnoredName('required');

        return $instance;
    }

    /**
     * Gets the private 'argument_resolver.request_payload' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestPayloadValueResolver
     */
    protected static function getArgumentResolver_RequestPayloadService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['argument_resolver.request_payload'] = $container->createProxy('RequestPayloadValueResolverGhost9d49d33', static fn () => \RequestPayloadValueResolverGhost9d49d33::createLazyGhost(static fn ($proxy) => self::getArgumentResolver_RequestPayloadService($container, $proxy)));
        }

        return ($lazyLoad->__construct(($container->privates['serializer'] ?? self::getSerializerService($container)), ($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)), ($container->services['translator'] ?? self::getTranslatorService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'assets.packages' shared service.
     *
     * @return \Symfony\Component\Asset\Packages
     */
    protected static function getAssets_PackagesService($container)
    {
        $a = ($container->privates['router.request_context'] ?? self::getRouter_RequestContextService($container));

        $container->privates['assets.packages'] = $instance = \Shopware\Core\Framework\Adapter\Asset\AssetPackageService::create(['Framework' => (\dirname(__DIR__, 4).'/vendor/shopware/core/Framework'), 'System' => (\dirname(__DIR__, 4).'/vendor/shopware/core/System'), 'Content' => (\dirname(__DIR__, 4).'/vendor/shopware/core/Content'), 'Checkout' => (\dirname(__DIR__, 4).'/vendor/shopware/core/Checkout'), 'Maintenance' => (\dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance'), 'Profiling' => (\dirname(__DIR__, 4).'/vendor/shopware/core/Profiling'), 'Administration' => (\dirname(__DIR__, 4).'/vendor/shopware/administration'), 'Elasticsearch' => (\dirname(__DIR__, 4).'/vendor/shopware/elasticsearch'), 'Storefront' => (\dirname(__DIR__, 4).'/vendor/shopware/storefront')], ($container->privates['shopware.asset.asset_without_versioning'] ?? self::getShopware_Asset_AssetWithoutVersioningService($container)), ($container->privates['shopware.asset.asset.version_strategy'] ?? self::getShopware_Asset_Asset_VersionStrategyService($container)), new \Symfony\Component\Asset\PathPackage('', ($container->privates['assets.empty_version_strategy'] ??= new \Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy()), new \Symfony\Component\Asset\Context\RequestStackContext(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), $a->getBaseUrl(), $a->isSecure())), new RewindableGenerator(function () use ($container) {
            yield 'public' => ($container->privates['shopware.asset.public'] ?? self::getShopware_Asset_PublicService($container));
            yield 'asset' => ($container->privates['shopware.asset.asset'] ?? self::getShopware_Asset_AssetService($container));
            yield 'sitemap' => ($container->privates['shopware.asset.sitemap'] ?? self::getShopware_Asset_SitemapService($container));
            yield 'theme' => ($container->privates['shopware.asset.theme'] ?? self::getShopware_Asset_ThemeService($container));
        }, 4));

        $instance->setDefaultPackage(($container->privates['shopware.asset.asset'] ?? self::getShopware_Asset_AssetService($container)));

        return $instance;
    }

    /**
     * Gets the private 'cache.annotations' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\AdapterInterface
     */
    protected static function getCache_AnnotationsService($container)
    {
        return $container->privates['cache.annotations'] = \Symfony\Component\Cache\Adapter\AbstractAdapter::createSystemCache('yb+B0tLBlk', 0, $container->getParameter('container.build_id'), ($container->targetDir.''.'/pools/system'), ($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));
    }

    /**
     * Gets the private 'cache.app.taggable' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TagAwareAdapter
     */
    protected static function getCache_App_TaggableService($container)
    {
        return $container->privates['cache.app.taggable'] = new \Symfony\Component\Cache\Adapter\TagAwareAdapter(($container->services['cache.app'] ?? self::getCache_AppService($container)));
    }

    /**
     * Gets the private 'cache.http' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\TagAwareAdapter
     */
    protected static function getCache_HttpService($container)
    {
        $container->privates['cache.http'] = $instance = new \Symfony\Component\Cache\Adapter\TagAwareAdapter(($container->privates['.cache.http.inner'] ?? self::get_Cache_Http_InnerService($container)), ($container->privates['cache.tags'] ?? self::getCache_TagsService($container)));

        $instance->setLogger(($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));

        return $instance;
    }

    /**
     * Gets the private 'cache.messenger.restart_workers_signal' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected static function getCache_Messenger_RestartWorkersSignalService($container)
    {
        $container->privates['cache.messenger.restart_workers_signal'] = $instance = new \Symfony\Component\Cache\Adapter\ArrayAdapter(0);

        $instance->setLogger(($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));

        return $instance;
    }

    /**
     * Gets the private 'cache.rate_limiter' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected static function getCache_RateLimiterService($container)
    {
        $container->privates['cache.rate_limiter'] = $instance = new \Symfony\Component\Cache\Adapter\ArrayAdapter(0);

        $instance->setLogger(($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));

        return $instance;
    }

    /**
     * Gets the private 'cache.tags' shared service.
     *
     * @return \Symfony\Component\Cache\Adapter\ArrayAdapter
     */
    protected static function getCache_TagsService($container)
    {
        $container->privates['cache.tags'] = $instance = new \Symfony\Component\Cache\Adapter\ArrayAdapter(0);

        $instance->setLogger(($container->privates['monolog.logger.cache'] ?? self::getMonolog_Logger_CacheService($container)));

        return $instance;
    }

    /**
     * Gets the private 'cache_clearer' shared service.
     *
     * @return \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer
     */
    protected static function getCacheClearer2Service($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheClearer/CacheClearerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheClearer/ChainCacheClearer.php';

        return $container->privates['cache_clearer'] = new \Symfony\Component\HttpKernel\CacheClearer\ChainCacheClearer(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->services['cache.system_clearer'] ?? self::getCache_SystemClearerService($container));
        }, 1));
    }

    /**
     * Gets the private 'config_builder.warmer' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\CacheWarmer\ConfigBuilderCacheWarmer
     */
    protected static function getConfigBuilder_WarmerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheWarmer/CacheWarmerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/CacheWarmer/ConfigBuilderCacheWarmer.php';

        return $container->privates['config_builder.warmer'] = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\ConfigBuilderCacheWarmer(($container->services['kernel'] ?? $container->get('kernel', 1)), ($container->privates['monolog.logger'] ?? self::getMonolog_LoggerService($container)));
    }

    /**
     * Gets the private 'config_cache_factory' shared service.
     *
     * @return \Symfony\Component\Config\ResourceCheckerConfigCacheFactory
     */
    protected static function getConfigCacheFactoryService($container)
    {
        return $container->privates['config_cache_factory'] = new \Symfony\Component\Config\ResourceCheckerConfigCacheFactory(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['dependency_injection.config.container_parameters_resource_checker'] ??= new \Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker($container));
            yield 1 => ($container->privates['config.resource.self_checking_resource_checker'] ??= new \Symfony\Component\Config\Resource\SelfCheckingResourceChecker());
        }, 2));
    }

    /**
     * Gets the private 'console.command.about' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\AboutCommand
     */
    protected static function getConsole_Command_AboutService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/AboutCommand.php';

        $container->privates['console.command.about'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\AboutCommand();

        $instance->setName('about');
        $instance->setDescription('Display information about the current project');

        return $instance;
    }

    /**
     * Gets the private 'console.command.assets_install' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Asset\AssetInstallCommand
     */
    protected static function getConsole_Command_AssetsInstallService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Asset/AssetInstallCommand.php';

        $container->privates['console.command.assets_install'] = $instance = new \Shopware\Core\Framework\Adapter\Asset\AssetInstallCommand(($container->services['kernel'] ?? $container->get('kernel', 1)), ($container->privates['Shopware\\Core\\Framework\\Plugin\\Util\\AssetService'] ?? self::getAssetServiceService($container)), ($container->privates['Shopware\\Core\\Framework\\App\\ActiveAppsLoader'] ?? self::getActiveAppsLoaderService($container)));

        $instance->setName('assets:install');
        $instance->setDescription('Installs bundles web assets under a public web directory');

        return $instance;
    }

    /**
     * Gets the private 'console.command.cache_clear' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\CacheClearCommand
     */
    protected static function getConsole_Command_CacheClearService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/CacheClearCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/filesystem/Filesystem.php';

        $container->privates['console.command.cache_clear'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\CacheClearCommand(($container->privates['cache_clearer'] ?? self::getCacheClearer2Service($container)), ($container->privates['filesystem'] ??= new \Symfony\Component\Filesystem\Filesystem()));

        $instance->setName('cache:clear');
        $instance->setDescription('Clear the cache');

        return $instance;
    }

    /**
     * Gets the private 'console.command.cache_pool_clear' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\CachePoolClearCommand
     */
    protected static function getConsole_Command_CachePoolClearService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/CachePoolClearCommand.php';

        $container->privates['console.command.cache_pool_clear'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\CachePoolClearCommand(($container->services['cache.global_clearer'] ?? self::getCache_GlobalClearerService($container)), ['cache.app', 'cache.system', 'cache.validator', 'cache.serializer', 'cache.annotations', 'cache.property_info', 'cache.messenger.restart_workers_signal', 'cache.rate_limiter', 'cache.object', 'cache.http', 'cache.tags', 'cache.validator_expression_language']);

        $instance->setName('cache:pool:clear');
        $instance->setDescription('Clear cache pools');

        return $instance;
    }

    /**
     * Gets the private 'console.command.cache_pool_delete' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\CachePoolDeleteCommand
     */
    protected static function getConsole_Command_CachePoolDeleteService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/CachePoolDeleteCommand.php';

        $container->privates['console.command.cache_pool_delete'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\CachePoolDeleteCommand(($container->services['cache.global_clearer'] ?? self::getCache_GlobalClearerService($container)), ['cache.app', 'cache.system', 'cache.validator', 'cache.serializer', 'cache.annotations', 'cache.property_info', 'cache.messenger.restart_workers_signal', 'cache.rate_limiter', 'cache.object', 'cache.http', 'cache.tags', 'cache.validator_expression_language']);

        $instance->setName('cache:pool:delete');
        $instance->setDescription('Delete an item from a cache pool');

        return $instance;
    }

    /**
     * Gets the private 'console.command.cache_pool_invalidate_tags' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\CachePoolInvalidateTagsCommand
     */
    protected static function getConsole_Command_CachePoolInvalidateTagsService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/CachePoolInvalidateTagsCommand.php';

        $container->privates['console.command.cache_pool_invalidate_tags'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\CachePoolInvalidateTagsCommand(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'cache.app' => ['privates', 'cache.app.taggable', 'getCache_App_TaggableService', false],
            'cache.http' => ['privates', 'cache.http', 'getCache_HttpService', false],
            'cache.object' => ['privates', 'Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator', 'getCacheDecoratorService', false],
            'cache.rate_limiter' => ['privates', '.cache.rate_limiter.taggable', 'get_Cache_RateLimiter_TaggableService', false],
            'cache.tags' => ['privates', '.cache.tags.taggable', 'get_Cache_Tags_TaggableService', false],
        ], [
            'cache.app' => 'Symfony\\Component\\Cache\\Adapter\\TagAwareAdapter',
            'cache.http' => 'Symfony\\Component\\Cache\\Adapter\\TagAwareAdapter',
            'cache.object' => '?',
            'cache.rate_limiter' => 'Symfony\\Component\\Cache\\Adapter\\TagAwareAdapter',
            'cache.tags' => 'Symfony\\Component\\Cache\\Adapter\\TagAwareAdapter',
        ]));

        $instance->setName('cache:pool:invalidate-tags');
        $instance->setDescription('Invalidate cache tags for all or a specific pool');

        return $instance;
    }

    /**
     * Gets the private 'console.command.cache_pool_list' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\CachePoolListCommand
     */
    protected static function getConsole_Command_CachePoolListService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/CachePoolListCommand.php';

        $container->privates['console.command.cache_pool_list'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\CachePoolListCommand(['cache.app', 'cache.system', 'cache.validator', 'cache.serializer', 'cache.annotations', 'cache.property_info', 'cache.messenger.restart_workers_signal', 'cache.rate_limiter', 'cache.object', 'cache.http', 'cache.tags', 'cache.validator_expression_language']);

        $instance->setName('cache:pool:list');
        $instance->setDescription('List available cache pools');

        return $instance;
    }

    /**
     * Gets the private 'console.command.cache_pool_prune' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\CachePoolPruneCommand
     */
    protected static function getConsole_Command_CachePoolPruneService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/CachePoolPruneCommand.php';

        $container->privates['console.command.cache_pool_prune'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\CachePoolPruneCommand(new RewindableGenerator(fn () => new \EmptyIterator(), 0));

        $instance->setName('cache:pool:prune');
        $instance->setDescription('Prune cache pools');

        return $instance;
    }

    /**
     * Gets the private 'console.command.cache_warmup' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\CacheWarmupCommand
     */
    protected static function getConsole_Command_CacheWarmupService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/CacheWarmupCommand.php';

        $container->privates['console.command.cache_warmup'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\CacheWarmupCommand(($container->services['cache_warmer'] ?? self::getCacheWarmerService($container)));

        $instance->setName('cache:warmup');
        $instance->setDescription('Warm up an empty cache');

        return $instance;
    }

    /**
     * Gets the private 'console.command.config_debug' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\ConfigDebugCommand
     */
    protected static function getConsole_Command_ConfigDebugService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/BuildDebugContainerTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/ContainerDebugCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/AbstractConfigCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/ConfigDebugCommand.php';

        $container->privates['console.command.config_debug'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\ConfigDebugCommand();

        $instance->setName('debug:config');
        $instance->setDescription('Dump the current configuration for an extension');

        return $instance;
    }

    /**
     * Gets the private 'console.command.config_dump_reference' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\ConfigDumpReferenceCommand
     */
    protected static function getConsole_Command_ConfigDumpReferenceService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/BuildDebugContainerTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/ContainerDebugCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/AbstractConfigCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/ConfigDumpReferenceCommand.php';

        $container->privates['console.command.config_dump_reference'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\ConfigDumpReferenceCommand();

        $instance->setName('config:dump-reference');
        $instance->setDescription('Dump the default configuration for an extension');

        return $instance;
    }

    /**
     * Gets the private 'console.command.container_debug' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\ContainerDebugCommand
     */
    protected static function getConsole_Command_ContainerDebugService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/BuildDebugContainerTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/ContainerDebugCommand.php';

        $container->privates['console.command.container_debug'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\ContainerDebugCommand();

        $instance->setName('debug:container');
        $instance->setDescription('Display current services for an application');

        return $instance;
    }

    /**
     * Gets the private 'console.command.container_lint' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\ContainerLintCommand
     */
    protected static function getConsole_Command_ContainerLintService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/ContainerLintCommand.php';

        $container->privates['console.command.container_lint'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\ContainerLintCommand();

        $instance->setName('lint:container');
        $instance->setDescription('Ensure that arguments injected into services match type declarations');

        return $instance;
    }

    /**
     * Gets the private 'console.command.debug_autowiring' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\DebugAutowiringCommand
     */
    protected static function getConsole_Command_DebugAutowiringService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/BuildDebugContainerTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/ContainerDebugCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/DebugAutowiringCommand.php';

        $container->privates['console.command.debug_autowiring'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\DebugAutowiringCommand(NULL, ($container->privates['debug.file_link_formatter'] ??= new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter($container->getEnv('default::SYMFONY_IDE'))));

        $instance->setName('debug:autowiring');
        $instance->setDescription('List classes/interfaces you can use for autowiring');

        return $instance;
    }

    /**
     * Gets the private 'console.command.dotenv_debug' shared service.
     *
     * @return \Symfony\Component\Dotenv\Command\DebugCommand
     */
    protected static function getConsole_Command_DotenvDebugService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/dotenv/Command/DebugCommand.php';

        $container->privates['console.command.dotenv_debug'] = $instance = new \Symfony\Component\Dotenv\Command\DebugCommand('dev', \dirname(__DIR__, 4));

        $instance->setName('debug:dotenv');
        $instance->setDescription('Lists all dotenv files with variables and values');

        return $instance;
    }

    /**
     * Gets the private 'console.command.event_dispatcher_debug' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\EventDispatcherDebugCommand
     */
    protected static function getConsole_Command_EventDispatcherDebugService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/EventDispatcherDebugCommand.php';

        $container->privates['console.command.event_dispatcher_debug'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\EventDispatcherDebugCommand(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'event_dispatcher' => ['services', 'event_dispatcher', 'getEventDispatcherService', false],
        ], [
            'event_dispatcher' => '?',
        ]));

        $instance->setName('debug:event-dispatcher');
        $instance->setDescription('Display configured listeners for an application');

        return $instance;
    }

    /**
     * Gets the private 'console.command.mailer_test' shared service.
     *
     * @return \Symfony\Component\Mailer\Command\MailerTestCommand
     */
    protected static function getConsole_Command_MailerTestService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Command/MailerTestCommand.php';

        $container->privates['console.command.mailer_test'] = $instance = new \Symfony\Component\Mailer\Command\MailerTestCommand(($container->privates['mailer.transports'] ?? self::getMailer_TransportsService($container)));

        $instance->setName('mailer:test');
        $instance->setDescription('Test Mailer transports by sending an email');

        return $instance;
    }

    /**
     * Gets the private 'console.command.messenger_consume_messages' shared service.
     *
     * @return \Symfony\Component\Messenger\Command\ConsumeMessagesCommand
     */
    protected static function getConsole_Command_MessengerConsumeMessagesService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/SignalableCommandInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Command/ConsumeMessagesCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/EventListener/ResetServicesListener.php';

        $container->privates['console.command.messenger_consume_messages'] = $instance = new \Symfony\Component\Messenger\Command\ConsumeMessagesCommand(($container->privates['messenger.routable_message_bus'] ?? self::getMessenger_RoutableMessageBusService($container)), ($container->privates['messenger.receiver_locator'] ?? self::getMessenger_ReceiverLocatorService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->privates['monolog.logger.messenger'] ?? self::getMonolog_Logger_MessengerService($container)), ['failed', 'async', 'low_priority'], new \Symfony\Component\Messenger\EventListener\ResetServicesListener(($container->services['services_resetter'] ?? self::getServicesResetterService($container))), ['messenger.bus.default'], NULL, NULL);

        $instance->setName('messenger:consume');
        $instance->setDescription('Consume messages');

        return $instance;
    }

    /**
     * Gets the private 'console.command.messenger_debug' shared service.
     *
     * @return \Symfony\Component\Messenger\Command\DebugCommand
     */
    protected static function getConsole_Command_MessengerDebugService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Command/DebugCommand.php';

        $container->privates['console.command.messenger_debug'] = $instance = new \Symfony\Component\Messenger\Command\DebugCommand(['messenger.bus.default' => ['Shopware\\Core\\Framework\\Log\\ScheduledTask\\LogCleanupTask' => [['Shopware\\Core\\Framework\\Log\\ScheduledTask\\LogCleanupTaskHandler', []]], 'Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidateCacheTask' => [['Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidateCacheTaskHandler', []]], 'Shopware\\Core\\Framework\\Adapter\\Cache\\Message\\CleanupOldCacheFolders' => [['Shopware\\Core\\Framework\\Adapter\\Cache\\Message\\CleanupOldCacheFoldersHandler', []]], 'Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsTask' => [['Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsHandler', []]], 'Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsTask' => [['Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsHandler', []]], 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexingMessage' => [['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry', []]], 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\MessageQueue\\IterateEntityIndexerMessage' => [['Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexerRegistry', []]], 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Cleanup\\CleanupVersionTask' => [['Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Cleanup\\CleanupVersionTaskHandler', []]], 'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\MessageQueue\\RegisterScheduledTaskMessage' => [['Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\MessageQueue\\RegisterScheduledTaskHandler', []]], 'Shopware\\Core\\Framework\\Webhook\\Message\\WebhookEventMessage' => [['Shopware\\Core\\Framework\\Webhook\\Handler\\WebhookEventMessageHandler', []]], 'Shopware\\Core\\Framework\\Webhook\\ScheduledTask\\CleanupWebhookEventLogTask' => [['Shopware\\Core\\Framework\\Webhook\\ScheduledTask\\CleanupWebhookEventLogTaskHandler', []]], 'Shopware\\Core\\System\\SalesChannel\\Context\\Cleanup\\CleanupSalesChannelContextTask' => [['Shopware\\Core\\System\\SalesChannel\\Context\\Cleanup\\CleanupSalesChannelContextTaskHandler', []]], 'Shopware\\Core\\System\\UsageData\\EntitySync\\IterateEntityMessage' => [['Shopware\\Core\\System\\UsageData\\EntitySync\\IterateEntityMessageHandler', []]], 'Shopware\\Core\\System\\UsageData\\EntitySync\\DispatchEntityMessage' => [['Shopware\\Core\\System\\UsageData\\EntitySync\\DispatchEntityMessageHandler', []]], 'Shopware\\Core\\System\\UsageData\\EntitySync\\CollectEntityDataMessage' => [['Shopware\\Core\\System\\UsageData\\EntitySync\\CollectEntityDataMessageHandler', []]], 'Shopware\\Core\\System\\UsageData\\ScheduledTask\\CollectEntityDataTask' => [['Shopware\\Core\\System\\UsageData\\ScheduledTask\\CollectEntityDataTaskHandler', []]], 'Shopware\\Core\\System\\UsageData\\ScheduledTask\\CheckIntegrationChangedTask' => [['Shopware\\Core\\System\\UsageData\\ScheduledTask\\CheckIntegrationChangedTaskHandler', []]], 'Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsMessage' => [['Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsHandler', []]], 'Shopware\\Core\\Content\\Media\\Message\\UpdateThumbnailsMessage' => [['Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsHandler', []]], 'Shopware\\Core\\Content\\Media\\Message\\DeleteFileMessage' => [['Shopware\\Core\\Content\\Media\\Message\\DeleteFileHandler', []]], 'Shopware\\Core\\Content\\Product\\Cleanup\\CleanupProductKeywordDictionaryTask' => [['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupProductKeywordDictionaryTaskHandler', []]], 'Shopware\\Core\\Content\\Product\\Cleanup\\CleanupUnusedDownloadMediaTask' => [['Shopware\\Core\\Content\\Product\\Cleanup\\CleanupUnusedDownloadMediaTaskHandler', []]], 'Shopware\\Core\\Content\\Newsletter\\ScheduledTask\\NewsletterRecipientTask' => [['Shopware\\Core\\Content\\Newsletter\\ScheduledTask\\NewsletterRecipientTaskHandler', []]], 'Shopware\\Core\\Content\\ProductStream\\ScheduledTask\\UpdateProductStreamMappingTask' => [['Shopware\\Core\\Content\\ProductStream\\ScheduledTask\\UpdateProductStreamMappingTaskHandler', []]], 'Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTask' => [['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTaskHandler', []]], 'Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGeneration' => [['Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGenerationHandler', []]], 'Shopware\\Core\\Content\\ImportExport\\Message\\ImportExportMessage' => [['Shopware\\Core\\Content\\ImportExport\\Message\\ImportExportHandler', []]], 'Shopware\\Core\\Content\\ImportExport\\Message\\DeleteFileMessage' => [['Shopware\\Core\\Content\\ImportExport\\Message\\DeleteFileHandler', []]], 'Shopware\\Core\\Content\\ImportExport\\ScheduledTask\\CleanupImportExportFileTask' => [['Shopware\\Core\\Content\\ImportExport\\ScheduledTask\\CleanupImportExportFileTaskHandler', []]], 'Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTask' => [['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTaskHandler', []]], 'Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapMessage' => [['Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapMessageHandler', []]], 'Shopware\\Core\\Checkout\\Cart\\Cleanup\\CleanupCartTask' => [['Shopware\\Core\\Checkout\\Cart\\Cleanup\\CleanupCartTaskHandler', []]], 'Shopware\\Core\\Checkout\\Customer\\DeleteUnusedGuestCustomerTask' => [['Shopware\\Core\\Checkout\\Customer\\DeleteUnusedGuestCustomerHandler', []]], 'Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTask' => [['Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTaskHandler', []]], 'Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexingMessage' => [['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer', []]], 'Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchLanguageIndexIteratorMessage' => [['Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexer', []]], 'Shopware\\Elasticsearch\\Admin\\AdminSearchIndexingMessage' => [['Shopware\\Elasticsearch\\Admin\\AdminSearchRegistry', []]], 'Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\WarmUpMessage' => [['Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\CacheWarmerTaskHandler', []]], 'Shopware\\Storefront\\Theme\\Message\\DeleteThemeFilesMessage' => [['Shopware\\Storefront\\Theme\\Message\\DeleteThemeFilesHandler', []]], 'Shopware\\Storefront\\Theme\\Message\\CompileThemeMessage' => [['Shopware\\Storefront\\Theme\\Message\\CompileThemeHandler', []]], 'Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage' => [['mailer.messenger.message_handler', []]], 'Symfony\\Component\\Messenger\\Message\\RedispatchMessage' => [['messenger.redispatch_message_handler', []]]]]);

        $instance->setName('debug:messenger');
        $instance->setDescription('List messages you can dispatch using the message buses');

        return $instance;
    }

    /**
     * Gets the private 'console.command.messenger_failed_messages_remove' shared service.
     *
     * @return \Symfony\Component\Messenger\Command\FailedMessagesRemoveCommand
     */
    protected static function getConsole_Command_MessengerFailedMessagesRemoveService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Command/AbstractFailedMessagesCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Command/FailedMessagesRemoveCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Serialization/SerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Serialization/PhpSerializer.php';

        $container->privates['console.command.messenger_failed_messages_remove'] = $instance = new \Symfony\Component\Messenger\Command\FailedMessagesRemoveCommand('failed', ($container->privates['.service_locator.Y4J.A.e'] ?? self::get_ServiceLocator_Y4J_A_EService($container)), ($container->privates['messenger.transport.native_php_serializer'] ??= new \Symfony\Component\Messenger\Transport\Serialization\PhpSerializer()));

        $instance->setName('messenger:failed:remove');
        $instance->setDescription('Remove given messages from the failure transport');

        return $instance;
    }

    /**
     * Gets the private 'console.command.messenger_failed_messages_retry' shared service.
     *
     * @return \Symfony\Component\Messenger\Command\FailedMessagesRetryCommand
     */
    protected static function getConsole_Command_MessengerFailedMessagesRetryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Command/AbstractFailedMessagesCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/SignalableCommandInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Command/FailedMessagesRetryCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Serialization/SerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Serialization/PhpSerializer.php';

        $container->privates['console.command.messenger_failed_messages_retry'] = $instance = new \Symfony\Component\Messenger\Command\FailedMessagesRetryCommand('failed', ($container->privates['.service_locator.Y4J.A.e'] ?? self::get_ServiceLocator_Y4J_A_EService($container)), ($container->privates['messenger.routable_message_bus'] ?? self::getMessenger_RoutableMessageBusService($container)), ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container)), ($container->privates['monolog.logger.messenger'] ?? self::getMonolog_Logger_MessengerService($container)), ($container->privates['messenger.transport.native_php_serializer'] ??= new \Symfony\Component\Messenger\Transport\Serialization\PhpSerializer()), NULL);

        $instance->setName('messenger:failed:retry');
        $instance->setDescription('Retry one or more messages from the failure transport');

        return $instance;
    }

    /**
     * Gets the private 'console.command.messenger_failed_messages_show' shared service.
     *
     * @return \Symfony\Component\Messenger\Command\FailedMessagesShowCommand
     */
    protected static function getConsole_Command_MessengerFailedMessagesShowService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Command/AbstractFailedMessagesCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Command/FailedMessagesShowCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Serialization/SerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Serialization/PhpSerializer.php';

        $container->privates['console.command.messenger_failed_messages_show'] = $instance = new \Symfony\Component\Messenger\Command\FailedMessagesShowCommand('failed', ($container->privates['.service_locator.Y4J.A.e'] ?? self::get_ServiceLocator_Y4J_A_EService($container)), ($container->privates['messenger.transport.native_php_serializer'] ??= new \Symfony\Component\Messenger\Transport\Serialization\PhpSerializer()));

        $instance->setName('messenger:failed:show');
        $instance->setDescription('Show one or more messages from the failure transport');

        return $instance;
    }

    /**
     * Gets the private 'console.command.messenger_setup_transports' shared service.
     *
     * @return \Symfony\Component\Messenger\Command\SetupTransportsCommand
     */
    protected static function getConsole_Command_MessengerSetupTransportsService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Command/SetupTransportsCommand.php';

        $container->privates['console.command.messenger_setup_transports'] = $instance = new \Symfony\Component\Messenger\Command\SetupTransportsCommand(($container->privates['messenger.receiver_locator'] ?? self::getMessenger_ReceiverLocatorService($container)), ['failed', 'async', 'low_priority']);

        $instance->setName('messenger:setup-transports');
        $instance->setDescription('Prepare the required infrastructure for the transport');

        return $instance;
    }

    /**
     * Gets the private 'console.command.messenger_stats' shared service.
     *
     * @return \Symfony\Component\Messenger\Command\StatsCommand
     */
    protected static function getConsole_Command_MessengerStatsService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Command/StatsCommand.php';

        $container->privates['console.command.messenger_stats'] = $instance = new \Symfony\Component\Messenger\Command\StatsCommand(($container->privates['messenger.receiver_locator'] ?? self::getMessenger_ReceiverLocatorService($container)), ['failed', 'async', 'low_priority']);

        $instance->setName('messenger:stats');
        $instance->setDescription('Show the message count for one or more transports');

        return $instance;
    }

    /**
     * Gets the private 'console.command.messenger_stop_workers' shared service.
     *
     * @return \Symfony\Component\Messenger\Command\StopWorkersCommand
     */
    protected static function getConsole_Command_MessengerStopWorkersService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Command/StopWorkersCommand.php';

        $container->privates['console.command.messenger_stop_workers'] = $instance = new \Symfony\Component\Messenger\Command\StopWorkersCommand(($container->privates['cache.messenger.restart_workers_signal'] ?? self::getCache_Messenger_RestartWorkersSignalService($container)));

        $instance->setName('messenger:stop-workers');
        $instance->setDescription('Stop workers after their current message');

        return $instance;
    }

    /**
     * Gets the private 'console.command.router_debug' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\RouterDebugCommand
     */
    protected static function getConsole_Command_RouterDebugService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/BuildDebugContainerTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/RouterDebugCommand.php';

        $container->privates['console.command.router_debug'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\RouterDebugCommand(($container->services['router'] ?? self::getRouterService($container)), ($container->privates['debug.file_link_formatter'] ??= new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter($container->getEnv('default::SYMFONY_IDE'))));

        $instance->setName('debug:router');
        $instance->setDescription('Display current routes for an application');

        return $instance;
    }

    /**
     * Gets the private 'console.command.router_match' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\RouterMatchCommand
     */
    protected static function getConsole_Command_RouterMatchService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/RouterMatchCommand.php';

        $container->privates['console.command.router_match'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\RouterMatchCommand(($container->services['router'] ?? self::getRouterService($container)), new RewindableGenerator(fn () => new \EmptyIterator(), 0));

        $instance->setName('router:match');
        $instance->setDescription('Help debug routes by simulating a path info match');

        return $instance;
    }

    /**
     * Gets the private 'console.command.secrets_decrypt_to_local' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\SecretsDecryptToLocalCommand
     */
    protected static function getConsole_Command_SecretsDecryptToLocalService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/SecretsDecryptToLocalCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/AbstractVault.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/DotenvVault.php';

        $container->privates['console.command.secrets_decrypt_to_local'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\SecretsDecryptToLocalCommand(($container->privates['secrets.vault'] ?? self::getSecrets_VaultService($container)), ($container->privates['secrets.local_vault'] ??= new \Symfony\Bundle\FrameworkBundle\Secrets\DotenvVault((\dirname(__DIR__, 4).'/.env.dev.local'))));

        $instance->setName('secrets:decrypt-to-local');
        $instance->setDescription('Decrypt all secrets and stores them in the local vault');

        return $instance;
    }

    /**
     * Gets the private 'console.command.secrets_encrypt_from_local' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\SecretsEncryptFromLocalCommand
     */
    protected static function getConsole_Command_SecretsEncryptFromLocalService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/SecretsEncryptFromLocalCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/AbstractVault.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/DotenvVault.php';

        $container->privates['console.command.secrets_encrypt_from_local'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\SecretsEncryptFromLocalCommand(($container->privates['secrets.vault'] ?? self::getSecrets_VaultService($container)), ($container->privates['secrets.local_vault'] ??= new \Symfony\Bundle\FrameworkBundle\Secrets\DotenvVault((\dirname(__DIR__, 4).'/.env.dev.local'))));

        $instance->setName('secrets:encrypt-from-local');
        $instance->setDescription('Encrypt all local secrets to the vault');

        return $instance;
    }

    /**
     * Gets the private 'console.command.secrets_generate_key' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\SecretsGenerateKeysCommand
     */
    protected static function getConsole_Command_SecretsGenerateKeyService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/SecretsGenerateKeysCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/AbstractVault.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/DotenvVault.php';

        $container->privates['console.command.secrets_generate_key'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\SecretsGenerateKeysCommand(($container->privates['secrets.vault'] ?? self::getSecrets_VaultService($container)), ($container->privates['secrets.local_vault'] ??= new \Symfony\Bundle\FrameworkBundle\Secrets\DotenvVault((\dirname(__DIR__, 4).'/.env.dev.local'))));

        $instance->setName('secrets:generate-keys');
        $instance->setDescription('Generate new encryption keys');

        return $instance;
    }

    /**
     * Gets the private 'console.command.secrets_list' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\SecretsListCommand
     */
    protected static function getConsole_Command_SecretsListService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/SecretsListCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/AbstractVault.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/DotenvVault.php';

        $container->privates['console.command.secrets_list'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\SecretsListCommand(($container->privates['secrets.vault'] ?? self::getSecrets_VaultService($container)), ($container->privates['secrets.local_vault'] ??= new \Symfony\Bundle\FrameworkBundle\Secrets\DotenvVault((\dirname(__DIR__, 4).'/.env.dev.local'))));

        $instance->setName('secrets:list');
        $instance->setDescription('List all secrets');

        return $instance;
    }

    /**
     * Gets the private 'console.command.secrets_remove' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\SecretsRemoveCommand
     */
    protected static function getConsole_Command_SecretsRemoveService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/SecretsRemoveCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/AbstractVault.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/DotenvVault.php';

        $container->privates['console.command.secrets_remove'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\SecretsRemoveCommand(($container->privates['secrets.vault'] ?? self::getSecrets_VaultService($container)), ($container->privates['secrets.local_vault'] ??= new \Symfony\Bundle\FrameworkBundle\Secrets\DotenvVault((\dirname(__DIR__, 4).'/.env.dev.local'))));

        $instance->setName('secrets:remove');
        $instance->setDescription('Remove a secret from the vault');

        return $instance;
    }

    /**
     * Gets the private 'console.command.secrets_set' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\SecretsSetCommand
     */
    protected static function getConsole_Command_SecretsSetService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/SecretsSetCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/AbstractVault.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/DotenvVault.php';

        $container->privates['console.command.secrets_set'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\SecretsSetCommand(($container->privates['secrets.vault'] ?? self::getSecrets_VaultService($container)), ($container->privates['secrets.local_vault'] ??= new \Symfony\Bundle\FrameworkBundle\Secrets\DotenvVault((\dirname(__DIR__, 4).'/.env.dev.local'))));

        $instance->setName('secrets:set');
        $instance->setDescription('Set a secret in the vault');

        return $instance;
    }

    /**
     * Gets the private 'console.command.serializer_debug' shared service.
     *
     * @return \Symfony\Component\Serializer\Command\DebugCommand
     */
    protected static function getConsole_Command_SerializerDebugService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/serializer/Command/DebugCommand.php';

        $container->privates['console.command.serializer_debug'] = $instance = new \Symfony\Component\Serializer\Command\DebugCommand(($container->privates['serializer.mapping.class_metadata_factory'] ?? self::getSerializer_Mapping_ClassMetadataFactoryService($container)));

        $instance->setName('debug:serializer');
        $instance->setDescription('Display serialization information for classes');

        return $instance;
    }

    /**
     * Gets the private 'console.command.translation_debug' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\TranslationDebugCommand
     */
    protected static function getConsole_Command_TranslationDebugService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/TranslationDebugCommand.php';

        $container->privates['console.command.translation_debug'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\TranslationDebugCommand(($container->services['translator'] ?? self::getTranslatorService($container)), ($container->privates['translation.reader'] ?? self::getTranslation_ReaderService($container)), ($container->privates['translation.extractor'] ?? self::getTranslation_ExtractorService($container)), (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources/snippet'), (\dirname(__DIR__, 4).'/templates'), [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations')], [(\dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Resources/views/Email'), (\dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExportGenerator.php'), (\dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/ScheduledTask/ProductExportPartialGenerationHandler.php'), (\dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/SendMailAction.php'), (\dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Twig/DocumentTemplateRenderer.php'), (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Newsletter/Account/NewsletterAccountPageletLoader.php'), (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Cms/DefaultMediaResolver.php'), (\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/CacheTracer.php'), (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Event/CartMergedSubscriber.php'), (\dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/RequestPayloadValueResolver.php'), (\dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/TranslationDebugCommand.php'), (\dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/CacheWarmer/TranslationsCacheWarmer.php'), (\dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ProblemNormalizer.php'), (\dirname(__DIR__, 4).'/vendor/symfony/serializer/SerializerAwareTrait.php'), (\dirname(__DIR__, 4).'/vendor/symfony/validator/ValidatorBuilder.php'), (\dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/TranslationExtension.php')], []);

        $instance->setName('debug:translation');
        $instance->setDescription('Display translation messages information');

        return $instance;
    }

    /**
     * Gets the private 'console.command.translation_extract' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\TranslationUpdateCommand
     */
    protected static function getConsole_Command_TranslationExtractService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/TranslationUpdateCommand.php';

        $container->privates['console.command.translation_extract'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\TranslationUpdateCommand(($container->privates['translation.writer'] ?? self::getTranslation_WriterService($container)), ($container->privates['translation.reader'] ?? self::getTranslation_ReaderService($container)), ($container->privates['translation.extractor'] ?? self::getTranslation_ExtractorService($container)), 'en-GB', (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources/snippet'), (\dirname(__DIR__, 4).'/templates'), [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations')], [(\dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Resources/views/Email'), (\dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/Service/ProductExportGenerator.php'), (\dirname(__DIR__, 4).'/vendor/shopware/core/Content/ProductExport/ScheduledTask/ProductExportPartialGenerationHandler.php'), (\dirname(__DIR__, 4).'/vendor/shopware/core/Content/Flow/Dispatching/Action/SendMailAction.php'), (\dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Document/Twig/DocumentTemplateRenderer.php'), (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Pagelet/Newsletter/Account/NewsletterAccountPageletLoader.php'), (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Page/Cms/DefaultMediaResolver.php'), (\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/CacheTracer.php'), (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Event/CartMergedSubscriber.php'), (\dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Controller/ArgumentResolver/RequestPayloadValueResolver.php'), (\dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/TranslationDebugCommand.php'), (\dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/CacheWarmer/TranslationsCacheWarmer.php'), (\dirname(__DIR__, 4).'/vendor/symfony/serializer/Normalizer/ProblemNormalizer.php'), (\dirname(__DIR__, 4).'/vendor/symfony/serializer/SerializerAwareTrait.php'), (\dirname(__DIR__, 4).'/vendor/symfony/validator/ValidatorBuilder.php'), (\dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/TranslationExtension.php')], []);

        $instance->setName('translation:extract');
        $instance->setDescription('Extract missing translations keys from code to translation files.');

        return $instance;
    }

    /**
     * Gets the private 'console.command.translation_pull' shared service.
     *
     * @return \Symfony\Component\Translation\Command\TranslationPullCommand
     */
    protected static function getConsole_Command_TranslationPullService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Command/TranslationTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Command/TranslationPullCommand.php';

        $container->privates['console.command.translation_pull'] = $instance = new \Symfony\Component\Translation\Command\TranslationPullCommand(($container->privates['translation.provider_collection'] ?? self::getTranslation_ProviderCollectionService($container)), ($container->privates['translation.writer'] ?? self::getTranslation_WriterService($container)), ($container->privates['translation.reader'] ?? self::getTranslation_ReaderService($container)), 'en-GB', [], []);

        $instance->setName('translation:pull');
        $instance->setDescription('Pull translations from a given provider.');

        return $instance;
    }

    /**
     * Gets the private 'console.command.translation_push' shared service.
     *
     * @return \Symfony\Component\Translation\Command\TranslationPushCommand
     */
    protected static function getConsole_Command_TranslationPushService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Command/TranslationTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Command/TranslationPushCommand.php';

        $container->privates['console.command.translation_push'] = $instance = new \Symfony\Component\Translation\Command\TranslationPushCommand(($container->privates['translation.provider_collection'] ?? self::getTranslation_ProviderCollectionService($container)), ($container->privates['translation.reader'] ?? self::getTranslation_ReaderService($container)), [], []);

        $instance->setName('translation:push');
        $instance->setDescription('Push translations to a given provider.');

        return $instance;
    }

    /**
     * Gets the private 'console.command.validator_debug' shared service.
     *
     * @return \Symfony\Component\Validator\Command\DebugCommand
     */
    protected static function getConsole_Command_ValidatorDebugService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Command/DebugCommand.php';

        $container->privates['console.command.validator_debug'] = $instance = new \Symfony\Component\Validator\Command\DebugCommand(($container->privates['Shopware\\Core\\Framework\\Validation\\HappyPathValidator'] ?? self::getHappyPathValidatorService($container)));

        $instance->setName('debug:validator');
        $instance->setDescription('Display validation constraints for classes');

        return $instance;
    }

    /**
     * Gets the private 'console.command.xliff_lint' shared service.
     *
     * @return \Symfony\Component\Translation\Command\XliffLintCommand
     */
    protected static function getConsole_Command_XliffLintService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Command/XliffLintCommand.php';

        $container->privates['console.command.xliff_lint'] = $instance = new \Symfony\Component\Translation\Command\XliffLintCommand();

        $instance->setName('lint:xliff');
        $instance->setDescription('Lint an XLIFF file and outputs encountered errors');

        return $instance;
    }

    /**
     * Gets the private 'console.command.yaml_lint' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Command\YamlLintCommand
     */
    protected static function getConsole_Command_YamlLintService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/yaml/Command/LintCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Command/YamlLintCommand.php';

        $container->privates['console.command.yaml_lint'] = $instance = new \Symfony\Bundle\FrameworkBundle\Command\YamlLintCommand();

        $instance->setName('lint:yaml');
        $instance->setDescription('Lint a YAML file and outputs encountered errors');

        return $instance;
    }

    /**
     * Gets the private 'console.error_listener' shared service.
     *
     * @return \Symfony\Component\Console\EventListener\ErrorListener
     */
    protected static function getConsole_ErrorListenerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/EventListener/ErrorListener.php';

        $a = new \Symfony\Bridge\Monolog\Logger('console');
        $a->pushHandler(($container->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? self::getExcludeFlowEventHandlerService($container)));

        return $container->privates['console.error_listener'] = new \Symfony\Component\Console\EventListener\ErrorListener($a);
    }

    /**
     * Gets the private 'container.env_var_processor' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\EnvVarProcessor
     */
    protected static function getContainer_EnvVarProcessorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/EnvVarProcessorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/EnvVarProcessor.php';

        return $container->privates['container.env_var_processor'] = new \Symfony\Component\DependencyInjection\EnvVarProcessor($container, new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['secrets.vault'] ?? self::getSecrets_VaultService($container));
        }, 1));
    }

    /**
     * Gets the private 'controller.template_attribute_listener' shared service.
     *
     * @return \Symfony\Bridge\Twig\EventListener\TemplateAttributeListener
     */
    protected static function getController_TemplateAttributeListenerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/EventListener/TemplateAttributeListener.php';

        $a = ($container->services['twig'] ?? self::getTwigService($container));

        if (isset($container->privates['controller.template_attribute_listener'])) {
            return $container->privates['controller.template_attribute_listener'];
        }

        return $container->privates['controller.template_attribute_listener'] = new \Symfony\Bridge\Twig\EventListener\TemplateAttributeListener($a);
    }

    /**
     * Gets the private 'debug.dump_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\DumpListener
     */
    protected static function getDebug_DumpListenerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/EventListener/DumpListener.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/var-dumper/Dumper/ContextualizedDumper.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/var-dumper/Dumper/ContextProvider/ContextProviderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/var-dumper/Dumper/ContextProvider/SourceContextProvider.php';

        return $container->privates['debug.dump_listener'] = new \Symfony\Component\HttpKernel\EventListener\DumpListener(($container->services['var_dumper.cloner'] ?? self::getVarDumper_ClonerService($container)), new \Symfony\Component\VarDumper\Dumper\ContextualizedDumper(($container->privates['var_dumper.contextualized_cli_dumper.inner'] ?? self::getVarDumper_ContextualizedCliDumper_InnerService($container)), ['source' => new \Symfony\Component\VarDumper\Dumper\ContextProvider\SourceContextProvider('UTF-8', \dirname(__DIR__, 4), ($container->privates['debug.file_link_formatter'] ??= new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter($container->getEnv('default::SYMFONY_IDE'))))]), ($container->privates['var_dumper.server_connection'] ?? self::getVarDumper_ServerConnectionService($container)));
    }

    /**
     * Gets the private 'esi_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SurrogateListener
     */
    protected static function getEsiListenerService($container)
    {
        return $container->privates['esi_listener'] = new \Symfony\Component\HttpKernel\EventListener\SurrogateListener(($container->privates['esi'] ??= new \Symfony\Component\HttpKernel\HttpCache\Esi()));
    }

    /**
     * Gets the private 'exception_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\ErrorListener
     */
    protected static function getExceptionListenerService($container)
    {
        return $container->privates['exception_listener'] = new \Symfony\Component\HttpKernel\EventListener\ErrorListener('error_controller', ($container->privates['monolog.logger.request'] ?? self::getMonolog_Logger_RequestService($container)), true, ['Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException' => ['log_level' => 'notice', 'status_code' => NULL], 'Symfony\\Component\\Routing\\Exception\\MissingMandatoryParametersException' => ['log_level' => 'notice', 'status_code' => NULL], 'Symfony\\Component\\HttpKernel\\Exception\\MethodNotAllowedHttpException' => ['log_level' => 'notice', 'status_code' => NULL], 'Symfony\\Component\\HttpKernel\\Exception\\AccessDeniedHttpException' => ['log_level' => 'notice', 'status_code' => NULL], 'Symfony\\Component\\HttpKernel\\Exception\\BadRequestHttpException' => ['log_level' => 'notice', 'status_code' => NULL], 'Symfony\\Component\\HttpKernel\\Exception\\UnauthorizedHttpException' => ['log_level' => 'notice', 'status_code' => NULL], 'Symfony\\Component\\HttpKernel\\Exception\\UnsupportedMediaTypeHttpException' => ['log_level' => 'notice', 'status_code' => NULL], 'Symfony\\Component\\HttpFoundation\\Exception\\SuspiciousOperationException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Content\\Product\\Exception\\ProductNotFoundException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Content\\Category\\Exception\\CategoryNotFoundException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Content\\Cms\\Exception\\PageNotFoundException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Cart\\Exception\\CustomerNotLoggedInException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Customer\\Exception\\AddressNotFoundException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Customer\\Exception\\BadCredentialsException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Customer\\Exception\\CannotDeleteDefaultAddressException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Customer\\Exception\\CustomerAlreadyConfirmedException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Customer\\Exception\\CustomerAuthThrottledException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Customer\\Exception\\CustomerNotFoundByHashException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Customer\\Exception\\CustomerNotFoundByIdException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Customer\\Exception\\CustomerNotFoundException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Customer\\Exception\\CustomerOptinNotCompletedException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Customer\\Exception\\CustomerRecoveryHashExpiredException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Customer\\Exception\\CustomerWishlistNotFoundException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Customer\\Exception\\DuplicateWishlistProductException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Customer\\Exception\\CannotDeleteActiveAddressException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Customer\\Exception\\CustomerGroupRegistrationConfigurationNotFound' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Customer\\Exception\\CustomerWishlistNotActivatedException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Customer\\Exception\\InactiveCustomerException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Customer\\Exception\\LegacyPasswordEncoderNotFoundException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Customer\\Exception\\NoHashProvidedException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Customer\\Exception\\WishlistProductNotFoundException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Payment\\Exception\\TokenInvalidatedException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Cart\\Exception\\InvalidCartException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Order\\Exception\\DeliveryWithoutAddressException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Order\\Exception\\EmptyCartException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Order\\Exception\\GuestNotAuthenticatedException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Order\\Exception\\LanguageOfOrderDeleteException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Order\\Exception\\PaymentMethodNotAvailableException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Order\\Exception\\PaymentMethodNotChangeableException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Order\\Exception\\WrongGuestCredentialsException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Cart\\Exception\\LineItemNotFoundException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Promotion\\Exception\\PatternNotComplexEnoughException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Promotion\\Exception\\InvalidCodePatternException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Content\\ProductExport\\Exception\\ExportNotFoundException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Exception\\AssociationNotFoundException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Exception\\VersionMergeAlreadyLockedException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Exception\\FieldAccessorBuilderNotFoundException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Exception\\QueryLimitExceededException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Exception\\InvalidLimitQueryException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Content\\Media\\Exception\\DuplicatedMediaFileNameException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\System\\StateMachine\\Exception\\IllegalTransitionException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\Api\\Exception\\MissingPrivilegeException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\Validation\\Exception\\ConstraintViolationException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\Validation\\WriteConstraintViolationException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\Uuid\\Exception\\InvalidUuidException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\System\\StateMachine\\Exception\\StateMachineInvalidEntityIdException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\Routing\\Exception\\MissingRequestParameterException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\WriteException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\Store\\Exception\\ExtensionUpdateRequiresConsentAffirmationException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\Script\\Exception\\ScriptExecutionFailedException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Exception\\InvalidPriceFieldTypeException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Content\\Product\\Exception\\ReviewNotActiveExeption' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\App\\Exception\\ActionProcessException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Content\\Product\\Exception\\DuplicateProductNumberException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Exception\\SearchRequestException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\Api\\Exception\\ResourceNotFoundException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Dbal\\Exception\\UnmappedFieldException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Exception\\InvalidFilterQueryException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Write\\Validation\\RestrictDeleteViolationException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Content\\Media\\Exception\\MediaNotFoundException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Content\\LandingPage\\Exception\\LandingPageNotFoundException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Content\\Product\\SalesChannel\\Exception\\ProductSortingNotFoundException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\Api\\Exception\\InvalidSyncOperationException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\Routing\\Exception\\SalesChannelNotFoundException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Content\\ImportExport\\Exception\\UnexpectedFileTypeException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Content\\ImportExport\\Exception\\InvalidFileAccessTokenException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\App\\Exception\\AppAlreadyInstalledException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\App\\Exception\\AppRegistrationException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\System\\CustomEntity\\Exception\\CustomEntityNotFoundException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\System\\SystemConfig\\Exception\\ConfigurationNotFoundException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Content\\Media\\Exception\\MissingFileException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Content\\ProductExport\\Exception\\RenderHeaderException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Content\\ProductExport\\Exception\\RenderFooterException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Content\\ProductExport\\Exception\\RenderProductException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Content\\ProductExport\\Exception\\EmptyExportException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Content\\Media\\Exception\\UploadException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\System\\Country\\Exception\\CountryStateNotFoundException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\System\\Country\\Exception\\CountryNotFoundException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Content\\Seo\\Exception\\InvalidTemplateException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Document\\Exception\\InvalidDocumentGeneratorTypeException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Document\\Exception\\InvalidDocumentException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Document\\Exception\\DocumentGenerationException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Document\\Exception\\DocumentNumberAlreadyExistsException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Document\\Exception\\InvalidDocumentRendererException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Checkout\\Document\\Exception\\InvalidFileGeneratorTypeException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Content\\Product\\Exception\\VariantNotFoundException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Exception\\EntityRepositoryNotFoundException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Storefront\\Framework\\Captcha\\Exception\\CaptchaInvalidException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Storefront\\Theme\\Exception\\ThemeException' => ['log_level' => 'notice', 'status_code' => NULL], 'Shopware\\Storefront\\Theme\\Exception\\ThemeAssignmentException' => ['log_level' => 'notice', 'status_code' => NULL]]);
    }

    /**
     * Gets the private 'fragment.listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\FragmentListener
     */
    protected static function getFragment_ListenerService($container)
    {
        return $container->privates['fragment.listener'] = new \Symfony\Component\HttpKernel\EventListener\FragmentListener(($container->privates['uri_signer'] ??= new \Symfony\Component\HttpKernel\UriSigner($container->getEnv('APP_SECRET'))), '/_fragment');
    }

    /**
     * Gets the private 'fragment.renderer.esi' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer
     */
    protected static function getFragment_Renderer_EsiService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/FragmentRendererInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/RoutableFragmentRenderer.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/AbstractSurrogateFragmentRenderer.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/EsiFragmentRenderer.php';

        $a = ($container->privates['fragment.renderer.inline'] ?? self::getFragment_Renderer_InlineService($container));

        if (isset($container->privates['fragment.renderer.esi'])) {
            return $container->privates['fragment.renderer.esi'];
        }

        $container->privates['fragment.renderer.esi'] = $instance = new \Symfony\Component\HttpKernel\Fragment\EsiFragmentRenderer(($container->privates['esi'] ??= new \Symfony\Component\HttpKernel\HttpCache\Esi()), $a, ($container->privates['uri_signer'] ??= new \Symfony\Component\HttpKernel\UriSigner($container->getEnv('APP_SECRET'))));

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the private 'fragment.renderer.hinclude' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer
     */
    protected static function getFragment_Renderer_HincludeService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/FragmentRendererInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/RoutableFragmentRenderer.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/HIncludeFragmentRenderer.php';

        $a = ($container->services['twig'] ?? self::getTwigService($container));

        if (isset($container->privates['fragment.renderer.hinclude'])) {
            return $container->privates['fragment.renderer.hinclude'];
        }

        $container->privates['fragment.renderer.hinclude'] = $instance = new \Symfony\Component\HttpKernel\Fragment\HIncludeFragmentRenderer($a, ($container->privates['uri_signer'] ??= new \Symfony\Component\HttpKernel\UriSigner($container->getEnv('APP_SECRET'))), NULL);

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the private 'fragment.renderer.inline' shared service.
     *
     * @return \Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer
     */
    protected static function getFragment_Renderer_InlineService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/FragmentRendererInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/RoutableFragmentRenderer.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/InlineFragmentRenderer.php';

        $a = ($container->services['http_kernel'] ?? self::getHttpKernelService($container));

        if (isset($container->privates['fragment.renderer.inline'])) {
            return $container->privates['fragment.renderer.inline'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['fragment.renderer.inline'])) {
            return $container->privates['fragment.renderer.inline'];
        }

        $container->privates['fragment.renderer.inline'] = $instance = new \Symfony\Component\HttpKernel\Fragment\InlineFragmentRenderer($a, $b);

        $instance->setFragmentPath('/_fragment');

        return $instance;
    }

    /**
     * Gets the private 'http_client.transport' shared service.
     *
     * @return \Symfony\Contracts\HttpClient\HttpClientInterface
     */
    protected static function getHttpClient_TransportService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-client-contracts/HttpClientInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-client/HttpClient.php';

        $container->privates['http_client.transport'] = $instance = \Symfony\Component\HttpClient\HttpClient::create([], 6);

        $a = new \Symfony\Bridge\Monolog\Logger('http_client');
        $a->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $a->pushHandler(($container->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? self::getExcludeFlowEventHandlerService($container)));

        $instance->setLogger($a);

        return $instance;
    }

    /**
     * Gets the private 'http_client.uri_template' shared service.
     *
     * @return \Symfony\Component\HttpClient\UriTemplateHttpClient
     */
    protected static function getHttpClient_UriTemplateService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-client-contracts/HttpClientInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-client/DecoratorTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-client/UriTemplateHttpClient.php';
        include_once \dirname(__DIR__, 4).'/vendor/rize/uri-template/src/Rize/UriTemplate.php';

        return $container->privates['http_client.uri_template'] = new \Symfony\Component\HttpClient\UriTemplateHttpClient(($container->privates['http_client.transport'] ?? self::getHttpClient_TransportService($container)), (new \Rize\UriTemplate())->expand(...), []);
    }

    /**
     * Gets the private 'kernel.bundles' shared service.
     *
     * @return \Iterator
     */
    protected static function getKernel_BundlesService($container)
    {
        return $container->privates['kernel.bundles'] = ($container->services['kernel'] ?? $container->get('kernel', 1))->getBundles();
    }

    /**
     * Gets the private 'locale_aware_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleAwareListener
     */
    protected static function getLocaleAwareListenerService($container)
    {
        return $container->privates['locale_aware_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleAwareListener(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['slugger'] ??= new \Symfony\Component\String\Slugger\AsciiSlugger('en-GB'));
            yield 1 => ($container->privates['translator.default'] ?? self::getTranslator_DefaultService($container));
            yield 2 => ($container->privates['translation.locale_switcher'] ?? self::getTranslation_LocaleSwitcherService($container));
        }, 3), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()));
    }

    /**
     * Gets the private 'locale_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\LocaleListener
     */
    protected static function getLocaleListenerService($container)
    {
        return $container->privates['locale_listener'] = new \Symfony\Component\HttpKernel\EventListener\LocaleListener(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), 'en-GB', ($container->services['router'] ?? self::getRouterService($container)), false, []);
    }

    /**
     * Gets the private 'lock.default.factory' shared service.
     *
     * @return \Symfony\Component\Lock\LockFactory
     */
    protected static function getLock_Default_FactoryService($container)
    {
        $container->privates['lock.default.factory'] = $instance = new \Symfony\Component\Lock\LockFactory(\Symfony\Component\Lock\Store\StoreFactory::createStore($container->getEnv('LOCK_DSN')));

        $a = new \Symfony\Bridge\Monolog\Logger('lock');
        $a->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $a->pushHandler(($container->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? self::getExcludeFlowEventHandlerService($container)));

        $instance->setLogger($a);

        return $instance;
    }

    /**
     * Gets the private 'mailer.messenger.message_handler' shared service.
     *
     * @return \Symfony\Component\Mailer\Messenger\MessageHandler
     */
    protected static function getMailer_Messenger_MessageHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Messenger/MessageHandler.php';

        $a = ($container->privates['mailer.transports'] ?? self::getMailer_TransportsService($container));

        if (isset($container->privates['mailer.messenger.message_handler'])) {
            return $container->privates['mailer.messenger.message_handler'];
        }

        return $container->privates['mailer.messenger.message_handler'] = new \Symfony\Component\Mailer\Messenger\MessageHandler($a);
    }

    /**
     * Gets the private 'mailer.transport_factory.native' shared service.
     *
     * @return \Symfony\Component\Mailer\Transport\NativeTransportFactory
     */
    protected static function getMailer_TransportFactory_NativeService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/TransportFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/AbstractTransportFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/NativeTransportFactory.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['mailer.transport_factory.native'])) {
            return $container->privates['mailer.transport_factory.native'];
        }

        return $container->privates['mailer.transport_factory.native'] = new \Symfony\Component\Mailer\Transport\NativeTransportFactory($a, ($container->privates['http_client.uri_template'] ?? self::getHttpClient_UriTemplateService($container)), ($container->privates['monolog.logger.mailer'] ?? self::getMonolog_Logger_MailerService($container)));
    }

    /**
     * Gets the private 'mailer.transport_factory.null' shared service.
     *
     * @return \Symfony\Component\Mailer\Transport\NullTransportFactory
     */
    protected static function getMailer_TransportFactory_NullService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/TransportFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/AbstractTransportFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/NullTransportFactory.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['mailer.transport_factory.null'])) {
            return $container->privates['mailer.transport_factory.null'];
        }

        return $container->privates['mailer.transport_factory.null'] = new \Symfony\Component\Mailer\Transport\NullTransportFactory($a, ($container->privates['http_client.uri_template'] ?? self::getHttpClient_UriTemplateService($container)), ($container->privates['monolog.logger.mailer'] ?? self::getMonolog_Logger_MailerService($container)));
    }

    /**
     * Gets the private 'mailer.transport_factory.sendmail' shared service.
     *
     * @return \Symfony\Component\Mailer\Transport\SendmailTransportFactory
     */
    protected static function getMailer_TransportFactory_SendmailService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/TransportFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/AbstractTransportFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/SendmailTransportFactory.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['mailer.transport_factory.sendmail'])) {
            return $container->privates['mailer.transport_factory.sendmail'];
        }

        return $container->privates['mailer.transport_factory.sendmail'] = new \Symfony\Component\Mailer\Transport\SendmailTransportFactory($a, ($container->privates['http_client.uri_template'] ?? self::getHttpClient_UriTemplateService($container)), ($container->privates['monolog.logger.mailer'] ?? self::getMonolog_Logger_MailerService($container)));
    }

    /**
     * Gets the private 'mailer.transport_factory.smtp' shared service.
     *
     * @return \Symfony\Component\Mailer\Transport\Smtp\EsmtpTransportFactory
     */
    protected static function getMailer_TransportFactory_SmtpService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/TransportFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/AbstractTransportFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/Smtp/EsmtpTransportFactory.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['mailer.transport_factory.smtp'])) {
            return $container->privates['mailer.transport_factory.smtp'];
        }

        return $container->privates['mailer.transport_factory.smtp'] = new \Symfony\Component\Mailer\Transport\Smtp\EsmtpTransportFactory($a, ($container->privates['http_client.uri_template'] ?? self::getHttpClient_UriTemplateService($container)), ($container->privates['monolog.logger.mailer'] ?? self::getMonolog_Logger_MailerService($container)));
    }

    /**
     * Gets the private 'mailer.transports' shared service.
     *
     * @return \Symfony\Component\Mailer\Transport\Transports
     */
    protected static function getMailer_TransportsService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/TransportInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport/Transports.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Content/Mail/Service/MailerTransportLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/Transport.php';

        $a = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));

        if (isset($container->privates['mailer.transports'])) {
            return $container->privates['mailer.transports'];
        }
        $b = ($container->services['Shopware\\Core\\Content\\Mail\\Service\\MailAttachmentsBuilder'] ?? self::getMailAttachmentsBuilderService($container));

        if (isset($container->privates['mailer.transports'])) {
            return $container->privates['mailer.transports'];
        }
        $c = ($container->services['document.repository'] ?? self::getDocument_RepositoryService($container));

        if (isset($container->privates['mailer.transports'])) {
            return $container->privates['mailer.transports'];
        }

        return $container->privates['mailer.transports'] = (new \Shopware\Core\Content\Mail\Service\MailerTransportLoader(new \Symfony\Component\Mailer\Transport(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['mailer.transport_factory.null'] ?? self::getMailer_TransportFactory_NullService($container));
            yield 1 => ($container->privates['mailer.transport_factory.sendmail'] ?? self::getMailer_TransportFactory_SendmailService($container));
            yield 2 => ($container->privates['mailer.transport_factory.native'] ?? self::getMailer_TransportFactory_NativeService($container));
            yield 3 => ($container->privates['mailer.transport_factory.smtp'] ?? self::getMailer_TransportFactory_SmtpService($container));
        }, 4)), $a, $b, ($container->services['shopware.filesystem.public'] ?? self::getShopware_Filesystem_PublicService($container)), $c))->fromStrings(['main' => $container->getEnv('MAILER_DSN')]);
    }

    /**
     * Gets the private 'messenger.bus.default' shared service.
     *
     * @return \Symfony\Component\Messenger\MessageBus
     */
    protected static function getMessenger_Bus_DefaultService($container)
    {
        return $container->privates['messenger.bus.default'] = new \Symfony\Component\Messenger\MessageBus(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['messenger.bus.default.middleware.traceable'] ?? self::getMessenger_Bus_Default_Middleware_TraceableService($container));
            yield 1 => ($container->privates['messenger.bus.default.middleware.add_bus_name_stamp_middleware'] ??= new \Symfony\Component\Messenger\Middleware\AddBusNameStampMiddleware('messenger.bus.default'));
            yield 2 => ($container->privates['messenger.middleware.reject_redelivered_message_middleware'] ??= new \Symfony\Component\Messenger\Middleware\RejectRedeliveredMessageMiddleware());
            yield 3 => ($container->privates['messenger.middleware.dispatch_after_current_bus'] ??= new \Symfony\Component\Messenger\Middleware\DispatchAfterCurrentBusMiddleware());
            yield 4 => ($container->privates['messenger.middleware.failed_message_processing_middleware'] ??= new \Symfony\Component\Messenger\Middleware\FailedMessageProcessingMiddleware());
            yield 5 => ($container->privates['messenger.bus.default.middleware.send_message'] ?? self::getMessenger_Bus_Default_Middleware_SendMessageService($container));
            yield 6 => ($container->privates['messenger.bus.default.middleware.handle_message'] ?? self::getMessenger_Bus_Default_Middleware_HandleMessageService($container));
        }, 7));
    }

    /**
     * Gets the private 'messenger.bus.default.middleware.handle_message' shared service.
     *
     * @return \Symfony\Component\Messenger\Middleware\HandleMessageMiddleware
     */
    protected static function getMessenger_Bus_Default_Middleware_HandleMessageService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Middleware/MiddlewareInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Middleware/HandleMessageMiddleware.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlersLocatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/HandlersLocator.php';

        $container->privates['messenger.bus.default.middleware.handle_message'] = $instance = new \Symfony\Component\Messenger\Middleware\HandleMessageMiddleware(new \Symfony\Component\Messenger\Handler\HandlersLocator(['Shopware\\Core\\Framework\\Log\\ScheduledTask\\LogCleanupTask' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.FcGBy7g'] ?? self::get_Messenger_HandlerDescriptor_FcGBy7gService($container));
        }, 1), 'Shopware\\Core\\Framework\\Adapter\\Cache\\InvalidateCacheTask' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.mbQVMyz'] ?? self::get_Messenger_HandlerDescriptor_MbQVMyzService($container));
        }, 1), 'Shopware\\Core\\Framework\\Adapter\\Cache\\Message\\CleanupOldCacheFolders' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.k4V9sF7'] ?? self::get_Messenger_HandlerDescriptor_K4V9sF7Service($container));
        }, 1), 'Shopware\\Core\\Framework\\App\\ScheduledTask\\UpdateAppsTask' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.62A1Dlr'] ?? self::get_Messenger_HandlerDescriptor_62A1DlrService($container));
        }, 1), 'Shopware\\Core\\Framework\\App\\ScheduledTask\\DeleteCascadeAppsTask' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.ye4GMEz'] ?? self::get_Messenger_HandlerDescriptor_Ye4GMEzService($container));
        }, 1), 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\EntityIndexingMessage' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.DNvu0vs'] ?? self::get_Messenger_HandlerDescriptor_DNvu0vsService($container));
        }, 1), 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Indexing\\MessageQueue\\IterateEntityIndexerMessage' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.tdN_hNC'] ?? self::get_Messenger_HandlerDescriptor_TdNHNCService($container));
        }, 1), 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Version\\Cleanup\\CleanupVersionTask' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.aJipXF5'] ?? self::get_Messenger_HandlerDescriptor_AJipXF5Service($container));
        }, 1), 'Shopware\\Core\\Framework\\MessageQueue\\ScheduledTask\\MessageQueue\\RegisterScheduledTaskMessage' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.oJwqZvo'] ?? self::get_Messenger_HandlerDescriptor_OJwqZvoService($container));
        }, 1), 'Shopware\\Core\\Framework\\Webhook\\Message\\WebhookEventMessage' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.BmgkEFy'] ?? self::get_Messenger_HandlerDescriptor_BmgkEFyService($container));
        }, 1), 'Shopware\\Core\\Framework\\Webhook\\ScheduledTask\\CleanupWebhookEventLogTask' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.Bh6eehT'] ?? self::get_Messenger_HandlerDescriptor_Bh6eehTService($container));
        }, 1), 'Shopware\\Core\\System\\SalesChannel\\Context\\Cleanup\\CleanupSalesChannelContextTask' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.0T1MkE4'] ?? self::get_Messenger_HandlerDescriptor_0T1MkE4Service($container));
        }, 1), 'Shopware\\Core\\System\\UsageData\\EntitySync\\IterateEntityMessage' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.kTWICXA'] ?? self::get_Messenger_HandlerDescriptor_KTWICXAService($container));
        }, 1), 'Shopware\\Core\\System\\UsageData\\EntitySync\\DispatchEntityMessage' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.LKzyvxp'] ?? self::get_Messenger_HandlerDescriptor_LKzyvxpService($container));
        }, 1), 'Shopware\\Core\\System\\UsageData\\EntitySync\\CollectEntityDataMessage' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.JchS1sa'] ?? self::get_Messenger_HandlerDescriptor_JchS1saService($container));
        }, 1), 'Shopware\\Core\\System\\UsageData\\ScheduledTask\\CollectEntityDataTask' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.3rmmvFz'] ?? self::get_Messenger_HandlerDescriptor_3rmmvFzService($container));
        }, 1), 'Shopware\\Core\\System\\UsageData\\ScheduledTask\\CheckIntegrationChangedTask' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.n3ExUjN'] ?? self::get_Messenger_HandlerDescriptor_N3ExUjNService($container));
        }, 1), 'Shopware\\Core\\Content\\Media\\Message\\GenerateThumbnailsMessage' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.Qj5SaZv'] ?? self::get_Messenger_HandlerDescriptor_Qj5SaZvService($container));
        }, 1), 'Shopware\\Core\\Content\\Media\\Message\\UpdateThumbnailsMessage' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.YVK9Q8a'] ?? self::get_Messenger_HandlerDescriptor_YVK9Q8aService($container));
        }, 1), 'Shopware\\Core\\Content\\Media\\Message\\DeleteFileMessage' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.Xr0g_CJ'] ?? self::get_Messenger_HandlerDescriptor_Xr0gCJService($container));
        }, 1), 'Shopware\\Core\\Content\\Product\\Cleanup\\CleanupProductKeywordDictionaryTask' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.xFii1hV'] ?? self::get_Messenger_HandlerDescriptor_XFii1hVService($container));
        }, 1), 'Shopware\\Core\\Content\\Product\\Cleanup\\CleanupUnusedDownloadMediaTask' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.0X1Et5p'] ?? self::get_Messenger_HandlerDescriptor_0X1Et5pService($container));
        }, 1), 'Shopware\\Core\\Content\\Newsletter\\ScheduledTask\\NewsletterRecipientTask' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.av_HoGc'] ?? self::get_Messenger_HandlerDescriptor_AvHoGcService($container));
        }, 1), 'Shopware\\Core\\Content\\ProductStream\\ScheduledTask\\UpdateProductStreamMappingTask' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.2tLbzh6'] ?? self::get_Messenger_HandlerDescriptor_2tLbzh6Service($container));
        }, 1), 'Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportGenerateTask' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.xzp5ujR'] ?? self::get_Messenger_HandlerDescriptor_Xzp5ujRService($container));
        }, 1), 'Shopware\\Core\\Content\\ProductExport\\ScheduledTask\\ProductExportPartialGeneration' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.q2GexvY'] ?? self::get_Messenger_HandlerDescriptor_Q2GexvYService($container));
        }, 1), 'Shopware\\Core\\Content\\ImportExport\\Message\\ImportExportMessage' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.u.9fsNR'] ?? self::get_Messenger_HandlerDescriptor_U_9fsNRService($container));
        }, 1), 'Shopware\\Core\\Content\\ImportExport\\Message\\DeleteFileMessage' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.jh4u3Y6'] ?? self::get_Messenger_HandlerDescriptor_Jh4u3Y6Service($container));
        }, 1), 'Shopware\\Core\\Content\\ImportExport\\ScheduledTask\\CleanupImportExportFileTask' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.vx8qyVl'] ?? self::get_Messenger_HandlerDescriptor_Vx8qyVlService($container));
        }, 1), 'Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapGenerateTask' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.1okQVwW'] ?? self::get_Messenger_HandlerDescriptor_1okQVwWService($container));
        }, 1), 'Shopware\\Core\\Content\\Sitemap\\ScheduledTask\\SitemapMessage' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.42IpoeP'] ?? self::get_Messenger_HandlerDescriptor_42IpoePService($container));
        }, 1), 'Shopware\\Core\\Checkout\\Cart\\Cleanup\\CleanupCartTask' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.C9PIk8B'] ?? self::get_Messenger_HandlerDescriptor_C9PIk8BService($container));
        }, 1), 'Shopware\\Core\\Checkout\\Customer\\DeleteUnusedGuestCustomerTask' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.2k7ZOfR'] ?? self::get_Messenger_HandlerDescriptor_2k7ZOfRService($container));
        }, 1), 'Shopware\\Elasticsearch\\Framework\\Indexing\\CreateAliasTask' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.1jGnvaX'] ?? self::get_Messenger_HandlerDescriptor_1jGnvaXService($container));
        }, 1), 'Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchIndexingMessage' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.RfCy4k0'] ?? self::get_Messenger_HandlerDescriptor_RfCy4k0Service($container));
        }, 1), 'Shopware\\Elasticsearch\\Framework\\Indexing\\ElasticsearchLanguageIndexIteratorMessage' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.QCu4JIo'] ?? self::get_Messenger_HandlerDescriptor_QCu4JIoService($container));
        }, 1), 'Shopware\\Elasticsearch\\Admin\\AdminSearchIndexingMessage' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.yaSsnDY'] ?? self::get_Messenger_HandlerDescriptor_YaSsnDYService($container));
        }, 1), 'Shopware\\Storefront\\Framework\\Cache\\CacheWarmer\\WarmUpMessage' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.7nlC8Ye'] ?? self::get_Messenger_HandlerDescriptor_7nlC8YeService($container));
        }, 1), 'Shopware\\Storefront\\Theme\\Message\\DeleteThemeFilesMessage' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.Ikh07rr'] ?? self::get_Messenger_HandlerDescriptor_Ikh07rrService($container));
        }, 1), 'Shopware\\Storefront\\Theme\\Message\\CompileThemeMessage' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.XeKBdg4'] ?? self::get_Messenger_HandlerDescriptor_XeKBdg4Service($container));
        }, 1), 'Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.tGvt0LH'] ?? self::get_Messenger_HandlerDescriptor_TGvt0LHService($container));
        }, 1), 'Symfony\\Component\\Messenger\\Message\\RedispatchMessage' => new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['.messenger.handler_descriptor.p4Qvabm'] ?? self::get_Messenger_HandlerDescriptor_P4QvabmService($container));
        }, 1)]), false);

        $instance->setLogger(($container->privates['monolog.logger.messenger'] ?? self::getMonolog_Logger_MessengerService($container)));

        return $instance;
    }

    /**
     * Gets the private 'messenger.bus.default.middleware.send_message' shared service.
     *
     * @return \Symfony\Component\Messenger\Middleware\SendMessageMiddleware
     */
    protected static function getMessenger_Bus_Default_Middleware_SendMessageService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Middleware/MiddlewareInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Middleware/SendMessageMiddleware.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Sender/SendersLocatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Sender/SendersLocator.php';

        $a = ($container->privates['.service_locator._fH_3DO'] ?? self::get_ServiceLocator_FH3DOService($container));

        if (isset($container->privates['messenger.bus.default.middleware.send_message'])) {
            return $container->privates['messenger.bus.default.middleware.send_message'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['messenger.bus.default.middleware.send_message'])) {
            return $container->privates['messenger.bus.default.middleware.send_message'];
        }

        $container->privates['messenger.bus.default.middleware.send_message'] = $instance = new \Symfony\Component\Messenger\Middleware\SendMessageMiddleware(new \Symfony\Component\Messenger\Transport\Sender\SendersLocator(['Shopware\\Core\\Framework\\MessageQueue\\AsyncMessageInterface' => ['async'], 'Shopware\\Core\\Framework\\MessageQueue\\LowPriorityMessageInterface' => ['low_priority'], 'Symfony\\Component\\Mailer\\Messenger\\SendEmailMessage' => ['async']], $a), $b, true);

        $instance->setLogger(($container->privates['monolog.logger.messenger'] ?? self::getMonolog_Logger_MessengerService($container)));

        return $instance;
    }

    /**
     * Gets the private 'messenger.bus.default.middleware.traceable' shared service.
     *
     * @return \Symfony\Component\Messenger\Middleware\TraceableMiddleware
     */
    protected static function getMessenger_Bus_Default_Middleware_TraceableService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Middleware/MiddlewareInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Middleware/TraceableMiddleware.php';

        return $container->privates['messenger.bus.default.middleware.traceable'] = new \Symfony\Component\Messenger\Middleware\TraceableMiddleware(($container->privates['debug.stopwatch'] ??= new \Symfony\Component\Stopwatch\Stopwatch(true)), 'messenger.bus.default');
    }

    /**
     * Gets the private 'messenger.failure.send_failed_message_to_failure_transport_listener' shared service.
     *
     * @return \Symfony\Component\Messenger\EventListener\SendFailedMessageToFailureTransportListener
     */
    protected static function getMessenger_Failure_SendFailedMessageToFailureTransportListenerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/EventListener/SendFailedMessageToFailureTransportListener.php';

        return $container->privates['messenger.failure.send_failed_message_to_failure_transport_listener'] = new \Symfony\Component\Messenger\EventListener\SendFailedMessageToFailureTransportListener(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'async' => ['privates', 'messenger.transport.failed', 'getMessenger_Transport_FailedService', false],
            'failed' => ['privates', 'messenger.transport.failed', 'getMessenger_Transport_FailedService', false],
            'low_priority' => ['privates', 'messenger.transport.failed', 'getMessenger_Transport_FailedService', false],
        ], [
            'async' => '?',
            'failed' => '?',
            'low_priority' => '?',
        ]), ($container->privates['monolog.logger.messenger'] ?? self::getMonolog_Logger_MessengerService($container)));
    }

    /**
     * Gets the private 'messenger.listener.stop_worker_on_restart_signal_listener' shared service.
     *
     * @return \Symfony\Component\Messenger\EventListener\StopWorkerOnRestartSignalListener
     */
    protected static function getMessenger_Listener_StopWorkerOnRestartSignalListenerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/EventListener/StopWorkerOnRestartSignalListener.php';

        return $container->privates['messenger.listener.stop_worker_on_restart_signal_listener'] = new \Symfony\Component\Messenger\EventListener\StopWorkerOnRestartSignalListener(($container->privates['cache.messenger.restart_workers_signal'] ?? self::getCache_Messenger_RestartWorkersSignalService($container)), ($container->privates['monolog.logger.messenger'] ?? self::getMonolog_Logger_MessengerService($container)));
    }

    /**
     * Gets the private 'messenger.receiver_locator' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    protected static function getMessenger_ReceiverLocatorService($container)
    {
        return $container->privates['messenger.receiver_locator'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'async' => ['privates', 'messenger.transport.async', 'getMessenger_Transport_AsyncService', false],
            'failed' => ['privates', 'messenger.transport.failed', 'getMessenger_Transport_FailedService', false],
            'low_priority' => ['privates', 'messenger.transport.low_priority', 'getMessenger_Transport_LowPriorityService', false],
            'messenger.transport.async' => ['privates', 'messenger.transport.async', 'getMessenger_Transport_AsyncService', false],
            'messenger.transport.failed' => ['privates', 'messenger.transport.failed', 'getMessenger_Transport_FailedService', false],
            'messenger.transport.low_priority' => ['privates', 'messenger.transport.low_priority', 'getMessenger_Transport_LowPriorityService', false],
        ], [
            'async' => '?',
            'failed' => '?',
            'low_priority' => '?',
            'messenger.transport.async' => '?',
            'messenger.transport.failed' => '?',
            'messenger.transport.low_priority' => '?',
        ]);
    }

    /**
     * Gets the private 'messenger.redispatch_message_handler' shared service.
     *
     * @return \Symfony\Component\Messenger\Handler\RedispatchMessageHandler
     */
    protected static function getMessenger_RedispatchMessageHandlerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Handler/RedispatchMessageHandler.php';

        $a = ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container));

        if (isset($container->privates['messenger.redispatch_message_handler'])) {
            return $container->privates['messenger.redispatch_message_handler'];
        }

        return $container->privates['messenger.redispatch_message_handler'] = new \Symfony\Component\Messenger\Handler\RedispatchMessageHandler($a);
    }

    /**
     * Gets the private 'messenger.retry.multiplier_retry_strategy.async' shared service.
     *
     * @return \Symfony\Component\Messenger\Retry\MultiplierRetryStrategy
     */
    protected static function getMessenger_Retry_MultiplierRetryStrategy_AsyncService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Retry/RetryStrategyInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Retry/MultiplierRetryStrategy.php';

        return $container->privates['messenger.retry.multiplier_retry_strategy.async'] = new \Symfony\Component\Messenger\Retry\MultiplierRetryStrategy(3, 1000, 2, 0);
    }

    /**
     * Gets the private 'messenger.retry.multiplier_retry_strategy.failed' shared service.
     *
     * @return \Symfony\Component\Messenger\Retry\MultiplierRetryStrategy
     */
    protected static function getMessenger_Retry_MultiplierRetryStrategy_FailedService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Retry/RetryStrategyInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Retry/MultiplierRetryStrategy.php';

        return $container->privates['messenger.retry.multiplier_retry_strategy.failed'] = new \Symfony\Component\Messenger\Retry\MultiplierRetryStrategy(3, 1000, 2, 0);
    }

    /**
     * Gets the private 'messenger.retry.multiplier_retry_strategy.low_priority' shared service.
     *
     * @return \Symfony\Component\Messenger\Retry\MultiplierRetryStrategy
     */
    protected static function getMessenger_Retry_MultiplierRetryStrategy_LowPriorityService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Retry/RetryStrategyInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Retry/MultiplierRetryStrategy.php';

        return $container->privates['messenger.retry.multiplier_retry_strategy.low_priority'] = new \Symfony\Component\Messenger\Retry\MultiplierRetryStrategy(3, 1000, 2, 0);
    }

    /**
     * Gets the private 'messenger.retry.send_failed_message_for_retry_listener' shared service.
     *
     * @return \Symfony\Component\Messenger\EventListener\SendFailedMessageForRetryListener
     */
    protected static function getMessenger_Retry_SendFailedMessageForRetryListenerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/EventListener/SendFailedMessageForRetryListener.php';

        $a = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['messenger.retry.send_failed_message_for_retry_listener'])) {
            return $container->privates['messenger.retry.send_failed_message_for_retry_listener'];
        }

        return $container->privates['messenger.retry.send_failed_message_for_retry_listener'] = new \Symfony\Component\Messenger\EventListener\SendFailedMessageForRetryListener(($container->privates['.service_locator._fH_3DO'] ?? self::get_ServiceLocator_FH3DOService($container)), new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'async' => ['privates', 'messenger.retry.multiplier_retry_strategy.async', 'getMessenger_Retry_MultiplierRetryStrategy_AsyncService', false],
            'failed' => ['privates', 'messenger.retry.multiplier_retry_strategy.failed', 'getMessenger_Retry_MultiplierRetryStrategy_FailedService', false],
            'low_priority' => ['privates', 'messenger.retry.multiplier_retry_strategy.low_priority', 'getMessenger_Retry_MultiplierRetryStrategy_LowPriorityService', false],
        ], [
            'async' => '?',
            'failed' => '?',
            'low_priority' => '?',
        ]), ($container->privates['monolog.logger.messenger'] ?? self::getMonolog_Logger_MessengerService($container)), $a);
    }

    /**
     * Gets the private 'messenger.routable_message_bus' shared service.
     *
     * @return \Symfony\Component\Messenger\RoutableMessageBus
     */
    protected static function getMessenger_RoutableMessageBusService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/RoutableMessageBus.php';

        $a = ($container->services['messenger.default_bus'] ?? self::getMessenger_DefaultBusService($container));

        if (isset($container->privates['messenger.routable_message_bus'])) {
            return $container->privates['messenger.routable_message_bus'];
        }

        return $container->privates['messenger.routable_message_bus'] = new \Symfony\Component\Messenger\RoutableMessageBus(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'messenger.bus.default' => ['privates', 'messenger.bus.default', 'getMessenger_Bus_DefaultService', false],
        ], [
            'messenger.bus.default' => '?',
        ]), $a);
    }

    /**
     * Gets the private 'messenger.transport.async' shared service.
     *
     * @return \Symfony\Component\Messenger\Transport\TransportInterface
     */
    protected static function getMessenger_Transport_AsyncService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Receiver/ReceiverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Sender/SenderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/TransportInterface.php';

        $a = ($container->privates['messenger.transport.symfony_serializer'] ?? self::getMessenger_Transport_SymfonySerializerService($container));

        if (isset($container->privates['messenger.transport.async'])) {
            return $container->privates['messenger.transport.async'];
        }
        $b = ($container->privates['messenger.transport_factory'] ?? self::getMessenger_TransportFactoryService($container));

        if (isset($container->privates['messenger.transport.async'])) {
            return $container->privates['messenger.transport.async'];
        }

        return $container->privates['messenger.transport.async'] = $b->createTransport($container->getEnv('MESSENGER_TRANSPORT_DSN'), ['transport_name' => 'async'], $a);
    }

    /**
     * Gets the private 'messenger.transport.doctrine.factory' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Doctrine\Messenger\DoctrineTransportFactory
     */
    protected static function getMessenger_Transport_Doctrine_FactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/TransportFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Doctrine/Messenger/DoctrineTransportFactory.php';

        return $container->privates['messenger.transport.doctrine.factory'] = new \Shopware\Core\Framework\Adapter\Doctrine\Messenger\DoctrineTransportFactory(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));
    }

    /**
     * Gets the private 'messenger.transport.failed' shared service.
     *
     * @return \Symfony\Component\Messenger\Transport\TransportInterface
     */
    protected static function getMessenger_Transport_FailedService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Receiver/ReceiverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Sender/SenderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/TransportInterface.php';

        $a = ($container->privates['messenger.transport_factory'] ?? self::getMessenger_TransportFactoryService($container));

        if (isset($container->privates['messenger.transport.failed'])) {
            return $container->privates['messenger.transport.failed'];
        }

        return $container->privates['messenger.transport.failed'] = $a->createTransport($container->getEnv('MESSENGER_TRANSPORT_FAILURE_DSN'), ['transport_name' => 'failed'], ($container->privates['messenger.transport.symfony_serializer'] ?? self::getMessenger_Transport_SymfonySerializerService($container)));
    }

    /**
     * Gets the private 'messenger.transport.low_priority' shared service.
     *
     * @return \Symfony\Component\Messenger\Transport\TransportInterface
     */
    protected static function getMessenger_Transport_LowPriorityService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Receiver/ReceiverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Sender/SenderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/TransportInterface.php';

        $a = ($container->privates['messenger.transport_factory'] ?? self::getMessenger_TransportFactoryService($container));

        if (isset($container->privates['messenger.transport.low_priority'])) {
            return $container->privates['messenger.transport.low_priority'];
        }

        return $container->privates['messenger.transport.low_priority'] = $a->createTransport($container->getEnv('MESSENGER_TRANSPORT_LOW_PRIORITY_DSN'), ['transport_name' => 'low_priority'], ($container->privates['messenger.transport.symfony_serializer'] ?? self::getMessenger_Transport_SymfonySerializerService($container)));
    }

    /**
     * Gets the private 'messenger.transport.symfony_serializer' shared service.
     *
     * @return \Symfony\Component\Messenger\Transport\Serialization\Serializer
     */
    protected static function getMessenger_Transport_SymfonySerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Serialization/SerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Serialization/Serializer.php';

        $a = ($container->privates['serializer'] ?? self::getSerializerService($container));

        if (isset($container->privates['messenger.transport.symfony_serializer'])) {
            return $container->privates['messenger.transport.symfony_serializer'];
        }

        return $container->privates['messenger.transport.symfony_serializer'] = new \Symfony\Component\Messenger\Transport\Serialization\Serializer($a, 'json', ['default_constructor_arguments' => ['Shopware\\Elasticsearch\\Framework\\Indexing\\IndexerOffset' => ['mappingDefinitions' => []]]]);
    }

    /**
     * Gets the private 'messenger.transport.sync.factory' shared service.
     *
     * @return \Symfony\Component\Messenger\Transport\Sync\SyncTransportFactory
     */
    protected static function getMessenger_Transport_Sync_FactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/TransportFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Sync/SyncTransportFactory.php';

        $a = ($container->privates['messenger.routable_message_bus'] ?? self::getMessenger_RoutableMessageBusService($container));

        if (isset($container->privates['messenger.transport.sync.factory'])) {
            return $container->privates['messenger.transport.sync.factory'];
        }

        return $container->privates['messenger.transport.sync.factory'] = new \Symfony\Component\Messenger\Transport\Sync\SyncTransportFactory($a);
    }

    /**
     * Gets the private 'messenger.transport_factory' shared service.
     *
     * @return \Symfony\Component\Messenger\Transport\TransportFactory
     */
    protected static function getMessenger_TransportFactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/TransportFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/TransportFactory.php';

        return $container->privates['messenger.transport_factory'] = new \Symfony\Component\Messenger\Transport\TransportFactory(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['messenger.transport.doctrine.factory'] ?? self::getMessenger_Transport_Doctrine_FactoryService($container));
            yield 1 => ($container->privates['messenger.transport.sync.factory'] ?? self::getMessenger_Transport_Sync_FactoryService($container));
            yield 2 => ($container->privates['messenger.transport.in_memory.factory'] ??= new \Symfony\Component\Messenger\Transport\InMemory\InMemoryTransportFactory());
        }, 3));
    }

    /**
     * Gets the private 'mime_types' shared service.
     *
     * @return \Symfony\Component\Mime\MimeTypes
     */
    protected static function getMimeTypesService($container)
    {
        $container->privates['mime_types'] = $instance = new \Symfony\Component\Mime\MimeTypes();

        $instance->setDefault($instance);

        return $instance;
    }

    /**
     * Gets the private 'monolog.command.server_log' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Command\ServerLogCommand
     */
    protected static function getMonolog_Command_ServerLogService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/monolog-bridge/Command/ServerLogCommand.php';

        $container->privates['monolog.command.server_log'] = $instance = new \Symfony\Bridge\Monolog\Command\ServerLogCommand();

        $instance->setName('server:log');
        $instance->setDescription('Start a log server that displays logs in real time');

        return $instance;
    }

    /**
     * Gets the private 'monolog.handler.business_event_handler_buffer' shared service.
     *
     * @return \Monolog\Handler\BufferHandler
     */
    protected static function getMonolog_Handler_BusinessEventHandlerBufferService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Log/Monolog/DoctrineSQLHandler.php';

        return $container->privates['monolog.handler.business_event_handler_buffer'] = new \Monolog\Handler\BufferHandler(new \Shopware\Core\Framework\Log\Monolog\DoctrineSQLHandler(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container))), 0, 100, true, false);
    }

    /**
     * Gets the private 'monolog.handler.console' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Handler\ConsoleHandler
     */
    protected static function getMonolog_Handler_ConsoleService($container)
    {
        return $container->privates['monolog.handler.console'] = new \Symfony\Bridge\Monolog\Handler\ConsoleHandler(NULL, true, [], []);
    }

    /**
     * Gets the private 'monolog.handler.elasticsearch' shared service.
     *
     * @return \Monolog\Handler\RotatingFileHandler
     */
    protected static function getMonolog_Handler_ElasticsearchService($container)
    {
        $container->privates['monolog.handler.elasticsearch'] = $instance = new \Monolog\Handler\RotatingFileHandler((\dirname(__DIR__, 3).'/log/elasticsearch_dev.log'), 90, 100, true, NULL, false);

        $instance->pushProcessor(($container->privates['monolog.processor.psr_log_message'] ??= new \Monolog\Processor\PsrLogMessageProcessor()));
        $instance->setFilenameFormat('{filename}-{date}', 'Y-m-d');

        return $instance;
    }

    /**
     * Gets the private 'monolog.logger' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected static function getMonolog_LoggerService($container)
    {
        $container->privates['monolog.logger'] = $instance = new \Symfony\Bridge\Monolog\Logger('app');

        $instance->useMicrosecondTimestamps(true);
        $instance->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $instance->pushHandler(($container->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? self::getExcludeFlowEventHandlerService($container)));

        return $instance;
    }

    /**
     * Gets the private 'monolog.logger.cache' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected static function getMonolog_Logger_CacheService($container)
    {
        $container->privates['monolog.logger.cache'] = $instance = new \Symfony\Bridge\Monolog\Logger('cache');

        $instance->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $instance->pushHandler(($container->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? self::getExcludeFlowEventHandlerService($container)));

        return $instance;
    }

    /**
     * Gets the private 'monolog.logger.mailer' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected static function getMonolog_Logger_MailerService($container)
    {
        $container->privates['monolog.logger.mailer'] = $instance = new \Symfony\Bridge\Monolog\Logger('mailer');

        $instance->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $instance->pushHandler(($container->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? self::getExcludeFlowEventHandlerService($container)));

        return $instance;
    }

    /**
     * Gets the private 'monolog.logger.messenger' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected static function getMonolog_Logger_MessengerService($container)
    {
        $container->privates['monolog.logger.messenger'] = $instance = new \Symfony\Bridge\Monolog\Logger('messenger');

        $instance->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $instance->pushHandler(($container->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? self::getExcludeFlowEventHandlerService($container)));

        return $instance;
    }

    /**
     * Gets the private 'monolog.logger.request' shared service.
     *
     * @return \Symfony\Bridge\Monolog\Logger
     */
    protected static function getMonolog_Logger_RequestService($container)
    {
        $container->privates['monolog.logger.request'] = $instance = new \Symfony\Bridge\Monolog\Logger('request');

        $instance->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $instance->pushHandler(($container->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? self::getExcludeFlowEventHandlerService($container)));

        return $instance;
    }

    /**
     * Gets the private 'parameter_bag' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag
     */
    protected static function getParameterBagService($container)
    {
        return $container->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($container);
    }

    /**
     * Gets the private 'property_info' shared service.
     *
     * @return \Symfony\Component\PropertyInfo\PropertyInfoExtractor
     */
    protected static function getPropertyInfoService($container)
    {
        return $container->privates['property_info'] = new \Symfony\Component\PropertyInfo\PropertyInfoExtractor(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['property_info.serializer_extractor'] ?? self::getPropertyInfo_SerializerExtractorService($container));
            yield 1 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
        }, 2), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
        }, 1), new RewindableGenerator(fn () => new \EmptyIterator(), 0), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
        }, 1), new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());
        }, 1));
    }

    /**
     * Gets the private 'property_info.serializer_extractor' shared service.
     *
     * @return \Symfony\Component\PropertyInfo\Extractor\SerializerExtractor
     */
    protected static function getPropertyInfo_SerializerExtractorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/property-info/Extractor/SerializerExtractor.php';

        return $container->privates['property_info.serializer_extractor'] = new \Symfony\Component\PropertyInfo\Extractor\SerializerExtractor(($container->privates['serializer.mapping.class_metadata_factory'] ?? self::getSerializer_Mapping_ClassMetadataFactoryService($container)));
    }

    /**
     * Gets the private 'router.cache_warmer' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer
     */
    protected static function getRouter_CacheWarmerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheWarmer/CacheWarmerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/CacheWarmer/RouterCacheWarmer.php';

        return $container->privates['router.cache_warmer'] = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\RouterCacheWarmer((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'router' => ['services', 'router', 'getRouterService', false],
        ], [
            'router' => '?',
        ]))->withContext('router.cache_warmer', $container));
    }

    /**
     * Gets the private 'router.default' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Routing\Router
     */
    protected static function getRouter_DefaultService($container)
    {
        $a = new \Symfony\Bridge\Monolog\Logger('router');
        $a->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $a->pushHandler(($container->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? self::getExcludeFlowEventHandlerService($container)));

        $container->privates['router.default'] = $instance = new \Symfony\Bundle\FrameworkBundle\Routing\Router((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'routing.loader' => ['services', 'routing.loader', 'getRouting_LoaderService', false],
        ], [
            'routing.loader' => 'Symfony\\Component\\Config\\Loader\\LoaderInterface',
        ]))->withContext('router.default', $container), 'kernel::loadRoutes', ['cache_dir' => $container->targetDir.'', 'debug' => true, 'generator_class' => 'Symfony\\Component\\Routing\\Generator\\CompiledUrlGenerator', 'generator_dumper_class' => 'Symfony\\Component\\Routing\\Generator\\Dumper\\CompiledUrlGeneratorDumper', 'matcher_class' => 'Symfony\\Bundle\\FrameworkBundle\\Routing\\RedirectableCompiledUrlMatcher', 'matcher_dumper_class' => 'Symfony\\Component\\Routing\\Matcher\\Dumper\\CompiledUrlMatcherDumper', 'strict_requirements' => true, 'resource_type' => 'service'], ($container->privates['router.request_context'] ?? self::getRouter_RequestContextService($container)), ($container->privates['parameter_bag'] ??= new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($container)), $a, 'en-GB');

        $instance->setConfigCacheFactory(($container->privates['config_cache_factory'] ?? self::getConfigCacheFactoryService($container)));

        return $instance;
    }

    /**
     * Gets the private 'router.request_context' shared service.
     *
     * @return \Symfony\Component\Routing\RequestContext
     */
    protected static function getRouter_RequestContextService($container)
    {
        return $container->privates['router.request_context'] = \Symfony\Component\Routing\RequestContext::fromUri('', 'localhost', 'http', 80, 443);
    }

    /**
     * Gets the private 'router_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\RouterListener
     */
    protected static function getRouterListenerService($container)
    {
        return $container->privates['router_listener'] = new \Symfony\Component\HttpKernel\EventListener\RouterListener(($container->services['router'] ?? self::getRouterService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->privates['router.request_context'] ?? self::getRouter_RequestContextService($container)), ($container->privates['monolog.logger.request'] ?? self::getMonolog_Logger_RequestService($container)), \dirname(__DIR__, 4), true);
    }

    /**
     * Gets the private 'secrets.vault' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Secrets\SodiumVault
     */
    protected static function getSecrets_VaultService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/AbstractVault.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/dependency-injection/EnvVarLoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Secrets/SodiumVault.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/string/LazyString.php';

        return $container->privates['secrets.vault'] = new \Symfony\Bundle\FrameworkBundle\Secrets\SodiumVault((\dirname(__DIR__, 4).'/config/secrets/'.$container->getEnv('string:default:kernel.environment:APP_RUNTIME_ENV')), \Symfony\Component\String\LazyString::fromCallable($container->getEnv(...), 'base64:default::SYMFONY_DECRYPTION_SECRET'));
    }

    /**
     * Gets the private 'serializer' shared service.
     *
     * @return \Symfony\Component\Serializer\Serializer
     */
    protected static function getSerializerService($container)
    {
        $a = ($container->services['translator'] ?? self::getTranslatorService($container));

        if (isset($container->privates['serializer'])) {
            return $container->privates['serializer'];
        }
        $b = ($container->privates['property_info.reflection_extractor'] ??= new \Symfony\Component\PropertyInfo\Extractor\ReflectionExtractor());

        $c = new \Symfony\Component\PropertyAccess\PropertyAccessor(3, 2, new \Symfony\Component\Cache\Adapter\ArrayAdapter(0, false), $b, $b);
        $d = ($container->privates['serializer.mapping.class_metadata_factory'] ?? self::getSerializer_Mapping_ClassMetadataFactoryService($container));

        $e = new \Symfony\Component\Serializer\NameConverter\MetadataAwareNameConverter($d);
        $f = ($container->privates['property_info'] ?? self::getPropertyInfoService($container));
        $g = new \Symfony\Component\Serializer\Mapping\ClassDiscriminatorFromClassMetadata($d);

        return $container->privates['serializer'] = new \Symfony\Component\Serializer\Serializer([new \Symfony\Component\Serializer\Normalizer\UnwrappingDenormalizer($c), new \Shopware\Core\Framework\Struct\Serializer\StructNormalizer(), new \Shopware\Core\Framework\MessageQueue\SendEmailMessageJsonSerializer(), new \Symfony\Component\Messenger\Transport\Serialization\Normalizer\FlattenExceptionNormalizer(), new \Symfony\Component\Serializer\Normalizer\ProblemNormalizer(true, translator: $a), new \Symfony\Component\Serializer\Normalizer\UidNormalizer(), new \Symfony\Component\Serializer\Normalizer\DateTimeNormalizer(), new \Symfony\Component\Serializer\Normalizer\ConstraintViolationListNormalizer([], $e), new \Symfony\Component\Serializer\Normalizer\MimeMessageNormalizer(new \Symfony\Component\Serializer\Normalizer\PropertyNormalizer($d, $e, $f, $g, NULL)), new \Symfony\Component\Serializer\Normalizer\DateTimeZoneNormalizer(), new \Symfony\Component\Serializer\Normalizer\DateIntervalNormalizer(), new \Symfony\Component\Serializer\Normalizer\FormErrorNormalizer(), new \Symfony\Component\Serializer\Normalizer\BackedEnumNormalizer(), new \Symfony\Component\Serializer\Normalizer\DataUriNormalizer(($container->privates['mime_types'] ?? self::getMimeTypesService($container))), new \Symfony\Component\Serializer\Normalizer\JsonSerializableNormalizer(NULL, NULL), new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer(), new \Symfony\Component\Serializer\Normalizer\ObjectNormalizer($d, $e, $c, $f, $g, NULL)], [new \Shopware\Core\Framework\Api\Serializer\JsonApiDecoder(), new \Symfony\Component\Serializer\Encoder\XmlEncoder(), new \Symfony\Component\Serializer\Encoder\JsonEncoder(NULL, NULL), new \Symfony\Component\Serializer\Encoder\YamlEncoder(NULL, NULL), new \Symfony\Component\Serializer\Encoder\CsvEncoder()]);
    }

    /**
     * Gets the private 'serializer.mapping.cache_warmer' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\CacheWarmer\SerializerCacheWarmer
     */
    protected static function getSerializer_Mapping_CacheWarmerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheWarmer/CacheWarmerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/CacheWarmer/AbstractPhpFileCacheWarmer.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/CacheWarmer/SerializerCacheWarmer.php';

        return $container->privates['serializer.mapping.cache_warmer'] = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\SerializerCacheWarmer([new \Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader(($container->privates['annotations.cached_reader'] ?? self::getAnnotations_CachedReaderService($container)))], ($container->targetDir.''.'/serialization.php'));
    }

    /**
     * Gets the private 'serializer.mapping.class_metadata_factory' shared service.
     *
     * @return \Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory
     */
    protected static function getSerializer_Mapping_ClassMetadataFactoryService($container)
    {
        return $container->privates['serializer.mapping.class_metadata_factory'] = new \Symfony\Component\Serializer\Mapping\Factory\ClassMetadataFactory(new \Symfony\Component\Serializer\Mapping\Loader\LoaderChain([new \Symfony\Component\Serializer\Mapping\Loader\AnnotationLoader(($container->privates['annotations.cached_reader'] ?? self::getAnnotations_CachedReaderService($container)))]));
    }

    /**
     * Gets the private 'session.factory' shared service.
     *
     * @return \Symfony\Component\HttpFoundation\Session\SessionFactory
     */
    protected static function getSession_FactoryService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/Session/SessionFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/Session/SessionFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/Session/Storage/SessionStorageFactoryInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/Session/Storage/NativeSessionStorageFactory.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/Session/Storage/Handler/AbstractSessionHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/Session/Storage/Handler/StrictSessionHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/Session/SessionBagInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-foundation/Session/Storage/MetadataBag.php';

        $a = ($container->privates['session_listener'] ?? self::getSessionListenerService($container));

        if (isset($container->privates['session.factory'])) {
            return $container->privates['session.factory'];
        }

        return $container->privates['session.factory'] = new \Symfony\Component\HttpFoundation\Session\SessionFactory(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), new \Symfony\Component\HttpFoundation\Session\Storage\NativeSessionStorageFactory($container->parameters['session.storage.options'], new \Symfony\Component\HttpFoundation\Session\Storage\Handler\StrictSessionHandler(new \SessionHandler()), new \Symfony\Component\HttpFoundation\Session\Storage\MetadataBag('_sf2_meta', 0), true), [$a, 'onSessionUsage']);
    }

    /**
     * Gets the private 'session_listener' shared service.
     *
     * @return \Symfony\Component\HttpKernel\EventListener\SessionListener
     */
    protected static function getSessionListenerService($container)
    {
        return $container->privates['session_listener'] = new \Symfony\Component\HttpKernel\EventListener\SessionListener(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'logger' => ['privates', 'monolog.logger', 'getMonolog_LoggerService', false],
            'session_factory' => ['privates', 'session.factory', 'getSession_FactoryService', false],
        ], [
            'logger' => '?',
            'session_factory' => '?',
        ]), true, $container->parameters['session.storage.options']);
    }

    /**
     * Gets the private 'shopware.api.authorization_server' shared service.
     *
     * @return \League\OAuth2\Server\AuthorizationServer
     */
    protected static function getShopware_Api_AuthorizationServerService($container)
    {
        $a = ($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container));

        return $container->privates['shopware.api.authorization_server'] = new \League\OAuth2\Server\AuthorizationServer(new \Shopware\Core\Framework\Api\OAuth\ClientRepository($a), ($container->privates['Shopware\\Core\\Framework\\Api\\OAuth\\AccessTokenRepository'] ??= new \Shopware\Core\Framework\Api\OAuth\AccessTokenRepository()), new \Shopware\Core\Framework\Api\OAuth\ScopeRepository(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['Shopware\\Core\\Framework\\Api\\OAuth\\Scope\\WriteScope'] ??= new \Shopware\Core\Framework\Api\OAuth\Scope\WriteScope());
            yield 1 => ($container->privates['Shopware\\Core\\Framework\\Api\\OAuth\\Scope\\AdminScope'] ??= new \Shopware\Core\Framework\Api\OAuth\Scope\AdminScope());
            yield 2 => ($container->privates['Shopware\\Core\\Framework\\Api\\OAuth\\Scope\\UserVerifiedScope'] ??= new \Shopware\Core\Framework\Api\OAuth\Scope\UserVerifiedScope());
        }, 3), $a), ($container->privates['shopware.private_key'] ??= new \League\OAuth2\Server\CryptKey(('file://'.\dirname(__DIR__, 4).'/config/jwt/private.pem'), 'shopware')), $container->getEnv('APP_SECRET'));
    }

    /**
     * Gets the private 'shopware.app_system.guzzle' shared service.
     *
     * @return \GuzzleHttp\Client
     */
    protected static function getShopware_AppSystem_GuzzleService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['shopware.app_system.guzzle'] = $container->createProxy('ClientGhostD1baff0', static fn () => \ClientGhostD1baff0::createLazyGhost(static fn ($proxy) => self::getShopware_AppSystem_GuzzleService($container, $proxy)));
        }

        include_once \dirname(__DIR__, 4).'/vendor/guzzlehttp/guzzle/src/HandlerStack.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/App/Hmac/Guzzle/AuthMiddleware.php';

        $a = \GuzzleHttp\HandlerStack::create();
        $a->push(new \Shopware\Core\Framework\App\Hmac\Guzzle\AuthMiddleware('6.5.7.3', ($container->services['Shopware\\Core\\Framework\\App\\AppLocaleProvider'] ?? self::getAppLocaleProviderService($container))));

        return ($lazyLoad->__construct(['timeout' => 5, 'connect_timeout' => 1, 'handler' => $a]) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'shopware.asset.asset' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Asset\FallbackUrlPackage
     */
    protected static function getShopware_Asset_AssetService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['shopware.asset.asset'] = $container->createProxy('FallbackUrlPackageGhost915d69c', static fn () => \FallbackUrlPackageGhost915d69c::createLazyGhost(static fn ($proxy) => self::getShopware_Asset_AssetService($container, $proxy)));
        }

        return ($lazyLoad->__construct([''], ($container->privates['shopware.asset.asset.version_strategy'] ?? self::getShopware_Asset_Asset_VersionStrategyService($container)), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack())) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'shopware.asset.asset.version_strategy' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Asset\FlysystemLastModifiedVersionStrategy
     */
    protected static function getShopware_Asset_Asset_VersionStrategyService($container)
    {
        return $container->privates['shopware.asset.asset.version_strategy'] = new \Shopware\Core\Framework\Adapter\Asset\FlysystemLastModifiedVersionStrategy('asset-metaData', ($container->services['shopware.filesystem.asset'] ?? self::getShopware_Filesystem_AssetService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)));
    }

    /**
     * Gets the private 'shopware.asset.asset_without_versioning' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Asset\FallbackUrlPackage
     */
    protected static function getShopware_Asset_AssetWithoutVersioningService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['shopware.asset.asset_without_versioning'] = $container->createProxy('FallbackUrlPackageGhost915d69c', static fn () => \FallbackUrlPackageGhost915d69c::createLazyGhost(static fn ($proxy) => self::getShopware_Asset_AssetWithoutVersioningService($container, $proxy)));
        }

        return ($lazyLoad->__construct([''], ($container->privates['assets.empty_version_strategy'] ??= new \Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy()), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack())) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'shopware.asset.public' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Asset\FallbackUrlPackage
     */
    protected static function getShopware_Asset_PublicService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['shopware.asset.public'] = $container->createProxy('FallbackUrlPackageGhost915d69c', static fn () => \FallbackUrlPackageGhost915d69c::createLazyGhost(static fn ($proxy) => self::getShopware_Asset_PublicService($container, $proxy)));
        }

        return ($lazyLoad->__construct([''], ($container->privates['assets.empty_version_strategy'] ??= new \Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy()), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack())) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'shopware.asset.sitemap' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Asset\FallbackUrlPackage
     */
    protected static function getShopware_Asset_SitemapService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['shopware.asset.sitemap'] = $container->createProxy('FallbackUrlPackageGhost915d69c', static fn () => \FallbackUrlPackageGhost915d69c::createLazyGhost(static fn ($proxy) => self::getShopware_Asset_SitemapService($container, $proxy)));
        }

        return ($lazyLoad->__construct([''], ($container->privates['assets.empty_version_strategy'] ??= new \Symfony\Component\Asset\VersionStrategy\EmptyVersionStrategy()), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack())) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'shopware.asset.theme' shared service.
     *
     * @return \Shopware\Storefront\Theme\ThemeAssetPackage
     */
    protected static function getShopware_Asset_ThemeService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['shopware.asset.theme'] = $container->createProxy('ThemeAssetPackageGhost34a6b9f', static fn () => \ThemeAssetPackageGhost34a6b9f::createLazyGhost(static fn ($proxy) => self::getShopware_Asset_ThemeService($container, $proxy)));
        }

        return ($lazyLoad->__construct([''], new \Shopware\Core\Framework\Adapter\Asset\FlysystemLastModifiedVersionStrategy('theme-metaData', ($container->services['shopware.filesystem.theme'] ?? self::getShopware_Filesystem_ThemeService($container)), ($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container))), ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack()), ($container->privates['Shopware\\Storefront\\Theme\\SeedingThemePathBuilder'] ?? self::getSeedingThemePathBuilderService($container))) && false ?: $lazyLoad);
    }

    /**
     * Gets the private 'shopware.cache.invalidator.storage.cache' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Cache\InvalidatorStorage\CacheInvalidatorStorage
     */
    protected static function getShopware_Cache_Invalidator_Storage_CacheService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/InvalidatorStorage/CacheInvalidatorStorage.php';

        return $container->privates['shopware.cache.invalidator.storage.cache'] = new \Shopware\Core\Framework\Adapter\Cache\InvalidatorStorage\CacheInvalidatorStorage(($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\CacheDecorator'] ?? self::getCacheDecoratorService($container)));
    }

    /**
     * Gets the private 'shopware.cache.invalidator.storage.redis' shared service.
     *
     * @return \Shopware\Core\Framework\Adapter\Cache\InvalidatorStorage\RedisInvalidatorStorage
     */
    protected static function getShopware_Cache_Invalidator_Storage_RedisService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/InvalidatorStorage/RedisInvalidatorStorage.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Adapter/Cache/RedisConnectionFactory.php';

        return $container->privates['shopware.cache.invalidator.storage.redis'] = new \Shopware\Core\Framework\Adapter\Cache\InvalidatorStorage\RedisInvalidatorStorage(($container->privates['Shopware\\Core\\Framework\\Adapter\\Cache\\RedisConnectionFactory'] ??= new \Shopware\Core\Framework\Adapter\Cache\RedisConnectionFactory($container->getEnv('REDIS_PREFIX')))->create('redis://localhost'));
    }

    /**
     * Gets the private 'shopware.es.profiled.adminClient.inner' shared service.
     *
     * @return \OpenSearch\Client
     */
    protected static function getShopware_Es_Profiled_AdminClient_InnerService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['shopware.es.profiled.adminClient.inner'] = $container->createProxy('ClientProxy20b8e4f', static fn () => \ClientProxy20b8e4f::createLazyProxy(static fn () => self::getShopware_Es_Profiled_AdminClient_InnerService($container, false)));
        }

        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/ClientFactory.php';

        return \Shopware\Elasticsearch\Framework\ClientFactory::createClient($container->getEnv('string:ADMIN_OPENSEARCH_URL'), ($container->services['monolog.logger.elasticsearch'] ?? self::getMonolog_Logger_ElasticsearchService($container)), true, $container->parameters['elasticsearch.ssl']);
    }

    /**
     * Gets the private 'shopware.es.profiled.client.inner' shared service.
     *
     * @return \OpenSearch\Client
     */
    protected static function getShopware_Es_Profiled_Client_InnerService($container, $lazyLoad = true)
    {
        if (true === $lazyLoad) {
            return $container->privates['shopware.es.profiled.client.inner'] = $container->createProxy('ClientProxy20b8e4f', static fn () => \ClientProxy20b8e4f::createLazyProxy(static fn () => self::getShopware_Es_Profiled_Client_InnerService($container, false)));
        }

        include_once \dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Framework/ClientFactory.php';

        return \Shopware\Elasticsearch\Framework\ClientFactory::createClient($container->getEnv('string:OPENSEARCH_URL'), ($container->services['monolog.logger.elasticsearch'] ?? self::getMonolog_Logger_ElasticsearchService($container)), true, $container->parameters['elasticsearch.ssl']);
    }

    /**
     * Gets the private 'shopware.increment.message_queue.gateway.mysql' shared service.
     *
     * @return \Shopware\Core\Framework\Increment\MySQLIncrementer
     */
    protected static function getShopware_Increment_MessageQueue_Gateway_MysqlService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Increment/AbstractIncrementer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Increment/MySQLIncrementer.php';

        $container->privates['shopware.increment.message_queue.gateway.mysql'] = $instance = new \Shopware\Core\Framework\Increment\MySQLIncrementer(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));

        $instance->setPool('message_queue');
        $instance->setConfig([]);

        return $instance;
    }

    /**
     * Gets the private 'shopware.increment.user_activity.gateway.mysql' shared service.
     *
     * @return \Shopware\Core\Framework\Increment\MySQLIncrementer
     */
    protected static function getShopware_Increment_UserActivity_Gateway_MysqlService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Increment/AbstractIncrementer.php';
        include_once \dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Increment/MySQLIncrementer.php';

        $container->privates['shopware.increment.user_activity.gateway.mysql'] = $instance = new \Shopware\Core\Framework\Increment\MySQLIncrementer(($container->services['Doctrine\\DBAL\\Connection'] ?? self::getConnectionService($container)));

        $instance->setPool('user_activity');
        $instance->setConfig([]);

        return $instance;
    }

    /**
     * Gets the private 'shopware.jwt_config' shared service.
     *
     * @return \Lcobucci\JWT\Configuration
     */
    protected static function getShopware_JwtConfigService($container)
    {
        return $container->privates['shopware.jwt_config'] = \Shopware\Core\Checkout\Payment\Cart\Token\JWTConfigurationFactory::createJWTConfiguration(new \Lcobucci\JWT\Signer\Rsa\Sha256(), ($container->privates['shopware.private_key'] ??= new \League\OAuth2\Server\CryptKey(('file://'.\dirname(__DIR__, 4).'/config/jwt/private.pem'), 'shopware')), ($container->privates['shopware.public_key'] ??= new \League\OAuth2\Server\CryptKey(('file://'.\dirname(__DIR__, 4).'/config/jwt/public.pem'))));
    }

    /**
     * Gets the private 'shopware.rate_limiter' shared service.
     *
     * @return \Shopware\Core\Framework\RateLimiter\RateLimiter
     */
    protected static function getShopware_RateLimiterService($container)
    {
        $container->privates['shopware.rate_limiter'] = $instance = new \Shopware\Core\Framework\RateLimiter\RateLimiter();

        $a = ($container->privates['cache.rate_limiter'] ?? self::getCache_RateLimiterService($container));
        $b = ($container->services['Shopware\\Core\\System\\SystemConfig\\SystemConfigService'] ?? self::getSystemConfigServiceService($container));
        $c = ($container->privates['lock.default.factory'] ?? self::getLock_Default_FactoryService($container));

        $instance->registerLimiterFactory('login', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $container->parameters['shopware.api.rate_limiter.login.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'login'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($a), $b, $c));
        $instance->registerLimiterFactory('guest_login', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $container->parameters['shopware.api.rate_limiter.login.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'guest_login'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($a), $b, $c));
        $instance->registerLimiterFactory('oauth', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $container->parameters['shopware.api.rate_limiter.login.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'oauth'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($a), $b, $c));
        $instance->registerLimiterFactory('reset_password', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $container->parameters['shopware.api.rate_limiter.reset_password.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'reset_password'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($a), $b, $c));
        $instance->registerLimiterFactory('user_recovery', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $container->parameters['shopware.api.rate_limiter.reset_password.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'user_recovery'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($a), $b, $c));
        $instance->registerLimiterFactory('contact_form', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $container->parameters['shopware.api.rate_limiter.reset_password.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'contact_form'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($a), $b, $c));
        $instance->registerLimiterFactory('notification', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $container->parameters['shopware.api.rate_limiter.login.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'notification'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($a), $b, $c));
        $instance->registerLimiterFactory('newsletter_form', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'time_backoff', 'reset' => '24 hours', 'limits' => $container->parameters['shopware.api.rate_limiter.reset_password.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'newsletter_form'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($a), $b, $c));
        $instance->registerLimiterFactory('cart_add_line_item', new \Shopware\Core\Framework\RateLimiter\RateLimiterFactory(['enabled' => true, 'policy' => 'system_config', 'reset' => '1 hours', 'limits' => $container->parameters['shopware.api.rate_limiter.cart_add_line_item.limits'], 'lock_factory' => 'lock.factory', 'cache_pool' => 'cache.rate_limiter', 'id' => 'cart_add_line_item'], new \Symfony\Component\RateLimiter\Storage\CacheStorage($a), $b, $c));

        return $instance;
    }

    /**
     * Gets the private 'shopware.usage_data.gateway.client' shared service.
     *
     * @return \Symfony\Contracts\HttpClient\HttpClientInterface
     */
    protected static function getShopware_UsageData_Gateway_ClientService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-client-contracts/HttpClientInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-client/HttpClient.php';

        return $container->privates['shopware.usage_data.gateway.client'] = \Symfony\Component\HttpClient\HttpClient::create(['base_uri' => 'https://data.shopware.io']);
    }

    /**
     * Gets the private 'slugify' shared service.
     *
     * @return \Cocur\Slugify\Slugify
     */
    protected static function getSlugifyService($container)
    {
        return $container->privates['slugify'] = new \Cocur\Slugify\Slugify($container->parameters['shopware.slug.config']);
    }

    /**
     * Gets the private 'translation.extractor' shared service.
     *
     * @return \Symfony\Component\Translation\Extractor\ChainExtractor
     */
    protected static function getTranslation_ExtractorService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Extractor/ExtractorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Extractor/ChainExtractor.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Extractor/AbstractFileExtractor.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Translation/TwigExtractor.php';

        $container->privates['translation.extractor'] = $instance = new \Symfony\Component\Translation\Extractor\ChainExtractor();

        $instance->addExtractor('php', self::getTranslation_Extractor_PhpService($container));
        $instance->addExtractor('twig', new \Symfony\Bridge\Twig\Translation\TwigExtractor(($container->services['twig'] ?? self::getTwigService($container))));

        return $instance;
    }

    /**
     * Gets the private 'translation.extractor.php' shared service.
     *
     * @return \Symfony\Component\Translation\Extractor\PhpExtractor
     *
     * @deprecated Since symfony/framework-bundle 6.2: The "translation.extractor.php" service is deprecated, use "translation.extractor.php_ast" instead.
     */
    protected static function getTranslation_Extractor_PhpService($container)
    {
        trigger_deprecation('symfony/framework-bundle', '6.2', 'The "translation.extractor.php" service is deprecated, use "translation.extractor.php_ast" instead.');

        return new \Symfony\Component\Translation\Extractor\PhpExtractor();
    }

    /**
     * Gets the private 'translation.loader.csv' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\CsvFileLoader
     */
    protected static function getTranslation_Loader_CsvService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/ArrayLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/FileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/CsvFileLoader.php';

        return $container->privates['translation.loader.csv'] = new \Symfony\Component\Translation\Loader\CsvFileLoader();
    }

    /**
     * Gets the private 'translation.loader.dat' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuDatFileLoader
     */
    protected static function getTranslation_Loader_DatService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/IcuResFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/IcuDatFileLoader.php';

        return $container->privates['translation.loader.dat'] = new \Symfony\Component\Translation\Loader\IcuDatFileLoader();
    }

    /**
     * Gets the private 'translation.loader.ini' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\IniFileLoader
     */
    protected static function getTranslation_Loader_IniService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/ArrayLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/FileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/IniFileLoader.php';

        return $container->privates['translation.loader.ini'] = new \Symfony\Component\Translation\Loader\IniFileLoader();
    }

    /**
     * Gets the private 'translation.loader.json' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\JsonFileLoader
     */
    protected static function getTranslation_Loader_JsonService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/ArrayLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/FileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/JsonFileLoader.php';

        return $container->privates['translation.loader.json'] = new \Symfony\Component\Translation\Loader\JsonFileLoader();
    }

    /**
     * Gets the private 'translation.loader.mo' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\MoFileLoader
     */
    protected static function getTranslation_Loader_MoService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/ArrayLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/FileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/MoFileLoader.php';

        return $container->privates['translation.loader.mo'] = new \Symfony\Component\Translation\Loader\MoFileLoader();
    }

    /**
     * Gets the private 'translation.loader.php' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\PhpFileLoader
     */
    protected static function getTranslation_Loader_PhpService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/ArrayLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/FileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/PhpFileLoader.php';

        return $container->privates['translation.loader.php'] = new \Symfony\Component\Translation\Loader\PhpFileLoader();
    }

    /**
     * Gets the private 'translation.loader.po' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\PoFileLoader
     */
    protected static function getTranslation_Loader_PoService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/ArrayLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/FileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/PoFileLoader.php';

        return $container->privates['translation.loader.po'] = new \Symfony\Component\Translation\Loader\PoFileLoader();
    }

    /**
     * Gets the private 'translation.loader.qt' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\QtFileLoader
     */
    protected static function getTranslation_Loader_QtService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/QtFileLoader.php';

        return $container->privates['translation.loader.qt'] = new \Symfony\Component\Translation\Loader\QtFileLoader();
    }

    /**
     * Gets the private 'translation.loader.res' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\IcuResFileLoader
     */
    protected static function getTranslation_Loader_ResService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/IcuResFileLoader.php';

        return $container->privates['translation.loader.res'] = new \Symfony\Component\Translation\Loader\IcuResFileLoader();
    }

    /**
     * Gets the private 'translation.loader.xliff' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\XliffFileLoader
     */
    protected static function getTranslation_Loader_XliffService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/XliffFileLoader.php';

        return $container->privates['translation.loader.xliff'] = new \Symfony\Component\Translation\Loader\XliffFileLoader();
    }

    /**
     * Gets the private 'translation.loader.yml' shared service.
     *
     * @return \Symfony\Component\Translation\Loader\YamlFileLoader
     */
    protected static function getTranslation_Loader_YmlService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/ArrayLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/FileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/YamlFileLoader.php';

        return $container->privates['translation.loader.yml'] = new \Symfony\Component\Translation\Loader\YamlFileLoader();
    }

    /**
     * Gets the private 'translation.locale_switcher' shared service.
     *
     * @return \Symfony\Component\Translation\LocaleSwitcher
     */
    protected static function getTranslation_LocaleSwitcherService($container)
    {
        return $container->privates['translation.locale_switcher'] = new \Symfony\Component\Translation\LocaleSwitcher('en-GB', new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['slugger'] ??= new \Symfony\Component\String\Slugger\AsciiSlugger('en-GB'));
            yield 1 => ($container->privates['translator.default'] ?? self::getTranslator_DefaultService($container));
        }, 2), ($container->privates['router.request_context'] ?? self::getRouter_RequestContextService($container)));
    }

    /**
     * Gets the private 'translation.provider_collection' shared service.
     *
     * @return \Symfony\Component\Translation\Provider\TranslationProviderCollection
     */
    protected static function getTranslation_ProviderCollectionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Provider/TranslationProviderCollection.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Provider/TranslationProviderCollectionFactory.php';

        return $container->privates['translation.provider_collection'] = (new \Symfony\Component\Translation\Provider\TranslationProviderCollectionFactory(new RewindableGenerator(function () use ($container) {
            yield 0 => (new \Symfony\Component\Translation\Provider\NullProviderFactory());
        }, 1), []))->fromConfig([]);
    }

    /**
     * Gets the private 'translation.reader' shared service.
     *
     * @return \Symfony\Component\Translation\Reader\TranslationReader
     */
    protected static function getTranslation_ReaderService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Reader/TranslationReaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Reader/TranslationReader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/LoaderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/ArrayLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/FileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/PhpFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/YamlFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/XliffFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/PoFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/MoFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/QtFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/CsvFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/IcuResFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/IcuDatFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/IniFileLoader.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Loader/JsonFileLoader.php';

        $container->privates['translation.reader'] = $instance = new \Symfony\Component\Translation\Reader\TranslationReader();

        $a = ($container->privates['translation.loader.yml'] ??= new \Symfony\Component\Translation\Loader\YamlFileLoader());
        $b = ($container->privates['translation.loader.xliff'] ??= new \Symfony\Component\Translation\Loader\XliffFileLoader());

        $instance->addLoader('php', ($container->privates['translation.loader.php'] ??= new \Symfony\Component\Translation\Loader\PhpFileLoader()));
        $instance->addLoader('yaml', $a);
        $instance->addLoader('yml', $a);
        $instance->addLoader('xlf', $b);
        $instance->addLoader('xliff', $b);
        $instance->addLoader('po', ($container->privates['translation.loader.po'] ??= new \Symfony\Component\Translation\Loader\PoFileLoader()));
        $instance->addLoader('mo', ($container->privates['translation.loader.mo'] ??= new \Symfony\Component\Translation\Loader\MoFileLoader()));
        $instance->addLoader('ts', ($container->privates['translation.loader.qt'] ??= new \Symfony\Component\Translation\Loader\QtFileLoader()));
        $instance->addLoader('csv', ($container->privates['translation.loader.csv'] ??= new \Symfony\Component\Translation\Loader\CsvFileLoader()));
        $instance->addLoader('res', ($container->privates['translation.loader.res'] ??= new \Symfony\Component\Translation\Loader\IcuResFileLoader()));
        $instance->addLoader('dat', ($container->privates['translation.loader.dat'] ??= new \Symfony\Component\Translation\Loader\IcuDatFileLoader()));
        $instance->addLoader('ini', ($container->privates['translation.loader.ini'] ??= new \Symfony\Component\Translation\Loader\IniFileLoader()));
        $instance->addLoader('json', ($container->privates['translation.loader.json'] ??= new \Symfony\Component\Translation\Loader\JsonFileLoader()));

        return $instance;
    }

    /**
     * Gets the private 'translation.warmer' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\CacheWarmer\TranslationsCacheWarmer
     */
    protected static function getTranslation_WarmerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheWarmer/CacheWarmerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/CacheWarmer/TranslationsCacheWarmer.php';

        return $container->privates['translation.warmer'] = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\TranslationsCacheWarmer((new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'translator' => ['services', 'translator', 'getTranslatorService', false],
        ], [
            'translator' => '?',
        ]))->withContext('translation.warmer', $container));
    }

    /**
     * Gets the private 'translation.writer' shared service.
     *
     * @return \Symfony\Component\Translation\Writer\TranslationWriter
     */
    protected static function getTranslation_WriterService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Writer/TranslationWriterInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Writer/TranslationWriter.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/DumperInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/FileDumper.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/PhpFileDumper.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/XliffFileDumper.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/PoFileDumper.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/MoFileDumper.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/YamlFileDumper.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/QtFileDumper.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/CsvFileDumper.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/IniFileDumper.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/JsonFileDumper.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/translation/Dumper/IcuResFileDumper.php';

        $container->privates['translation.writer'] = $instance = new \Symfony\Component\Translation\Writer\TranslationWriter();

        $instance->addDumper('php', new \Symfony\Component\Translation\Dumper\PhpFileDumper());
        $instance->addDumper('xlf', new \Symfony\Component\Translation\Dumper\XliffFileDumper());
        $instance->addDumper('xliff', new \Symfony\Component\Translation\Dumper\XliffFileDumper('xliff'));
        $instance->addDumper('po', new \Symfony\Component\Translation\Dumper\PoFileDumper());
        $instance->addDumper('mo', new \Symfony\Component\Translation\Dumper\MoFileDumper());
        $instance->addDumper('yml', new \Symfony\Component\Translation\Dumper\YamlFileDumper());
        $instance->addDumper('yaml', new \Symfony\Component\Translation\Dumper\YamlFileDumper('yaml'));
        $instance->addDumper('ts', new \Symfony\Component\Translation\Dumper\QtFileDumper());
        $instance->addDumper('csv', new \Symfony\Component\Translation\Dumper\CsvFileDumper());
        $instance->addDumper('ini', new \Symfony\Component\Translation\Dumper\IniFileDumper());
        $instance->addDumper('json', new \Symfony\Component\Translation\Dumper\JsonFileDumper());
        $instance->addDumper('res', new \Symfony\Component\Translation\Dumper\IcuResFileDumper());

        return $instance;
    }

    /**
     * Gets the private 'translator.default' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\Translation\Translator
     */
    protected static function getTranslator_DefaultService($container)
    {
        $container->privates['translator.default'] = $instance = new \Symfony\Bundle\FrameworkBundle\Translation\Translator(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'translation.loader.csv' => ['privates', 'translation.loader.csv', 'getTranslation_Loader_CsvService', false],
            'translation.loader.dat' => ['privates', 'translation.loader.dat', 'getTranslation_Loader_DatService', false],
            'translation.loader.ini' => ['privates', 'translation.loader.ini', 'getTranslation_Loader_IniService', false],
            'translation.loader.json' => ['privates', 'translation.loader.json', 'getTranslation_Loader_JsonService', false],
            'translation.loader.mo' => ['privates', 'translation.loader.mo', 'getTranslation_Loader_MoService', false],
            'translation.loader.php' => ['privates', 'translation.loader.php', 'getTranslation_Loader_PhpService', false],
            'translation.loader.po' => ['privates', 'translation.loader.po', 'getTranslation_Loader_PoService', false],
            'translation.loader.qt' => ['privates', 'translation.loader.qt', 'getTranslation_Loader_QtService', false],
            'translation.loader.res' => ['privates', 'translation.loader.res', 'getTranslation_Loader_ResService', false],
            'translation.loader.xliff' => ['privates', 'translation.loader.xliff', 'getTranslation_Loader_XliffService', false],
            'translation.loader.yml' => ['privates', 'translation.loader.yml', 'getTranslation_Loader_YmlService', false],
        ], [
            'translation.loader.csv' => '?',
            'translation.loader.dat' => '?',
            'translation.loader.ini' => '?',
            'translation.loader.json' => '?',
            'translation.loader.mo' => '?',
            'translation.loader.php' => '?',
            'translation.loader.po' => '?',
            'translation.loader.qt' => '?',
            'translation.loader.res' => '?',
            'translation.loader.xliff' => '?',
            'translation.loader.yml' => '?',
        ]), ($container->privates['translator.formatter.default'] ?? self::getTranslator_Formatter_DefaultService($container)), 'en-GB', ['translation.loader.php' => ['php'], 'translation.loader.yml' => ['yaml', 'yml'], 'translation.loader.xliff' => ['xlf', 'xliff'], 'translation.loader.po' => ['po'], 'translation.loader.mo' => ['mo'], 'translation.loader.qt' => ['ts'], 'translation.loader.csv' => ['csv'], 'translation.loader.res' => ['res'], 'translation.loader.dat' => ['dat'], 'translation.loader.ini' => ['ini'], 'translation.loader.json' => ['json']], ['cache_dir' => ($container->targetDir.''.'/translations'), 'debug' => true, 'resource_files' => ['af' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.af.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.af.xlf')], 'ar' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.ar.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ar.xlf')], 'az' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.az.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.az.xlf')], 'be' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.be.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.be.xlf')], 'bg' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.bg.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.bg.xlf')], 'bs' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.bs.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.bs.xlf')], 'ca' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.ca.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ca.xlf')], 'cs' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.cs.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.cs.xlf')], 'cy' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.cy.xlf')], 'da' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.da.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.da.xlf')], 'de' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.de.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.de.xlf')], 'el' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.el.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.el.xlf')], 'en' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.en.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.en.xlf')], 'es' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.es.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.es.xlf')], 'et' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.et.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.et.xlf')], 'eu' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.eu.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.eu.xlf')], 'fa' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.fa.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.fa.xlf')], 'fi' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.fi.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.fi.xlf')], 'fr' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.fr.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.fr.xlf')], 'gl' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.gl.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.gl.xlf')], 'he' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.he.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.he.xlf')], 'hr' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.hr.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.hr.xlf')], 'hu' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.hu.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.hu.xlf')], 'hy' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.hy.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.hy.xlf')], 'id' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.id.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.id.xlf')], 'it' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.it.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.it.xlf')], 'ja' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.ja.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ja.xlf')], 'lb' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.lb.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.lb.xlf')], 'lt' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.lt.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.lt.xlf')], 'lv' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.lv.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.lv.xlf')], 'mk' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.mk.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.mk.xlf')], 'mn' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.mn.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.mn.xlf')], 'my' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.my.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.my.xlf')], 'nb' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.nb.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.nb.xlf')], 'nl' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.nl.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.nl.xlf')], 'nn' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.nn.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.nn.xlf')], 'no' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.no.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.no.xlf')], 'pl' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.pl.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.pl.xlf')], 'pt' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.pt.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.pt.xlf')], 'pt_BR' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.pt_BR.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.pt_BR.xlf')], 'ro' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.ro.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ro.xlf')], 'ru' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.ru.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ru.xlf')], 'sk' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.sk.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sk.xlf')], 'sl' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.sl.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sl.xlf')], 'sq' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.sq.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sq.xlf')], 'sr_Cyrl' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.sr_Cyrl.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sr_Cyrl.xlf')], 'sr_Latn' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.sr_Latn.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sr_Latn.xlf')], 'sv' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.sv.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.sv.xlf')], 'th' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.th.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.th.xlf')], 'tl' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.tl.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.tl.xlf')], 'tr' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.tr.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.tr.xlf')], 'uk' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.uk.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.uk.xlf')], 'ur' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.ur.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.ur.xlf')], 'uz' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.uz.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.uz.xlf')], 'vi' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.vi.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.vi.xlf')], 'zh_CN' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.zh_CN.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.zh_CN.xlf')], 'zh_TW' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations/validators.zh_TW.xlf'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations/security.zh_TW.xlf')], 'de-DE' => [(\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources/snippet/de_DE/storefront.de-DE.json')], 'en-GB' => [(\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources/snippet/en_GB/storefront.en-GB.json')]], 'scanned_directories' => [(\dirname(__DIR__, 4).'/vendor/symfony/validator/Resources/translations'), (\dirname(__DIR__, 4).'/vendor/symfony/security-core/Resources/translations'), (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources/snippet'), (\dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/symfony/twig-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/symfony/monolog-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/symfony/debug-bundle/translations'), (\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/translations'), (\dirname(__DIR__, 4).'/vendor/shopware/core/System/translations'), (\dirname(__DIR__, 4).'/vendor/shopware/core/Content/translations'), (\dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/translations'), (\dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance/translations'), (\dirname(__DIR__, 4).'/vendor/shopware/core/Profiling/translations'), (\dirname(__DIR__, 4).'/vendor/shopware/administration/translations'), (\dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/translations'), (\dirname(__DIR__, 4).'/vendor/shopware/storefront/translations'), (\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/KernelPluginLoader/translations')], 'cache_vary' => ['scanned_directories' => ['vendor/symfony/validator/Resources/translations', 'vendor/symfony/security-core/Resources/translations', 'vendor/shopware/storefront/Resources/snippet', 'vendor/symfony/framework-bundle/translations', 'vendor/symfony/twig-bundle/translations', 'vendor/symfony/monolog-bundle/translations', 'vendor/symfony/debug-bundle/translations', 'vendor/shopware/core/Framework/translations', 'vendor/shopware/core/System/translations', 'vendor/shopware/core/Content/translations', 'vendor/shopware/core/Checkout/translations', 'vendor/shopware/core/Maintenance/translations', 'vendor/shopware/core/Profiling/translations', 'vendor/shopware/administration/translations', 'vendor/shopware/elasticsearch/translations', 'vendor/shopware/storefront/translations', 'vendor/shopware/core/Framework/Plugin/KernelPluginLoader/translations']]], []);

        $instance->setConfigCacheFactory(($container->privates['config_cache_factory'] ?? self::getConfigCacheFactoryService($container)));
        $instance->setFallbackLocales(['en_GB', 'en']);

        return $instance;
    }

    /**
     * Gets the private 'translator.formatter.default' shared service.
     *
     * @return \Symfony\Component\Translation\Formatter\MessageFormatter
     */
    protected static function getTranslator_Formatter_DefaultService($container)
    {
        return $container->privates['translator.formatter.default'] = new \Symfony\Component\Translation\Formatter\MessageFormatter(new \Symfony\Component\Translation\IdentityTranslator());
    }

    /**
     * Gets the private 'twig.command.debug' shared service.
     *
     * @return \Symfony\Bridge\Twig\Command\DebugCommand
     */
    protected static function getTwig_Command_DebugService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Command/DebugCommand.php';

        $container->privates['twig.command.debug'] = $instance = new \Symfony\Bridge\Twig\Command\DebugCommand(($container->services['twig'] ?? self::getTwigService($container)), \dirname(__DIR__, 4), $container->parameters['kernel.bundles_metadata'], (\dirname(__DIR__, 4).'/templates'), ($container->privates['debug.file_link_formatter'] ??= new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter($container->getEnv('default::SYMFONY_IDE'))));

        $instance->setName('debug:twig');
        $instance->setDescription('Show a list of twig functions, filters, globals and tests');

        return $instance;
    }

    /**
     * Gets the private 'twig.command.lint' shared service.
     *
     * @return \Symfony\Bundle\TwigBundle\Command\LintCommand
     */
    protected static function getTwig_Command_LintService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Command/LintCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bundle/Command/LintCommand.php';

        $container->privates['twig.command.lint'] = $instance = new \Symfony\Bundle\TwigBundle\Command\LintCommand(($container->services['twig'] ?? self::getTwigService($container)), ['*.twig']);

        $instance->setName('lint:twig');
        $instance->setDescription('Lint a Twig template and outputs encountered errors');

        return $instance;
    }

    /**
     * Gets the private 'twig.extension.trans' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\TranslationExtension
     */
    protected static function getTwig_Extension_TransService($container)
    {
        $a = ($container->services['translator'] ?? self::getTranslatorService($container));

        if (isset($container->privates['twig.extension.trans'])) {
            return $container->privates['twig.extension.trans'];
        }

        return $container->privates['twig.extension.trans'] = new \Symfony\Bridge\Twig\Extension\TranslationExtension($a);
    }

    /**
     * Gets the private 'twig.loader.chain' shared service.
     *
     * @return \Twig\Loader\ChainLoader
     */
    protected static function getTwig_Loader_ChainService($container)
    {
        $container->privates['twig.loader.chain'] = $instance = new \Twig\Loader\ChainLoader();

        $a = new \Twig\Loader\FilesystemLoader([], \dirname(__DIR__, 4));
        $a->addPath((\dirname(__DIR__, 4).'/vendor/symfony/debug-bundle/Resources/views'), 'Debug');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/symfony/debug-bundle/Resources/views'), '!Debug');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Resources/views'), 'Framework');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Resources/views'), '!Framework');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/core/Profiling/Resources/views'), 'Profiling');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/core/Profiling/Resources/views'), '!Profiling');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/administration/Resources/views'), 'Administration');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/administration/Resources/views'), '!Administration');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Resources/views'), 'Elasticsearch');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Resources/views'), '!Elasticsearch');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources/views'), 'Storefront');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources/views'), '!Storefront');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Resources/views/Email'), 'email');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Resources/views/Email'), '!email');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/Resources'), 'FrameworkBundle');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/symfony/twig-bundle/Resources'), 'TwigBundle');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/symfony/monolog-bundle/Resources'), 'MonologBundle');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/symfony/debug-bundle/Resources/views'));
        $a->addPath((\dirname(__DIR__, 4).'/vendor/symfony/debug-bundle/Resources/views'), 'DebugBundle');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/symfony/debug-bundle/Resources'), 'DebugBundle');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Resources/views'));
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Resources/views'), 'Framework');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Resources'), 'Framework');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/core/System/Resources'), 'System');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/core/Content/Resources'), 'Content');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/core/Checkout/Resources'), 'Checkout');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/core/Profiling/Resources/views'));
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/core/Profiling/Resources/views'), 'Profiling');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/core/Profiling/Resources'), 'Profiling');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/administration/Resources/views'));
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/administration/Resources/views'), 'Administration');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/administration/Resources'), 'Administration');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Resources/views'));
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Resources/views'), 'Elasticsearch');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/elasticsearch/Resources'), 'Elasticsearch');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources/views'));
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources/views'), 'Storefront');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources/views/../app/storefront/dist'), 'Storefront');
        $a->addPath((\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources'), 'Storefront');

        $instance->addLoader(($container->privates['Shopware\\Core\\Framework\\Adapter\\Twig\\EntityTemplateLoader'] ?? self::getEntityTemplateLoaderService($container)));
        $instance->addLoader($a);

        return $instance;
    }

    /**
     * Gets the private 'twig.mailer.message_listener' shared service.
     *
     * @return \Symfony\Component\Mailer\EventListener\MessageListener
     */
    protected static function getTwig_Mailer_MessageListenerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mailer/EventListener/MessageListener.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/mime/BodyRendererInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Mime/BodyRenderer.php';

        $a = ($container->services['twig'] ?? self::getTwigService($container));

        if (isset($container->privates['twig.mailer.message_listener'])) {
            return $container->privates['twig.mailer.message_listener'];
        }

        return $container->privates['twig.mailer.message_listener'] = new \Symfony\Component\Mailer\EventListener\MessageListener(NULL, new \Symfony\Bridge\Twig\Mime\BodyRenderer($a));
    }

    /**
     * Gets the private 'twig.runtime.httpkernel' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\HttpKernelRuntime
     */
    protected static function getTwig_Runtime_HttpkernelService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/HttpKernelRuntime.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/FragmentHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/DependencyInjection/LazyLoadingFragmentHandler.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/FragmentUriGeneratorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/Fragment/FragmentUriGenerator.php';

        $a = ($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack());

        return $container->privates['twig.runtime.httpkernel'] = new \Symfony\Bridge\Twig\Extension\HttpKernelRuntime(new \Symfony\Component\HttpKernel\DependencyInjection\LazyLoadingFragmentHandler(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'esi' => ['privates', 'fragment.renderer.esi', 'getFragment_Renderer_EsiService', false],
            'hinclude' => ['privates', 'fragment.renderer.hinclude', 'getFragment_Renderer_HincludeService', false],
            'inline' => ['privates', 'fragment.renderer.inline', 'getFragment_Renderer_InlineService', false],
        ], [
            'esi' => '?',
            'hinclude' => '?',
            'inline' => '?',
        ]), $a, true), new \Symfony\Component\HttpKernel\Fragment\FragmentUriGenerator('/_fragment', ($container->privates['uri_signer'] ??= new \Symfony\Component\HttpKernel\UriSigner($container->getEnv('APP_SECRET'))), $a));
    }

    /**
     * Gets the private 'twig.runtime.serializer' shared service.
     *
     * @return \Symfony\Bridge\Twig\Extension\SerializerRuntime
     */
    protected static function getTwig_Runtime_SerializerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/twig/twig/src/Extension/RuntimeExtensionInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/twig-bridge/Extension/SerializerRuntime.php';

        $a = ($container->privates['serializer'] ?? self::getSerializerService($container));

        if (isset($container->privates['twig.runtime.serializer'])) {
            return $container->privates['twig.runtime.serializer'];
        }

        return $container->privates['twig.runtime.serializer'] = new \Symfony\Bridge\Twig\Extension\SerializerRuntime($a);
    }

    /**
     * Gets the private 'validator.builder' shared service.
     *
     * @return \Symfony\Component\Validator\ValidatorBuilder
     */
    protected static function getValidator_BuilderService($container)
    {
        $container->privates['validator.builder'] = $instance = \Symfony\Component\Validator\Validation::createValidatorBuilder();

        $a = ($container->privates['property_info'] ?? self::getPropertyInfoService($container));

        $instance->setConstraintValidatorFactory(new \Symfony\Component\Validator\ContainerConstraintValidatorFactory(new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService ??= $container->getService(...), [
            'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerEmailUniqueValidator' => ['privates', 'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerEmailUniqueValidator', 'getCustomerEmailUniqueValidatorService', false],
            'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerPasswordMatchesValidator' => ['privates', 'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerPasswordMatchesValidator', 'getCustomerPasswordMatchesValidatorService', false],
            'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerVatIdentificationValidator' => ['privates', 'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerVatIdentificationValidator', 'getCustomerVatIdentificationValidatorService', false],
            'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerZipCodeValidator' => ['privates', 'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerZipCodeValidator', 'getCustomerZipCodeValidatorService', false],
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityExistsValidator' => ['privates', 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityExistsValidator', 'getEntityExistsValidatorService', false],
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityNotExistsValidator' => ['privates', 'Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityNotExistsValidator', 'getEntityNotExistsValidatorService', false],
            'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => ['privates', 'validator.email', 'getValidator_EmailService', false],
            'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => ['privates', 'validator.expression', 'getValidator_ExpressionService', false],
            'Symfony\\Component\\Validator\\Constraints\\NoSuspiciousCharactersValidator' => ['privates', 'validator.no_suspicious_characters', 'getValidator_NoSuspiciousCharactersService', false],
            'Symfony\\Component\\Validator\\Constraints\\NotCompromisedPasswordValidator' => ['privates', 'validator.not_compromised_password', 'getValidator_NotCompromisedPasswordService', false],
            'Symfony\\Component\\Validator\\Constraints\\WhenValidator' => ['privates', 'validator.when', 'getValidator_WhenService', false],
            'validator.expression' => ['privates', 'validator.expression', 'getValidator_ExpressionService', false],
        ], [
            'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerEmailUniqueValidator' => '?',
            'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerPasswordMatchesValidator' => '?',
            'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerVatIdentificationValidator' => '?',
            'Shopware\\Core\\Checkout\\Customer\\Validation\\Constraint\\CustomerZipCodeValidator' => '?',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityExistsValidator' => '?',
            'Shopware\\Core\\Framework\\DataAbstractionLayer\\Validation\\EntityNotExistsValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\EmailValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\ExpressionValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\NoSuspiciousCharactersValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\NotCompromisedPasswordValidator' => '?',
            'Symfony\\Component\\Validator\\Constraints\\WhenValidator' => '?',
            'validator.expression' => '?',
        ])));
        if ($container->has('translator')) {
            $instance->setTranslator(($container->services['translator'] ?? self::getTranslatorService($container)));
        }
        $instance->setTranslationDomain('validators');
        $instance->enableAnnotationMapping(true);
        $instance->setDoctrineAnnotationReader(($container->privates['annotations.cached_reader'] ?? self::getAnnotations_CachedReaderService($container)));
        $instance->addMethodMapping('loadValidatorMetadata');
        $instance->addObjectInitializers([]);
        $instance->addLoader(new \Symfony\Component\Validator\Mapping\Loader\PropertyInfoLoader($a, $a, $a, NULL));

        return $instance;
    }

    /**
     * Gets the private 'validator.email' shared service.
     *
     * @return \Symfony\Component\Validator\Constraints\EmailValidator
     */
    protected static function getValidator_EmailService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Constraints/EmailValidator.php';

        return $container->privates['validator.email'] = new \Symfony\Component\Validator\Constraints\EmailValidator('html5');
    }

    /**
     * Gets the private 'validator.expression' shared service.
     *
     * @return \Symfony\Component\Validator\Constraints\ExpressionValidator
     */
    protected static function getValidator_ExpressionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Constraints/ExpressionValidator.php';

        return $container->privates['validator.expression'] = new \Symfony\Component\Validator\Constraints\ExpressionValidator(NULL);
    }

    /**
     * Gets the private 'validator.mapping.cache_warmer' shared service.
     *
     * @return \Symfony\Bundle\FrameworkBundle\CacheWarmer\ValidatorCacheWarmer
     */
    protected static function getValidator_Mapping_CacheWarmerService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/http-kernel/CacheWarmer/CacheWarmerInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/CacheWarmer/AbstractPhpFileCacheWarmer.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/framework-bundle/CacheWarmer/ValidatorCacheWarmer.php';

        return $container->privates['validator.mapping.cache_warmer'] = new \Symfony\Bundle\FrameworkBundle\CacheWarmer\ValidatorCacheWarmer(($container->privates['validator.builder'] ?? self::getValidator_BuilderService($container)), ($container->targetDir.''.'/validation.php'));
    }

    /**
     * Gets the private 'validator.no_suspicious_characters' shared service.
     *
     * @return \Symfony\Component\Validator\Constraints\NoSuspiciousCharactersValidator
     */
    protected static function getValidator_NoSuspiciousCharactersService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Constraints/NoSuspiciousCharactersValidator.php';

        return $container->privates['validator.no_suspicious_characters'] = new \Symfony\Component\Validator\Constraints\NoSuspiciousCharactersValidator([]);
    }

    /**
     * Gets the private 'validator.not_compromised_password' shared service.
     *
     * @return \Symfony\Component\Validator\Constraints\NotCompromisedPasswordValidator
     */
    protected static function getValidator_NotCompromisedPasswordService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Constraints/NotCompromisedPasswordValidator.php';

        return $container->privates['validator.not_compromised_password'] = new \Symfony\Component\Validator\Constraints\NotCompromisedPasswordValidator(($container->privates['http_client.uri_template'] ?? self::getHttpClient_UriTemplateService($container)), 'UTF-8', true, NULL);
    }

    /**
     * Gets the private 'validator.when' shared service.
     *
     * @return \Symfony\Component\Validator\Constraints\WhenValidator
     */
    protected static function getValidator_WhenService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidatorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/ConstraintValidator.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/validator/Constraints/WhenValidator.php';

        return $container->privates['validator.when'] = new \Symfony\Component\Validator\Constraints\WhenValidator(NULL);
    }

    /**
     * Gets the private 'var_dumper.command.server_dump' shared service.
     *
     * @return \Symfony\Component\VarDumper\Command\ServerDumpCommand
     */
    protected static function getVarDumper_Command_ServerDumpService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/console/Command/Command.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/var-dumper/Command/ServerDumpCommand.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/var-dumper/Server/DumpServer.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/var-dumper/Command/Descriptor/DumpDescriptorInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/var-dumper/Command/Descriptor/CliDescriptor.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/var-dumper/Command/Descriptor/HtmlDescriptor.php';

        $a = new \Symfony\Bridge\Monolog\Logger('debug');
        $a->pushHandler(($container->privates['monolog.handler.console'] ?? self::getMonolog_Handler_ConsoleService($container)));
        $a->pushHandler(($container->privates['Shopware\\Core\\Framework\\Log\\Monolog\\ExcludeFlowEventHandler'] ?? self::getExcludeFlowEventHandlerService($container)));

        $container->privates['var_dumper.command.server_dump'] = $instance = new \Symfony\Component\VarDumper\Command\ServerDumpCommand(new \Symfony\Component\VarDumper\Server\DumpServer('tcp://'.$container->getEnv('string:VAR_DUMPER_SERVER'), $a), ['cli' => new \Symfony\Component\VarDumper\Command\Descriptor\CliDescriptor(($container->privates['var_dumper.contextualized_cli_dumper.inner'] ?? self::getVarDumper_ContextualizedCliDumper_InnerService($container))), 'html' => new \Symfony\Component\VarDumper\Command\Descriptor\HtmlDescriptor(($container->privates['var_dumper.html_dumper'] ?? self::getVarDumper_HtmlDumperService($container)))]);

        $instance->setName('server:dump');
        $instance->setDescription('Start a dump server that collects and displays dumps in a single place');

        return $instance;
    }

    /**
     * Gets the private 'var_dumper.contextualized_cli_dumper.inner' shared service.
     *
     * @return \Symfony\Component\VarDumper\Dumper\CliDumper
     */
    protected static function getVarDumper_ContextualizedCliDumper_InnerService($container)
    {
        $container->privates['var_dumper.contextualized_cli_dumper.inner'] = $instance = new \Symfony\Component\VarDumper\Dumper\CliDumper(NULL, 'UTF-8', 0);

        $instance->setDisplayOptions(['fileLinkFormat' => ($container->privates['debug.file_link_formatter'] ??= new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter($container->getEnv('default::SYMFONY_IDE')))]);

        return $instance;
    }

    /**
     * Gets the private 'var_dumper.html_dumper' shared service.
     *
     * @return \Symfony\Component\VarDumper\Dumper\HtmlDumper
     */
    protected static function getVarDumper_HtmlDumperService($container)
    {
        $container->privates['var_dumper.html_dumper'] = $instance = new \Symfony\Component\VarDumper\Dumper\HtmlDumper(NULL, 'UTF-8', 0);

        $instance->setDisplayOptions(['fileLinkFormat' => ($container->privates['debug.file_link_formatter'] ??= new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter($container->getEnv('default::SYMFONY_IDE')))]);

        return $instance;
    }

    /**
     * Gets the private 'var_dumper.server_connection' shared service.
     *
     * @return \Symfony\Component\VarDumper\Server\Connection
     */
    protected static function getVarDumper_ServerConnectionService($container)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/var-dumper/Server/Connection.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/var-dumper/Dumper/ContextProvider/ContextProviderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/var-dumper/Dumper/ContextProvider/SourceContextProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/var-dumper/Dumper/ContextProvider/RequestContextProvider.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/var-dumper/Dumper/ContextProvider/CliContextProvider.php';

        return $container->privates['var_dumper.server_connection'] = new \Symfony\Component\VarDumper\Server\Connection('tcp://'.$container->getEnv('string:VAR_DUMPER_SERVER'), ['source' => new \Symfony\Component\VarDumper\Dumper\ContextProvider\SourceContextProvider('UTF-8', \dirname(__DIR__, 4), ($container->privates['debug.file_link_formatter'] ??= new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter($container->getEnv('default::SYMFONY_IDE')))), 'request' => new \Symfony\Component\VarDumper\Dumper\ContextProvider\RequestContextProvider(($container->services['request_stack'] ??= new \Symfony\Component\HttpFoundation\RequestStack())), 'cli' => new \Symfony\Component\VarDumper\Dumper\ContextProvider\CliContextProvider()]);
    }

    public function getParameter(string $name): array|bool|string|int|float|\UnitEnum|null
    {
        if (isset($this->buildParameters[$name])) {
            return $this->buildParameters[$name];
        }

        if (!(isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters))) {
            throw new ParameterNotFoundException($name);
        }
        if (isset($this->loadedDynamicParameters[$name])) {
            return $this->loadedDynamicParameters[$name] ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
        }

        return $this->parameters[$name];
    }

    public function hasParameter(string $name): bool
    {
        if (isset($this->buildParameters[$name])) {
            return true;
        }

        return isset($this->parameters[$name]) || isset($this->loadedDynamicParameters[$name]) || \array_key_exists($name, $this->parameters);
    }

    public function setParameter(string $name, $value): void
    {
        throw new LogicException('Impossible to call set() on a frozen ParameterBag.');
    }

    public function getParameterBag(): ParameterBagInterface
    {
        if (null === $this->parameterBag) {
            $parameters = $this->parameters;
            foreach ($this->loadedDynamicParameters as $name => $loaded) {
                $parameters[$name] = $loaded ? $this->dynamicParameters[$name] : $this->getDynamicParameter($name);
            }
            foreach ($this->buildParameters as $name => $value) {
                $parameters[$name] = $value;
            }
            $this->parameterBag = new FrozenParameterBag($parameters);
        }

        return $this->parameterBag;
    }

    private $loadedDynamicParameters = [
        'kernel.runtime_environment' => false,
        'kernel.build_dir' => false,
        'kernel.cache_dir' => false,
        'APP_URL' => false,
        'shopware.routing.registered_api_prefixes' => false,
        'shopware.dbal.time_zone_support_enabled' => false,
        'shopware.dbal.token_minimum_length' => false,
        'instance_id' => false,
        'shopware_administration.path_name' => false,
        'shopware.http.cache.enabled' => false,
        'shopware.http.cache.default_ttl' => false,
        'shopware.cdn.strategy' => false,
        'kernel.secret' => false,
        'debug.file_link_format' => false,
        'debug.container.dump' => false,
        'router.cache_dir' => false,
        'serializer.mapping.cache.file' => false,
        'validator.mapping.cache.file' => false,
        'shopware.cdn' => false,
        'shopware.deployment' => false,
        'shopware.deployment.blue_green' => false,
        'shopware.html_sanitizer' => false,
        'shopware.html_sanitizer.cache_dir' => false,
        'shopware.cache' => false,
        'shopware.cache.redis_prefix' => false,
        'elasticsearch.enabled' => false,
        'elasticsearch.indexing_enabled' => false,
        'elasticsearch.indexing_batch_size' => false,
        'elasticsearch.hosts' => false,
        'elasticsearch.index_prefix' => false,
        'elasticsearch.throw_exception' => false,
        'elasticsearch.administration' => false,
        'elasticsearch.administration.hosts' => false,
        'elasticsearch.administration.enabled' => false,
        'elasticsearch.administration.refresh_indices' => false,
        'elasticsearch.administration.index_prefix' => false,
        'elasticsearch.product' => false,
        'elasticsearch.product.exclude_source' => false,
        'elasticsearch.logger_level' => false,
        'twig.cache' => false,
    ];
    private $dynamicParameters = [];

    private function getDynamicParameter(string $name)
    {
        $container = $this;
        $value = match ($name) {
            'kernel.runtime_environment' => $container->getEnv('default:kernel.environment:APP_RUNTIME_ENV'),
            'kernel.build_dir' => $container->targetDir.'',
            'kernel.cache_dir' => $container->targetDir.'',
            'APP_URL' => $container->getEnv('string:APP_URL'),
            'shopware.routing.registered_api_prefixes' => [
                0 => '_wdt',
                1 => '_profiler',
                2 => '_error',
                3 => 'api',
                4 => 'sw-domain-hash.html',
                5 => 'store-api',
                6 => $container->getEnv('resolve:SHOPWARE_ADMINISTRATION_PATH_NAME'),
                7 => 'api',
            ],
            'shopware.dbal.time_zone_support_enabled' => $container->getEnv('bool:SHOPWARE_DBAL_TIMEZONE_SUPPORT_ENABLED'),
            'shopware.dbal.token_minimum_length' => $container->getEnv('int:SHOPWARE_DBAL_TOKEN_MINIMUM_LENGTH'),
            'instance_id' => $container->getEnv('INSTANCE_ID'),
            'shopware_administration.path_name' => $container->getEnv('resolve:SHOPWARE_ADMINISTRATION_PATH_NAME'),
            'shopware.http.cache.enabled' => $container->getEnv('default:shopware_http_cache_enabled_default:SHOPWARE_HTTP_CACHE_ENABLED'),
            'shopware.http.cache.default_ttl' => $container->getEnv('default:shopware_http_cache_default_ttl_default:SHOPWARE_HTTP_DEFAULT_TTL'),
            'shopware.cdn.strategy' => $container->getEnv('default:default_cdn_strategy:SHOPWARE_CDN_STRATEGY_DEFAULT'),
            'kernel.secret' => $container->getEnv('APP_SECRET'),
            'debug.file_link_format' => $container->getEnv('default::SYMFONY_IDE'),
            'debug.container.dump' => ($container->targetDir.''.'/Shopware_Core_KernelDevDebugContainer.xml'),
            'router.cache_dir' => $container->targetDir.'',
            'serializer.mapping.cache.file' => ($container->targetDir.''.'/serialization.php'),
            'validator.mapping.cache.file' => ($container->targetDir.''.'/validation.php'),
            'shopware.cdn' => [
                'url' => '',
                'strategy' => $container->getEnv('string:default:default_cdn_strategy:SHOPWARE_CDN_STRATEGY_DEFAULT'),
            ],
            'shopware.deployment' => [
                'blue_green' => $container->getEnv('bool:default:defaults_bool_true:BLUE_GREEN_DEPLOYMENT'),
                'cluster_setup' => false,
            ],
            'shopware.deployment.blue_green' => $container->getEnv('bool:default:defaults_bool_true:BLUE_GREEN_DEPLOYMENT'),
            'shopware.html_sanitizer' => [
                'enabled' => true,
                'cache_dir' => $container->targetDir.'',
                'cache_enabled' => true,
                'sets' => [
                    'basic' => [
                        'tags' => [
                            0 => 'a',
                            1 => 'abbr',
                            2 => 'acronym',
                            3 => 'address',
                            4 => 'b',
                            5 => 'bdo',
                            6 => 'big',
                            7 => 'blockquote',
                            8 => 'br',
                            9 => 'caption',
                            10 => 'center',
                            11 => 'cite',
                            12 => 'code',
                            13 => 'col',
                            14 => 'colgroup',
                            15 => 'dd',
                            16 => 'del',
                            17 => 'dfn',
                            18 => 'dir',
                            19 => 'div',
                            20 => 'dl',
                            21 => 'dt',
                            22 => 'em',
                            23 => 'font',
                            24 => 'h1',
                            25 => 'h2',
                            26 => 'h3',
                            27 => 'h4',
                            28 => 'h5',
                            29 => 'h6',
                            30 => 'hr',
                            31 => 'i',
                            32 => 'ins',
                            33 => 'kbd',
                            34 => 'li',
                            35 => 'menu',
                            36 => 'ol',
                            37 => 'p',
                            38 => 'pre',
                            39 => 'q',
                            40 => 's',
                            41 => 'samp',
                            42 => 'small',
                            43 => 'span',
                            44 => 'strike',
                            45 => 'strong',
                            46 => 'sub',
                            47 => 'sup',
                            48 => 'table',
                            49 => 'tbody',
                            50 => 'td',
                            51 => 'tfoot',
                            52 => 'th',
                            53 => 'thead',
                            54 => 'tr',
                            55 => 'tt',
                            56 => 'u',
                            57 => 'ul',
                            58 => 'var',
                            59 => 'img',
                        ],
                        'attributes' => [
                            0 => 'align',
                            1 => 'bgcolor',
                            2 => 'border',
                            3 => 'cellpadding',
                            4 => 'cellspacing',
                            5 => 'cite',
                            6 => 'class',
                            7 => 'clear',
                            8 => 'color',
                            9 => 'colspan',
                            10 => 'dir',
                            11 => 'face',
                            12 => 'frame',
                            13 => 'height',
                            14 => 'href',
                            15 => 'id',
                            16 => 'lang',
                            17 => 'name',
                            18 => 'noshade',
                            19 => 'nowrap',
                            20 => 'rel',
                            21 => 'rev',
                            22 => 'rowspan',
                            23 => 'scope',
                            24 => 'size',
                            25 => 'span',
                            26 => 'start',
                            27 => 'style',
                            28 => 'summary',
                            29 => 'title',
                            30 => 'type',
                            31 => 'valign',
                            32 => 'value',
                            33 => 'width',
                            34 => 'target',
                            35 => 'src',
                            36 => 'alt',
                        ],
                        'options' => [
                            'Attr.AllowedFrameTargets' => [
                                'values' => [
                                    0 => '_blank',
                                    1 => '_self',
                                    2 => '_parent',
                                    3 => '_top',
                                ],
                            ],
                            'Attr.AllowedRel' => [
                                'values' => [
                                    0 => 'nofollow',
                                    1 => 'print',
                                ],
                            ],
                            'Attr.EnableID' => true,
                        ],
                        'custom_attributes' => [

                        ],
                    ],
                    'media' => [
                        'tags' => [
                            0 => 'img',
                        ],
                        'attributes' => [
                            0 => 'src',
                            1 => 'alt',
                        ],
                        'custom_attributes' => [

                        ],
                        'options' => [

                        ],
                    ],
                    'script' => [
                        'tags' => [
                            0 => 'script',
                        ],
                        'options' => [
                            'HTML.Trusted' => true,
                        ],
                        'attributes' => [

                        ],
                        'custom_attributes' => [

                        ],
                    ],
                    'tidy' => [
                        'options' => [
                            'Output.TidyFormat' => true,
                        ],
                        'tags' => [

                        ],
                        'attributes' => [

                        ],
                        'custom_attributes' => [

                        ],
                    ],
                    'bootstrap' => [
                        'tags' => [
                            0 => 'a',
                            1 => 'span',
                        ],
                        'attributes' => [
                            0 => 'role',
                            1 => 'aria-label',
                            2 => 'aria-labelledly',
                            3 => 'aria-current',
                            4 => 'aria-expanded',
                            5 => 'aria-controls',
                            6 => 'aria-hidden',
                            7 => 'aria-describedby',
                            8 => 'tabindex',
                            9 => 'aria-modal',
                            10 => 'data-bs-toggle',
                            11 => 'data-bs-target',
                            12 => 'data-bs-dismiss',
                            13 => 'data-bs-slide',
                            14 => 'data-bs-slide-to',
                            15 => 'data-bs-parent',
                            16 => 'data-bs-config',
                            17 => 'data-bs-content',
                            18 => 'data-bs-spy',
                        ],
                        'custom_attributes' => [
                            0 => [
                                'tags' => [
                                    0 => 'a',
                                    1 => 'span',
                                ],
                                'attributes' => [
                                    0 => 'href',
                                    1 => 'role',
                                    2 => 'aria-label',
                                    3 => 'aria-labelledly',
                                    4 => 'aria-current',
                                    5 => 'aria-expanded',
                                    6 => 'aria-controls',
                                    7 => 'aria-hidden',
                                    8 => 'aria-describedby',
                                    9 => 'tabindex',
                                    10 => 'aria-modal',
                                    11 => 'data-bs-toggle',
                                    12 => 'data-bs-target',
                                    13 => 'data-bs-dismiss',
                                    14 => 'data-bs-slide',
                                    15 => 'data-bs-slide-to',
                                    16 => 'data-bs-parent',
                                    17 => 'data-bs-config',
                                    18 => 'data-bs-content',
                                    19 => 'data-bs-spy',
                                ],
                            ],
                        ],
                        'options' => [

                        ],
                    ],
                    'snippet' => [
                        'tags' => [
                            0 => 'a',
                        ],
                        'attributes' => [
                            0 => 'data-url',
                            1 => 'data-ajax-modal',
                        ],
                        'custom_attributes' => [
                            0 => [
                                'tags' => [
                                    0 => 'a',
                                ],
                                'attributes' => [
                                    0 => 'data-url',
                                    1 => 'data-ajax-modal',
                                ],
                            ],
                        ],
                        'options' => [

                        ],
                    ],
                ],
                'fields' => [
                    'product_translation.description' => [
                        'sets' => [
                            0 => 'basic',
                            1 => 'media',
                        ],
                    ],
                    'app_cms_block.template' => [
                        'sets' => [
                            0 => 'basic',
                            1 => 'media',
                            2 => 'tidy',
                        ],
                    ],
                    'snippet.value' => [
                        'sets' => [
                            0 => 'basic',
                            1 => 'media',
                            2 => 'bootstrap',
                            3 => 'snippet',
                        ],
                    ],
                ],
            ],
            'shopware.html_sanitizer.cache_dir' => $container->targetDir.'',
            'shopware.cache' => [
                'redis_prefix' => $container->getEnv('REDIS_PREFIX'),
                'tagging' => [
                    'each_snippet' => true,
                    'each_config' => true,
                    'each_theme_config' => true,
                ],
                'invalidation' => [
                    'delay' => 0,
                    'delay_options' => [
                        'storage' => 'cache',
                        'dsn' => 'redis://localhost',
                    ],
                    'count' => 150,
                    'http_cache' => [
                        0 => 'logged-in',
                        1 => 'cart-filled',
                    ],
                    'product_listing_route' => [

                    ],
                    'product_detail_route' => [

                    ],
                    'product_review_route' => [

                    ],
                    'product_search_route' => [

                    ],
                    'product_suggest_route' => [

                    ],
                    'product_cross_selling_route' => [

                    ],
                    'payment_method_route' => [

                    ],
                    'shipping_method_route' => [

                    ],
                    'navigation_route' => [

                    ],
                    'category_route' => [

                    ],
                    'landing_page_route' => [

                    ],
                    'language_route' => [

                    ],
                    'currency_route' => [

                    ],
                    'country_route' => [

                    ],
                    'country_state_route' => [

                    ],
                    'salutation_route' => [

                    ],
                    'sitemap_route' => [

                    ],
                ],
                'cache_compression' => true,
            ],
            'shopware.cache.redis_prefix' => $container->getEnv('REDIS_PREFIX'),
            'elasticsearch.enabled' => $container->getEnv('bool:SHOPWARE_ES_ENABLED'),
            'elasticsearch.indexing_enabled' => $container->getEnv('bool:SHOPWARE_ES_INDEXING_ENABLED'),
            'elasticsearch.indexing_batch_size' => $container->getEnv('int:SHOPWARE_ES_INDEXING_BATCH_SIZE'),
            'elasticsearch.hosts' => $container->getEnv('string:OPENSEARCH_URL'),
            'elasticsearch.index_prefix' => $container->getEnv('string:SHOPWARE_ES_INDEX_PREFIX'),
            'elasticsearch.throw_exception' => $container->getEnv('string:SHOPWARE_ES_THROW_EXCEPTION'),
            'elasticsearch.administration' => [
                'hosts' => $container->getEnv('string:ADMIN_OPENSEARCH_URL'),
                'enabled' => $container->getEnv('bool:SHOPWARE_ADMIN_ES_ENABLED'),
                'refresh_indices' => $container->getEnv('bool:SHOPWARE_ADMIN_ES_REFRESH_INDICES'),
                'index_prefix' => $container->getEnv('string:SHOPWARE_ADMIN_ES_INDEX_PREFIX'),
                'search' => [
                    'timeout' => '5s',
                    'term_max_length' => 300,
                ],
                'index_settings' => [
                    'number_of_shards' => 3,
                    'number_of_replicas' => 3,
                    'mapping.total_fields.limit' => 50000,
                    'mapping.nested_fields.limit' => 500,
                    'mapping.nested_objects.limit' => 1000000,
                ],
                'analysis' => [
                    'normalizer' => [
                        'sw_lowercase_normalizer' => [
                            'type' => 'custom',
                            'filter' => [
                                0 => 'lowercase',
                            ],
                        ],
                    ],
                ],
                'dynamic_templates' => [
                    0 => [
                        'keywords' => [
                            'match_mapping_type' => 'string',
                            'mapping' => [
                                'type' => 'keyword',
                                'normalizer' => 'sw_lowercase_normalizer',
                                'fields' => [
                                    'text' => [
                                        'type' => 'text',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
            'elasticsearch.administration.hosts' => $container->getEnv('string:ADMIN_OPENSEARCH_URL'),
            'elasticsearch.administration.enabled' => $container->getEnv('bool:SHOPWARE_ADMIN_ES_ENABLED'),
            'elasticsearch.administration.refresh_indices' => $container->getEnv('bool:SHOPWARE_ADMIN_ES_REFRESH_INDICES'),
            'elasticsearch.administration.index_prefix' => $container->getEnv('string:SHOPWARE_ADMIN_ES_INDEX_PREFIX'),
            'elasticsearch.product' => [
                'custom_fields_mapping' => [

                ],
                'exclude_source' => $container->getEnv('bool:SHOPWARE_ES_EXCLUDE_SOURCE'),
            ],
            'elasticsearch.product.exclude_source' => $container->getEnv('bool:SHOPWARE_ES_EXCLUDE_SOURCE'),
            'elasticsearch.logger_level' => \Monolog\Level::Debug,
            'twig.cache' => ($container->targetDir.''.'/twig'),
            default => throw new ParameterNotFoundException($name),
        };
        $this->loadedDynamicParameters[$name] = true;

        return $this->dynamicParameters[$name] = $value;
    }

    protected function getDefaultParameters(): array
    {
        return [
            'kernel.project_dir' => \dirname(__DIR__, 4),
            'kernel.environment' => 'dev',
            'kernel.debug' => true,
            'kernel.logs_dir' => (\dirname(__DIR__, 3).'/log'),
            'kernel.bundles' => [
                'FrameworkBundle' => 'Symfony\\Bundle\\FrameworkBundle\\FrameworkBundle',
                'TwigBundle' => 'Symfony\\Bundle\\TwigBundle\\TwigBundle',
                'MonologBundle' => 'Symfony\\Bundle\\MonologBundle\\MonologBundle',
                'DebugBundle' => 'Symfony\\Bundle\\DebugBundle\\DebugBundle',
                'Framework' => 'Shopware\\Core\\Framework\\Framework',
                'System' => 'Shopware\\Core\\System\\System',
                'Content' => 'Shopware\\Core\\Content\\Content',
                'Checkout' => 'Shopware\\Core\\Checkout\\Checkout',
                'Maintenance' => 'Shopware\\Core\\Maintenance\\Maintenance',
                'Profiling' => 'Shopware\\Core\\Profiling\\Profiling',
                'Administration' => 'Shopware\\Administration\\Administration',
                'Elasticsearch' => 'Shopware\\Elasticsearch\\Elasticsearch',
                'Storefront' => 'Shopware\\Storefront\\Storefront',
                'DbalKernelPluginLoader' => 'Shopware\\Core\\Framework\\Plugin\\KernelPluginLoader\\DbalKernelPluginLoader',
            ],
            'kernel.bundles_metadata' => [
                'FrameworkBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/framework-bundle'),
                    'namespace' => 'Symfony\\Bundle\\FrameworkBundle',
                ],
                'TwigBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/twig-bundle'),
                    'namespace' => 'Symfony\\Bundle\\TwigBundle',
                ],
                'MonologBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/monolog-bundle'),
                    'namespace' => 'Symfony\\Bundle\\MonologBundle',
                ],
                'DebugBundle' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/symfony/debug-bundle'),
                    'namespace' => 'Symfony\\Bundle\\DebugBundle',
                ],
                'Framework' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/shopware/core/Framework'),
                    'namespace' => 'Shopware\\Core\\Framework',
                ],
                'System' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/shopware/core/System'),
                    'namespace' => 'Shopware\\Core\\System',
                ],
                'Content' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/shopware/core/Content'),
                    'namespace' => 'Shopware\\Core\\Content',
                ],
                'Checkout' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/shopware/core/Checkout'),
                    'namespace' => 'Shopware\\Core\\Checkout',
                ],
                'Maintenance' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/shopware/core/Maintenance'),
                    'namespace' => 'Shopware\\Core\\Maintenance',
                ],
                'Profiling' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/shopware/core/Profiling'),
                    'namespace' => 'Shopware\\Core\\Profiling',
                ],
                'Administration' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/shopware/administration'),
                    'namespace' => 'Shopware\\Administration',
                ],
                'Elasticsearch' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/shopware/elasticsearch'),
                    'namespace' => 'Shopware\\Elasticsearch',
                ],
                'Storefront' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/shopware/storefront'),
                    'namespace' => 'Shopware\\Storefront',
                ],
                'DbalKernelPluginLoader' => [
                    'path' => (\dirname(__DIR__, 4).'/vendor/shopware/core/Framework/Plugin/KernelPluginLoader'),
                    'namespace' => 'Shopware\\Core\\Framework\\Plugin\\KernelPluginLoader',
                ],
            ],
            'kernel.charset' => 'UTF-8',
            'kernel.container_class' => 'Shopware_Core_KernelDevDebugContainer',
            'kernel.cache.hash' => '7290e2c16fdac46b1cf04202326f2e4f',
            'kernel.shopware_version' => '6.5.7.3',
            'kernel.shopware_version_revision' => 'c49293c611793c19adf7bf7f6ef10b858d93dd31',
            'kernel.shopware_core_dir' => (\dirname(__DIR__, 4).'/vendor/shopware/core'),
            'kernel.plugin_dir' => (\dirname(__DIR__, 4).'/custom/plugins'),
            'kernel.app_dir' => (\dirname(__DIR__, 4).'/custom/apps'),
            'kernel.active_plugins' => [

            ],
            'kernel.plugin_infos' => [
                0 => [
                    'name' => 'TestPlugin',
                    'baseClass' => 'TestPlugin\\TestPlugin',
                    'active' => false,
                    'path' => 'custom/plugins/TestPlugin/',
                    'version' => '1.0.0',
                    'autoload' => [
                        'psr-4' => [
                            'TestPlugin\\' => 'src/',
                        ],
                    ],
                    'managedByComposer' => false,
                    'composerName' => 'test-plugin/test-plugin',
                ],
                1 => [
                    'name' => 'SwagPayPal',
                    'baseClass' => 'Swag\\PayPal\\SwagPayPal',
                    'active' => false,
                    'path' => 'custom/plugins/SwagPayPal/',
                    'version' => '7.3.1',
                    'autoload' => [
                        'psr-4' => [
                            'Swag\\PayPal\\' => 'src/',
                        ],
                    ],
                    'managedByComposer' => false,
                    'composerName' => 'swag/paypal',
                ],
            ],
            'kernel.supported_api_versions' => [
                0 => 2,
                1 => 3,
                2 => 4,
            ],
            'defaults_bool_true' => true,
            'defaults_bool_false' => false,
            'default_whitespace' => ' ',
            'locale' => 'en-GB',
            'messenger.default_transport_name' => 'v65',
            'env(MESSENGER_TRANSPORT_DSN)' => 'doctrine://default?auto_setup=false',
            'env(MESSENGER_TRANSPORT_LOW_PRIORITY_DSN)' => 'doctrine://default?auto_setup=false&queue_name=low_priority',
            'env(MESSENGER_TRANSPORT_FAILURE_DSN)' => 'doctrine://default?queue_name=failed&auto_setup=false',
            'env(MAILER_DSN)' => 'null://null',
            'default_cdn_strategy' => 'physical_filename',
            'env(APP_URL)' => '',
            'env(REDIS_PREFIX)' => '',
            'shopware.slug.config' => [
                'regexp' => '/([^A-Za-z0-9\\.]|-)+/',
                'lowercase' => false,
            ],
            'core.migration.directories' => [

            ],
            'migration.active' => [
                0 => 1536232600,
                1 => 1536232610,
                2 => 1536232620,
                3 => 1536232630,
                4 => 1536232640,
                5 => 1536232650,
                6 => 1536232660,
                7 => 1536232670,
                8 => 1536232680,
                9 => 1536232690,
                10 => 1536232700,
                11 => 1536232710,
                12 => 1536232720,
                13 => 1536232730,
                14 => 1536232740,
                15 => 1536232750,
                16 => 1536232760,
                17 => 1536232770,
                18 => 1536232790,
                19 => 1536232800,
                20 => 1536232810,
                21 => 1536232820,
                22 => 1536232830,
                23 => 1536232840,
                24 => 1536232850,
                25 => 1536232860,
                26 => 1536232870,
                27 => 1536232880,
                28 => 1536232890,
                29 => 1536232900,
                30 => 1536232910,
                31 => 1536232920,
                32 => 1536232930,
                33 => 1536232940,
                34 => 1536232950,
                35 => 1536232960,
                36 => 1536232970,
                37 => 1536232980,
                38 => 1536232990,
                39 => 1536233000,
                40 => 1536233010,
                41 => 1536233020,
                42 => 1536233030,
                43 => 1536233040,
                44 => 1536233050,
                45 => 1536233060,
                46 => 1536233070,
                47 => 1536233080,
                48 => 1536233090,
                49 => 1536233100,
                50 => 1536233110,
                51 => 1536233120,
                52 => 1536233130,
                53 => 1536233140,
                54 => 1536233150,
                55 => 1536233160,
                56 => 1536233170,
                57 => 1536233180,
                58 => 1536233190,
                59 => 1536233200,
                60 => 1536233210,
                61 => 1536233220,
                62 => 1536233230,
                63 => 1536233240,
                64 => 1536233250,
                65 => 1536233260,
                66 => 1536233270,
                67 => 1536233280,
                68 => 1536233290,
                69 => 1536233300,
                70 => 1536233310,
                71 => 1536233320,
                72 => 1536233330,
                73 => 1536233340,
                74 => 1536233350,
                75 => 1536233360,
                76 => 1536233370,
                77 => 1536233380,
                78 => 1536233390,
                79 => 1536233400,
                80 => 1536233410,
                81 => 1536233420,
                82 => 1536233430,
                83 => 1536233440,
                84 => 1536233450,
                85 => 1536233460,
                86 => 1536233470,
                87 => 1536233480,
                88 => 1536233500,
                89 => 1536233510,
                90 => 1536233520,
                91 => 1536233530,
                92 => 1536233540,
                93 => 1536233550,
                94 => 1536233560,
                95 => 1552360944,
                96 => 1554199340,
                97 => 1554200141,
                98 => 1554203706,
                99 => 1554900301,
                100 => 1556809270,
                101 => 1558082916,
                102 => 1558105657,
                103 => 1558443337,
                104 => 1558505525,
                105 => 1558594334,
                106 => 1558938938,
                107 => 1559050088,
                108 => 1559050903,
                109 => 1559134989,
                110 => 1559306391,
                111 => 1561370284,
                112 => 1561377793,
                113 => 1561442979,
                114 => 1561452005,
                115 => 1561712450,
                116 => 1562228335,
                117 => 1562240231,
                118 => 1562306893,
                119 => 1562324772,
                120 => 1562579120,
                121 => 1562684474,
                122 => 1562841035,
                123 => 1562933907,
                124 => 1563180880,
                125 => 1563288227,
                126 => 1563518181,
                127 => 1563805586,
                128 => 1563949275,
                129 => 1564475053,
                130 => 1565007156,
                131 => 1565079228,
                132 => 1565270155,
                133 => 1565270366,
                134 => 1565346846,
                135 => 1565705280,
                136 => 1566293076,
                137 => 1566460168,
                138 => 1566817701,
                139 => 1567431050,
                140 => 1568120239,
                141 => 1568120302,
                142 => 1568645037,
                143 => 1568901713,
                144 => 1569403146,
                145 => 1570187167,
                146 => 1570459127,
                147 => 1570621541,
                148 => 1570622696,
                149 => 1570629862,
                150 => 1570684913,
                151 => 1571059598,
                152 => 1571210820,
                153 => 1571660203,
                154 => 1571724915,
                155 => 1571981437,
                156 => 1571990395,
                157 => 1572193798,
                158 => 1572264837,
                159 => 1572273565,
                160 => 1572421282,
                161 => 1572425108,
                162 => 1572957455,
                163 => 1573049297,
                164 => 1573569685,
                165 => 1573729158,
                166 => 1574063550,
                167 => 1574082635,
                168 => 1574258787,
                169 => 1574258788,
                170 => 1574258789,
                171 => 1574520220,
                172 => 1574672450,
                173 => 1574695657,
                174 => 1574925962,
                175 => 1575010262,
                176 => 1575021466,
                177 => 1575034234,
                178 => 1575036586,
                179 => 1575039284,
                180 => 1575197543,
                181 => 1575274700,
                182 => 1575293069,
                183 => 1575451283,
                184 => 1575626180,
                185 => 1575883959,
                186 => 1576488398,
                187 => 1576590301,
                188 => 1578042218,
                189 => 1578044453,
                190 => 1578470886,
                191 => 1578475268,
                192 => 1578485775,
                193 => 1578491480,
                194 => 1578590702,
                195 => 1578648299,
                196 => 1578650334,
                197 => 1580202210,
                198 => 1580218617,
                199 => 1580743279,
                200 => 1580746806,
                201 => 1580808849,
                202 => 1580819350,
                203 => 1580827023,
                204 => 1582011195,
                205 => 1583142266,
                206 => 1583416186,
                207 => 1583756864,
                208 => 1583844433,
                209 => 1584002637,
                210 => 1584953715,
                211 => 1585056571,
                212 => 1585126355,
                213 => 1585490020,
                214 => 1585744384,
                215 => 1585816139,
                216 => 1586158920,
                217 => 1586173614,
                218 => 1586260286,
                219 => 1586334003,
                220 => 1587039363,
                221 => 1587109484,
                222 => 1587111506,
                223 => 1587461582,
                224 => 1588143272,
                225 => 1588144801,
                226 => 1588153272,
                227 => 1589178550,
                228 => 1589357321,
                229 => 1589359936,
                230 => 1589379060,
                231 => 1589447332,
                232 => 1589458026,
                233 => 1590408550,
                234 => 1590409548,
                235 => 1590566018,
                236 => 1590566405,
                237 => 1590579986,
                238 => 1590758953,
                239 => 1591052278,
                240 => 1591167126,
                241 => 1591253089,
                242 => 1591259559,
                243 => 1591272594,
                244 => 1591361320,
                245 => 1591683158,
                246 => 1591817370,
                247 => 1592466717,
                248 => 1592837424,
                249 => 1592978289,
                250 => 1593698606,
                251 => 1594650256,
                252 => 1594885630,
                253 => 1594886106,
                254 => 1594886773,
                255 => 1594886895,
                256 => 1594887027,
                257 => 1595160327,
                258 => 1595321666,
                259 => 1595422169,
                260 => 1595480600,
                261 => 1595489705,
                262 => 1595492052,
                263 => 1595492053,
                264 => 1595499689,
                265 => 1595553089,
                266 => 1595578253,
                267 => 1595919251,
                268 => 1596091744,
                269 => 1596441551,
                270 => 1597391970,
                271 => 1597394241,
                272 => 1597657689,
                273 => 1597762808,
                274 => 1597830237,
                275 => 1597930227,
                276 => 1598280548,
                277 => 1598520424,
                278 => 1598885384,
                279 => 1599112309,
                280 => 1599134496,
                281 => 1599463278,
                282 => 1599570560,
                283 => 1599720163,
                284 => 1599806584,
                285 => 1599806595,
                286 => 1599822061,
                287 => 1600072779,
                288 => 1600156989,
                289 => 1600253602,
                290 => 1600330846,
                291 => 1600338271,
                292 => 1600349343,
                293 => 1600676671,
                294 => 1600769357,
                295 => 1600778848,
                296 => 1601451838,
                297 => 1601539530,
                298 => 1601543829,
                299 => 1601891339,
                300 => 1602062376,
                301 => 1602146868,
                302 => 1602153572,
                303 => 1602494493,
                304 => 1602494495,
                305 => 1602745374,
                306 => 1602822727,
                307 => 1603179023,
                308 => 1603293043,
                309 => 1603970276,
                310 => 1604056363,
                311 => 1604056421,
                312 => 1604475913,
                313 => 1604499476,
                314 => 1604568928,
                315 => 1604669773,
                316 => 1605103533,
                317 => 1605530777,
                318 => 1605609309,
                319 => 1605609477,
                320 => 1605861407,
                321 => 1606310257,
                322 => 1607415095,
                323 => 1607500561,
                324 => 1607514878,
                325 => 1607581275,
                326 => 1607581276,
                327 => 1608624028,
                328 => 1609125144,
                329 => 1609857999,
                330 => 1610531188,
                331 => 1610965670,
                332 => 1610974673,
                333 => 1611155140,
                334 => 1614240671,
                335 => 1552899789,
                336 => 1555406153,
                337 => 1563785071,
                338 => 1564385954,
                339 => 1564385960,
                340 => 1565640170,
                341 => 1565640175,
                342 => 1595492054,
                343 => 1604502151,
                344 => 1594104496,
                345 => 1604585230,
                346 => 1609140710,
                347 => 1610337444,
                348 => 1610439375,
                349 => 1610448012,
                350 => 1610523204,
                351 => 1610523548,
                352 => 1610616655,
                353 => 1610621999,
                354 => 1610625925,
                355 => 1610634383,
                356 => 1610904608,
                357 => 1611732852,
                358 => 1611817467,
                359 => 1612184092,
                360 => 1612442685,
                361 => 1612442686,
                362 => 1612442786,
                363 => 1612851765,
                364 => 1612865237,
                365 => 1612970642,
                366 => 1612980753,
                367 => 1613665555,
                368 => 1614249488,
                369 => 1614691876,
                370 => 1614765170,
                371 => 1614765785,
                372 => 1615359964,
                373 => 1615366708,
                374 => 1615452749,
                375 => 1615802866,
                376 => 1615819992,
                377 => 1616076922,
                378 => 1616496610,
                379 => 1616555956,
                380 => 1617000878,
                381 => 1617356092,
                382 => 1617784658,
                383 => 1617864895,
                384 => 1617868381,
                385 => 1617877887,
                386 => 1617896006,
                387 => 1617935350,
                388 => 1617953690,
                389 => 1617960456,
                390 => 1617974402,
                391 => 1618218491,
                392 => 1618389817,
                393 => 1618476427,
                394 => 1618569201,
                395 => 1618900427,
                396 => 1618989442,
                397 => 1619070236,
                398 => 1619428555,
                399 => 1619604605,
                400 => 1619703075,
                401 => 1620146632,
                402 => 1620147234,
                403 => 1620201616,
                404 => 1620215586,
                405 => 1620374229,
                406 => 1620376945,
                407 => 1620632460,
                408 => 1620634856,
                409 => 1620733405,
                410 => 1620733405,
                411 => 1620820321,
                412 => 1621845357,
                413 => 1621845370,
                414 => 1622010069,
                415 => 1622104463,
                416 => 1622782058,
                417 => 1623305620,
                418 => 1623391399,
                419 => 1623828962,
                420 => 1624262862,
                421 => 1624884801,
                422 => 1624967118,
                423 => 1625304609,
                424 => 1625465756,
                425 => 1625505190,
                426 => 1625554302,
                427 => 1625569667,
                428 => 1625583596,
                429 => 1625583619,
                430 => 1625816310,
                431 => 1625819412,
                432 => 1625831469,
                433 => 1626241110,
                434 => 1626442868,
                435 => 1626696809,
                436 => 1626785125,
                437 => 1627292049,
                438 => 1627540693,
                439 => 1627541488,
                440 => 1627562945,
                441 => 1627650101,
                442 => 1627929168,
                443 => 1627983652,
                444 => 1628519513,
                445 => 1628749113,
                446 => 1629204538,
                447 => 1629700169,
                448 => 1629877210,
                449 => 1630074081,
                450 => 1630485317,
                451 => 1631625055,
                452 => 1631703921,
                453 => 1631790054,
                454 => 1631863869,
                455 => 1632111590,
                456 => 1632215760,
                457 => 1632721037,
                458 => 1633347511,
                459 => 1633358879,
                460 => 1633422057,
                461 => 1634735841,
                462 => 1635147952,
                463 => 1635230747,
                464 => 1635237551,
                465 => 1635388654,
                466 => 1635936029,
                467 => 1636014089,
                468 => 1636018970,
                469 => 1636362839,
                470 => 1636449347,
                471 => 1636964297,
                472 => 1636971615,
                473 => 1638195971,
                474 => 1638365464,
                475 => 1638514913,
                476 => 1638993987,
                477 => 1639122665,
                478 => 1639139581,
                479 => 1639992771,
                480 => 1641289204,
                481 => 1642517958,
                482 => 1642732351,
                483 => 1642757286,
                484 => 1643366069,
                485 => 1643386819,
                486 => 1643724178,
                487 => 1643878976,
                488 => 1643892702,
                489 => 1645019769,
                490 => 1645453538,
                491 => 1646125417,
                492 => 1646397836,
                493 => 1646817331,
                494 => 1647260673,
                495 => 1647443222,
                496 => 1647511158,
                497 => 1648031611,
                498 => 1648031636,
                499 => 1648543185,
                500 => 1648709176,
                501 => 1648803451,
                502 => 1649040981,
                503 => 1649315608,
                504 => 1649858046,
                505 => 1650249241,
                506 => 1650444800,
                507 => 1650548599,
                508 => 1650620993,
                509 => 1650872291,
                510 => 1650981517,
                511 => 1651118773,
                512 => 1652166447,
                513 => 1652345915,
                514 => 1652441129,
                515 => 1652864153,
                516 => 1653376989,
                517 => 1653385302,
                518 => 1654839361,
                519 => 1654839361,
                520 => 1654839361,
                521 => 1655730949,
                522 => 1656397126,
                523 => 1656928097,
                524 => 1657011337,
                525 => 1657027979,
                526 => 1657173907,
                527 => 1658786605,
                528 => 1659256999,
                529 => 1659257296,
                530 => 1659257396,
                531 => 1659257496,
                532 => 1660814397,
                533 => 1661759290,
                534 => 1661771388,
                535 => 1663238480,
                536 => 1664512574,
                537 => 1664541794,
                538 => 1664894872,
                539 => 1665064823,
                540 => 1665267882,
                541 => 1667731399,
                542 => 1667806582,
                543 => 1667983492,
                544 => 1668677456,
                545 => 1669316067,
                546 => 1672164687,
                547 => 1672743034,
                548 => 1673001912,
                549 => 1673966228,
                550 => 1675218708,
                551 => 1632281097,
                552 => 1636121186,
                553 => 1660813696,
                554 => 1641476963,
                555 => 1655697288,
                556 => 1659425718,
                557 => 1661505878,
                558 => 1662533751,
                559 => 1663402842,
                560 => 1666689977,
                561 => 1667208731,
                562 => 1668435503,
                563 => 1669124190,
                564 => 1669125399,
                565 => 1669291632,
                566 => 1669298267,
                567 => 1670090989,
                568 => 1670854818,
                569 => 1671003201,
                570 => 1671723392,
                571 => 1672931011,
                572 => 1672934282,
                573 => 1673263104,
                574 => 1673420896,
                575 => 1673426317,
                576 => 1673860323,
                577 => 1673946817,
                578 => 1674200008,
                579 => 1674204177,
                580 => 1674704527,
                581 => 1675082889,
                582 => 1675247112,
                583 => 1675323588,
                584 => 1676272000,
                585 => 1676272001,
                586 => 1676274910,
                587 => 1677470540,
                588 => 1678197291,
                589 => 1678801126,
                590 => 1678969082,
                591 => 1679584289,
                592 => 1680789830,
                593 => 1681382023,
                594 => 1686817968,
                595 => 1687462843,
                596 => 1687463180,
                597 => 1688106315,
                598 => 1688556247,
                599 => 1688717599,
                600 => 1688927492,
                601 => 1689257577,
                602 => 1689776940,
                603 => 1689856589,
                604 => 1690456899,
                605 => 1690874168,
                606 => 1691057865,
                607 => 1692254551,
                608 => 1692277552,
                609 => 1692279790,
                610 => 1692608216,
                611 => 1693300031,
                612 => 1695776504,
                613 => 1695778183,
                614 => 1696300511,
                615 => 1696321447,
                616 => 1697112043,
                617 => 1697462064,
                618 => 1697532722,
                619 => 1697792159,
                620 => 1698682149,
                621 => 1698919811,
                622 => 1701337056,
                623 => 1703651502,
                624 => 1689083660,
                625 => 1689084023,
                626 => 1688644407,
                627 => 1663402950,
                628 => 1673249981,
                629 => 1673964565,
                630 => 1676367607,
                631 => 1679581138,
                632 => 1691662140,
                633 => 1696262484,
                634 => 1697788982,
                635 => 1697112044,
            ],
            'shopware.security.csp_templates' => [
                'default' => ''."\n".'object-src \'none\';'."\n".'script-src \'none\';'."\n".'base-uri \'self\';'."\n".'            ',
                'administration' => ''."\n".'object-src \'none\';'."\n".'script-src \'strict-dynamic\' \'nonce-%nonce%\' \'unsafe-inline\' \'unsafe-eval\' https: http:;'."\n".'base-uri \'self\';'."\n".'            ',
                'storefront' => '',
                'installer' => '',
            ],
            'shopware.app_dir' => (\dirname(__DIR__, 4).'/custom/apps'),
            'env(SHOPWARE_DBAL_TIMEZONE_SUPPORT_ENABLED)' => 0,
            'env(SHOPWARE_DBAL_TOKEN_MINIMUM_LENGTH)' => 3,
            'env(INSTANCE_ID)' => '',
            'shopware.store_endpoints' => [
                'my_extensions' => '/swplatform/licenseenvironment',
                'my_plugin_updates' => '/swplatform/pluginupdates',
                'environment_information' => '/swplatform/environmentinformation',
                'updater_extension_compatibility' => '/swplatform/autoupdate',
                'updater_permission' => '/swplatform/autoupdate/permission',
                'plugin_download' => '/swplatform/pluginfiles/{pluginName}',
                'app_generate_signature' => '/swplatform/generatesignature',
                'cancel_license' => '/swplatform/pluginlicenses/%s/cancel',
                'login' => '/swplatform/login',
                'create_rating' => '/swplatform/extensionstore/extensions/%s/ratings',
                'user_info' => '/swplatform/userinfo',
            ],
            'env(SHOPWARE_DISABLE_UPDATE_CHECK)' => '',
            'shopware.media.metadata.types' => [
                0 => '\\Shopware\\Core\\Content\\Media\\Metadata\\Type\\ImageMetadata',
                1 => '\\Shopware\\Core\\Content\\Media\\Metadata\\Type\\DocumentMetadata',
                2 => '\\Shopware\\Core\\Content\\Media\\Metadata\\Type\\VideoMetadata',
            ],
            'product_export.directory' => 'export',
            'product_export.read_buffer_size' => 100,
            'import_export.supported_entities' => [
                0 => 'customer',
                1 => 'product',
            ],
            'import_export.supported_file_types' => [
                0 => 'text/csv',
            ],
            'import_export.read_buffer_size' => 100,
            'import_export.write_buffer_size' => 100,
            'import_export.http_batch_size' => 100,
            'customer.account_types' => [
                0 => 'business',
                1 => 'private',
            ],
            'env(APP_URL_CHECK_DISABLED)' => false,
            'env(SHOPWARE_ADMINISTRATION_PATH_NAME)' => 'admin',
            'elasticsearch.index.config' => [
                'settings' => [
                    'index' => [
                        'number_of_shards' => 3,
                        'number_of_replicas' => 3,
                        'mapping.total_fields.limit' => 50000,
                        'mapping.nested_fields.limit' => 500,
                        'mapping.nested_objects.limit' => 1000000,
                    ],
                    'analysis' => [
                        'normalizer' => [
                            'sw_lowercase_normalizer' => [
                                'type' => 'custom',
                                'filter' => [
                                    0 => 'lowercase',
                                ],
                            ],
                        ],
                        'analyzer' => [
                            'sw_ngram_analyzer' => [
                                'type' => 'custom',
                                'tokenizer' => 'whitespace',
                                'filter' => [
                                    0 => 'lowercase',
                                    1 => 'sw_ngram_filter',
                                ],
                            ],
                            'sw_english_analyzer' => [
                                'type' => 'custom',
                                'tokenizer' => 'standard',
                                'filter' => [
                                    0 => 'lowercase',
                                    1 => 'sw_english_stop_filter',
                                ],
                            ],
                            'sw_german_analyzer' => [
                                'type' => 'custom',
                                'tokenizer' => 'standard',
                                'filter' => [
                                    0 => 'lowercase',
                                    1 => 'sw_german_stop_filter',
                                ],
                            ],
                        ],
                        'filter' => [
                            'sw_ngram_filter' => [
                                'type' => 'ngram',
                                'min_gram' => 4,
                                'max_gram' => 5,
                            ],
                            'sw_english_stop_filter' => [
                                'type' => 'stop',
                                'stopwords' => '_english_',
                            ],
                            'sw_german_stop_filter' => [
                                'type' => 'stop',
                                'stopwords' => '_german_',
                            ],
                        ],
                    ],
                ],
            ],
            'elasticsearch.index.mapping' => [
                'dynamic_templates' => [
                    0 => [
                        'keywords' => [
                            'match_mapping_type' => 'string',
                            'mapping' => [
                                'type' => 'keyword',
                                'normalizer' => 'sw_lowercase_normalizer',
                                'fields' => [
                                    'text' => [
                                        'type' => 'text',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
            'elasticsearch.administration.index.config' => [
                'settings' => [
                    'index' => [
                        'number_of_shards' => 3,
                        'number_of_replicas' => 3,
                        'mapping.total_fields.limit' => 50000,
                        'mapping.nested_fields.limit' => 500,
                        'mapping.nested_objects.limit' => 1000000,
                    ],
                    'analysis' => [
                        'normalizer' => [
                            'sw_lowercase_normalizer' => [
                                'type' => 'custom',
                                'filter' => [
                                    0 => 'lowercase',
                                ],
                            ],
                        ],
                    ],
                ],
            ],
            'elasticsearch.administration.index.mapping' => [
                'dynamic_templates' => [
                    0 => [
                        'keywords' => [
                            'match_mapping_type' => 'string',
                            'mapping' => [
                                'type' => 'keyword',
                                'normalizer' => 'sw_lowercase_normalizer',
                                'fields' => [
                                    'text' => [
                                        'type' => 'text',
                                    ],
                                ],
                            ],
                        ],
                    ],
                ],
            ],
            'default_elasticsearch_prefix' => 'sw',
            'env(SHOPWARE_ES_ENABLED)' => '',
            'env(SHOPWARE_ES_INDEXING_ENABLED)' => '',
            'env(OPENSEARCH_URL)' => 'http://localhost:9200',
            'env(SHOPWARE_ES_INDEX_PREFIX)' => 'sw',
            'env(SHOPWARE_ES_THROW_EXCEPTION)' => '1',
            'env(SHOPWARE_ADMIN_ES_ENABLED)' => '',
            'env(ADMIN_OPENSEARCH_URL)' => '',
            'env(SHOPWARE_ADMIN_ES_INDEX_PREFIX)' => 'sw-admin',
            'env(SHOPWARE_ADMIN_ES_REFRESH_INDICES)' => '',
            'env(SHOPWARE_ES_INDEXING_BATCH_SIZE)' => 100,
            'env(SHOPWARE_ES_EXCLUDE_SOURCE)' => '0',
            'shopware_http_cache_enabled_default' => 1,
            'shopware_http_cache_default_ttl_default' => 7200,
            'shopware.twig.app_variable.allowed_server_params' => [
                0 => 'server_name',
                1 => 'request_uri',
                2 => 'app_url',
                3 => 'http_user_agent',
                4 => 'http_host',
                5 => 'server_name',
                6 => 'server_port',
                7 => 'redirect_url',
                8 => 'https',
                9 => 'forwarded',
                10 => 'host',
                11 => 'remote_addr',
                12 => 'http_x_forwarded_for',
                13 => 'http_x_forwarded_host',
                14 => 'http_x_forwarded_proto',
                15 => 'http_x_forwarded_port',
                16 => 'http_x_forwarded_prefix',
            ],
            'storefrontRoot' => (\dirname(__DIR__, 4).'/vendor/shopware/storefront'),
            'shopware.store.frw' => '1',
            'event_dispatcher.event_aliases' => [
                'Symfony\\Component\\Console\\Event\\ConsoleCommandEvent' => 'console.command',
                'Symfony\\Component\\Console\\Event\\ConsoleErrorEvent' => 'console.error',
                'Symfony\\Component\\Console\\Event\\ConsoleSignalEvent' => 'console.signal',
                'Symfony\\Component\\Console\\Event\\ConsoleTerminateEvent' => 'console.terminate',
                'Symfony\\Component\\HttpKernel\\Event\\ControllerArgumentsEvent' => 'kernel.controller_arguments',
                'Symfony\\Component\\HttpKernel\\Event\\ControllerEvent' => 'kernel.controller',
                'Symfony\\Component\\HttpKernel\\Event\\ResponseEvent' => 'kernel.response',
                'Symfony\\Component\\HttpKernel\\Event\\FinishRequestEvent' => 'kernel.finish_request',
                'Symfony\\Component\\HttpKernel\\Event\\RequestEvent' => 'kernel.request',
                'Symfony\\Component\\HttpKernel\\Event\\ViewEvent' => 'kernel.view',
                'Symfony\\Component\\HttpKernel\\Event\\ExceptionEvent' => 'kernel.exception',
                'Symfony\\Component\\HttpKernel\\Event\\TerminateEvent' => 'kernel.terminate',
            ],
            'fragment.renderer.hinclude.global_template' => NULL,
            'fragment.path' => '/_fragment',
            'kernel.http_method_override' => true,
            'kernel.trust_x_sendfile_type_header' => false,
            'kernel.trusted_hosts' => [

            ],
            'kernel.default_locale' => 'en-GB',
            'kernel.enabled_locales' => [

            ],
            'kernel.error_controller' => 'error_controller',
            'asset.request_context.base_path' => NULL,
            'asset.request_context.secure' => NULL,
            'translator.logging' => false,
            'translator.default_path' => (\dirname(__DIR__, 4).'/vendor/shopware/storefront/Resources/snippet'),
            'debug.error_handler.throw_at' => -1,
            'router.request_context.host' => 'localhost',
            'router.request_context.scheme' => 'http',
            'router.request_context.base_url' => '',
            'router.resource' => 'kernel::loadRoutes',
            'request_listener.http_port' => 80,
            'request_listener.https_port' => 443,
            'session.metadata.storage_key' => '_sf2_meta',
            'session.storage.options' => [
                'cache_limiter' => '0',
                'name' => 'session-',
                'cookie_secure' => 'auto',
                'cookie_httponly' => true,
                'cookie_samesite' => 'lax',
                'gc_probability' => 1,
            ],
            'session.save_path' => NULL,
            'session.metadata.update_threshold' => 0,
            'validator.translation_domain' => 'validators',
            'data_collector.templates' => [

            ],
            'twig.form.resources' => [
                0 => 'form_div_layout.html.twig',
            ],
            'twig.default_path' => (\dirname(__DIR__, 4).'/templates'),
            'monolog.use_microseconds' => true,
            'monolog.swift_mailer.handlers' => [

            ],
            'monolog.handlers_to_channels' => [
                'monolog.handler.elasticsearch' => [
                    'type' => 'inclusive',
                    'elements' => [
                        0 => 'elasticsearch',
                    ],
                ],
                'monolog.handler.business_event_handler_buffer' => [
                    'type' => 'inclusive',
                    'elements' => [
                        0 => 'business_events',
                    ],
                ],
                'monolog.handler.console' => [
                    'type' => 'exclusive',
                    'elements' => [
                        0 => 'event',
                        1 => 'doctrine',
                        2 => 'console',
                    ],
                ],
                'monolog.handler.main' => [
                    'type' => 'exclusive',
                    'elements' => [
                        0 => 'event',
                        1 => 'doctrine',
                    ],
                ],
            ],
            'env(VAR_DUMPER_SERVER)' => '127.0.0.1:9912',
            'shopware.feature' => [
                'flags' => [
                    'v6.5.0.0' => [
                        'default' => true,
                        'major' => true,
                    ],
                    'v6.6.0.0' => [
                        'default' => false,
                        'major' => true,
                    ],
                    'v6.7.0.0' => [
                        'default' => false,
                        'major' => true,
                    ],
                    'VUE3' => [
                        'default' => false,
                        'major' => true,
                    ],
                    'media_path' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Enables new media path behavior, which calls new services to generate media urls',
                    ],
                    'ES_MULTILINGUAL_INDEX' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Change Elasticsearch mapping data to support multi languages in one index',
                    ],
                    'STOCK_HANDLING' => [
                        'default' => false,
                        'major' => false,
                    ],
                    'ASYNC_THEME_COMPILATION' => [
                        'default' => false,
                        'major' => true,
                        'description' => 'Asynchronous theme compilation via message queue - experimental stableVersion:v6.6.0 feature:ASYNC_THEME_COMPILATION',
                    ],
                ],
            ],
            'shopware.feature.flags' => [
                'v6.5.0.0' => [
                    'default' => true,
                    'major' => true,
                ],
                'v6.6.0.0' => [
                    'default' => false,
                    'major' => true,
                ],
                'v6.7.0.0' => [
                    'default' => false,
                    'major' => true,
                ],
                'VUE3' => [
                    'default' => false,
                    'major' => true,
                ],
                'media_path' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Enables new media path behavior, which calls new services to generate media urls',
                ],
                'ES_MULTILINGUAL_INDEX' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Change Elasticsearch mapping data to support multi languages in one index',
                ],
                'STOCK_HANDLING' => [
                    'default' => false,
                    'major' => false,
                ],
                'ASYNC_THEME_COMPILATION' => [
                    'default' => false,
                    'major' => true,
                    'description' => 'Asynchronous theme compilation via message queue - experimental stableVersion:v6.6.0 feature:ASYNC_THEME_COMPILATION',
                ],
            ],
            'shopware.feature.flags.v6.5.0.0' => [
                'default' => true,
                'major' => true,
            ],
            'shopware.feature.flags.v6.5.0.0.default' => true,
            'shopware.feature.flags.v6.5.0.0.major' => true,
            'shopware.feature.flags.v6.6.0.0' => [
                'default' => false,
                'major' => true,
            ],
            'shopware.feature.flags.v6.6.0.0.default' => false,
            'shopware.feature.flags.v6.6.0.0.major' => true,
            'shopware.feature.flags.v6.7.0.0' => [
                'default' => false,
                'major' => true,
            ],
            'shopware.feature.flags.v6.7.0.0.default' => false,
            'shopware.feature.flags.v6.7.0.0.major' => true,
            'shopware.feature.flags.VUE3' => [
                'default' => false,
                'major' => true,
            ],
            'shopware.feature.flags.VUE3.default' => false,
            'shopware.feature.flags.VUE3.major' => true,
            'shopware.feature.flags.media_path' => [
                'default' => false,
                'major' => true,
                'description' => 'Enables new media path behavior, which calls new services to generate media urls',
            ],
            'shopware.feature.flags.media_path.default' => false,
            'shopware.feature.flags.media_path.major' => true,
            'shopware.feature.flags.media_path.description' => 'Enables new media path behavior, which calls new services to generate media urls',
            'shopware.feature.flags.ES_MULTILINGUAL_INDEX' => [
                'default' => false,
                'major' => true,
                'description' => 'Change Elasticsearch mapping data to support multi languages in one index',
            ],
            'shopware.feature.flags.ES_MULTILINGUAL_INDEX.default' => false,
            'shopware.feature.flags.ES_MULTILINGUAL_INDEX.major' => true,
            'shopware.feature.flags.ES_MULTILINGUAL_INDEX.description' => 'Change Elasticsearch mapping data to support multi languages in one index',
            'shopware.feature.flags.STOCK_HANDLING' => [
                'default' => false,
                'major' => false,
            ],
            'shopware.feature.flags.STOCK_HANDLING.default' => false,
            'shopware.feature.flags.STOCK_HANDLING.major' => false,
            'shopware.feature.flags.ASYNC_THEME_COMPILATION' => [
                'default' => false,
                'major' => true,
                'description' => 'Asynchronous theme compilation via message queue - experimental stableVersion:v6.6.0 feature:ASYNC_THEME_COMPILATION',
            ],
            'shopware.feature.flags.ASYNC_THEME_COMPILATION.default' => false,
            'shopware.feature.flags.ASYNC_THEME_COMPILATION.major' => true,
            'shopware.feature.flags.ASYNC_THEME_COMPILATION.description' => 'Asynchronous theme compilation via message queue - experimental stableVersion:v6.6.0 feature:ASYNC_THEME_COMPILATION',
            'shopware.profiler' => [
                'integrations' => [
                    0 => 'Symfony',
                ],
            ],
            'shopware.profiler.integrations' => [
                0 => 'Symfony',
            ],
            'shopware.profiler.integrations.0' => 'Symfony',
            'shopware.filesystem' => [
                'private' => [
                    'type' => 'local',
                    'config' => [
                        'root' => (\dirname(__DIR__, 4).'/files'),
                    ],
                ],
                'public' => [
                    'type' => 'local',
                    'config' => [
                        'root' => (\dirname(__DIR__, 4).'/public'),
                    ],
                ],
                'temp' => [
                    'type' => 'local',
                    'config' => [
                        'root' => \dirname(__DIR__, 3),
                    ],
                ],
                'theme' => [

                ],
                'asset' => [

                ],
                'sitemap' => [

                ],
                'allowed_extensions' => [
                    0 => 'jpg',
                    1 => 'jpeg',
                    2 => 'png',
                    3 => 'webp',
                    4 => 'gif',
                    5 => 'svg',
                    6 => 'bmp',
                    7 => 'tiff',
                    8 => 'tif',
                    9 => 'eps',
                    10 => 'webm',
                    11 => 'mkv',
                    12 => 'flv',
                    13 => 'ogv',
                    14 => 'ogg',
                    15 => 'mov',
                    16 => 'mp4',
                    17 => 'avi',
                    18 => 'wmv',
                    19 => 'pdf',
                    20 => 'aac',
                    21 => 'mp3',
                    22 => 'wav',
                    23 => 'flac',
                    24 => 'oga',
                    25 => 'wma',
                    26 => 'txt',
                    27 => 'doc',
                    28 => 'ico',
                ],
                'private_allowed_extensions' => [
                    0 => 'jpg',
                    1 => 'jpeg',
                    2 => 'png',
                    3 => 'webp',
                    4 => 'gif',
                    5 => 'svg',
                    6 => 'bmp',
                    7 => 'tiff',
                    8 => 'tif',
                    9 => 'eps',
                    10 => 'webm',
                    11 => 'mkv',
                    12 => 'flv',
                    13 => 'ogv',
                    14 => 'ogg',
                    15 => 'mov',
                    16 => 'mp4',
                    17 => 'avi',
                    18 => 'wmv',
                    19 => 'pdf',
                    20 => 'aac',
                    21 => 'mp3',
                    22 => 'wav',
                    23 => 'flac',
                    24 => 'oga',
                    25 => 'wma',
                    26 => 'txt',
                    27 => 'doc',
                    28 => 'ico',
                    29 => 'zip',
                    30 => 'rar',
                ],
                'private_local_download_strategy' => 'php',
            ],
            'shopware.filesystem.private' => [
                'type' => 'local',
                'config' => [
                    'root' => (\dirname(__DIR__, 4).'/files'),
                ],
            ],
            'shopware.filesystem.private.type' => 'local',
            'shopware.filesystem.private.config' => [
                'root' => (\dirname(__DIR__, 4).'/files'),
            ],
            'shopware.filesystem.private.config.root' => (\dirname(__DIR__, 4).'/files'),
            'shopware.filesystem.public' => [
                'type' => 'local',
                'config' => [
                    'root' => (\dirname(__DIR__, 4).'/public'),
                ],
            ],
            'shopware.filesystem.public.type' => 'local',
            'shopware.filesystem.public.config' => [
                'root' => (\dirname(__DIR__, 4).'/public'),
            ],
            'shopware.filesystem.public.config.root' => (\dirname(__DIR__, 4).'/public'),
            'shopware.filesystem.temp' => [
                'type' => 'local',
                'config' => [
                    'root' => \dirname(__DIR__, 3),
                ],
            ],
            'shopware.filesystem.temp.type' => 'local',
            'shopware.filesystem.temp.config' => [
                'root' => \dirname(__DIR__, 3),
            ],
            'shopware.filesystem.temp.config.root' => \dirname(__DIR__, 3),
            'shopware.filesystem.theme' => [
                'type' => 'local',
                'config' => [
                    'root' => (\dirname(__DIR__, 4).'/public'),
                ],
            ],
            'shopware.filesystem.asset' => [
                'type' => 'local',
                'config' => [
                    'root' => (\dirname(__DIR__, 4).'/public'),
                ],
            ],
            'shopware.filesystem.sitemap' => [
                'type' => 'local',
                'config' => [
                    'root' => (\dirname(__DIR__, 4).'/public'),
                ],
            ],
            'shopware.filesystem.allowed_extensions' => [
                0 => 'jpg',
                1 => 'jpeg',
                2 => 'png',
                3 => 'webp',
                4 => 'gif',
                5 => 'svg',
                6 => 'bmp',
                7 => 'tiff',
                8 => 'tif',
                9 => 'eps',
                10 => 'webm',
                11 => 'mkv',
                12 => 'flv',
                13 => 'ogv',
                14 => 'ogg',
                15 => 'mov',
                16 => 'mp4',
                17 => 'avi',
                18 => 'wmv',
                19 => 'pdf',
                20 => 'aac',
                21 => 'mp3',
                22 => 'wav',
                23 => 'flac',
                24 => 'oga',
                25 => 'wma',
                26 => 'txt',
                27 => 'doc',
                28 => 'ico',
            ],
            'shopware.filesystem.allowed_extensions.0' => 'jpg',
            'shopware.filesystem.allowed_extensions.1' => 'jpeg',
            'shopware.filesystem.allowed_extensions.2' => 'png',
            'shopware.filesystem.allowed_extensions.3' => 'webp',
            'shopware.filesystem.allowed_extensions.4' => 'gif',
            'shopware.filesystem.allowed_extensions.5' => 'svg',
            'shopware.filesystem.allowed_extensions.6' => 'bmp',
            'shopware.filesystem.allowed_extensions.7' => 'tiff',
            'shopware.filesystem.allowed_extensions.8' => 'tif',
            'shopware.filesystem.allowed_extensions.9' => 'eps',
            'shopware.filesystem.allowed_extensions.10' => 'webm',
            'shopware.filesystem.allowed_extensions.11' => 'mkv',
            'shopware.filesystem.allowed_extensions.12' => 'flv',
            'shopware.filesystem.allowed_extensions.13' => 'ogv',
            'shopware.filesystem.allowed_extensions.14' => 'ogg',
            'shopware.filesystem.allowed_extensions.15' => 'mov',
            'shopware.filesystem.allowed_extensions.16' => 'mp4',
            'shopware.filesystem.allowed_extensions.17' => 'avi',
            'shopware.filesystem.allowed_extensions.18' => 'wmv',
            'shopware.filesystem.allowed_extensions.19' => 'pdf',
            'shopware.filesystem.allowed_extensions.20' => 'aac',
            'shopware.filesystem.allowed_extensions.21' => 'mp3',
            'shopware.filesystem.allowed_extensions.22' => 'wav',
            'shopware.filesystem.allowed_extensions.23' => 'flac',
            'shopware.filesystem.allowed_extensions.24' => 'oga',
            'shopware.filesystem.allowed_extensions.25' => 'wma',
            'shopware.filesystem.allowed_extensions.26' => 'txt',
            'shopware.filesystem.allowed_extensions.27' => 'doc',
            'shopware.filesystem.allowed_extensions.28' => 'ico',
            'shopware.filesystem.private_allowed_extensions' => [
                0 => 'jpg',
                1 => 'jpeg',
                2 => 'png',
                3 => 'webp',
                4 => 'gif',
                5 => 'svg',
                6 => 'bmp',
                7 => 'tiff',
                8 => 'tif',
                9 => 'eps',
                10 => 'webm',
                11 => 'mkv',
                12 => 'flv',
                13 => 'ogv',
                14 => 'ogg',
                15 => 'mov',
                16 => 'mp4',
                17 => 'avi',
                18 => 'wmv',
                19 => 'pdf',
                20 => 'aac',
                21 => 'mp3',
                22 => 'wav',
                23 => 'flac',
                24 => 'oga',
                25 => 'wma',
                26 => 'txt',
                27 => 'doc',
                28 => 'ico',
                29 => 'zip',
                30 => 'rar',
            ],
            'shopware.filesystem.private_allowed_extensions.0' => 'jpg',
            'shopware.filesystem.private_allowed_extensions.1' => 'jpeg',
            'shopware.filesystem.private_allowed_extensions.2' => 'png',
            'shopware.filesystem.private_allowed_extensions.3' => 'webp',
            'shopware.filesystem.private_allowed_extensions.4' => 'gif',
            'shopware.filesystem.private_allowed_extensions.5' => 'svg',
            'shopware.filesystem.private_allowed_extensions.6' => 'bmp',
            'shopware.filesystem.private_allowed_extensions.7' => 'tiff',
            'shopware.filesystem.private_allowed_extensions.8' => 'tif',
            'shopware.filesystem.private_allowed_extensions.9' => 'eps',
            'shopware.filesystem.private_allowed_extensions.10' => 'webm',
            'shopware.filesystem.private_allowed_extensions.11' => 'mkv',
            'shopware.filesystem.private_allowed_extensions.12' => 'flv',
            'shopware.filesystem.private_allowed_extensions.13' => 'ogv',
            'shopware.filesystem.private_allowed_extensions.14' => 'ogg',
            'shopware.filesystem.private_allowed_extensions.15' => 'mov',
            'shopware.filesystem.private_allowed_extensions.16' => 'mp4',
            'shopware.filesystem.private_allowed_extensions.17' => 'avi',
            'shopware.filesystem.private_allowed_extensions.18' => 'wmv',
            'shopware.filesystem.private_allowed_extensions.19' => 'pdf',
            'shopware.filesystem.private_allowed_extensions.20' => 'aac',
            'shopware.filesystem.private_allowed_extensions.21' => 'mp3',
            'shopware.filesystem.private_allowed_extensions.22' => 'wav',
            'shopware.filesystem.private_allowed_extensions.23' => 'flac',
            'shopware.filesystem.private_allowed_extensions.24' => 'oga',
            'shopware.filesystem.private_allowed_extensions.25' => 'wma',
            'shopware.filesystem.private_allowed_extensions.26' => 'txt',
            'shopware.filesystem.private_allowed_extensions.27' => 'doc',
            'shopware.filesystem.private_allowed_extensions.28' => 'ico',
            'shopware.filesystem.private_allowed_extensions.29' => 'zip',
            'shopware.filesystem.private_allowed_extensions.30' => 'rar',
            'shopware.filesystem.private_local_download_strategy' => 'php',
            'shopware.cdn.url' => '',
            'shopware.increment' => [
                'user_activity' => [
                    'type' => 'mysql',
                ],
                'message_queue' => [
                    'type' => 'mysql',
                ],
            ],
            'shopware.increment.user_activity' => [
                'type' => 'mysql',
            ],
            'shopware.increment.user_activity.type' => 'mysql',
            'shopware.increment.message_queue' => [
                'type' => 'mysql',
            ],
            'shopware.increment.message_queue.type' => 'mysql',
            'shopware.api' => [
                'max_limit' => NULL,
                'api_browser' => [
                    'auth_required' => false,
                ],
                'store' => [
                    'context_lifetime' => 'P1D',
                    'max_limit' => 100,
                ],
                'jwt_key' => [
                    'private_key_path' => ('file://'.\dirname(__DIR__, 4).'/config/jwt/private.pem'),
                    'private_key_passphrase' => 'shopware',
                    'public_key_path' => ('file://'.\dirname(__DIR__, 4).'/config/jwt/public.pem'),
                ],
                'rate_limiter' => [
                    'login' => [
                        'enabled' => true,
                        'policy' => 'time_backoff',
                        'reset' => '24 hours',
                        'limits' => [
                            0 => [
                                'limit' => 10,
                                'interval' => '10 seconds',
                            ],
                            1 => [
                                'limit' => 15,
                                'interval' => '30 seconds',
                            ],
                            2 => [
                                'limit' => 20,
                                'interval' => '60 seconds',
                            ],
                        ],
                        'lock_factory' => 'lock.factory',
                        'cache_pool' => 'cache.rate_limiter',
                    ],
                    'guest_login' => [
                        'enabled' => true,
                        'policy' => 'time_backoff',
                        'reset' => '24 hours',
                        'limits' => [
                            0 => [
                                'limit' => 10,
                                'interval' => '10 seconds',
                            ],
                            1 => [
                                'limit' => 15,
                                'interval' => '30 seconds',
                            ],
                            2 => [
                                'limit' => 20,
                                'interval' => '60 seconds',
                            ],
                        ],
                        'lock_factory' => 'lock.factory',
                        'cache_pool' => 'cache.rate_limiter',
                    ],
                    'oauth' => [
                        'enabled' => true,
                        'policy' => 'time_backoff',
                        'reset' => '24 hours',
                        'limits' => [
                            0 => [
                                'limit' => 10,
                                'interval' => '10 seconds',
                            ],
                            1 => [
                                'limit' => 15,
                                'interval' => '30 seconds',
                            ],
                            2 => [
                                'limit' => 20,
                                'interval' => '60 seconds',
                            ],
                        ],
                        'lock_factory' => 'lock.factory',
                        'cache_pool' => 'cache.rate_limiter',
                    ],
                    'reset_password' => [
                        'enabled' => true,
                        'policy' => 'time_backoff',
                        'reset' => '24 hours',
                        'limits' => [
                            0 => [
                                'limit' => 3,
                                'interval' => '30 seconds',
                            ],
                            1 => [
                                'limit' => 5,
                                'interval' => '60 seconds',
                            ],
                            2 => [
                                'limit' => 10,
                                'interval' => '90 seconds',
                            ],
                        ],
                        'lock_factory' => 'lock.factory',
                        'cache_pool' => 'cache.rate_limiter',
                    ],
                    'user_recovery' => [
                        'enabled' => true,
                        'policy' => 'time_backoff',
                        'reset' => '24 hours',
                        'limits' => [
                            0 => [
                                'limit' => 3,
                                'interval' => '30 seconds',
                            ],
                            1 => [
                                'limit' => 5,
                                'interval' => '60 seconds',
                            ],
                            2 => [
                                'limit' => 10,
                                'interval' => '90 seconds',
                            ],
                        ],
                        'lock_factory' => 'lock.factory',
                        'cache_pool' => 'cache.rate_limiter',
                    ],
                    'contact_form' => [
                        'enabled' => true,
                        'policy' => 'time_backoff',
                        'reset' => '24 hours',
                        'limits' => [
                            0 => [
                                'limit' => 3,
                                'interval' => '30 seconds',
                            ],
                            1 => [
                                'limit' => 5,
                                'interval' => '60 seconds',
                            ],
                            2 => [
                                'limit' => 10,
                                'interval' => '90 seconds',
                            ],
                        ],
                        'lock_factory' => 'lock.factory',
                        'cache_pool' => 'cache.rate_limiter',
                    ],
                    'notification' => [
                        'enabled' => true,
                        'policy' => 'time_backoff',
                        'reset' => '24 hours',
                        'limits' => [
                            0 => [
                                'limit' => 10,
                                'interval' => '10 seconds',
                            ],
                            1 => [
                                'limit' => 15,
                                'interval' => '30 seconds',
                            ],
                            2 => [
                                'limit' => 20,
                                'interval' => '60 seconds',
                            ],
                        ],
                        'lock_factory' => 'lock.factory',
                        'cache_pool' => 'cache.rate_limiter',
                    ],
                    'newsletter_form' => [
                        'enabled' => true,
                        'policy' => 'time_backoff',
                        'reset' => '24 hours',
                        'limits' => [
                            0 => [
                                'limit' => 3,
                                'interval' => '30 seconds',
                            ],
                            1 => [
                                'limit' => 5,
                                'interval' => '60 seconds',
                            ],
                            2 => [
                                'limit' => 10,
                                'interval' => '90 seconds',
                            ],
                        ],
                        'lock_factory' => 'lock.factory',
                        'cache_pool' => 'cache.rate_limiter',
                    ],
                    'cart_add_line_item' => [
                        'enabled' => true,
                        'policy' => 'system_config',
                        'reset' => '1 hours',
                        'limits' => [
                            0 => [
                                'domain' => 'core.cart.lineItemAddLimit',
                                'interval' => '60 seconds',
                            ],
                        ],
                        'lock_factory' => 'lock.factory',
                        'cache_pool' => 'cache.rate_limiter',
                    ],
                ],
                'access_token_ttl' => 'PT10M',
                'refresh_token_ttl' => 'P1W',
            ],
            'shopware.api.max_limit' => NULL,
            'shopware.api.api_browser' => [
                'auth_required' => false,
            ],
            'shopware.api.api_browser.auth_required' => false,
            'shopware.api.api_browser.auth_required_str' => '0',
            'shopware.api.store' => [
                'context_lifetime' => 'P1D',
                'max_limit' => 100,
            ],
            'shopware.api.store.context_lifetime' => 'P1D',
            'shopware.api.store.max_limit' => 100,
            'shopware.api.jwt_key' => [
                'private_key_path' => ('file://'.\dirname(__DIR__, 4).'/config/jwt/private.pem'),
                'private_key_passphrase' => 'shopware',
                'public_key_path' => ('file://'.\dirname(__DIR__, 4).'/config/jwt/public.pem'),
            ],
            'shopware.api.jwt_key.private_key_path' => ('file://'.\dirname(__DIR__, 4).'/config/jwt/private.pem'),
            'shopware.api.jwt_key.private_key_passphrase' => 'shopware',
            'shopware.api.jwt_key.public_key_path' => ('file://'.\dirname(__DIR__, 4).'/config/jwt/public.pem'),
            'shopware.api.rate_limiter' => [
                'login' => [
                    'enabled' => true,
                    'policy' => 'time_backoff',
                    'reset' => '24 hours',
                    'limits' => [
                        0 => [
                            'limit' => 10,
                            'interval' => '10 seconds',
                        ],
                        1 => [
                            'limit' => 15,
                            'interval' => '30 seconds',
                        ],
                        2 => [
                            'limit' => 20,
                            'interval' => '60 seconds',
                        ],
                    ],
                    'lock_factory' => 'lock.factory',
                    'cache_pool' => 'cache.rate_limiter',
                ],
                'guest_login' => [
                    'enabled' => true,
                    'policy' => 'time_backoff',
                    'reset' => '24 hours',
                    'limits' => [
                        0 => [
                            'limit' => 10,
                            'interval' => '10 seconds',
                        ],
                        1 => [
                            'limit' => 15,
                            'interval' => '30 seconds',
                        ],
                        2 => [
                            'limit' => 20,
                            'interval' => '60 seconds',
                        ],
                    ],
                    'lock_factory' => 'lock.factory',
                    'cache_pool' => 'cache.rate_limiter',
                ],
                'oauth' => [
                    'enabled' => true,
                    'policy' => 'time_backoff',
                    'reset' => '24 hours',
                    'limits' => [
                        0 => [
                            'limit' => 10,
                            'interval' => '10 seconds',
                        ],
                        1 => [
                            'limit' => 15,
                            'interval' => '30 seconds',
                        ],
                        2 => [
                            'limit' => 20,
                            'interval' => '60 seconds',
                        ],
                    ],
                    'lock_factory' => 'lock.factory',
                    'cache_pool' => 'cache.rate_limiter',
                ],
                'reset_password' => [
                    'enabled' => true,
                    'policy' => 'time_backoff',
                    'reset' => '24 hours',
                    'limits' => [
                        0 => [
                            'limit' => 3,
                            'interval' => '30 seconds',
                        ],
                        1 => [
                            'limit' => 5,
                            'interval' => '60 seconds',
                        ],
                        2 => [
                            'limit' => 10,
                            'interval' => '90 seconds',
                        ],
                    ],
                    'lock_factory' => 'lock.factory',
                    'cache_pool' => 'cache.rate_limiter',
                ],
                'user_recovery' => [
                    'enabled' => true,
                    'policy' => 'time_backoff',
                    'reset' => '24 hours',
                    'limits' => [
                        0 => [
                            'limit' => 3,
                            'interval' => '30 seconds',
                        ],
                        1 => [
                            'limit' => 5,
                            'interval' => '60 seconds',
                        ],
                        2 => [
                            'limit' => 10,
                            'interval' => '90 seconds',
                        ],
                    ],
                    'lock_factory' => 'lock.factory',
                    'cache_pool' => 'cache.rate_limiter',
                ],
                'contact_form' => [
                    'enabled' => true,
                    'policy' => 'time_backoff',
                    'reset' => '24 hours',
                    'limits' => [
                        0 => [
                            'limit' => 3,
                            'interval' => '30 seconds',
                        ],
                        1 => [
                            'limit' => 5,
                            'interval' => '60 seconds',
                        ],
                        2 => [
                            'limit' => 10,
                            'interval' => '90 seconds',
                        ],
                    ],
                    'lock_factory' => 'lock.factory',
                    'cache_pool' => 'cache.rate_limiter',
                ],
                'notification' => [
                    'enabled' => true,
                    'policy' => 'time_backoff',
                    'reset' => '24 hours',
                    'limits' => [
                        0 => [
                            'limit' => 10,
                            'interval' => '10 seconds',
                        ],
                        1 => [
                            'limit' => 15,
                            'interval' => '30 seconds',
                        ],
                        2 => [
                            'limit' => 20,
                            'interval' => '60 seconds',
                        ],
                    ],
                    'lock_factory' => 'lock.factory',
                    'cache_pool' => 'cache.rate_limiter',
                ],
                'newsletter_form' => [
                    'enabled' => true,
                    'policy' => 'time_backoff',
                    'reset' => '24 hours',
                    'limits' => [
                        0 => [
                            'limit' => 3,
                            'interval' => '30 seconds',
                        ],
                        1 => [
                            'limit' => 5,
                            'interval' => '60 seconds',
                        ],
                        2 => [
                            'limit' => 10,
                            'interval' => '90 seconds',
                        ],
                    ],
                    'lock_factory' => 'lock.factory',
                    'cache_pool' => 'cache.rate_limiter',
                ],
                'cart_add_line_item' => [
                    'enabled' => true,
                    'policy' => 'system_config',
                    'reset' => '1 hours',
                    'limits' => [
                        0 => [
                            'domain' => 'core.cart.lineItemAddLimit',
                            'interval' => '60 seconds',
                        ],
                    ],
                    'lock_factory' => 'lock.factory',
                    'cache_pool' => 'cache.rate_limiter',
                ],
            ],
            'shopware.api.rate_limiter.login' => [
                'enabled' => true,
                'policy' => 'time_backoff',
                'reset' => '24 hours',
                'limits' => [
                    0 => [
                        'limit' => 10,
                        'interval' => '10 seconds',
                    ],
                    1 => [
                        'limit' => 15,
                        'interval' => '30 seconds',
                    ],
                    2 => [
                        'limit' => 20,
                        'interval' => '60 seconds',
                    ],
                ],
                'lock_factory' => 'lock.factory',
                'cache_pool' => 'cache.rate_limiter',
            ],
            'shopware.api.rate_limiter.login.enabled' => true,
            'shopware.api.rate_limiter.login.policy' => 'time_backoff',
            'shopware.api.rate_limiter.login.reset' => '24 hours',
            'shopware.api.rate_limiter.login.limits' => [
                0 => [
                    'limit' => 10,
                    'interval' => '10 seconds',
                ],
                1 => [
                    'limit' => 15,
                    'interval' => '30 seconds',
                ],
                2 => [
                    'limit' => 20,
                    'interval' => '60 seconds',
                ],
            ],
            'shopware.api.rate_limiter.login.limits.0' => [
                'limit' => 10,
                'interval' => '10 seconds',
            ],
            'shopware.api.rate_limiter.login.limits.0.limit' => 10,
            'shopware.api.rate_limiter.login.limits.0.interval' => '10 seconds',
            'shopware.api.rate_limiter.login.limits.1' => [
                'limit' => 15,
                'interval' => '30 seconds',
            ],
            'shopware.api.rate_limiter.login.limits.1.limit' => 15,
            'shopware.api.rate_limiter.login.limits.1.interval' => '30 seconds',
            'shopware.api.rate_limiter.login.limits.2' => [
                'limit' => 20,
                'interval' => '60 seconds',
            ],
            'shopware.api.rate_limiter.login.limits.2.limit' => 20,
            'shopware.api.rate_limiter.login.limits.2.interval' => '60 seconds',
            'shopware.api.rate_limiter.login.lock_factory' => 'lock.factory',
            'shopware.api.rate_limiter.login.cache_pool' => 'cache.rate_limiter',
            'shopware.api.rate_limiter.guest_login' => [
                'enabled' => true,
                'policy' => 'time_backoff',
                'reset' => '24 hours',
                'limits' => [
                    0 => [
                        'limit' => 10,
                        'interval' => '10 seconds',
                    ],
                    1 => [
                        'limit' => 15,
                        'interval' => '30 seconds',
                    ],
                    2 => [
                        'limit' => 20,
                        'interval' => '60 seconds',
                    ],
                ],
                'lock_factory' => 'lock.factory',
                'cache_pool' => 'cache.rate_limiter',
            ],
            'shopware.api.rate_limiter.guest_login.enabled' => true,
            'shopware.api.rate_limiter.guest_login.policy' => 'time_backoff',
            'shopware.api.rate_limiter.guest_login.reset' => '24 hours',
            'shopware.api.rate_limiter.guest_login.limits' => [
                0 => [
                    'limit' => 10,
                    'interval' => '10 seconds',
                ],
                1 => [
                    'limit' => 15,
                    'interval' => '30 seconds',
                ],
                2 => [
                    'limit' => 20,
                    'interval' => '60 seconds',
                ],
            ],
            'shopware.api.rate_limiter.guest_login.limits.0' => [
                'limit' => 10,
                'interval' => '10 seconds',
            ],
            'shopware.api.rate_limiter.guest_login.limits.0.limit' => 10,
            'shopware.api.rate_limiter.guest_login.limits.0.interval' => '10 seconds',
            'shopware.api.rate_limiter.guest_login.limits.1' => [
                'limit' => 15,
                'interval' => '30 seconds',
            ],
            'shopware.api.rate_limiter.guest_login.limits.1.limit' => 15,
            'shopware.api.rate_limiter.guest_login.limits.1.interval' => '30 seconds',
            'shopware.api.rate_limiter.guest_login.limits.2' => [
                'limit' => 20,
                'interval' => '60 seconds',
            ],
            'shopware.api.rate_limiter.guest_login.limits.2.limit' => 20,
            'shopware.api.rate_limiter.guest_login.limits.2.interval' => '60 seconds',
            'shopware.api.rate_limiter.guest_login.lock_factory' => 'lock.factory',
            'shopware.api.rate_limiter.guest_login.cache_pool' => 'cache.rate_limiter',
            'shopware.api.rate_limiter.oauth' => [
                'enabled' => true,
                'policy' => 'time_backoff',
                'reset' => '24 hours',
                'limits' => [
                    0 => [
                        'limit' => 10,
                        'interval' => '10 seconds',
                    ],
                    1 => [
                        'limit' => 15,
                        'interval' => '30 seconds',
                    ],
                    2 => [
                        'limit' => 20,
                        'interval' => '60 seconds',
                    ],
                ],
                'lock_factory' => 'lock.factory',
                'cache_pool' => 'cache.rate_limiter',
            ],
            'shopware.api.rate_limiter.oauth.enabled' => true,
            'shopware.api.rate_limiter.oauth.policy' => 'time_backoff',
            'shopware.api.rate_limiter.oauth.reset' => '24 hours',
            'shopware.api.rate_limiter.oauth.limits' => [
                0 => [
                    'limit' => 10,
                    'interval' => '10 seconds',
                ],
                1 => [
                    'limit' => 15,
                    'interval' => '30 seconds',
                ],
                2 => [
                    'limit' => 20,
                    'interval' => '60 seconds',
                ],
            ],
            'shopware.api.rate_limiter.oauth.limits.0' => [
                'limit' => 10,
                'interval' => '10 seconds',
            ],
            'shopware.api.rate_limiter.oauth.limits.0.limit' => 10,
            'shopware.api.rate_limiter.oauth.limits.0.interval' => '10 seconds',
            'shopware.api.rate_limiter.oauth.limits.1' => [
                'limit' => 15,
                'interval' => '30 seconds',
            ],
            'shopware.api.rate_limiter.oauth.limits.1.limit' => 15,
            'shopware.api.rate_limiter.oauth.limits.1.interval' => '30 seconds',
            'shopware.api.rate_limiter.oauth.limits.2' => [
                'limit' => 20,
                'interval' => '60 seconds',
            ],
            'shopware.api.rate_limiter.oauth.limits.2.limit' => 20,
            'shopware.api.rate_limiter.oauth.limits.2.interval' => '60 seconds',
            'shopware.api.rate_limiter.oauth.lock_factory' => 'lock.factory',
            'shopware.api.rate_limiter.oauth.cache_pool' => 'cache.rate_limiter',
            'shopware.api.rate_limiter.reset_password' => [
                'enabled' => true,
                'policy' => 'time_backoff',
                'reset' => '24 hours',
                'limits' => [
                    0 => [
                        'limit' => 3,
                        'interval' => '30 seconds',
                    ],
                    1 => [
                        'limit' => 5,
                        'interval' => '60 seconds',
                    ],
                    2 => [
                        'limit' => 10,
                        'interval' => '90 seconds',
                    ],
                ],
                'lock_factory' => 'lock.factory',
                'cache_pool' => 'cache.rate_limiter',
            ],
            'shopware.api.rate_limiter.reset_password.enabled' => true,
            'shopware.api.rate_limiter.reset_password.policy' => 'time_backoff',
            'shopware.api.rate_limiter.reset_password.reset' => '24 hours',
            'shopware.api.rate_limiter.reset_password.limits' => [
                0 => [
                    'limit' => 3,
                    'interval' => '30 seconds',
                ],
                1 => [
                    'limit' => 5,
                    'interval' => '60 seconds',
                ],
                2 => [
                    'limit' => 10,
                    'interval' => '90 seconds',
                ],
            ],
            'shopware.api.rate_limiter.reset_password.limits.0' => [
                'limit' => 3,
                'interval' => '30 seconds',
            ],
            'shopware.api.rate_limiter.reset_password.limits.0.limit' => 3,
            'shopware.api.rate_limiter.reset_password.limits.0.interval' => '30 seconds',
            'shopware.api.rate_limiter.reset_password.limits.1' => [
                'limit' => 5,
                'interval' => '60 seconds',
            ],
            'shopware.api.rate_limiter.reset_password.limits.1.limit' => 5,
            'shopware.api.rate_limiter.reset_password.limits.1.interval' => '60 seconds',
            'shopware.api.rate_limiter.reset_password.limits.2' => [
                'limit' => 10,
                'interval' => '90 seconds',
            ],
            'shopware.api.rate_limiter.reset_password.limits.2.limit' => 10,
            'shopware.api.rate_limiter.reset_password.limits.2.interval' => '90 seconds',
            'shopware.api.rate_limiter.reset_password.lock_factory' => 'lock.factory',
            'shopware.api.rate_limiter.reset_password.cache_pool' => 'cache.rate_limiter',
            'shopware.api.rate_limiter.user_recovery' => [
                'enabled' => true,
                'policy' => 'time_backoff',
                'reset' => '24 hours',
                'limits' => [
                    0 => [
                        'limit' => 3,
                        'interval' => '30 seconds',
                    ],
                    1 => [
                        'limit' => 5,
                        'interval' => '60 seconds',
                    ],
                    2 => [
                        'limit' => 10,
                        'interval' => '90 seconds',
                    ],
                ],
                'lock_factory' => 'lock.factory',
                'cache_pool' => 'cache.rate_limiter',
            ],
            'shopware.api.rate_limiter.user_recovery.enabled' => true,
            'shopware.api.rate_limiter.user_recovery.policy' => 'time_backoff',
            'shopware.api.rate_limiter.user_recovery.reset' => '24 hours',
            'shopware.api.rate_limiter.user_recovery.limits' => [
                0 => [
                    'limit' => 3,
                    'interval' => '30 seconds',
                ],
                1 => [
                    'limit' => 5,
                    'interval' => '60 seconds',
                ],
                2 => [
                    'limit' => 10,
                    'interval' => '90 seconds',
                ],
            ],
            'shopware.api.rate_limiter.user_recovery.limits.0' => [
                'limit' => 3,
                'interval' => '30 seconds',
            ],
            'shopware.api.rate_limiter.user_recovery.limits.0.limit' => 3,
            'shopware.api.rate_limiter.user_recovery.limits.0.interval' => '30 seconds',
            'shopware.api.rate_limiter.user_recovery.limits.1' => [
                'limit' => 5,
                'interval' => '60 seconds',
            ],
            'shopware.api.rate_limiter.user_recovery.limits.1.limit' => 5,
            'shopware.api.rate_limiter.user_recovery.limits.1.interval' => '60 seconds',
            'shopware.api.rate_limiter.user_recovery.limits.2' => [
                'limit' => 10,
                'interval' => '90 seconds',
            ],
            'shopware.api.rate_limiter.user_recovery.limits.2.limit' => 10,
            'shopware.api.rate_limiter.user_recovery.limits.2.interval' => '90 seconds',
            'shopware.api.rate_limiter.user_recovery.lock_factory' => 'lock.factory',
            'shopware.api.rate_limiter.user_recovery.cache_pool' => 'cache.rate_limiter',
            'shopware.api.rate_limiter.contact_form' => [
                'enabled' => true,
                'policy' => 'time_backoff',
                'reset' => '24 hours',
                'limits' => [
                    0 => [
                        'limit' => 3,
                        'interval' => '30 seconds',
                    ],
                    1 => [
                        'limit' => 5,
                        'interval' => '60 seconds',
                    ],
                    2 => [
                        'limit' => 10,
                        'interval' => '90 seconds',
                    ],
                ],
                'lock_factory' => 'lock.factory',
                'cache_pool' => 'cache.rate_limiter',
            ],
            'shopware.api.rate_limiter.contact_form.enabled' => true,
            'shopware.api.rate_limiter.contact_form.policy' => 'time_backoff',
            'shopware.api.rate_limiter.contact_form.reset' => '24 hours',
            'shopware.api.rate_limiter.contact_form.limits' => [
                0 => [
                    'limit' => 3,
                    'interval' => '30 seconds',
                ],
                1 => [
                    'limit' => 5,
                    'interval' => '60 seconds',
                ],
                2 => [
                    'limit' => 10,
                    'interval' => '90 seconds',
                ],
            ],
            'shopware.api.rate_limiter.contact_form.limits.0' => [
                'limit' => 3,
                'interval' => '30 seconds',
            ],
            'shopware.api.rate_limiter.contact_form.limits.0.limit' => 3,
            'shopware.api.rate_limiter.contact_form.limits.0.interval' => '30 seconds',
            'shopware.api.rate_limiter.contact_form.limits.1' => [
                'limit' => 5,
                'interval' => '60 seconds',
            ],
            'shopware.api.rate_limiter.contact_form.limits.1.limit' => 5,
            'shopware.api.rate_limiter.contact_form.limits.1.interval' => '60 seconds',
            'shopware.api.rate_limiter.contact_form.limits.2' => [
                'limit' => 10,
                'interval' => '90 seconds',
            ],
            'shopware.api.rate_limiter.contact_form.limits.2.limit' => 10,
            'shopware.api.rate_limiter.contact_form.limits.2.interval' => '90 seconds',
            'shopware.api.rate_limiter.contact_form.lock_factory' => 'lock.factory',
            'shopware.api.rate_limiter.contact_form.cache_pool' => 'cache.rate_limiter',
            'shopware.api.rate_limiter.notification' => [
                'enabled' => true,
                'policy' => 'time_backoff',
                'reset' => '24 hours',
                'limits' => [
                    0 => [
                        'limit' => 10,
                        'interval' => '10 seconds',
                    ],
                    1 => [
                        'limit' => 15,
                        'interval' => '30 seconds',
                    ],
                    2 => [
                        'limit' => 20,
                        'interval' => '60 seconds',
                    ],
                ],
                'lock_factory' => 'lock.factory',
                'cache_pool' => 'cache.rate_limiter',
            ],
            'shopware.api.rate_limiter.notification.enabled' => true,
            'shopware.api.rate_limiter.notification.policy' => 'time_backoff',
            'shopware.api.rate_limiter.notification.reset' => '24 hours',
            'shopware.api.rate_limiter.notification.limits' => [
                0 => [
                    'limit' => 10,
                    'interval' => '10 seconds',
                ],
                1 => [
                    'limit' => 15,
                    'interval' => '30 seconds',
                ],
                2 => [
                    'limit' => 20,
                    'interval' => '60 seconds',
                ],
            ],
            'shopware.api.rate_limiter.notification.limits.0' => [
                'limit' => 10,
                'interval' => '10 seconds',
            ],
            'shopware.api.rate_limiter.notification.limits.0.limit' => 10,
            'shopware.api.rate_limiter.notification.limits.0.interval' => '10 seconds',
            'shopware.api.rate_limiter.notification.limits.1' => [
                'limit' => 15,
                'interval' => '30 seconds',
            ],
            'shopware.api.rate_limiter.notification.limits.1.limit' => 15,
            'shopware.api.rate_limiter.notification.limits.1.interval' => '30 seconds',
            'shopware.api.rate_limiter.notification.limits.2' => [
                'limit' => 20,
                'interval' => '60 seconds',
            ],
            'shopware.api.rate_limiter.notification.limits.2.limit' => 20,
            'shopware.api.rate_limiter.notification.limits.2.interval' => '60 seconds',
            'shopware.api.rate_limiter.notification.lock_factory' => 'lock.factory',
            'shopware.api.rate_limiter.notification.cache_pool' => 'cache.rate_limiter',
            'shopware.api.rate_limiter.newsletter_form' => [
                'enabled' => true,
                'policy' => 'time_backoff',
                'reset' => '24 hours',
                'limits' => [
                    0 => [
                        'limit' => 3,
                        'interval' => '30 seconds',
                    ],
                    1 => [
                        'limit' => 5,
                        'interval' => '60 seconds',
                    ],
                    2 => [
                        'limit' => 10,
                        'interval' => '90 seconds',
                    ],
                ],
                'lock_factory' => 'lock.factory',
                'cache_pool' => 'cache.rate_limiter',
            ],
            'shopware.api.rate_limiter.newsletter_form.enabled' => true,
            'shopware.api.rate_limiter.newsletter_form.policy' => 'time_backoff',
            'shopware.api.rate_limiter.newsletter_form.reset' => '24 hours',
            'shopware.api.rate_limiter.newsletter_form.limits' => [
                0 => [
                    'limit' => 3,
                    'interval' => '30 seconds',
                ],
                1 => [
                    'limit' => 5,
                    'interval' => '60 seconds',
                ],
                2 => [
                    'limit' => 10,
                    'interval' => '90 seconds',
                ],
            ],
            'shopware.api.rate_limiter.newsletter_form.limits.0' => [
                'limit' => 3,
                'interval' => '30 seconds',
            ],
            'shopware.api.rate_limiter.newsletter_form.limits.0.limit' => 3,
            'shopware.api.rate_limiter.newsletter_form.limits.0.interval' => '30 seconds',
            'shopware.api.rate_limiter.newsletter_form.limits.1' => [
                'limit' => 5,
                'interval' => '60 seconds',
            ],
            'shopware.api.rate_limiter.newsletter_form.limits.1.limit' => 5,
            'shopware.api.rate_limiter.newsletter_form.limits.1.interval' => '60 seconds',
            'shopware.api.rate_limiter.newsletter_form.limits.2' => [
                'limit' => 10,
                'interval' => '90 seconds',
            ],
            'shopware.api.rate_limiter.newsletter_form.limits.2.limit' => 10,
            'shopware.api.rate_limiter.newsletter_form.limits.2.interval' => '90 seconds',
            'shopware.api.rate_limiter.newsletter_form.lock_factory' => 'lock.factory',
            'shopware.api.rate_limiter.newsletter_form.cache_pool' => 'cache.rate_limiter',
            'shopware.api.rate_limiter.cart_add_line_item' => [
                'enabled' => true,
                'policy' => 'system_config',
                'reset' => '1 hours',
                'limits' => [
                    0 => [
                        'domain' => 'core.cart.lineItemAddLimit',
                        'interval' => '60 seconds',
                    ],
                ],
                'lock_factory' => 'lock.factory',
                'cache_pool' => 'cache.rate_limiter',
            ],
            'shopware.api.rate_limiter.cart_add_line_item.enabled' => true,
            'shopware.api.rate_limiter.cart_add_line_item.policy' => 'system_config',
            'shopware.api.rate_limiter.cart_add_line_item.reset' => '1 hours',
            'shopware.api.rate_limiter.cart_add_line_item.limits' => [
                0 => [
                    'domain' => 'core.cart.lineItemAddLimit',
                    'interval' => '60 seconds',
                ],
            ],
            'shopware.api.rate_limiter.cart_add_line_item.limits.0' => [
                'domain' => 'core.cart.lineItemAddLimit',
                'interval' => '60 seconds',
            ],
            'shopware.api.rate_limiter.cart_add_line_item.limits.0.domain' => 'core.cart.lineItemAddLimit',
            'shopware.api.rate_limiter.cart_add_line_item.limits.0.interval' => '60 seconds',
            'shopware.api.rate_limiter.cart_add_line_item.lock_factory' => 'lock.factory',
            'shopware.api.rate_limiter.cart_add_line_item.cache_pool' => 'cache.rate_limiter',
            'shopware.api.access_token_ttl' => 'PT10M',
            'shopware.api.refresh_token_ttl' => 'P1W',
            'shopware.admin_worker' => [
                'enable_admin_worker' => true,
                'enable_queue_stats_worker' => true,
                'enable_notification_worker' => true,
                'poll_interval' => 20,
                'transports' => [
                    0 => 'async',
                    1 => 'low_priority',
                ],
                'memory_limit' => '128M',
            ],
            'shopware.admin_worker.enable_admin_worker' => true,
            'shopware.admin_worker.enable_queue_stats_worker' => true,
            'shopware.admin_worker.enable_notification_worker' => true,
            'shopware.admin_worker.poll_interval' => 20,
            'shopware.admin_worker.transports' => [
                0 => 'async',
                1 => 'low_priority',
            ],
            'shopware.admin_worker.transports.0' => 'async',
            'shopware.admin_worker.transports.1' => 'low_priority',
            'shopware.admin_worker.memory_limit' => '128M',
            'shopware.auto_update' => [
                'enabled' => true,
            ],
            'shopware.auto_update.enabled' => true,
            'shopware.store' => [
                'frw' => false,
            ],
            'shopware.sitemap' => [
                'batchsize' => 100,
                'custom_urls' => [

                ],
                'excluded_urls' => [

                ],
            ],
            'shopware.sitemap.batchsize' => 100,
            'shopware.sitemap.custom_urls' => [

            ],
            'shopware.sitemap.excluded_urls' => [

            ],
            'shopware.deployment.cluster_setup' => false,
            'shopware.media' => [
                'enable_url_upload_feature' => true,
                'enable_url_validation' => false,
                'url_upload_max_size' => 0,
            ],
            'shopware.media.enable_url_upload_feature' => true,
            'shopware.media.enable_url_validation' => false,
            'shopware.media.url_upload_max_size' => 0,
            'shopware.dal' => [
                'batch_size' => 125,
                'max_rule_prices' => 100,
                'versioning' => [
                    'expire_days' => 30,
                ],
            ],
            'shopware.dal.batch_size' => 125,
            'shopware.dal.max_rule_prices' => 100,
            'shopware.dal.versioning' => [
                'expire_days' => 30,
            ],
            'shopware.dal.versioning.expire_days' => 30,
            'shopware.mail' => [
                'update_mail_variables_on_send' => true,
            ],
            'shopware.mail.update_mail_variables_on_send' => true,
            'shopware.cart' => [
                'compress' => false,
                'expire_days' => 120,
                'redis_url' => false,
            ],
            'shopware.cart.compress' => false,
            'shopware.cart.expire_days' => 120,
            'shopware.cart.redis_url' => false,
            'shopware.number_range' => [
                'increment_storage' => 'SQL',
                'redis_url' => false,
            ],
            'shopware.number_range.increment_storage' => 'SQL',
            'shopware.number_range.redis_url' => false,
            'shopware.sales_channel_context' => [
                'expire_days' => 120,
            ],
            'shopware.sales_channel_context.expire_days' => 120,
            'shopware.html_sanitizer.enabled' => true,
            'shopware.html_sanitizer.cache_enabled' => true,
            'shopware.html_sanitizer.sets' => [
                'basic' => [
                    'tags' => [
                        0 => 'a',
                        1 => 'abbr',
                        2 => 'acronym',
                        3 => 'address',
                        4 => 'b',
                        5 => 'bdo',
                        6 => 'big',
                        7 => 'blockquote',
                        8 => 'br',
                        9 => 'caption',
                        10 => 'center',
                        11 => 'cite',
                        12 => 'code',
                        13 => 'col',
                        14 => 'colgroup',
                        15 => 'dd',
                        16 => 'del',
                        17 => 'dfn',
                        18 => 'dir',
                        19 => 'div',
                        20 => 'dl',
                        21 => 'dt',
                        22 => 'em',
                        23 => 'font',
                        24 => 'h1',
                        25 => 'h2',
                        26 => 'h3',
                        27 => 'h4',
                        28 => 'h5',
                        29 => 'h6',
                        30 => 'hr',
                        31 => 'i',
                        32 => 'ins',
                        33 => 'kbd',
                        34 => 'li',
                        35 => 'menu',
                        36 => 'ol',
                        37 => 'p',
                        38 => 'pre',
                        39 => 'q',
                        40 => 's',
                        41 => 'samp',
                        42 => 'small',
                        43 => 'span',
                        44 => 'strike',
                        45 => 'strong',
                        46 => 'sub',
                        47 => 'sup',
                        48 => 'table',
                        49 => 'tbody',
                        50 => 'td',
                        51 => 'tfoot',
                        52 => 'th',
                        53 => 'thead',
                        54 => 'tr',
                        55 => 'tt',
                        56 => 'u',
                        57 => 'ul',
                        58 => 'var',
                        59 => 'img',
                    ],
                    'attributes' => [
                        0 => 'align',
                        1 => 'bgcolor',
                        2 => 'border',
                        3 => 'cellpadding',
                        4 => 'cellspacing',
                        5 => 'cite',
                        6 => 'class',
                        7 => 'clear',
                        8 => 'color',
                        9 => 'colspan',
                        10 => 'dir',
                        11 => 'face',
                        12 => 'frame',
                        13 => 'height',
                        14 => 'href',
                        15 => 'id',
                        16 => 'lang',
                        17 => 'name',
                        18 => 'noshade',
                        19 => 'nowrap',
                        20 => 'rel',
                        21 => 'rev',
                        22 => 'rowspan',
                        23 => 'scope',
                        24 => 'size',
                        25 => 'span',
                        26 => 'start',
                        27 => 'style',
                        28 => 'summary',
                        29 => 'title',
                        30 => 'type',
                        31 => 'valign',
                        32 => 'value',
                        33 => 'width',
                        34 => 'target',
                        35 => 'src',
                        36 => 'alt',
                    ],
                    'options' => [
                        'Attr.AllowedFrameTargets' => [
                            'values' => [
                                0 => '_blank',
                                1 => '_self',
                                2 => '_parent',
                                3 => '_top',
                            ],
                        ],
                        'Attr.AllowedRel' => [
                            'values' => [
                                0 => 'nofollow',
                                1 => 'print',
                            ],
                        ],
                        'Attr.EnableID' => true,
                    ],
                    'custom_attributes' => [

                    ],
                ],
                'media' => [
                    'tags' => [
                        0 => 'img',
                    ],
                    'attributes' => [
                        0 => 'src',
                        1 => 'alt',
                    ],
                    'custom_attributes' => [

                    ],
                    'options' => [

                    ],
                ],
                'script' => [
                    'tags' => [
                        0 => 'script',
                    ],
                    'options' => [
                        'HTML.Trusted' => true,
                    ],
                    'attributes' => [

                    ],
                    'custom_attributes' => [

                    ],
                ],
                'tidy' => [
                    'options' => [
                        'Output.TidyFormat' => true,
                    ],
                    'tags' => [

                    ],
                    'attributes' => [

                    ],
                    'custom_attributes' => [

                    ],
                ],
                'bootstrap' => [
                    'tags' => [
                        0 => 'a',
                        1 => 'span',
                    ],
                    'attributes' => [
                        0 => 'role',
                        1 => 'aria-label',
                        2 => 'aria-labelledly',
                        3 => 'aria-current',
                        4 => 'aria-expanded',
                        5 => 'aria-controls',
                        6 => 'aria-hidden',
                        7 => 'aria-describedby',
                        8 => 'tabindex',
                        9 => 'aria-modal',
                        10 => 'data-bs-toggle',
                        11 => 'data-bs-target',
                        12 => 'data-bs-dismiss',
                        13 => 'data-bs-slide',
                        14 => 'data-bs-slide-to',
                        15 => 'data-bs-parent',
                        16 => 'data-bs-config',
                        17 => 'data-bs-content',
                        18 => 'data-bs-spy',
                    ],
                    'custom_attributes' => [
                        0 => [
                            'tags' => [
                                0 => 'a',
                                1 => 'span',
                            ],
                            'attributes' => [
                                0 => 'href',
                                1 => 'role',
                                2 => 'aria-label',
                                3 => 'aria-labelledly',
                                4 => 'aria-current',
                                5 => 'aria-expanded',
                                6 => 'aria-controls',
                                7 => 'aria-hidden',
                                8 => 'aria-describedby',
                                9 => 'tabindex',
                                10 => 'aria-modal',
                                11 => 'data-bs-toggle',
                                12 => 'data-bs-target',
                                13 => 'data-bs-dismiss',
                                14 => 'data-bs-slide',
                                15 => 'data-bs-slide-to',
                                16 => 'data-bs-parent',
                                17 => 'data-bs-config',
                                18 => 'data-bs-content',
                                19 => 'data-bs-spy',
                            ],
                        ],
                    ],
                    'options' => [

                    ],
                ],
                'snippet' => [
                    'tags' => [
                        0 => 'a',
                    ],
                    'attributes' => [
                        0 => 'data-url',
                        1 => 'data-ajax-modal',
                    ],
                    'custom_attributes' => [
                        0 => [
                            'tags' => [
                                0 => 'a',
                            ],
                            'attributes' => [
                                0 => 'data-url',
                                1 => 'data-ajax-modal',
                            ],
                        ],
                    ],
                    'options' => [

                    ],
                ],
            ],
            'shopware.html_sanitizer.sets.basic' => [
                'tags' => [
                    0 => 'a',
                    1 => 'abbr',
                    2 => 'acronym',
                    3 => 'address',
                    4 => 'b',
                    5 => 'bdo',
                    6 => 'big',
                    7 => 'blockquote',
                    8 => 'br',
                    9 => 'caption',
                    10 => 'center',
                    11 => 'cite',
                    12 => 'code',
                    13 => 'col',
                    14 => 'colgroup',
                    15 => 'dd',
                    16 => 'del',
                    17 => 'dfn',
                    18 => 'dir',
                    19 => 'div',
                    20 => 'dl',
                    21 => 'dt',
                    22 => 'em',
                    23 => 'font',
                    24 => 'h1',
                    25 => 'h2',
                    26 => 'h3',
                    27 => 'h4',
                    28 => 'h5',
                    29 => 'h6',
                    30 => 'hr',
                    31 => 'i',
                    32 => 'ins',
                    33 => 'kbd',
                    34 => 'li',
                    35 => 'menu',
                    36 => 'ol',
                    37 => 'p',
                    38 => 'pre',
                    39 => 'q',
                    40 => 's',
                    41 => 'samp',
                    42 => 'small',
                    43 => 'span',
                    44 => 'strike',
                    45 => 'strong',
                    46 => 'sub',
                    47 => 'sup',
                    48 => 'table',
                    49 => 'tbody',
                    50 => 'td',
                    51 => 'tfoot',
                    52 => 'th',
                    53 => 'thead',
                    54 => 'tr',
                    55 => 'tt',
                    56 => 'u',
                    57 => 'ul',
                    58 => 'var',
                    59 => 'img',
                ],
                'attributes' => [
                    0 => 'align',
                    1 => 'bgcolor',
                    2 => 'border',
                    3 => 'cellpadding',
                    4 => 'cellspacing',
                    5 => 'cite',
                    6 => 'class',
                    7 => 'clear',
                    8 => 'color',
                    9 => 'colspan',
                    10 => 'dir',
                    11 => 'face',
                    12 => 'frame',
                    13 => 'height',
                    14 => 'href',
                    15 => 'id',
                    16 => 'lang',
                    17 => 'name',
                    18 => 'noshade',
                    19 => 'nowrap',
                    20 => 'rel',
                    21 => 'rev',
                    22 => 'rowspan',
                    23 => 'scope',
                    24 => 'size',
                    25 => 'span',
                    26 => 'start',
                    27 => 'style',
                    28 => 'summary',
                    29 => 'title',
                    30 => 'type',
                    31 => 'valign',
                    32 => 'value',
                    33 => 'width',
                    34 => 'target',
                    35 => 'src',
                    36 => 'alt',
                ],
                'options' => [
                    'Attr.AllowedFrameTargets' => [
                        'values' => [
                            0 => '_blank',
                            1 => '_self',
                            2 => '_parent',
                            3 => '_top',
                        ],
                    ],
                    'Attr.AllowedRel' => [
                        'values' => [
                            0 => 'nofollow',
                            1 => 'print',
                        ],
                    ],
                    'Attr.EnableID' => true,
                ],
                'custom_attributes' => [

                ],
            ],
            'shopware.html_sanitizer.sets.basic.tags' => [
                0 => 'a',
                1 => 'abbr',
                2 => 'acronym',
                3 => 'address',
                4 => 'b',
                5 => 'bdo',
                6 => 'big',
                7 => 'blockquote',
                8 => 'br',
                9 => 'caption',
                10 => 'center',
                11 => 'cite',
                12 => 'code',
                13 => 'col',
                14 => 'colgroup',
                15 => 'dd',
                16 => 'del',
                17 => 'dfn',
                18 => 'dir',
                19 => 'div',
                20 => 'dl',
                21 => 'dt',
                22 => 'em',
                23 => 'font',
                24 => 'h1',
                25 => 'h2',
                26 => 'h3',
                27 => 'h4',
                28 => 'h5',
                29 => 'h6',
                30 => 'hr',
                31 => 'i',
                32 => 'ins',
                33 => 'kbd',
                34 => 'li',
                35 => 'menu',
                36 => 'ol',
                37 => 'p',
                38 => 'pre',
                39 => 'q',
                40 => 's',
                41 => 'samp',
                42 => 'small',
                43 => 'span',
                44 => 'strike',
                45 => 'strong',
                46 => 'sub',
                47 => 'sup',
                48 => 'table',
                49 => 'tbody',
                50 => 'td',
                51 => 'tfoot',
                52 => 'th',
                53 => 'thead',
                54 => 'tr',
                55 => 'tt',
                56 => 'u',
                57 => 'ul',
                58 => 'var',
                59 => 'img',
            ],
            'shopware.html_sanitizer.sets.basic.tags.0' => 'a',
            'shopware.html_sanitizer.sets.basic.tags.1' => 'abbr',
            'shopware.html_sanitizer.sets.basic.tags.2' => 'acronym',
            'shopware.html_sanitizer.sets.basic.tags.3' => 'address',
            'shopware.html_sanitizer.sets.basic.tags.4' => 'b',
            'shopware.html_sanitizer.sets.basic.tags.5' => 'bdo',
            'shopware.html_sanitizer.sets.basic.tags.6' => 'big',
            'shopware.html_sanitizer.sets.basic.tags.7' => 'blockquote',
            'shopware.html_sanitizer.sets.basic.tags.8' => 'br',
            'shopware.html_sanitizer.sets.basic.tags.9' => 'caption',
            'shopware.html_sanitizer.sets.basic.tags.10' => 'center',
            'shopware.html_sanitizer.sets.basic.tags.11' => 'cite',
            'shopware.html_sanitizer.sets.basic.tags.12' => 'code',
            'shopware.html_sanitizer.sets.basic.tags.13' => 'col',
            'shopware.html_sanitizer.sets.basic.tags.14' => 'colgroup',
            'shopware.html_sanitizer.sets.basic.tags.15' => 'dd',
            'shopware.html_sanitizer.sets.basic.tags.16' => 'del',
            'shopware.html_sanitizer.sets.basic.tags.17' => 'dfn',
            'shopware.html_sanitizer.sets.basic.tags.18' => 'dir',
            'shopware.html_sanitizer.sets.basic.tags.19' => 'div',
            'shopware.html_sanitizer.sets.basic.tags.20' => 'dl',
            'shopware.html_sanitizer.sets.basic.tags.21' => 'dt',
            'shopware.html_sanitizer.sets.basic.tags.22' => 'em',
            'shopware.html_sanitizer.sets.basic.tags.23' => 'font',
            'shopware.html_sanitizer.sets.basic.tags.24' => 'h1',
            'shopware.html_sanitizer.sets.basic.tags.25' => 'h2',
            'shopware.html_sanitizer.sets.basic.tags.26' => 'h3',
            'shopware.html_sanitizer.sets.basic.tags.27' => 'h4',
            'shopware.html_sanitizer.sets.basic.tags.28' => 'h5',
            'shopware.html_sanitizer.sets.basic.tags.29' => 'h6',
            'shopware.html_sanitizer.sets.basic.tags.30' => 'hr',
            'shopware.html_sanitizer.sets.basic.tags.31' => 'i',
            'shopware.html_sanitizer.sets.basic.tags.32' => 'ins',
            'shopware.html_sanitizer.sets.basic.tags.33' => 'kbd',
            'shopware.html_sanitizer.sets.basic.tags.34' => 'li',
            'shopware.html_sanitizer.sets.basic.tags.35' => 'menu',
            'shopware.html_sanitizer.sets.basic.tags.36' => 'ol',
            'shopware.html_sanitizer.sets.basic.tags.37' => 'p',
            'shopware.html_sanitizer.sets.basic.tags.38' => 'pre',
            'shopware.html_sanitizer.sets.basic.tags.39' => 'q',
            'shopware.html_sanitizer.sets.basic.tags.40' => 's',
            'shopware.html_sanitizer.sets.basic.tags.41' => 'samp',
            'shopware.html_sanitizer.sets.basic.tags.42' => 'small',
            'shopware.html_sanitizer.sets.basic.tags.43' => 'span',
            'shopware.html_sanitizer.sets.basic.tags.44' => 'strike',
            'shopware.html_sanitizer.sets.basic.tags.45' => 'strong',
            'shopware.html_sanitizer.sets.basic.tags.46' => 'sub',
            'shopware.html_sanitizer.sets.basic.tags.47' => 'sup',
            'shopware.html_sanitizer.sets.basic.tags.48' => 'table',
            'shopware.html_sanitizer.sets.basic.tags.49' => 'tbody',
            'shopware.html_sanitizer.sets.basic.tags.50' => 'td',
            'shopware.html_sanitizer.sets.basic.tags.51' => 'tfoot',
            'shopware.html_sanitizer.sets.basic.tags.52' => 'th',
            'shopware.html_sanitizer.sets.basic.tags.53' => 'thead',
            'shopware.html_sanitizer.sets.basic.tags.54' => 'tr',
            'shopware.html_sanitizer.sets.basic.tags.55' => 'tt',
            'shopware.html_sanitizer.sets.basic.tags.56' => 'u',
            'shopware.html_sanitizer.sets.basic.tags.57' => 'ul',
            'shopware.html_sanitizer.sets.basic.tags.58' => 'var',
            'shopware.html_sanitizer.sets.basic.tags.59' => 'img',
            'shopware.html_sanitizer.sets.basic.attributes' => [
                0 => 'align',
                1 => 'bgcolor',
                2 => 'border',
                3 => 'cellpadding',
                4 => 'cellspacing',
                5 => 'cite',
                6 => 'class',
                7 => 'clear',
                8 => 'color',
                9 => 'colspan',
                10 => 'dir',
                11 => 'face',
                12 => 'frame',
                13 => 'height',
                14 => 'href',
                15 => 'id',
                16 => 'lang',
                17 => 'name',
                18 => 'noshade',
                19 => 'nowrap',
                20 => 'rel',
                21 => 'rev',
                22 => 'rowspan',
                23 => 'scope',
                24 => 'size',
                25 => 'span',
                26 => 'start',
                27 => 'style',
                28 => 'summary',
                29 => 'title',
                30 => 'type',
                31 => 'valign',
                32 => 'value',
                33 => 'width',
                34 => 'target',
                35 => 'src',
                36 => 'alt',
            ],
            'shopware.html_sanitizer.sets.basic.attributes.0' => 'align',
            'shopware.html_sanitizer.sets.basic.attributes.1' => 'bgcolor',
            'shopware.html_sanitizer.sets.basic.attributes.2' => 'border',
            'shopware.html_sanitizer.sets.basic.attributes.3' => 'cellpadding',
            'shopware.html_sanitizer.sets.basic.attributes.4' => 'cellspacing',
            'shopware.html_sanitizer.sets.basic.attributes.5' => 'cite',
            'shopware.html_sanitizer.sets.basic.attributes.6' => 'class',
            'shopware.html_sanitizer.sets.basic.attributes.7' => 'clear',
            'shopware.html_sanitizer.sets.basic.attributes.8' => 'color',
            'shopware.html_sanitizer.sets.basic.attributes.9' => 'colspan',
            'shopware.html_sanitizer.sets.basic.attributes.10' => 'dir',
            'shopware.html_sanitizer.sets.basic.attributes.11' => 'face',
            'shopware.html_sanitizer.sets.basic.attributes.12' => 'frame',
            'shopware.html_sanitizer.sets.basic.attributes.13' => 'height',
            'shopware.html_sanitizer.sets.basic.attributes.14' => 'href',
            'shopware.html_sanitizer.sets.basic.attributes.15' => 'id',
            'shopware.html_sanitizer.sets.basic.attributes.16' => 'lang',
            'shopware.html_sanitizer.sets.basic.attributes.17' => 'name',
            'shopware.html_sanitizer.sets.basic.attributes.18' => 'noshade',
            'shopware.html_sanitizer.sets.basic.attributes.19' => 'nowrap',
            'shopware.html_sanitizer.sets.basic.attributes.20' => 'rel',
            'shopware.html_sanitizer.sets.basic.attributes.21' => 'rev',
            'shopware.html_sanitizer.sets.basic.attributes.22' => 'rowspan',
            'shopware.html_sanitizer.sets.basic.attributes.23' => 'scope',
            'shopware.html_sanitizer.sets.basic.attributes.24' => 'size',
            'shopware.html_sanitizer.sets.basic.attributes.25' => 'span',
            'shopware.html_sanitizer.sets.basic.attributes.26' => 'start',
            'shopware.html_sanitizer.sets.basic.attributes.27' => 'style',
            'shopware.html_sanitizer.sets.basic.attributes.28' => 'summary',
            'shopware.html_sanitizer.sets.basic.attributes.29' => 'title',
            'shopware.html_sanitizer.sets.basic.attributes.30' => 'type',
            'shopware.html_sanitizer.sets.basic.attributes.31' => 'valign',
            'shopware.html_sanitizer.sets.basic.attributes.32' => 'value',
            'shopware.html_sanitizer.sets.basic.attributes.33' => 'width',
            'shopware.html_sanitizer.sets.basic.attributes.34' => 'target',
            'shopware.html_sanitizer.sets.basic.attributes.35' => 'src',
            'shopware.html_sanitizer.sets.basic.attributes.36' => 'alt',
            'shopware.html_sanitizer.sets.basic.options' => [
                'Attr.AllowedFrameTargets' => [
                    'values' => [
                        0 => '_blank',
                        1 => '_self',
                        2 => '_parent',
                        3 => '_top',
                    ],
                ],
                'Attr.AllowedRel' => [
                    'values' => [
                        0 => 'nofollow',
                        1 => 'print',
                    ],
                ],
                'Attr.EnableID' => true,
            ],
            'shopware.html_sanitizer.sets.basic.options.Attr.AllowedFrameTargets' => [
                'values' => [
                    0 => '_blank',
                    1 => '_self',
                    2 => '_parent',
                    3 => '_top',
                ],
            ],
            'shopware.html_sanitizer.sets.basic.options.Attr.AllowedFrameTargets.values' => [
                0 => '_blank',
                1 => '_self',
                2 => '_parent',
                3 => '_top',
            ],
            'shopware.html_sanitizer.sets.basic.options.Attr.AllowedFrameTargets.values.0' => '_blank',
            'shopware.html_sanitizer.sets.basic.options.Attr.AllowedFrameTargets.values.1' => '_self',
            'shopware.html_sanitizer.sets.basic.options.Attr.AllowedFrameTargets.values.2' => '_parent',
            'shopware.html_sanitizer.sets.basic.options.Attr.AllowedFrameTargets.values.3' => '_top',
            'shopware.html_sanitizer.sets.basic.options.Attr.AllowedRel' => [
                'values' => [
                    0 => 'nofollow',
                    1 => 'print',
                ],
            ],
            'shopware.html_sanitizer.sets.basic.options.Attr.AllowedRel.values' => [
                0 => 'nofollow',
                1 => 'print',
            ],
            'shopware.html_sanitizer.sets.basic.options.Attr.AllowedRel.values.0' => 'nofollow',
            'shopware.html_sanitizer.sets.basic.options.Attr.AllowedRel.values.1' => 'print',
            'shopware.html_sanitizer.sets.basic.options.Attr.EnableID' => true,
            'shopware.html_sanitizer.sets.basic.custom_attributes' => [

            ],
            'shopware.html_sanitizer.sets.media' => [
                'tags' => [
                    0 => 'img',
                ],
                'attributes' => [
                    0 => 'src',
                    1 => 'alt',
                ],
                'custom_attributes' => [

                ],
                'options' => [

                ],
            ],
            'shopware.html_sanitizer.sets.media.tags' => [
                0 => 'img',
            ],
            'shopware.html_sanitizer.sets.media.tags.0' => 'img',
            'shopware.html_sanitizer.sets.media.attributes' => [
                0 => 'src',
                1 => 'alt',
            ],
            'shopware.html_sanitizer.sets.media.attributes.0' => 'src',
            'shopware.html_sanitizer.sets.media.attributes.1' => 'alt',
            'shopware.html_sanitizer.sets.media.custom_attributes' => [

            ],
            'shopware.html_sanitizer.sets.media.options' => [

            ],
            'shopware.html_sanitizer.sets.script' => [
                'tags' => [
                    0 => 'script',
                ],
                'options' => [
                    'HTML.Trusted' => true,
                ],
                'attributes' => [

                ],
                'custom_attributes' => [

                ],
            ],
            'shopware.html_sanitizer.sets.script.tags' => [
                0 => 'script',
            ],
            'shopware.html_sanitizer.sets.script.tags.0' => 'script',
            'shopware.html_sanitizer.sets.script.options' => [
                'HTML.Trusted' => true,
            ],
            'shopware.html_sanitizer.sets.script.options.HTML.Trusted' => true,
            'shopware.html_sanitizer.sets.script.attributes' => [

            ],
            'shopware.html_sanitizer.sets.script.custom_attributes' => [

            ],
            'shopware.html_sanitizer.sets.tidy' => [
                'options' => [
                    'Output.TidyFormat' => true,
                ],
                'tags' => [

                ],
                'attributes' => [

                ],
                'custom_attributes' => [

                ],
            ],
            'shopware.html_sanitizer.sets.tidy.options' => [
                'Output.TidyFormat' => true,
            ],
            'shopware.html_sanitizer.sets.tidy.options.Output.TidyFormat' => true,
            'shopware.html_sanitizer.sets.tidy.tags' => [

            ],
            'shopware.html_sanitizer.sets.tidy.attributes' => [

            ],
            'shopware.html_sanitizer.sets.tidy.custom_attributes' => [

            ],
            'shopware.html_sanitizer.sets.bootstrap' => [
                'tags' => [
                    0 => 'a',
                    1 => 'span',
                ],
                'attributes' => [
                    0 => 'role',
                    1 => 'aria-label',
                    2 => 'aria-labelledly',
                    3 => 'aria-current',
                    4 => 'aria-expanded',
                    5 => 'aria-controls',
                    6 => 'aria-hidden',
                    7 => 'aria-describedby',
                    8 => 'tabindex',
                    9 => 'aria-modal',
                    10 => 'data-bs-toggle',
                    11 => 'data-bs-target',
                    12 => 'data-bs-dismiss',
                    13 => 'data-bs-slide',
                    14 => 'data-bs-slide-to',
                    15 => 'data-bs-parent',
                    16 => 'data-bs-config',
                    17 => 'data-bs-content',
                    18 => 'data-bs-spy',
                ],
                'custom_attributes' => [
                    0 => [
                        'tags' => [
                            0 => 'a',
                            1 => 'span',
                        ],
                        'attributes' => [
                            0 => 'href',
                            1 => 'role',
                            2 => 'aria-label',
                            3 => 'aria-labelledly',
                            4 => 'aria-current',
                            5 => 'aria-expanded',
                            6 => 'aria-controls',
                            7 => 'aria-hidden',
                            8 => 'aria-describedby',
                            9 => 'tabindex',
                            10 => 'aria-modal',
                            11 => 'data-bs-toggle',
                            12 => 'data-bs-target',
                            13 => 'data-bs-dismiss',
                            14 => 'data-bs-slide',
                            15 => 'data-bs-slide-to',
                            16 => 'data-bs-parent',
                            17 => 'data-bs-config',
                            18 => 'data-bs-content',
                            19 => 'data-bs-spy',
                        ],
                    ],
                ],
                'options' => [

                ],
            ],
            'shopware.html_sanitizer.sets.bootstrap.tags' => [
                0 => 'a',
                1 => 'span',
            ],
            'shopware.html_sanitizer.sets.bootstrap.tags.0' => 'a',
            'shopware.html_sanitizer.sets.bootstrap.tags.1' => 'span',
            'shopware.html_sanitizer.sets.bootstrap.attributes' => [
                0 => 'role',
                1 => 'aria-label',
                2 => 'aria-labelledly',
                3 => 'aria-current',
                4 => 'aria-expanded',
                5 => 'aria-controls',
                6 => 'aria-hidden',
                7 => 'aria-describedby',
                8 => 'tabindex',
                9 => 'aria-modal',
                10 => 'data-bs-toggle',
                11 => 'data-bs-target',
                12 => 'data-bs-dismiss',
                13 => 'data-bs-slide',
                14 => 'data-bs-slide-to',
                15 => 'data-bs-parent',
                16 => 'data-bs-config',
                17 => 'data-bs-content',
                18 => 'data-bs-spy',
            ],
            'shopware.html_sanitizer.sets.bootstrap.attributes.0' => 'role',
            'shopware.html_sanitizer.sets.bootstrap.attributes.1' => 'aria-label',
            'shopware.html_sanitizer.sets.bootstrap.attributes.2' => 'aria-labelledly',
            'shopware.html_sanitizer.sets.bootstrap.attributes.3' => 'aria-current',
            'shopware.html_sanitizer.sets.bootstrap.attributes.4' => 'aria-expanded',
            'shopware.html_sanitizer.sets.bootstrap.attributes.5' => 'aria-controls',
            'shopware.html_sanitizer.sets.bootstrap.attributes.6' => 'aria-hidden',
            'shopware.html_sanitizer.sets.bootstrap.attributes.7' => 'aria-describedby',
            'shopware.html_sanitizer.sets.bootstrap.attributes.8' => 'tabindex',
            'shopware.html_sanitizer.sets.bootstrap.attributes.9' => 'aria-modal',
            'shopware.html_sanitizer.sets.bootstrap.attributes.10' => 'data-bs-toggle',
            'shopware.html_sanitizer.sets.bootstrap.attributes.11' => 'data-bs-target',
            'shopware.html_sanitizer.sets.bootstrap.attributes.12' => 'data-bs-dismiss',
            'shopware.html_sanitizer.sets.bootstrap.attributes.13' => 'data-bs-slide',
            'shopware.html_sanitizer.sets.bootstrap.attributes.14' => 'data-bs-slide-to',
            'shopware.html_sanitizer.sets.bootstrap.attributes.15' => 'data-bs-parent',
            'shopware.html_sanitizer.sets.bootstrap.attributes.16' => 'data-bs-config',
            'shopware.html_sanitizer.sets.bootstrap.attributes.17' => 'data-bs-content',
            'shopware.html_sanitizer.sets.bootstrap.attributes.18' => 'data-bs-spy',
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes' => [
                0 => [
                    'tags' => [
                        0 => 'a',
                        1 => 'span',
                    ],
                    'attributes' => [
                        0 => 'href',
                        1 => 'role',
                        2 => 'aria-label',
                        3 => 'aria-labelledly',
                        4 => 'aria-current',
                        5 => 'aria-expanded',
                        6 => 'aria-controls',
                        7 => 'aria-hidden',
                        8 => 'aria-describedby',
                        9 => 'tabindex',
                        10 => 'aria-modal',
                        11 => 'data-bs-toggle',
                        12 => 'data-bs-target',
                        13 => 'data-bs-dismiss',
                        14 => 'data-bs-slide',
                        15 => 'data-bs-slide-to',
                        16 => 'data-bs-parent',
                        17 => 'data-bs-config',
                        18 => 'data-bs-content',
                        19 => 'data-bs-spy',
                    ],
                ],
            ],
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0' => [
                'tags' => [
                    0 => 'a',
                    1 => 'span',
                ],
                'attributes' => [
                    0 => 'href',
                    1 => 'role',
                    2 => 'aria-label',
                    3 => 'aria-labelledly',
                    4 => 'aria-current',
                    5 => 'aria-expanded',
                    6 => 'aria-controls',
                    7 => 'aria-hidden',
                    8 => 'aria-describedby',
                    9 => 'tabindex',
                    10 => 'aria-modal',
                    11 => 'data-bs-toggle',
                    12 => 'data-bs-target',
                    13 => 'data-bs-dismiss',
                    14 => 'data-bs-slide',
                    15 => 'data-bs-slide-to',
                    16 => 'data-bs-parent',
                    17 => 'data-bs-config',
                    18 => 'data-bs-content',
                    19 => 'data-bs-spy',
                ],
            ],
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.tags' => [
                0 => 'a',
                1 => 'span',
            ],
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.tags.0' => 'a',
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.tags.1' => 'span',
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.attributes' => [
                0 => 'href',
                1 => 'role',
                2 => 'aria-label',
                3 => 'aria-labelledly',
                4 => 'aria-current',
                5 => 'aria-expanded',
                6 => 'aria-controls',
                7 => 'aria-hidden',
                8 => 'aria-describedby',
                9 => 'tabindex',
                10 => 'aria-modal',
                11 => 'data-bs-toggle',
                12 => 'data-bs-target',
                13 => 'data-bs-dismiss',
                14 => 'data-bs-slide',
                15 => 'data-bs-slide-to',
                16 => 'data-bs-parent',
                17 => 'data-bs-config',
                18 => 'data-bs-content',
                19 => 'data-bs-spy',
            ],
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.attributes.0' => 'href',
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.attributes.1' => 'role',
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.attributes.2' => 'aria-label',
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.attributes.3' => 'aria-labelledly',
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.attributes.4' => 'aria-current',
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.attributes.5' => 'aria-expanded',
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.attributes.6' => 'aria-controls',
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.attributes.7' => 'aria-hidden',
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.attributes.8' => 'aria-describedby',
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.attributes.9' => 'tabindex',
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.attributes.10' => 'aria-modal',
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.attributes.11' => 'data-bs-toggle',
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.attributes.12' => 'data-bs-target',
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.attributes.13' => 'data-bs-dismiss',
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.attributes.14' => 'data-bs-slide',
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.attributes.15' => 'data-bs-slide-to',
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.attributes.16' => 'data-bs-parent',
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.attributes.17' => 'data-bs-config',
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.attributes.18' => 'data-bs-content',
            'shopware.html_sanitizer.sets.bootstrap.custom_attributes.0.attributes.19' => 'data-bs-spy',
            'shopware.html_sanitizer.sets.bootstrap.options' => [

            ],
            'shopware.html_sanitizer.sets.snippet' => [
                'tags' => [
                    0 => 'a',
                ],
                'attributes' => [
                    0 => 'data-url',
                    1 => 'data-ajax-modal',
                ],
                'custom_attributes' => [
                    0 => [
                        'tags' => [
                            0 => 'a',
                        ],
                        'attributes' => [
                            0 => 'data-url',
                            1 => 'data-ajax-modal',
                        ],
                    ],
                ],
                'options' => [

                ],
            ],
            'shopware.html_sanitizer.sets.snippet.tags' => [
                0 => 'a',
            ],
            'shopware.html_sanitizer.sets.snippet.tags.0' => 'a',
            'shopware.html_sanitizer.sets.snippet.attributes' => [
                0 => 'data-url',
                1 => 'data-ajax-modal',
            ],
            'shopware.html_sanitizer.sets.snippet.attributes.0' => 'data-url',
            'shopware.html_sanitizer.sets.snippet.attributes.1' => 'data-ajax-modal',
            'shopware.html_sanitizer.sets.snippet.custom_attributes' => [
                0 => [
                    'tags' => [
                        0 => 'a',
                    ],
                    'attributes' => [
                        0 => 'data-url',
                        1 => 'data-ajax-modal',
                    ],
                ],
            ],
            'shopware.html_sanitizer.sets.snippet.custom_attributes.0' => [
                'tags' => [
                    0 => 'a',
                ],
                'attributes' => [
                    0 => 'data-url',
                    1 => 'data-ajax-modal',
                ],
            ],
            'shopware.html_sanitizer.sets.snippet.custom_attributes.0.tags' => [
                0 => 'a',
            ],
            'shopware.html_sanitizer.sets.snippet.custom_attributes.0.tags.0' => 'a',
            'shopware.html_sanitizer.sets.snippet.custom_attributes.0.attributes' => [
                0 => 'data-url',
                1 => 'data-ajax-modal',
            ],
            'shopware.html_sanitizer.sets.snippet.custom_attributes.0.attributes.0' => 'data-url',
            'shopware.html_sanitizer.sets.snippet.custom_attributes.0.attributes.1' => 'data-ajax-modal',
            'shopware.html_sanitizer.sets.snippet.options' => [

            ],
            'shopware.html_sanitizer.fields' => [
                'product_translation.description' => [
                    'sets' => [
                        0 => 'basic',
                        1 => 'media',
                    ],
                ],
                'app_cms_block.template' => [
                    'sets' => [
                        0 => 'basic',
                        1 => 'media',
                        2 => 'tidy',
                    ],
                ],
                'snippet.value' => [
                    'sets' => [
                        0 => 'basic',
                        1 => 'media',
                        2 => 'bootstrap',
                        3 => 'snippet',
                    ],
                ],
            ],
            'shopware.html_sanitizer.fields.product_translation.description' => [
                'sets' => [
                    0 => 'basic',
                    1 => 'media',
                ],
            ],
            'shopware.html_sanitizer.fields.product_translation.description.sets' => [
                0 => 'basic',
                1 => 'media',
            ],
            'shopware.html_sanitizer.fields.product_translation.description.sets.0' => 'basic',
            'shopware.html_sanitizer.fields.product_translation.description.sets.1' => 'media',
            'shopware.html_sanitizer.fields.app_cms_block.template' => [
                'sets' => [
                    0 => 'basic',
                    1 => 'media',
                    2 => 'tidy',
                ],
            ],
            'shopware.html_sanitizer.fields.app_cms_block.template.sets' => [
                0 => 'basic',
                1 => 'media',
                2 => 'tidy',
            ],
            'shopware.html_sanitizer.fields.app_cms_block.template.sets.0' => 'basic',
            'shopware.html_sanitizer.fields.app_cms_block.template.sets.1' => 'media',
            'shopware.html_sanitizer.fields.app_cms_block.template.sets.2' => 'tidy',
            'shopware.html_sanitizer.fields.snippet.value' => [
                'sets' => [
                    0 => 'basic',
                    1 => 'media',
                    2 => 'bootstrap',
                    3 => 'snippet',
                ],
            ],
            'shopware.html_sanitizer.fields.snippet.value.sets' => [
                0 => 'basic',
                1 => 'media',
                2 => 'bootstrap',
                3 => 'snippet',
            ],
            'shopware.html_sanitizer.fields.snippet.value.sets.0' => 'basic',
            'shopware.html_sanitizer.fields.snippet.value.sets.1' => 'media',
            'shopware.html_sanitizer.fields.snippet.value.sets.2' => 'bootstrap',
            'shopware.html_sanitizer.fields.snippet.value.sets.3' => 'snippet',
            'shopware.logger' => [
                'file_rotation_count' => 14,
                'exclude_exception' => [
                    0 => 'League\\OAuth2\\Server\\Exception\\OAuthServerException',
                    1 => 'Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException',
                    2 => 'Shopware\\Core\\Content\\Media\\Exception\\DuplicatedMediaFileNameException',
                    3 => 'Shopware\\Core\\Framework\\Routing\\Exception\\LanguageNotFoundException',
                ],
                'exclude_events' => [
                    0 => 'user.recovery.request',
                    1 => 'customer.recovery.request',
                ],
                'error_code_log_levels' => [
                    'PRODUCT__CATEGORY_NOT_FOUND' => 'notice',
                    'PRODUCT_SORTING_NOT_FOUND' => 'notice',
                    'PROMOTION__INDIVIDUAL_CODES_PATTERN_ALREADY_IN_USE' => 'notice',
                    'CHECKOUT__CART_INVALID_LINE_ITEM_QUANTITY' => 'notice',
                    'CHECKOUT__INSUFFICIENT_PERMISSION' => 'notice',
                    'CHECKOUT__TAX_ID_NOT_FOUND' => 'notice',
                    'CHECKOUT__TAX_ID_PARAMETER_IS_MISSING' => 'notice',
                    'CHECKOUT__PRICE_PARAMETER_IS_MISSING' => 'notice',
                    'CHECKOUT__PRICES_PARAMETER_IS_MISSING' => 'notice',
                    'CHECKOUT__CUSTOMER_NOT_FOUND' => 'notice',
                    'CHECKOUT__CUSTOMERS_NOT_FOUND' => 'notice',
                    'CHECKOUT__CUSTOMER_GROUP_REQUEST_NOT_FOUND' => 'notice',
                    'CHECKOUT__CUSTOMER_GROUP_NOT_FOUND' => 'notice',
                    'CHECKOUT__CUSTOMER_NOT_LOGGED_IN' => 'notice',
                    'CHECKOUT__CUSTOMER_ADDRESS_NOT_FOUND' => 'notice',
                    'CHECKOUT__CUSTOMER_AUTH_BAD_CREDENTIALS' => 'notice',
                    'CHECKOUT__CUSTOMER_ADDRESS_IS_ACTIVE' => 'notice',
                    'CHECKOUT__CUSTOMER_ADDRESS_IS_DEFAULT' => 'notice',
                    'CHECKOUT__CUSTOMER_IS_ALREADY_CONFIRMED' => 'notice',
                    'CHECKOUT__CUSTOMER_GROUP_REGISTRATION_NOT_FOUND' => 'notice',
                    'CHECKOUT__CUSTOMER_NOT_FOUND_BY_HASH' => 'notice',
                    'CHECKOUT__CUSTOMER_NOT_FOUND_BY_ID' => 'notice',
                    'CHECKOUT__CUSTOMER_RECOVERY_HASH_EXPIRED' => 'notice',
                    'CHECKOUT__WISHLIST_IS_NOT_ACTIVATED' => 'notice',
                    'CHECKOUT__WISHLIST_NOT_FOUND' => 'notice',
                    'CHECKOUT__DUPLICATE_WISHLIST_PRODUCT' => 'notice',
                    'CHECKOUT__CUSTOMER_IS_INACTIVE' => 'notice',
                    'CHECKOUT__LEGACY_PASSWORD_ENCODER_NOT_FOUND' => 'notice',
                    'CHECKOUT__NO_HASH_PROVIDED' => 'notice',
                    'CHECKOUT__WISHLIST_PRODUCT_NOT_FOUND' => 'notice',
                    'CHECKOUT__CUSTOMER_AUTH_THROTTLED' => 'notice',
                    'CHECKOUT__CUSTOMER_OPTIN_NOT_COMPLETED' => 'notice',
                    'CHECKOUT__LINE_ITEM_DOWNLOAD_FILE_NOT_FOUND' => 'notice',
                    'CHECKOUT__CUSTOMER_IDS_PARAMETER_IS_MISSING' => 'notice',
                    'CHECKOUT__ORDER_CUSTOMER_NOT_LOGGED_IN' => 'notice',
                    'CHECKOUT__PROMOTION__NOT_FOUND' => 'notice',
                    'CHECKOUT__PROMOTION_DISCOUNT_NOT_FOUND' => 'notice',
                    'CHECKOUT__SERVICE_CATEGORY_NOT_FOUND' => 'notice',
                    'CHECKOUT__FOOTER_CATEGORY_NOT_FOUND' => 'notice',
                    'CHECKOUT__DUPLICATE_SHIPPING_METHOD_PRICE' => 'notice',
                    'CHECKOUT__CUSTOMER_COUNTRY_NOT_FOUND' => 'notice',
                    'CHECKOUT__COUNTRY_NOT_FOUND' => 'notice',
                    'CHECKOUT__COUNTRY_STATE_NOT_FOUND' => 'notice',
                    'CHECKOUT__ASYNC_PAYMENT_FINALIZE_INTERRUPTED' => 'notice',
                    'CHECKOUT__ASYNC_PAYMENT_PROCESS_INTERRUPTED' => 'notice',
                    'CHECKOUT__CAPTURE_PREPARED_PAYMENT_ERROR' => 'notice',
                    'CHECKOUT__CUSTOMER_CANCELED_EXTERNAL_PAYMENT' => 'notice',
                    'CHECKOUT__SYNC_PAYMENT_PROCESS_INTERRUPTED' => 'notice',
                    'CHECKOUT__RECURRING_PROCESS_INTERRUPTED' => 'notice',
                    'CHECKOUT__REFUND_PROCESS_INTERRUPTED' => 'notice',
                    'CONTENT__AFTER_CATEGORY_NOT_FOUND' => 'notice',
                    'CHECKOUT__CART_LINE_ITEM_NOT_STACKABLE' => 'notice',
                    'DOCUMENT__INVALID_DOCUMENT_ID' => 'notice',
                    'DOCUMENT__INVALID_GENERATOR_TYPE' => 'notice',
                    'DOCUMENT__ORDER_NOT_FOUND' => 'notice',
                    'CONTENT__MEDIA_INVALID_CONTENT_LENGTH' => 'notice',
                    'CONTENT__MEDIA_INVALID_URL' => 'notice',
                    'CONTENT__MEDIA_ILLEGAL_URL' => 'notice',
                    'CONTENT__MEDIA_DISABLE_URL_UPLOAD_FEATURE' => 'notice',
                    'CONTENT__MEDIA_CANNOT_OPEN_SOURCE_STREAM_TO_READ' => 'notice',
                    'CONTENT__MEDIA_CANNOT_OPEN_SOURCE_STREAM_TO_WRITE' => 'notice',
                    'CONTENT__MEDIA_FILE_SIZE_LIMIT_EXCEEDED' => 'notice',
                    'CONTENT__MEDIA_MISSING_FILE_EXTENSION' => 'notice',
                    'CONTENT__MEDIA_ILLEGAL_FILE_NAME' => 'notice',
                    'CONTENT__MEDIA_EMPTY_FILE' => 'notice',
                    'CONTENT__MEDIA_INVALID_FILE' => 'notice',
                    'CONTENT__MEDIA_EMPTY_FILE_NAME' => 'notice',
                    'CONTENT__MEDIA_FOLDER_NOT_FOUND' => 'notice',
                    'CONTENT__MEDIA_FOLDER_NAME_NOT_FOUND' => 'notice',
                    'CONTENT__MEDIA_FILE_TYPE_NOT_SUPPORTED' => 'notice',
                    'CONTENT__MEDIA_EMPTY_ID' => 'notice',
                    'CONTENT__MEDIA_FILE_NOT_SUPPORTED_FOR_THUMBNAIL' => 'notice',
                    'CONTENT__MEDIA_STRATEGY_NOT_FOUND' => 'notice',
                    'CONTENT__MEDIA_DUPLICATED_FILE_NAME' => 'notice',
                    'CONTENT__MEDIA_NOT_FOUND' => 'notice',
                    'CONTENT__MEDIA_MISSING_FILE' => 'notice',
                    'CONTENT__NEWSLETTER_RECIPIENT_THROTTLED' => 'notice',
                    'CONTENT__NEWSLETTER_RECIPIENT_NOT_FOUND' => 'notice',
                    'CONTENT__PRODUCT_EXPORT_EMPTY' => 'notice',
                    'FRAMEWORK__RATE_LIMIT_EXCEEDED' => 'notice',
                    'FRAMEWORK__SALES_CHANNEL_ID_PARAMETER_IS_MISSING' => 'notice',
                    'FRAMEWORK__TEMPLATE_PARAMETER_IS_MISSING' => 'notice',
                    'FRAMEWORK__ROUTE_NAME_PARAMETER_IS_MISSING' => 'notice',
                    'FRAMEWORK__ENTITY_NAME_PARAMETER_IS_MISSING' => 'notice',
                    'FRAMEWORK__SALES_CHANNEL_NOT_FOUND' => 'notice',
                    'FRAMEWORK__API_UNSUPPORTED_ASSOCIATION_FIELD_EXCEPTION' => 'notice',
                    'FRAMEWORK__NOT_EXISTING_RELATION_EXCEPTION' => 'notice',
                    'FRAMEWORK__INVALID_VERSION_ID' => 'notice',
                    'FRAMEWORK__API_TYPE_PARAMETER_INVALID' => 'notice',
                    'FRAMEWORK__APP_ID_PARAMETER_IS_MISSING' => 'notice',
                    'FRAMEWORK__APP_NOT_COMPATIBLE' => 'notice',
                    'FRAMEWORK__API_SALES_CHANNEL_ID_PARAMETER_IS_MISSING' => 'notice',
                    'FRAMEWORK__API_CUSTOMER_ID_PARAMETER_IS_MISSING' => 'notice',
                    'FRAMEWORK__API_INVALID_ACCESS_KEY' => 'notice',
                    'FRAMEWORK__API_INVALID_ACCESS_KEY_IDENTIFIER' => 'notice',
                    'FRAMEWORK__API_SHIPPING_COSTS_PARAMETER_IS_MISSING' => 'notice',
                    'FRAMEWORK__KEY_PARAMETER_IS_MISSING' => 'notice',
                    'FRAMEWORK__CLUSTER_PARAMETER_IS_MISSING' => 'notice',
                    'FRAMEWORK__INVALID_API_CRITERIA_IDS' => 'notice',
                    'FRAMEWORK__INVALID_CRITERIA_IDS' => 'notice',
                    'FRAMEWORK__DEFINITION_NOT_FOUND' => 'notice',
                    'FRAMEWORK__LANGUAGE_NOT_FOUND' => 'notice',
                    'FRAMEWORK__SYNC_ACTION_PROCESS_INTERRUPTED' => 'notice',
                    'FRAMEWORK__WRITE_TYPE_INTEND_ERROR' => 'notice',
                    'SYSTEM__SALES_CHANNEL_DOES_NOT_EXISTS' => 'notice',
                    'SYSTEM__LANGUAGE_INVALID_EXCEPTION' => 'notice',
                    'SYSTEM__COUNTRY_DOES_NOT_EXISTS_EXCEPTION' => 'notice',
                    'SYSTEM__CURRENCY_DOES_NOT_EXISTS_EXCEPTION' => 'notice',
                    'SYSTEM__COUNTRY_STATE_DOES_NOT_EXISTS_EXCEPTION' => 'notice',
                    'SYSTEM__SALES_CHANNEL_LANGUAGE_NOT_AVAILABLE_EXCEPTION' => 'notice',
                    'SYSTEM__NO_CONTEXT_DATA_EXCEPTION' => 'notice',
                    'PRODUCT_EXPORT__RENDER_FOOTER_EXCEPTION' => 'notice',
                    'PRODUCT_EXPORT__RENDER_HEADER_EXCEPTION' => 'notice',
                    'PRODUCT_EXPORT__RENDER_PRODUCT_EXCEPTION' => 'notice',
                    'SYSTEM__SCOPE_NOT_FOUND' => 'notice',
                    'FRAMEWORK__EXTENSION_THEME_STILL_IN_USE' => 'notice',
                ],
            ],
            'shopware.logger.file_rotation_count' => 14,
            'shopware.logger.exclude_exception' => [
                0 => 'League\\OAuth2\\Server\\Exception\\OAuthServerException',
                1 => 'Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException',
                2 => 'Shopware\\Core\\Content\\Media\\Exception\\DuplicatedMediaFileNameException',
                3 => 'Shopware\\Core\\Framework\\Routing\\Exception\\LanguageNotFoundException',
            ],
            'shopware.logger.exclude_exception.0' => 'League\\OAuth2\\Server\\Exception\\OAuthServerException',
            'shopware.logger.exclude_exception.1' => 'Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException',
            'shopware.logger.exclude_exception.2' => 'Shopware\\Core\\Content\\Media\\Exception\\DuplicatedMediaFileNameException',
            'shopware.logger.exclude_exception.3' => 'Shopware\\Core\\Framework\\Routing\\Exception\\LanguageNotFoundException',
            'shopware.logger.exclude_events' => [
                0 => 'user.recovery.request',
                1 => 'customer.recovery.request',
            ],
            'shopware.logger.exclude_events.0' => 'user.recovery.request',
            'shopware.logger.exclude_events.1' => 'customer.recovery.request',
            'shopware.logger.error_code_log_levels' => [
                'PRODUCT__CATEGORY_NOT_FOUND' => 'notice',
                'PRODUCT_SORTING_NOT_FOUND' => 'notice',
                'PROMOTION__INDIVIDUAL_CODES_PATTERN_ALREADY_IN_USE' => 'notice',
                'CHECKOUT__CART_INVALID_LINE_ITEM_QUANTITY' => 'notice',
                'CHECKOUT__INSUFFICIENT_PERMISSION' => 'notice',
                'CHECKOUT__TAX_ID_NOT_FOUND' => 'notice',
                'CHECKOUT__TAX_ID_PARAMETER_IS_MISSING' => 'notice',
                'CHECKOUT__PRICE_PARAMETER_IS_MISSING' => 'notice',
                'CHECKOUT__PRICES_PARAMETER_IS_MISSING' => 'notice',
                'CHECKOUT__CUSTOMER_NOT_FOUND' => 'notice',
                'CHECKOUT__CUSTOMERS_NOT_FOUND' => 'notice',
                'CHECKOUT__CUSTOMER_GROUP_REQUEST_NOT_FOUND' => 'notice',
                'CHECKOUT__CUSTOMER_GROUP_NOT_FOUND' => 'notice',
                'CHECKOUT__CUSTOMER_NOT_LOGGED_IN' => 'notice',
                'CHECKOUT__CUSTOMER_ADDRESS_NOT_FOUND' => 'notice',
                'CHECKOUT__CUSTOMER_AUTH_BAD_CREDENTIALS' => 'notice',
                'CHECKOUT__CUSTOMER_ADDRESS_IS_ACTIVE' => 'notice',
                'CHECKOUT__CUSTOMER_ADDRESS_IS_DEFAULT' => 'notice',
                'CHECKOUT__CUSTOMER_IS_ALREADY_CONFIRMED' => 'notice',
                'CHECKOUT__CUSTOMER_GROUP_REGISTRATION_NOT_FOUND' => 'notice',
                'CHECKOUT__CUSTOMER_NOT_FOUND_BY_HASH' => 'notice',
                'CHECKOUT__CUSTOMER_NOT_FOUND_BY_ID' => 'notice',
                'CHECKOUT__CUSTOMER_RECOVERY_HASH_EXPIRED' => 'notice',
                'CHECKOUT__WISHLIST_IS_NOT_ACTIVATED' => 'notice',
                'CHECKOUT__WISHLIST_NOT_FOUND' => 'notice',
                'CHECKOUT__DUPLICATE_WISHLIST_PRODUCT' => 'notice',
                'CHECKOUT__CUSTOMER_IS_INACTIVE' => 'notice',
                'CHECKOUT__LEGACY_PASSWORD_ENCODER_NOT_FOUND' => 'notice',
                'CHECKOUT__NO_HASH_PROVIDED' => 'notice',
                'CHECKOUT__WISHLIST_PRODUCT_NOT_FOUND' => 'notice',
                'CHECKOUT__CUSTOMER_AUTH_THROTTLED' => 'notice',
                'CHECKOUT__CUSTOMER_OPTIN_NOT_COMPLETED' => 'notice',
                'CHECKOUT__LINE_ITEM_DOWNLOAD_FILE_NOT_FOUND' => 'notice',
                'CHECKOUT__CUSTOMER_IDS_PARAMETER_IS_MISSING' => 'notice',
                'CHECKOUT__ORDER_CUSTOMER_NOT_LOGGED_IN' => 'notice',
                'CHECKOUT__PROMOTION__NOT_FOUND' => 'notice',
                'CHECKOUT__PROMOTION_DISCOUNT_NOT_FOUND' => 'notice',
                'CHECKOUT__SERVICE_CATEGORY_NOT_FOUND' => 'notice',
                'CHECKOUT__FOOTER_CATEGORY_NOT_FOUND' => 'notice',
                'CHECKOUT__DUPLICATE_SHIPPING_METHOD_PRICE' => 'notice',
                'CHECKOUT__CUSTOMER_COUNTRY_NOT_FOUND' => 'notice',
                'CHECKOUT__COUNTRY_NOT_FOUND' => 'notice',
                'CHECKOUT__COUNTRY_STATE_NOT_FOUND' => 'notice',
                'CHECKOUT__ASYNC_PAYMENT_FINALIZE_INTERRUPTED' => 'notice',
                'CHECKOUT__ASYNC_PAYMENT_PROCESS_INTERRUPTED' => 'notice',
                'CHECKOUT__CAPTURE_PREPARED_PAYMENT_ERROR' => 'notice',
                'CHECKOUT__CUSTOMER_CANCELED_EXTERNAL_PAYMENT' => 'notice',
                'CHECKOUT__SYNC_PAYMENT_PROCESS_INTERRUPTED' => 'notice',
                'CHECKOUT__RECURRING_PROCESS_INTERRUPTED' => 'notice',
                'CHECKOUT__REFUND_PROCESS_INTERRUPTED' => 'notice',
                'CONTENT__AFTER_CATEGORY_NOT_FOUND' => 'notice',
                'CHECKOUT__CART_LINE_ITEM_NOT_STACKABLE' => 'notice',
                'DOCUMENT__INVALID_DOCUMENT_ID' => 'notice',
                'DOCUMENT__INVALID_GENERATOR_TYPE' => 'notice',
                'DOCUMENT__ORDER_NOT_FOUND' => 'notice',
                'CONTENT__MEDIA_INVALID_CONTENT_LENGTH' => 'notice',
                'CONTENT__MEDIA_INVALID_URL' => 'notice',
                'CONTENT__MEDIA_ILLEGAL_URL' => 'notice',
                'CONTENT__MEDIA_DISABLE_URL_UPLOAD_FEATURE' => 'notice',
                'CONTENT__MEDIA_CANNOT_OPEN_SOURCE_STREAM_TO_READ' => 'notice',
                'CONTENT__MEDIA_CANNOT_OPEN_SOURCE_STREAM_TO_WRITE' => 'notice',
                'CONTENT__MEDIA_FILE_SIZE_LIMIT_EXCEEDED' => 'notice',
                'CONTENT__MEDIA_MISSING_FILE_EXTENSION' => 'notice',
                'CONTENT__MEDIA_ILLEGAL_FILE_NAME' => 'notice',
                'CONTENT__MEDIA_EMPTY_FILE' => 'notice',
                'CONTENT__MEDIA_INVALID_FILE' => 'notice',
                'CONTENT__MEDIA_EMPTY_FILE_NAME' => 'notice',
                'CONTENT__MEDIA_FOLDER_NOT_FOUND' => 'notice',
                'CONTENT__MEDIA_FOLDER_NAME_NOT_FOUND' => 'notice',
                'CONTENT__MEDIA_FILE_TYPE_NOT_SUPPORTED' => 'notice',
                'CONTENT__MEDIA_EMPTY_ID' => 'notice',
                'CONTENT__MEDIA_FILE_NOT_SUPPORTED_FOR_THUMBNAIL' => 'notice',
                'CONTENT__MEDIA_STRATEGY_NOT_FOUND' => 'notice',
                'CONTENT__MEDIA_DUPLICATED_FILE_NAME' => 'notice',
                'CONTENT__MEDIA_NOT_FOUND' => 'notice',
                'CONTENT__MEDIA_MISSING_FILE' => 'notice',
                'CONTENT__NEWSLETTER_RECIPIENT_THROTTLED' => 'notice',
                'CONTENT__NEWSLETTER_RECIPIENT_NOT_FOUND' => 'notice',
                'CONTENT__PRODUCT_EXPORT_EMPTY' => 'notice',
                'FRAMEWORK__RATE_LIMIT_EXCEEDED' => 'notice',
                'FRAMEWORK__SALES_CHANNEL_ID_PARAMETER_IS_MISSING' => 'notice',
                'FRAMEWORK__TEMPLATE_PARAMETER_IS_MISSING' => 'notice',
                'FRAMEWORK__ROUTE_NAME_PARAMETER_IS_MISSING' => 'notice',
                'FRAMEWORK__ENTITY_NAME_PARAMETER_IS_MISSING' => 'notice',
                'FRAMEWORK__SALES_CHANNEL_NOT_FOUND' => 'notice',
                'FRAMEWORK__API_UNSUPPORTED_ASSOCIATION_FIELD_EXCEPTION' => 'notice',
                'FRAMEWORK__NOT_EXISTING_RELATION_EXCEPTION' => 'notice',
                'FRAMEWORK__INVALID_VERSION_ID' => 'notice',
                'FRAMEWORK__API_TYPE_PARAMETER_INVALID' => 'notice',
                'FRAMEWORK__APP_ID_PARAMETER_IS_MISSING' => 'notice',
                'FRAMEWORK__APP_NOT_COMPATIBLE' => 'notice',
                'FRAMEWORK__API_SALES_CHANNEL_ID_PARAMETER_IS_MISSING' => 'notice',
                'FRAMEWORK__API_CUSTOMER_ID_PARAMETER_IS_MISSING' => 'notice',
                'FRAMEWORK__API_INVALID_ACCESS_KEY' => 'notice',
                'FRAMEWORK__API_INVALID_ACCESS_KEY_IDENTIFIER' => 'notice',
                'FRAMEWORK__API_SHIPPING_COSTS_PARAMETER_IS_MISSING' => 'notice',
                'FRAMEWORK__KEY_PARAMETER_IS_MISSING' => 'notice',
                'FRAMEWORK__CLUSTER_PARAMETER_IS_MISSING' => 'notice',
                'FRAMEWORK__INVALID_API_CRITERIA_IDS' => 'notice',
                'FRAMEWORK__INVALID_CRITERIA_IDS' => 'notice',
                'FRAMEWORK__DEFINITION_NOT_FOUND' => 'notice',
                'FRAMEWORK__LANGUAGE_NOT_FOUND' => 'notice',
                'FRAMEWORK__SYNC_ACTION_PROCESS_INTERRUPTED' => 'notice',
                'FRAMEWORK__WRITE_TYPE_INTEND_ERROR' => 'notice',
                'SYSTEM__SALES_CHANNEL_DOES_NOT_EXISTS' => 'notice',
                'SYSTEM__LANGUAGE_INVALID_EXCEPTION' => 'notice',
                'SYSTEM__COUNTRY_DOES_NOT_EXISTS_EXCEPTION' => 'notice',
                'SYSTEM__CURRENCY_DOES_NOT_EXISTS_EXCEPTION' => 'notice',
                'SYSTEM__COUNTRY_STATE_DOES_NOT_EXISTS_EXCEPTION' => 'notice',
                'SYSTEM__SALES_CHANNEL_LANGUAGE_NOT_AVAILABLE_EXCEPTION' => 'notice',
                'SYSTEM__NO_CONTEXT_DATA_EXCEPTION' => 'notice',
                'PRODUCT_EXPORT__RENDER_FOOTER_EXCEPTION' => 'notice',
                'PRODUCT_EXPORT__RENDER_HEADER_EXCEPTION' => 'notice',
                'PRODUCT_EXPORT__RENDER_PRODUCT_EXCEPTION' => 'notice',
                'SYSTEM__SCOPE_NOT_FOUND' => 'notice',
                'FRAMEWORK__EXTENSION_THEME_STILL_IN_USE' => 'notice',
            ],
            'shopware.logger.error_code_log_levels.PRODUCT__CATEGORY_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.PRODUCT_SORTING_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.PROMOTION__INDIVIDUAL_CODES_PATTERN_ALREADY_IN_USE' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__CART_INVALID_LINE_ITEM_QUANTITY' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__INSUFFICIENT_PERMISSION' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__TAX_ID_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__TAX_ID_PARAMETER_IS_MISSING' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__PRICE_PARAMETER_IS_MISSING' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__PRICES_PARAMETER_IS_MISSING' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__CUSTOMER_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__CUSTOMERS_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__CUSTOMER_GROUP_REQUEST_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__CUSTOMER_GROUP_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__CUSTOMER_NOT_LOGGED_IN' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__CUSTOMER_ADDRESS_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__CUSTOMER_AUTH_BAD_CREDENTIALS' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__CUSTOMER_ADDRESS_IS_ACTIVE' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__CUSTOMER_ADDRESS_IS_DEFAULT' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__CUSTOMER_IS_ALREADY_CONFIRMED' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__CUSTOMER_GROUP_REGISTRATION_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__CUSTOMER_NOT_FOUND_BY_HASH' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__CUSTOMER_NOT_FOUND_BY_ID' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__CUSTOMER_RECOVERY_HASH_EXPIRED' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__WISHLIST_IS_NOT_ACTIVATED' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__WISHLIST_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__DUPLICATE_WISHLIST_PRODUCT' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__CUSTOMER_IS_INACTIVE' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__LEGACY_PASSWORD_ENCODER_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__NO_HASH_PROVIDED' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__WISHLIST_PRODUCT_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__CUSTOMER_AUTH_THROTTLED' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__CUSTOMER_OPTIN_NOT_COMPLETED' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__LINE_ITEM_DOWNLOAD_FILE_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__CUSTOMER_IDS_PARAMETER_IS_MISSING' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__ORDER_CUSTOMER_NOT_LOGGED_IN' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__PROMOTION__NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__PROMOTION_DISCOUNT_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__SERVICE_CATEGORY_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__FOOTER_CATEGORY_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__DUPLICATE_SHIPPING_METHOD_PRICE' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__CUSTOMER_COUNTRY_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__COUNTRY_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__COUNTRY_STATE_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__ASYNC_PAYMENT_FINALIZE_INTERRUPTED' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__ASYNC_PAYMENT_PROCESS_INTERRUPTED' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__CAPTURE_PREPARED_PAYMENT_ERROR' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__CUSTOMER_CANCELED_EXTERNAL_PAYMENT' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__SYNC_PAYMENT_PROCESS_INTERRUPTED' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__RECURRING_PROCESS_INTERRUPTED' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__REFUND_PROCESS_INTERRUPTED' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__AFTER_CATEGORY_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CHECKOUT__CART_LINE_ITEM_NOT_STACKABLE' => 'notice',
            'shopware.logger.error_code_log_levels.DOCUMENT__INVALID_DOCUMENT_ID' => 'notice',
            'shopware.logger.error_code_log_levels.DOCUMENT__INVALID_GENERATOR_TYPE' => 'notice',
            'shopware.logger.error_code_log_levels.DOCUMENT__ORDER_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__MEDIA_INVALID_CONTENT_LENGTH' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__MEDIA_INVALID_URL' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__MEDIA_ILLEGAL_URL' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__MEDIA_DISABLE_URL_UPLOAD_FEATURE' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__MEDIA_CANNOT_OPEN_SOURCE_STREAM_TO_READ' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__MEDIA_CANNOT_OPEN_SOURCE_STREAM_TO_WRITE' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__MEDIA_FILE_SIZE_LIMIT_EXCEEDED' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__MEDIA_MISSING_FILE_EXTENSION' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__MEDIA_ILLEGAL_FILE_NAME' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__MEDIA_EMPTY_FILE' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__MEDIA_INVALID_FILE' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__MEDIA_EMPTY_FILE_NAME' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__MEDIA_FOLDER_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__MEDIA_FOLDER_NAME_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__MEDIA_FILE_TYPE_NOT_SUPPORTED' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__MEDIA_EMPTY_ID' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__MEDIA_FILE_NOT_SUPPORTED_FOR_THUMBNAIL' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__MEDIA_STRATEGY_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__MEDIA_DUPLICATED_FILE_NAME' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__MEDIA_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__MEDIA_MISSING_FILE' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__NEWSLETTER_RECIPIENT_THROTTLED' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__NEWSLETTER_RECIPIENT_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.CONTENT__PRODUCT_EXPORT_EMPTY' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__RATE_LIMIT_EXCEEDED' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__SALES_CHANNEL_ID_PARAMETER_IS_MISSING' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__TEMPLATE_PARAMETER_IS_MISSING' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__ROUTE_NAME_PARAMETER_IS_MISSING' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__ENTITY_NAME_PARAMETER_IS_MISSING' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__SALES_CHANNEL_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__API_UNSUPPORTED_ASSOCIATION_FIELD_EXCEPTION' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__NOT_EXISTING_RELATION_EXCEPTION' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__INVALID_VERSION_ID' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__API_TYPE_PARAMETER_INVALID' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__APP_ID_PARAMETER_IS_MISSING' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__APP_NOT_COMPATIBLE' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__API_SALES_CHANNEL_ID_PARAMETER_IS_MISSING' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__API_CUSTOMER_ID_PARAMETER_IS_MISSING' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__API_INVALID_ACCESS_KEY' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__API_INVALID_ACCESS_KEY_IDENTIFIER' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__API_SHIPPING_COSTS_PARAMETER_IS_MISSING' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__KEY_PARAMETER_IS_MISSING' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__CLUSTER_PARAMETER_IS_MISSING' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__INVALID_API_CRITERIA_IDS' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__INVALID_CRITERIA_IDS' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__DEFINITION_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__LANGUAGE_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__SYNC_ACTION_PROCESS_INTERRUPTED' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__WRITE_TYPE_INTEND_ERROR' => 'notice',
            'shopware.logger.error_code_log_levels.SYSTEM__SALES_CHANNEL_DOES_NOT_EXISTS' => 'notice',
            'shopware.logger.error_code_log_levels.SYSTEM__LANGUAGE_INVALID_EXCEPTION' => 'notice',
            'shopware.logger.error_code_log_levels.SYSTEM__COUNTRY_DOES_NOT_EXISTS_EXCEPTION' => 'notice',
            'shopware.logger.error_code_log_levels.SYSTEM__CURRENCY_DOES_NOT_EXISTS_EXCEPTION' => 'notice',
            'shopware.logger.error_code_log_levels.SYSTEM__COUNTRY_STATE_DOES_NOT_EXISTS_EXCEPTION' => 'notice',
            'shopware.logger.error_code_log_levels.SYSTEM__SALES_CHANNEL_LANGUAGE_NOT_AVAILABLE_EXCEPTION' => 'notice',
            'shopware.logger.error_code_log_levels.SYSTEM__NO_CONTEXT_DATA_EXCEPTION' => 'notice',
            'shopware.logger.error_code_log_levels.PRODUCT_EXPORT__RENDER_FOOTER_EXCEPTION' => 'notice',
            'shopware.logger.error_code_log_levels.PRODUCT_EXPORT__RENDER_HEADER_EXCEPTION' => 'notice',
            'shopware.logger.error_code_log_levels.PRODUCT_EXPORT__RENDER_PRODUCT_EXCEPTION' => 'notice',
            'shopware.logger.error_code_log_levels.SYSTEM__SCOPE_NOT_FOUND' => 'notice',
            'shopware.logger.error_code_log_levels.FRAMEWORK__EXTENSION_THEME_STILL_IN_USE' => 'notice',
            'shopware.cache.tagging' => [
                'each_snippet' => true,
                'each_config' => true,
                'each_theme_config' => true,
            ],
            'shopware.cache.tagging.each_snippet' => true,
            'shopware.cache.tagging.each_config' => true,
            'shopware.cache.tagging.each_theme_config' => true,
            'shopware.cache.invalidation' => [
                'delay' => 0,
                'delay_options' => [
                    'storage' => 'cache',
                    'dsn' => 'redis://localhost',
                ],
                'count' => 150,
                'http_cache' => [
                    0 => 'logged-in',
                    1 => 'cart-filled',
                ],
                'product_listing_route' => [

                ],
                'product_detail_route' => [

                ],
                'product_review_route' => [

                ],
                'product_search_route' => [

                ],
                'product_suggest_route' => [

                ],
                'product_cross_selling_route' => [

                ],
                'payment_method_route' => [

                ],
                'shipping_method_route' => [

                ],
                'navigation_route' => [

                ],
                'category_route' => [

                ],
                'landing_page_route' => [

                ],
                'language_route' => [

                ],
                'currency_route' => [

                ],
                'country_route' => [

                ],
                'country_state_route' => [

                ],
                'salutation_route' => [

                ],
                'sitemap_route' => [

                ],
            ],
            'shopware.cache.invalidation.delay' => 0,
            'shopware.cache.invalidation.delay_options' => [
                'storage' => 'cache',
                'dsn' => 'redis://localhost',
            ],
            'shopware.cache.invalidation.delay_options.storage' => 'cache',
            'shopware.cache.invalidation.delay_options.dsn' => 'redis://localhost',
            'shopware.cache.invalidation.count' => 150,
            'shopware.cache.invalidation.http_cache' => [
                0 => 'logged-in',
                1 => 'cart-filled',
            ],
            'shopware.cache.invalidation.http_cache.0' => 'logged-in',
            'shopware.cache.invalidation.http_cache.1' => 'cart-filled',
            'shopware.cache.invalidation.product_listing_route' => [

            ],
            'shopware.cache.invalidation.product_detail_route' => [

            ],
            'shopware.cache.invalidation.product_review_route' => [

            ],
            'shopware.cache.invalidation.product_search_route' => [

            ],
            'shopware.cache.invalidation.product_suggest_route' => [

            ],
            'shopware.cache.invalidation.product_cross_selling_route' => [

            ],
            'shopware.cache.invalidation.payment_method_route' => [

            ],
            'shopware.cache.invalidation.shipping_method_route' => [

            ],
            'shopware.cache.invalidation.navigation_route' => [

            ],
            'shopware.cache.invalidation.category_route' => [

            ],
            'shopware.cache.invalidation.landing_page_route' => [

            ],
            'shopware.cache.invalidation.language_route' => [

            ],
            'shopware.cache.invalidation.currency_route' => [

            ],
            'shopware.cache.invalidation.country_route' => [

            ],
            'shopware.cache.invalidation.country_state_route' => [

            ],
            'shopware.cache.invalidation.salutation_route' => [

            ],
            'shopware.cache.invalidation.sitemap_route' => [

            ],
            'shopware.cache.cache_compression' => true,
            'shopware.twig' => [
                'allowed_php_functions' => [

                ],
            ],
            'shopware.twig.allowed_php_functions' => [

            ],
            'shopware.dompdf' => [
                'options' => [
                    'isRemoteEnabled' => true,
                ],
            ],
            'shopware.dompdf.options' => [
                'isRemoteEnabled' => true,
            ],
            'shopware.dompdf.options.isRemoteEnabled' => true,
            'shopware.stock' => [
                'enable_stock_management' => true,
            ],
            'shopware.stock.enable_stock_management' => true,
            'shopware.usage_data' => [
                'gateway' => [
                    'base_uri' => 'https://data.shopware.io',
                    'batch_size' => 50,
                ],
            ],
            'shopware.usage_data.gateway' => [
                'base_uri' => 'https://data.shopware.io',
                'batch_size' => 50,
            ],
            'shopware.usage_data.gateway.base_uri' => 'https://data.shopware.io',
            'shopware.usage_data.gateway.batch_size' => 50,
            'elasticsearch.search' => [
                'timeout' => '5s',
                'term_max_length' => 300,
            ],
            'elasticsearch.search.timeout' => '5s',
            'elasticsearch.search.term_max_length' => 300,
            'elasticsearch.administration.search' => [
                'timeout' => '5s',
                'term_max_length' => 300,
            ],
            'elasticsearch.administration.search.timeout' => '5s',
            'elasticsearch.administration.search.term_max_length' => 300,
            'elasticsearch.administration.index_settings' => [
                'number_of_shards' => 3,
                'number_of_replicas' => 3,
                'mapping.total_fields.limit' => 50000,
                'mapping.nested_fields.limit' => 500,
                'mapping.nested_objects.limit' => 1000000,
            ],
            'elasticsearch.administration.index_settings.number_of_shards' => 3,
            'elasticsearch.administration.index_settings.number_of_replicas' => 3,
            'elasticsearch.administration.index_settings.mapping.total_fields.limit' => 50000,
            'elasticsearch.administration.index_settings.mapping.nested_fields.limit' => 500,
            'elasticsearch.administration.index_settings.mapping.nested_objects.limit' => 1000000,
            'elasticsearch.administration.analysis' => [
                'normalizer' => [
                    'sw_lowercase_normalizer' => [
                        'type' => 'custom',
                        'filter' => [
                            0 => 'lowercase',
                        ],
                    ],
                ],
            ],
            'elasticsearch.administration.analysis.normalizer' => [
                'sw_lowercase_normalizer' => [
                    'type' => 'custom',
                    'filter' => [
                        0 => 'lowercase',
                    ],
                ],
            ],
            'elasticsearch.administration.analysis.normalizer.sw_lowercase_normalizer' => [
                'type' => 'custom',
                'filter' => [
                    0 => 'lowercase',
                ],
            ],
            'elasticsearch.administration.analysis.normalizer.sw_lowercase_normalizer.type' => 'custom',
            'elasticsearch.administration.analysis.normalizer.sw_lowercase_normalizer.filter' => [
                0 => 'lowercase',
            ],
            'elasticsearch.administration.analysis.normalizer.sw_lowercase_normalizer.filter.0' => 'lowercase',
            'elasticsearch.administration.dynamic_templates' => [
                0 => [
                    'keywords' => [
                        'match_mapping_type' => 'string',
                        'mapping' => [
                            'type' => 'keyword',
                            'normalizer' => 'sw_lowercase_normalizer',
                            'fields' => [
                                'text' => [
                                    'type' => 'text',
                                ],
                            ],
                        ],
                    ],
                ],
            ],
            'elasticsearch.administration.dynamic_templates.0' => [
                'keywords' => [
                    'match_mapping_type' => 'string',
                    'mapping' => [
                        'type' => 'keyword',
                        'normalizer' => 'sw_lowercase_normalizer',
                        'fields' => [
                            'text' => [
                                'type' => 'text',
                            ],
                        ],
                    ],
                ],
            ],
            'elasticsearch.administration.dynamic_templates.0.keywords' => [
                'match_mapping_type' => 'string',
                'mapping' => [
                    'type' => 'keyword',
                    'normalizer' => 'sw_lowercase_normalizer',
                    'fields' => [
                        'text' => [
                            'type' => 'text',
                        ],
                    ],
                ],
            ],
            'elasticsearch.administration.dynamic_templates.0.keywords.match_mapping_type' => 'string',
            'elasticsearch.administration.dynamic_templates.0.keywords.mapping' => [
                'type' => 'keyword',
                'normalizer' => 'sw_lowercase_normalizer',
                'fields' => [
                    'text' => [
                        'type' => 'text',
                    ],
                ],
            ],
            'elasticsearch.administration.dynamic_templates.0.keywords.mapping.type' => 'keyword',
            'elasticsearch.administration.dynamic_templates.0.keywords.mapping.normalizer' => 'sw_lowercase_normalizer',
            'elasticsearch.administration.dynamic_templates.0.keywords.mapping.fields' => [
                'text' => [
                    'type' => 'text',
                ],
            ],
            'elasticsearch.administration.dynamic_templates.0.keywords.mapping.fields.text' => [
                'type' => 'text',
            ],
            'elasticsearch.administration.dynamic_templates.0.keywords.mapping.fields.text.type' => 'text',
            'elasticsearch.product.custom_fields_mapping' => [

            ],
            'elasticsearch.ssl' => [
                'verify_server_cert' => true,
            ],
            'elasticsearch.ssl.verify_server_cert' => true,
            'elasticsearch.index_settings' => [
                'number_of_shards' => 3,
                'number_of_replicas' => 3,
                'mapping.total_fields.limit' => 50000,
                'mapping.nested_fields.limit' => 500,
                'mapping.nested_objects.limit' => 1000000,
            ],
            'elasticsearch.index_settings.number_of_shards' => 3,
            'elasticsearch.index_settings.number_of_replicas' => 3,
            'elasticsearch.index_settings.mapping.total_fields.limit' => 50000,
            'elasticsearch.index_settings.mapping.nested_fields.limit' => 500,
            'elasticsearch.index_settings.mapping.nested_objects.limit' => 1000000,
            'elasticsearch.analysis' => [
                'normalizer' => [
                    'sw_lowercase_normalizer' => [
                        'type' => 'custom',
                        'filter' => [
                            0 => 'lowercase',
                        ],
                    ],
                ],
                'analyzer' => [
                    'sw_ngram_analyzer' => [
                        'type' => 'custom',
                        'tokenizer' => 'whitespace',
                        'filter' => [
                            0 => 'lowercase',
                            1 => 'sw_ngram_filter',
                        ],
                    ],
                    'sw_english_analyzer' => [
                        'type' => 'custom',
                        'tokenizer' => 'standard',
                        'filter' => [
                            0 => 'lowercase',
                            1 => 'sw_english_stop_filter',
                        ],
                    ],
                    'sw_german_analyzer' => [
                        'type' => 'custom',
                        'tokenizer' => 'standard',
                        'filter' => [
                            0 => 'lowercase',
                            1 => 'sw_german_stop_filter',
                        ],
                    ],
                ],
                'filter' => [
                    'sw_ngram_filter' => [
                        'type' => 'ngram',
                        'min_gram' => 4,
                        'max_gram' => 5,
                    ],
                    'sw_english_stop_filter' => [
                        'type' => 'stop',
                        'stopwords' => '_english_',
                    ],
                    'sw_german_stop_filter' => [
                        'type' => 'stop',
                        'stopwords' => '_german_',
                    ],
                ],
            ],
            'elasticsearch.analysis.normalizer' => [
                'sw_lowercase_normalizer' => [
                    'type' => 'custom',
                    'filter' => [
                        0 => 'lowercase',
                    ],
                ],
            ],
            'elasticsearch.analysis.normalizer.sw_lowercase_normalizer' => [
                'type' => 'custom',
                'filter' => [
                    0 => 'lowercase',
                ],
            ],
            'elasticsearch.analysis.normalizer.sw_lowercase_normalizer.type' => 'custom',
            'elasticsearch.analysis.normalizer.sw_lowercase_normalizer.filter' => [
                0 => 'lowercase',
            ],
            'elasticsearch.analysis.normalizer.sw_lowercase_normalizer.filter.0' => 'lowercase',
            'elasticsearch.analysis.analyzer' => [
                'sw_ngram_analyzer' => [
                    'type' => 'custom',
                    'tokenizer' => 'whitespace',
                    'filter' => [
                        0 => 'lowercase',
                        1 => 'sw_ngram_filter',
                    ],
                ],
                'sw_english_analyzer' => [
                    'type' => 'custom',
                    'tokenizer' => 'standard',
                    'filter' => [
                        0 => 'lowercase',
                        1 => 'sw_english_stop_filter',
                    ],
                ],
                'sw_german_analyzer' => [
                    'type' => 'custom',
                    'tokenizer' => 'standard',
                    'filter' => [
                        0 => 'lowercase',
                        1 => 'sw_german_stop_filter',
                    ],
                ],
            ],
            'elasticsearch.analysis.analyzer.sw_ngram_analyzer' => [
                'type' => 'custom',
                'tokenizer' => 'whitespace',
                'filter' => [
                    0 => 'lowercase',
                    1 => 'sw_ngram_filter',
                ],
            ],
            'elasticsearch.analysis.analyzer.sw_ngram_analyzer.type' => 'custom',
            'elasticsearch.analysis.analyzer.sw_ngram_analyzer.tokenizer' => 'whitespace',
            'elasticsearch.analysis.analyzer.sw_ngram_analyzer.filter' => [
                0 => 'lowercase',
                1 => 'sw_ngram_filter',
            ],
            'elasticsearch.analysis.analyzer.sw_ngram_analyzer.filter.0' => 'lowercase',
            'elasticsearch.analysis.analyzer.sw_ngram_analyzer.filter.1' => 'sw_ngram_filter',
            'elasticsearch.analysis.analyzer.sw_english_analyzer' => [
                'type' => 'custom',
                'tokenizer' => 'standard',
                'filter' => [
                    0 => 'lowercase',
                    1 => 'sw_english_stop_filter',
                ],
            ],
            'elasticsearch.analysis.analyzer.sw_english_analyzer.type' => 'custom',
            'elasticsearch.analysis.analyzer.sw_english_analyzer.tokenizer' => 'standard',
            'elasticsearch.analysis.analyzer.sw_english_analyzer.filter' => [
                0 => 'lowercase',
                1 => 'sw_english_stop_filter',
            ],
            'elasticsearch.analysis.analyzer.sw_english_analyzer.filter.0' => 'lowercase',
            'elasticsearch.analysis.analyzer.sw_english_analyzer.filter.1' => 'sw_english_stop_filter',
            'elasticsearch.analysis.analyzer.sw_german_analyzer' => [
                'type' => 'custom',
                'tokenizer' => 'standard',
                'filter' => [
                    0 => 'lowercase',
                    1 => 'sw_german_stop_filter',
                ],
            ],
            'elasticsearch.analysis.analyzer.sw_german_analyzer.type' => 'custom',
            'elasticsearch.analysis.analyzer.sw_german_analyzer.tokenizer' => 'standard',
            'elasticsearch.analysis.analyzer.sw_german_analyzer.filter' => [
                0 => 'lowercase',
                1 => 'sw_german_stop_filter',
            ],
            'elasticsearch.analysis.analyzer.sw_german_analyzer.filter.0' => 'lowercase',
            'elasticsearch.analysis.analyzer.sw_german_analyzer.filter.1' => 'sw_german_stop_filter',
            'elasticsearch.analysis.filter' => [
                'sw_ngram_filter' => [
                    'type' => 'ngram',
                    'min_gram' => 4,
                    'max_gram' => 5,
                ],
                'sw_english_stop_filter' => [
                    'type' => 'stop',
                    'stopwords' => '_english_',
                ],
                'sw_german_stop_filter' => [
                    'type' => 'stop',
                    'stopwords' => '_german_',
                ],
            ],
            'elasticsearch.analysis.filter.sw_ngram_filter' => [
                'type' => 'ngram',
                'min_gram' => 4,
                'max_gram' => 5,
            ],
            'elasticsearch.analysis.filter.sw_ngram_filter.type' => 'ngram',
            'elasticsearch.analysis.filter.sw_ngram_filter.min_gram' => 4,
            'elasticsearch.analysis.filter.sw_ngram_filter.max_gram' => 5,
            'elasticsearch.analysis.filter.sw_english_stop_filter' => [
                'type' => 'stop',
                'stopwords' => '_english_',
            ],
            'elasticsearch.analysis.filter.sw_english_stop_filter.type' => 'stop',
            'elasticsearch.analysis.filter.sw_english_stop_filter.stopwords' => '_english_',
            'elasticsearch.analysis.filter.sw_german_stop_filter' => [
                'type' => 'stop',
                'stopwords' => '_german_',
            ],
            'elasticsearch.analysis.filter.sw_german_stop_filter.type' => 'stop',
            'elasticsearch.analysis.filter.sw_german_stop_filter.stopwords' => '_german_',
            'elasticsearch.language_analyzer_mapping' => [
                'en' => 'sw_english_analyzer',
                'de' => 'sw_german_analyzer',
                'gsw' => 'sw_german_analyzer',
                'nds' => 'sw_german_analyzer',
            ],
            'elasticsearch.language_analyzer_mapping.en' => 'sw_english_analyzer',
            'elasticsearch.language_analyzer_mapping.de' => 'sw_german_analyzer',
            'elasticsearch.language_analyzer_mapping.gsw' => 'sw_german_analyzer',
            'elasticsearch.language_analyzer_mapping.nds' => 'sw_german_analyzer',
            'elasticsearch.dynamic_templates' => [
                0 => [
                    'keywords' => [
                        'match_mapping_type' => 'string',
                        'mapping' => [
                            'type' => 'keyword',
                            'normalizer' => 'sw_lowercase_normalizer',
                            'fields' => [
                                'text' => [
                                    'type' => 'text',
                                ],
                            ],
                        ],
                    ],
                ],
            ],
            'elasticsearch.dynamic_templates.0' => [
                'keywords' => [
                    'match_mapping_type' => 'string',
                    'mapping' => [
                        'type' => 'keyword',
                        'normalizer' => 'sw_lowercase_normalizer',
                        'fields' => [
                            'text' => [
                                'type' => 'text',
                            ],
                        ],
                    ],
                ],
            ],
            'elasticsearch.dynamic_templates.0.keywords' => [
                'match_mapping_type' => 'string',
                'mapping' => [
                    'type' => 'keyword',
                    'normalizer' => 'sw_lowercase_normalizer',
                    'fields' => [
                        'text' => [
                            'type' => 'text',
                        ],
                    ],
                ],
            ],
            'elasticsearch.dynamic_templates.0.keywords.match_mapping_type' => 'string',
            'elasticsearch.dynamic_templates.0.keywords.mapping' => [
                'type' => 'keyword',
                'normalizer' => 'sw_lowercase_normalizer',
                'fields' => [
                    'text' => [
                        'type' => 'text',
                    ],
                ],
            ],
            'elasticsearch.dynamic_templates.0.keywords.mapping.type' => 'keyword',
            'elasticsearch.dynamic_templates.0.keywords.mapping.normalizer' => 'sw_lowercase_normalizer',
            'elasticsearch.dynamic_templates.0.keywords.mapping.fields' => [
                'text' => [
                    'type' => 'text',
                ],
            ],
            'elasticsearch.dynamic_templates.0.keywords.mapping.fields.text' => [
                'type' => 'text',
            ],
            'elasticsearch.dynamic_templates.0.keywords.mapping.fields.text.type' => 'text',
            'storefront.reverse_proxy' => [
                'enabled' => false,
                'ban_method' => 'BAN',
                'hosts' => [
                    0 => 'http://varnish',
                ],
                'max_parallel_invalidations' => 2,
                'redis_url' => 'redis://redis',
                'purge_all' => [
                    'ban_method' => 'BAN',
                    'ban_headers' => [

                    ],
                    'urls' => [
                        0 => '/',
                    ],
                ],
                'fastly' => [
                    'enabled' => false,
                    'api_key' => '',
                    'instance_tag' => '',
                    'service_id' => '',
                    'soft_purge' => '0',
                    'tag_prefix' => '',
                ],
                'use_varnish_xkey' => false,
                'ban_headers' => [

                ],
            ],
            'storefront.reverse_proxy.enabled' => false,
            'storefront.reverse_proxy.ban_method' => 'BAN',
            'storefront.reverse_proxy.hosts' => [
                0 => 'http://varnish',
            ],
            'storefront.reverse_proxy.hosts.0' => 'http://varnish',
            'storefront.reverse_proxy.max_parallel_invalidations' => 2,
            'storefront.reverse_proxy.redis_url' => 'redis://redis',
            'storefront.reverse_proxy.purge_all' => [
                'ban_method' => 'BAN',
                'ban_headers' => [

                ],
                'urls' => [
                    0 => '/',
                ],
            ],
            'storefront.reverse_proxy.purge_all.ban_method' => 'BAN',
            'storefront.reverse_proxy.purge_all.ban_headers' => [

            ],
            'storefront.reverse_proxy.purge_all.urls' => [
                0 => '/',
            ],
            'storefront.reverse_proxy.purge_all.urls.0' => '/',
            'storefront.reverse_proxy.fastly' => [
                'enabled' => false,
                'api_key' => '',
                'instance_tag' => '',
                'service_id' => '',
                'soft_purge' => '0',
                'tag_prefix' => '',
            ],
            'storefront.reverse_proxy.fastly.enabled' => false,
            'storefront.reverse_proxy.fastly.api_key' => '',
            'storefront.reverse_proxy.fastly.instance_tag' => '',
            'storefront.reverse_proxy.fastly.service_id' => '',
            'storefront.reverse_proxy.fastly.soft_purge' => '0',
            'storefront.reverse_proxy.fastly.tag_prefix' => '',
            'storefront.reverse_proxy.use_varnish_xkey' => false,
            'storefront.reverse_proxy.ban_headers' => [

            ],
            'storefront.http_cache' => [
                'ignored_url_parameters' => [
                    0 => 'pk_campaign',
                    1 => 'piwik_campaign',
                    2 => 'pk_kwd',
                    3 => 'piwik_kwd',
                    4 => 'pk_keyword',
                    5 => 'mtm_campaign',
                    6 => 'matomo_campaign',
                    7 => 'mtm_cid',
                    8 => 'matomo_cid',
                    9 => 'mtm_kwd',
                    10 => 'matomo_kwd',
                    11 => 'mtm_keyword',
                    12 => 'matomo_keyword',
                    13 => 'mtm_source',
                    14 => 'matomo_source',
                    15 => 'mtm_medium',
                    16 => 'matomo_medium',
                    17 => 'mtm_content',
                    18 => 'matomo_content',
                    19 => 'mtm_group',
                    20 => 'matomo_group',
                    21 => 'mtm_placement',
                    22 => 'matomo_placement',
                    23 => 'pixelId',
                    24 => 'kwid',
                    25 => 'kw',
                    26 => 'chl',
                    27 => 'dv',
                    28 => 'nk',
                    29 => 'pa',
                    30 => 'camid',
                    31 => 'adgid',
                    32 => 'utm_term',
                    33 => 'utm_source',
                    34 => 'utm_medium',
                    35 => 'utm_campaign',
                    36 => 'utm_content',
                    37 => 'cx',
                    38 => 'ie',
                    39 => 'cof',
                    40 => 'siteurl',
                    41 => '_ga',
                    42 => 'adgroupid',
                    43 => 'campaignid',
                    44 => 'adid',
                    45 => 'gclsrc',
                    46 => 'gclid',
                    47 => 'fbclid',
                    48 => 'fb_action_ids',
                    49 => 'fb_action_types',
                    50 => 'fb_source',
                    51 => 'mc_cid',
                    52 => 'mc_eid',
                    53 => '_bta_tid',
                    54 => '_bta_c',
                    55 => 'trk_contact',
                    56 => 'trk_msg',
                    57 => 'trk_module',
                    58 => 'trk_sid',
                    59 => 'gdfms',
                    60 => 'gdftrk',
                    61 => 'gdffi',
                    62 => '_ke',
                    63 => 'redirect_log_mongo_id',
                    64 => 'redirect_mongo_id',
                    65 => 'sb_referer_host',
                    66 => 'mkwid',
                    67 => 'pcrid',
                    68 => 'ef_id',
                    69 => 's_kwcid',
                    70 => 'msclkid',
                    71 => 'dm_i',
                    72 => 'epik',
                    73 => 'pp',
                ],
                'stale_while_revalidate' => NULL,
                'stale_if_error' => NULL,
            ],
            'storefront.http_cache.ignored_url_parameters' => [
                0 => 'pk_campaign',
                1 => 'piwik_campaign',
                2 => 'pk_kwd',
                3 => 'piwik_kwd',
                4 => 'pk_keyword',
                5 => 'mtm_campaign',
                6 => 'matomo_campaign',
                7 => 'mtm_cid',
                8 => 'matomo_cid',
                9 => 'mtm_kwd',
                10 => 'matomo_kwd',
                11 => 'mtm_keyword',
                12 => 'matomo_keyword',
                13 => 'mtm_source',
                14 => 'matomo_source',
                15 => 'mtm_medium',
                16 => 'matomo_medium',
                17 => 'mtm_content',
                18 => 'matomo_content',
                19 => 'mtm_group',
                20 => 'matomo_group',
                21 => 'mtm_placement',
                22 => 'matomo_placement',
                23 => 'pixelId',
                24 => 'kwid',
                25 => 'kw',
                26 => 'chl',
                27 => 'dv',
                28 => 'nk',
                29 => 'pa',
                30 => 'camid',
                31 => 'adgid',
                32 => 'utm_term',
                33 => 'utm_source',
                34 => 'utm_medium',
                35 => 'utm_campaign',
                36 => 'utm_content',
                37 => 'cx',
                38 => 'ie',
                39 => 'cof',
                40 => 'siteurl',
                41 => '_ga',
                42 => 'adgroupid',
                43 => 'campaignid',
                44 => 'adid',
                45 => 'gclsrc',
                46 => 'gclid',
                47 => 'fbclid',
                48 => 'fb_action_ids',
                49 => 'fb_action_types',
                50 => 'fb_source',
                51 => 'mc_cid',
                52 => 'mc_eid',
                53 => '_bta_tid',
                54 => '_bta_c',
                55 => 'trk_contact',
                56 => 'trk_msg',
                57 => 'trk_module',
                58 => 'trk_sid',
                59 => 'gdfms',
                60 => 'gdftrk',
                61 => 'gdffi',
                62 => '_ke',
                63 => 'redirect_log_mongo_id',
                64 => 'redirect_mongo_id',
                65 => 'sb_referer_host',
                66 => 'mkwid',
                67 => 'pcrid',
                68 => 'ef_id',
                69 => 's_kwcid',
                70 => 'msclkid',
                71 => 'dm_i',
                72 => 'epik',
                73 => 'pp',
            ],
            'storefront.http_cache.ignored_url_parameters.0' => 'pk_campaign',
            'storefront.http_cache.ignored_url_parameters.1' => 'piwik_campaign',
            'storefront.http_cache.ignored_url_parameters.2' => 'pk_kwd',
            'storefront.http_cache.ignored_url_parameters.3' => 'piwik_kwd',
            'storefront.http_cache.ignored_url_parameters.4' => 'pk_keyword',
            'storefront.http_cache.ignored_url_parameters.5' => 'mtm_campaign',
            'storefront.http_cache.ignored_url_parameters.6' => 'matomo_campaign',
            'storefront.http_cache.ignored_url_parameters.7' => 'mtm_cid',
            'storefront.http_cache.ignored_url_parameters.8' => 'matomo_cid',
            'storefront.http_cache.ignored_url_parameters.9' => 'mtm_kwd',
            'storefront.http_cache.ignored_url_parameters.10' => 'matomo_kwd',
            'storefront.http_cache.ignored_url_parameters.11' => 'mtm_keyword',
            'storefront.http_cache.ignored_url_parameters.12' => 'matomo_keyword',
            'storefront.http_cache.ignored_url_parameters.13' => 'mtm_source',
            'storefront.http_cache.ignored_url_parameters.14' => 'matomo_source',
            'storefront.http_cache.ignored_url_parameters.15' => 'mtm_medium',
            'storefront.http_cache.ignored_url_parameters.16' => 'matomo_medium',
            'storefront.http_cache.ignored_url_parameters.17' => 'mtm_content',
            'storefront.http_cache.ignored_url_parameters.18' => 'matomo_content',
            'storefront.http_cache.ignored_url_parameters.19' => 'mtm_group',
            'storefront.http_cache.ignored_url_parameters.20' => 'matomo_group',
            'storefront.http_cache.ignored_url_parameters.21' => 'mtm_placement',
            'storefront.http_cache.ignored_url_parameters.22' => 'matomo_placement',
            'storefront.http_cache.ignored_url_parameters.23' => 'pixelId',
            'storefront.http_cache.ignored_url_parameters.24' => 'kwid',
            'storefront.http_cache.ignored_url_parameters.25' => 'kw',
            'storefront.http_cache.ignored_url_parameters.26' => 'chl',
            'storefront.http_cache.ignored_url_parameters.27' => 'dv',
            'storefront.http_cache.ignored_url_parameters.28' => 'nk',
            'storefront.http_cache.ignored_url_parameters.29' => 'pa',
            'storefront.http_cache.ignored_url_parameters.30' => 'camid',
            'storefront.http_cache.ignored_url_parameters.31' => 'adgid',
            'storefront.http_cache.ignored_url_parameters.32' => 'utm_term',
            'storefront.http_cache.ignored_url_parameters.33' => 'utm_source',
            'storefront.http_cache.ignored_url_parameters.34' => 'utm_medium',
            'storefront.http_cache.ignored_url_parameters.35' => 'utm_campaign',
            'storefront.http_cache.ignored_url_parameters.36' => 'utm_content',
            'storefront.http_cache.ignored_url_parameters.37' => 'cx',
            'storefront.http_cache.ignored_url_parameters.38' => 'ie',
            'storefront.http_cache.ignored_url_parameters.39' => 'cof',
            'storefront.http_cache.ignored_url_parameters.40' => 'siteurl',
            'storefront.http_cache.ignored_url_parameters.41' => '_ga',
            'storefront.http_cache.ignored_url_parameters.42' => 'adgroupid',
            'storefront.http_cache.ignored_url_parameters.43' => 'campaignid',
            'storefront.http_cache.ignored_url_parameters.44' => 'adid',
            'storefront.http_cache.ignored_url_parameters.45' => 'gclsrc',
            'storefront.http_cache.ignored_url_parameters.46' => 'gclid',
            'storefront.http_cache.ignored_url_parameters.47' => 'fbclid',
            'storefront.http_cache.ignored_url_parameters.48' => 'fb_action_ids',
            'storefront.http_cache.ignored_url_parameters.49' => 'fb_action_types',
            'storefront.http_cache.ignored_url_parameters.50' => 'fb_source',
            'storefront.http_cache.ignored_url_parameters.51' => 'mc_cid',
            'storefront.http_cache.ignored_url_parameters.52' => 'mc_eid',
            'storefront.http_cache.ignored_url_parameters.53' => '_bta_tid',
            'storefront.http_cache.ignored_url_parameters.54' => '_bta_c',
            'storefront.http_cache.ignored_url_parameters.55' => 'trk_contact',
            'storefront.http_cache.ignored_url_parameters.56' => 'trk_msg',
            'storefront.http_cache.ignored_url_parameters.57' => 'trk_module',
            'storefront.http_cache.ignored_url_parameters.58' => 'trk_sid',
            'storefront.http_cache.ignored_url_parameters.59' => 'gdfms',
            'storefront.http_cache.ignored_url_parameters.60' => 'gdftrk',
            'storefront.http_cache.ignored_url_parameters.61' => 'gdffi',
            'storefront.http_cache.ignored_url_parameters.62' => '_ke',
            'storefront.http_cache.ignored_url_parameters.63' => 'redirect_log_mongo_id',
            'storefront.http_cache.ignored_url_parameters.64' => 'redirect_mongo_id',
            'storefront.http_cache.ignored_url_parameters.65' => 'sb_referer_host',
            'storefront.http_cache.ignored_url_parameters.66' => 'mkwid',
            'storefront.http_cache.ignored_url_parameters.67' => 'pcrid',
            'storefront.http_cache.ignored_url_parameters.68' => 'ef_id',
            'storefront.http_cache.ignored_url_parameters.69' => 's_kwcid',
            'storefront.http_cache.ignored_url_parameters.70' => 'msclkid',
            'storefront.http_cache.ignored_url_parameters.71' => 'dm_i',
            'storefront.http_cache.ignored_url_parameters.72' => 'epik',
            'storefront.http_cache.ignored_url_parameters.73' => 'pp',
            'storefront.http_cache.stale_while_revalidate' => NULL,
            'storefront.http_cache.stale_if_error' => NULL,
            'storefront.theme' => [
                'file_delete_delay' => 900,
                'auto_prefix_css' => false,
                'config_loader_id' => 'Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseConfigLoader',
                'theme_path_builder_id' => 'Shopware\\Storefront\\Theme\\SeedingThemePathBuilder',
                'available_theme_provider' => 'Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseAvailableThemeProvider',
            ],
            'storefront.theme.file_delete_delay' => 900,
            'storefront.theme.auto_prefix_css' => false,
            'storefront.theme.config_loader_id' => 'Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseConfigLoader',
            'storefront.theme.theme_path_builder_id' => 'Shopware\\Storefront\\Theme\\SeedingThemePathBuilder',
            'storefront.theme.available_theme_provider' => 'Shopware\\Storefront\\Theme\\ConfigLoader\\DatabaseAvailableThemeProvider',
            'shopware.filesystem.theme.url' => '',
            'shopware.filesystem.theme.type' => 'local',
            'shopware.filesystem.theme.config' => [
                'root' => (\dirname(__DIR__, 4).'/public'),
            ],
            'shopware.filesystem.asset.url' => '',
            'shopware.filesystem.asset.type' => 'local',
            'shopware.filesystem.asset.config' => [
                'root' => (\dirname(__DIR__, 4).'/public'),
            ],
            'shopware.filesystem.sitemap.url' => '',
            'shopware.filesystem.sitemap.type' => 'local',
            'shopware.filesystem.sitemap.config' => [
                'root' => (\dirname(__DIR__, 4).'/public'),
            ],
            'shopware.filesystem.public.url' => '',
            'console.command.ids' => [

            ],
        ];
    }
}
