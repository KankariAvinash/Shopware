{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-settings-shipping/sw-settings-shipping-detail/sw-settings-shipping-detail.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-disputes/page/swag-paypal-disputes-list/swag-paypal-disputes-list.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-settings-hint/swag-paypal-settings-hint.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions/swag-paypal-payment-actions.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-getting-started/swag-paypal-pos-getting-started.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-first-run-wizard/sw-first-run-wizard-paypal-credentials/sw-first-run-wizard-paypal-credentials.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-disputes/page/swag-paypal-disputes-detail/swag-paypal-disputes-detail.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-dashboard/component/swag-paypal-campaign-banner/swag-paypal-campaign-banner.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-customization/swag-paypal-pos-wizard-customization.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/mixin/swag-paypal-credentials-loader.mixin.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-settings/swag-paypal-pos-detail-settings.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-connection-success/swag-paypal-pos-wizard-connection-success.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-boolean-radio/swag-paypal-pos-boolean-radio.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/app/assets/icons/svg/icons-paypal-multicolor.svg","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/app/assets/icons/svg sync nonrecursive svg$","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-connection-disconnect/swag-paypal-pos-wizard-connection-disconnect.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/extension/sw-order-user-card/sw-order-user-card.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/acl/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-connection/swag-paypal-pos-wizard-connection.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-checkout-method/swag-paypal-checkout-method.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-plus/swag-paypal-plus.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-synced-products/swag-paypal-pos-detail-synced-products.scss","webpack:///./node_modules/vue-style-loader/lib/listToStyles.js","webpack:///./node_modules/vue-style-loader/lib/addStylesClient.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-runs/swag-paypal-pos-detail-runs.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-checkout/swag-paypal-checkout.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-sales-channel-modal-grid/sw-sales-channel-modal-grid.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-disputes/acl/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions-v2/swag-paypal-payment-actions-v2.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-overview/swag-paypal-pos-detail-overview.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-settings-payment/sw-settings-payment-detail/sw-settings-payment-detail.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/extension/sw-order-detail-details/sw-order-detail-details.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-finish/swag-paypal-pos-wizard-finish.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-sales-channel-modal-detail/sw-sales-channel-modal-detail.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-settings-icon/swag-paypal-settings-icon.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard/swag-paypal-pos-wizard.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-continue-setup/swag-paypal-pos-continue-setup.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/page/swag-paypal-payment-detail/swag-paypal-payment-detail.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-detail-logs/swag-paypal-pos-detail-logs.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/mixin/swag-paypal-pos-log-label.mixin.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-status/swag-paypal-pos-status.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-account/swag-paypal-pos-account.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-locale-field/swag-paypal-locale-field.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-sync-prices/swag-paypal-pos-wizard-sync-prices.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-dashboard/sw-dashboard-index/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-dashboard/sw-dashboard-index/sw-dashboard-index.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-dashboard/component/swag-paypal-campaign-banner/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-dashboard/component/swag-paypal-campaign-banner/swag-paypal-campaign-banner.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-first-run-wizard/sw-first-run-wizard-paypal-credentials/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-first-run-wizard/sw-first-run-wizard-paypal-credentials/sw-first-run-wizard-paypal-credentials.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-sales-channel-modal-detail/sw-sales-channel-modal-detail.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/constant/swag-paypal.constant.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-sales-channel-modal-detail/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-sales-channel-modal-grid/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-sales-channel-modal-grid/sw-sales-channel-modal-grid.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-settings-payment/components/swag-paypal-overview-card/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-settings-payment/components/swag-paypal-overview-card/swag-paypal-overview-card.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-settings-payment/sw-settings-payment-list/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-settings-payment/sw-settings-payment-list/sw-settings-payment-list.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-settings-payment/sw-settings-payment-detail/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-settings-payment/sw-settings-payment-detail/sw-settings-payment-detail.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-settings-shipping/sw-settings-shipping-detail/sw-settings-shipping-detail.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-settings-shipping/sw-settings-shipping-detail/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/page/swag-paypal/swag-paypal-consts.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/page/swag-paypal/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/page/swag-paypal/swag-paypal.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-settings-hint/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-settings-hint/swag-paypal-settings-hint.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-acdc/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-acdc/swag-paypal-acdc.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-behavior/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-behavior/swag-paypal-behavior.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-checkout/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-checkout/swag-paypal-checkout.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-checkout-method/swag-paypal-checkout-method.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-checkout-method/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-created-component-helper/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-created-component-helper/swag-paypal-created-component-helper.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-credentials/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-credentials/swag-paypal-credentials.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-express/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-express/swag-paypal-express.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-installment/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-installment/swag-paypal-installment.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-plus/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-plus/swag-paypal-plus.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-pui/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-pui/swag-paypal-pui.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-settings-icon/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-settings-icon/swag-paypal-settings-icon.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-spb/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-spb/swag-paypal-spb.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-plugin-box-with-onboarding/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-plugin-box-with-onboarding/sw-plugin-box-with-onboarding.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-locale-field/swag-paypal-locale-field.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/components/swag-paypal-locale-field/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions/swag-paypal-payment-actions.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions/extensions/swag-paypal-payment-action-capture/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions/extensions/swag-paypal-payment-action-capture/swag-paypal-payment-action-capture.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions/extensions/swag-paypal-payment-action-refund/swag-paypal-payment-action-refund.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions/swag-paypal-payment-consts.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions/extensions/swag-paypal-payment-action-refund/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions/extensions/swag-paypal-payment-action-void/swag-paypal-payment-action-void.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions/extensions/swag-paypal-payment-action-void/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions-v2/swag-paypal-payment-actions-v2.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions-v2/extensions/swag-paypal-payment-action-v2-capture/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions-v2/extensions/swag-paypal-payment-action-v2-capture/swag-paypal-payment-action-v2-capture.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions-v2/extensions/swag-paypal-payment-action-v2-refund/swag-paypal-payment-action-v2-refund.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-details-v2/swag-paypal-order-consts.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions-v2/extensions/swag-paypal-payment-action-v2-refund/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions-v2/extensions/swag-paypal-payment-action-v2-void/swag-paypal-payment-action-v2-void.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions-v2/extensions/swag-paypal-payment-action-v2-void/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-actions-v2/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-details-v1/swag-paypal-payment-details-v1.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-details-v1/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-details-v2/swag-paypal-payment-details-v2.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-payment-details-v2/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-pui-details/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-pui-details/swag-paypal-pui-details.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-text-field/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-text-field/swag-paypal-text-field.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-textarea-field/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-textarea-field/swag-paypal-textarea-field.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/extension/sw-order-detail/sw-order-detail.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/extension/sw-order-detail/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/extension/sw-order-detail-details/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/extension/sw-order-detail-details/sw-order-detail-details.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/extension/sw-order-user-card/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/extension/sw-order-user-card/sw-order-user-card.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/page/swag-paypal-payment-detail/swag-paypal-payment-detail.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/page/swag-paypal-payment-detail/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/core/service/api/swag-paypal-api-credentials.service.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/core/service/api/swag-paypal-pos-setting.api.service.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/core/service/api/swag-paypal-pos.api.service.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/core/service/api/swag-paypal-pos-webhook-register.service.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/core/service/api/swag-paypal-payment.service.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/core/service/api/swag-paypal-order.service.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/core/service/api/swag-paypal-payment-method.service.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/core/service/api/swag-paypal-dispute.api.service.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/init/api-service.init.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/init/translation.init.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/app/assets/icons/icons.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/init/svg-icons.init.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-status/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-status/swag-paypal-pos-status.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-account/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-account/swag-paypal-pos-account.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-status-view/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-status-view/swag-paypal-pos-status-view.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-boolean-radio/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-boolean-radio/swag-paypal-pos-boolean-radio.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-detail-logs/swag-paypal-pos-detail-logs.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-detail-logs/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-getting-started/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-getting-started/swag-paypal-pos-getting-started.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-continue-setup/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-continue-setup/swag-paypal-pos-continue-setup.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/extension/sw-sales-channel-menu/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/extension/sw-sales-channel-modal/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos/swag-paypal-pos.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-synced-products/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-synced-products/swag-paypal-pos-detail-synced-products.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-overview/swag-paypal-pos-detail-overview.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-overview/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-settings/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-settings/swag-paypal-pos-detail-settings.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-runs/swag-paypal-pos-detail-runs.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos-detail-runs/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard/swag-paypal-pos-wizard.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-connection/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-connection/swag-paypal-pos-wizard-connection.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-connection-success/swag-paypal-pos-wizard-connection-success.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-connection-success/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-connection-disconnect/swag-paypal-pos-wizard-connection-disconnect.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-connection-disconnect/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-customization/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-customization/swag-paypal-pos-wizard-customization.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-product-selection/swag-paypal-pos-wizard-product-selection.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-product-selection/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-sync-prices/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-sync-prices/swag-paypal-pos-wizard-sync-prices.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-sync-library/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-sync-library/swag-paypal-pos-wizard-sync-library.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-finish/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-finish/swag-paypal-pos-wizard-finish.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-disputes/page/swag-paypal-disputes-detail/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-disputes/page/swag-paypal-disputes-detail/swag-paypal-disputes-detail.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-disputes/page/swag-paypal-disputes-list/swag-paypal-disputes-list.html.twig","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-disputes/page/swag-paypal-disputes-list/swag-paypal-disputes-consts.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-disputes/page/swag-paypal-disputes-list/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-disputes/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/extension/sw-settings-payment/sw-settings-payment-list/sw-settings-payment-list.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal/page/swag-paypal/swag-paypal.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/swag-paypal-pos/swag-paypal-pos.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/mixin/swag-paypal-pos-catch-error.mixin.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/component/swag-paypal-pos-url-field/index.js","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-pos/page/wizard/swag-paypal-pos-wizard-sync-library/swag-paypal-pos-wizard-sync-library.scss","webpack:////tmp/extension826946542/SwagPayPal/src/Resources/app/administration/src/module/swag-paypal-payment/component/swag-paypal-pui-details/swag-paypal-pui-details.scss"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","content","default","locals","add","Mixin","Shopware","debug","Utils","register","inject","data","isGetCredentialsSuccessful","lastOnboardingSandbox","nonceLive","concat","createId","nonceSandbox","payPalPartnerIdLive","payPalPartnerClientIdLive","payPalPartnerIdSandbox","payPalPartnerClientIdSandbox","requestParams","channelId","product","secondaryProducts","capabilities","integrationType","features","displayMode","partnerLogoUrl","computed","onboardingUrlLive","params","this","createRequestParameter","partnerId","partnerClientId","returnToPartnerUrl","returnUrl","sellerNonce","toString","onboardingUrlSandbox","created","$root","$on","getPayPalCredentials","window","onboardingCallbackLive","authCode","sharedId","Application","getApplicationRoot","$emit","sandbox","onboardingCallbackSandbox","mounted","createScript","destroyed","$off","methods","location","origin","pathname","$route","path","config","arguments","length","undefined","_objectSpread","keys","reduce","accumulator","Array","isArray","join","append","URLSearchParams","id","document","getElementById","PAYPAL","renderPayPalButton","payPalScript","createElement","type","src","async","addEventListener","head","appendChild","apps","Signup","render","timeout","clearTimeout","setTimeout","_ref","_this","isLoading","Promise","resolve","SwagPayPalApiCredentialsService","getApiCredentials","then","response","onPayPalCredentialsLoadSuccess","client_id","client_secret","payer_id","catch","onPayPalCredentialsLoadFailed","finally","warn","map","webpackContext","req","webpackContextResolve","e","Error","code","Service","addPrivilegeMappingEntry","category","parent","roles","viewer","privileges","dependencies","editor","creator","deleter","listToStyles","parentId","list","styles","newStyles","item","part","css","media","sourceMap","parts","push","hasDocument","DEBUG","stylesInDom","getElementsByTagName","singletonElement","singletonCounter","isProduction","noop","options","ssrIdKey","isOldIE","navigator","test","userAgent","toLowerCase","addStylesClient","_isProduction","_options","addStylesToDom","newList","mayRemove","domStyle","refs","j","addStyle","createStyleElement","styleElement","obj","update","remove","querySelector","parentNode","removeChild","styleIndex","applyToSingletonTag","applyToTag","newObj","textStore","replaceText","index","replacement","filter","Boolean","styleSheet","cssText","cssNode","createTextNode","childNodes","insertBefore","setAttribute","ssrId","sources","btoa","unescape","encodeURIComponent","JSON","stringify","firstChild","getLabelVariant","level","getLabel","Component","override","template","payPalSystemConfig","showPayPalBanner","Date","createdComponent","$super","systemConfigApiService","getValues","i18n","messages","title","text","labelText","linkTitle","closed","$tc","timePrefix","showLabel","assetFilter","Filter","getByName","currentLocale","State","image","suffix","cardClasses","localStorageKey","localStorage","getItem","close","setItem","mixins","setDefault","sandboxMode","onboardingUrl","onboardingCallback","buttonConfig","acc","button","action","onClickNext","_toConsumableArray","credentialsProvided","credentialsProvidedLive","credentialsProvidedSandbox","fetchPayPalConfig","clientId","clientSecret","merchantPayerId","setConfig","createNotificationError","message","duration","$set","_this2","saveConfig","testApiCredentials","_this3","values","_this4","saveValues","SwagPaypalPaymentMethodService","setDefaultPaymentForSalesChannel","_this5","sandboxSetting","validateApiCredentials","credentialsValid","reject","errorResponse","errors","error","detail","onCredentialsChanged","PAYPAL_POS_SALES_CHANNEL_TYPE_ID","PAYPAL_POS_SALES_CHANNEL_EXTENSION","isPayPalPosSalesChannel","salesChannelTypeId","salesChannelTypes","find","_regeneratorRuntime","Op","hasOwn","desc","$Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","define","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","context","Context","makeInvokeMethod","tryCatch","fn","arg","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","record","result","_typeof","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","state","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","constructor","mark","setPrototypeOf","__proto__","awrap","iter","val","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","props","paymentMethods","required","salesChannels","pluginId","save","_callee","errorMessage","_context","$refs","swagPayPalConfigComponent","payPalWebhookErrors","swagPayPalCheckoutComponent","getPaymentMethodsAndMerchantIntegrations","args","apply","onChangeLoading","merchantIntegrations","needsOnboarding","includes","toUpperCase","fetchMerchantIntegrations","getMerchantInformation","_response$merchantInt","disableActiveSwitch","acl","can","paymentMethod","_Shopware","isPayPalEnabled","shippingMethodCustomFields","shippingMethod","customFields","payPalDefaultCarrier","swag_paypal_carrier","set","MERCHANT_LOCATION_GERMANY","MERCHANT_LOCATION_OTHER","Defaults","Criteria","Data","isSaveSuccessful","isTestSuccessful","isTestSandboxSuccessful","clientIdFilled","clientSecretFilled","clientIdSandboxFilled","clientSecretSandboxFilled","sandboxChecked","isSetDefaultPaymentSuccessful","isSettingDefaultPaymentMethods","savingDisabled","messageBlankErrorState","showCredentials","allowShowCredentials","constants","metaInfo","$createTitle","showSPBCard","_this$$refs$configCom","defaultConfig","configComponent","allConfigs","null","showPlusCard","_this$$refs$configCom2","salesChannelRepository","repositoryFactory","clientIdErrorState","clientSecretErrorState","clientIdSandboxErrorState","clientSecretSandboxErrorState","hasError","salesChannelCriteria","criteria","addFilter","equalsAny","storefrontSalesChannelTypeId","apiSalesChannelTypeId","tab","watch","handler","_this$$refs$configCom3","_this$$refs$configCom4","_this$$refs$configCom5","selectedSalesChannelId","deep","$router","search","api","res","translated","onSave","onSetPaymentMethodDefault","_this$$refs$configCom6","preventSave","onChangeCredentialsVisibility","visibility","hintText","String","actualConfigData","checkBoolFieldInheritance","intentOptions","merchantLocationOptions","landingPageOptions","landingPageHint","landingPageOption","translationKey","loggingLevelOptions","label","loggingLevel","productRepository","productStreamRepository","excludedProductCriteria","addAssociation","checkTextFieldInheritance","checkArrayFieldInheritance","_asyncToGenerator","showSettingsLink","merchantInformation","legalName","primaryEmail","plusDeprecationModalOpen","showHintMerchantIdMustBeEnteredManually","isLoadingPaymentMethods","paymentMethodRepository","paymentMethodCriteria","equals","addSorting","sort","isLive","isSandbox","liveButtonTitle","isOnboardingPPCPFinished","some","pm","onboardingStatus","sandboxButtonTitle","sandboxToggleDisabled","sepaPaymentMethod","formattedHandlerIdentifier","showMerchantInformation","showSandboxToggle","merchantEmail","_this$merchantInforma","primary_email","tracking_id","plusCheckoutEnabled","updateShowCredentials","deactivatePayPalPlus","_callee2","_context2","getPaymentMethods","_callee3","_context3","_this6","_callee4","_context4","onChangePaymentMethodActive","_this7","active","createNotificationSuccess","closeModal","editLink","_this$onboardingStatu","paymentMethodToggleDisabled","showEditLink","statusBadgeVariant","variant","statusBadgeColor","onboardingStatusText","onboardingStatusTooltip","snippetKey","$te","availabilityToolTip","handlerElements","split","handlerName","isTestingLive","isTestingSandbox","isTestLiveSuccessful","testLiveButtonDisabled","testSandboxButtonDisabled","onTest","buttonColorOptions","buttonShapeOptions","renderSettingsDisabled","isPayPalPLUSActive","isPayPalPLUSInActive","ifItWasNotActive","extend","debounce","onInput","event","checkValue","target","onBlur","removeFocusClass","feature","isActive","exec","Module","description","version","targetVersion","color","icon","routes","component","meta","parentPath","privilege","settingsItem","group","to","iconComponent","backgroundEnabled","utils","paymentResource","maxCaptureValue","Number","orderId","isFinalCapture","captureValue","currency","transactions","amount","showHint","capture","captureAmount","resourceType","intent","resourceId","getResourceId","SwagPayPalPaymentService","capturePayment","$nextTick","replace","autoClose","relatedResourceId","related_resources","relatedResource","authorization","order","REFUNDED_STATE","VOIDED_STATE","CAPTURED_STATE","COMPLETED_STATE","CAPTURE_RESOURCE_TYPE","SALE_RESOURCE_TYPE","FAILED_STATE","CANCELLED_STATE","captures","selectedCapture","existingRefunds","refundAmount","refundableAmount","refundDescription","refundReason","refundInvoiceNumber","selectedCaptureId","dateFilter","getRefundableCaptures","mapRefunds","preserveCapture","relatedResources","sale","formatCapture","refund","resource","createDate","create_time","total","capture_id","sale_id","reason","invoiceNumber","refundPayment","voidPayment","firstRelatedResource","modalType","captureableAmount","showVoidButton","setPaymentActionAmounts","setShowVoidButton","formatAmount","spawnModal","nonVoidAbleStates","Math","round","paypalOrder","orderTransactionId","paypalPartnerAttributionId","captureInvoiceNumber","captureNoteToPayer","currencyCode","purchase_units","payments","authorizations","currency_code","SwagPayPalOrderService","captureAuthorization","ORDER_CAPTURE_REFUNDED","ORDER_AUTHORIZATION_CREATED","ORDER_AUTHORIZATION_PARTIALLY_CAPTURED","ORDER_AUTHORIZATION_PENDING","refundNoteToPayer","firstCapture","rawCaptures","refundableCaptures","status","setCapture","refundCapture","voidAuthorization","createDateTime","updateDateTime","payerId","relatedResourceColumns","rawData","formatDate","update_time","payer","payer_info","setRelatedResources","rawRelatedResources","pushRelatedResource","transactionFee","transaction_fee","createRaw","paymentMode","payment_mode","a","b","dateTime","hour","minute","second","orderTransaction","paymentColumns","puiDetails","swag_paypal_pui_payment_instruction","_this$paypalOrder$pay","_this$paypalOrder$pay2","setPayments","rawAuthorizations","rawRefunds","refunds","pushPayment","authStatus","payment","getTransactionFee","sellerReceivableBreakdown","seller_receivable_breakdown","paypalFee","paypal_fee","sellerPayableBreakdown","seller_payable_breakdown","domUtils","dom","details","purchaseUnitAmount","copyText","bankName","iban","bic","accountHolderName","reference","deposit_bank_details","bank_name","account_holder_name","payment_reference","onCopy","_navigator","clipboard","copyToClipboard","writeText","isPayPalPayment","isEditable","orderRepository","orderCriteria","getAssociation","setLimit","transaction","last","immediate","isPayPalSandbox","_this$order","payPalResourceId","_this$transaction","_this$transaction$cus","swag_paypal_resource_id","payPalCarrier","_this$order$deliverie","_this$order2","_this$order2$deliveri","_this$order2$deliveri2","_this$order2$deliveri3","deliveries","first","payPalOrderLink","prefix","payPalCarrierDescription","orderLink","salesChannelConfig","salesChannelId","_this$currentOrder$tr","currentOrder","_this$delivery$shippi","_this$delivery","_this$delivery$shippi2","_this$delivery$shippi3","delivery","isEmpty","types","orderTransactionState","stateFailedCancelled","showCanceledPaymentError","showPayPalPayment","showPayPalOrder","showSandboxLiveError","showGeneralError","resetDataAttributes","emitIdentifier","stateMachineState","technicalName","paypalPaymentId","swag_paypal_transaction_id","handlePayPalPayment","paypalOrderId","swag_paypal_order_id","handlePayPalOrder","getOrderDetails","handleError","getPaymentDetails","orderNumber","routeMiddleware","currentRoute","children","isChildren","ApiService","Classes","_ApiService","_inherits","_super","_createSuper","httpClient","loginService","apiEndpoint","_classCallCheck","sandboxActive","headers","getBasicHeaders","getApiBasePath","handleResponse","nonce","additionalParams","additionalHeaders","post","SwagPayPalPosSettingApiService","apiKey","salesChannel","forceLanguage","extensions","paypalPosSalesChannel","languageId","languages","assign","currencies","currencyId","countries","countryId","fromSalesChannelId","toSalesChannelId","cloneSalesChannelId","SwagPayPalPosApiService","basicConfig","runId","page","limit","SwagPayPalPosWebhookRegisterService","delete","payPalPaymentId","apiRoute","captureIsFinal","getDefaultOptions","captureId","noteToPayer","partnerAttributionId","doPostRequest","authorizationId","isFinal","requestParameters","apiVersion","SwagPayPalDisputeApiService","disputeStateFilter","disputeId","initContainer","getContainer","addServiceProvider","container","Locale","deDeSnippets","enGBSnippets","require","functional","elementContext","class","staticClass","style","attrs","on","domProps","innerHTML","iconComponents","disabled","disabledText","iconAnimated","subIcon","showSubStatus","validValues","validator","subVariant","statusClasses","_defineProperty","iconClasses","subIconClasses","showSubIcon","lastRun","isError","merchantInfo","accountName","accountEmail","contactEmail","connectionStatusText","connectionStatusVariant","runRepository","loadMerchantData","fetchInformation","lastFinishedRun","lastCompleteRun","isSyncing","syncErrors","statusErrorLevel","statusCompleteErrorLevel","iconConfig","syncing","warning","success","noRunYet","statusVariant","statusIcon","statusIconComplete","incompleteLastRun","statusTitle","task","getHighestLevel","run","max","logs","log","model","prop","optionTrue","optionFalse","inputId","castedValue","sortBy","sortDirection","loadingLogs","disableRouteParams","logRepository","columns","dataIndex","width","sortable","getListCriteria","getMainListingParams","naturalSorting","getList","getLabelVariantForItem","posSalesChannelRun","getLabelForItem","onContinueSetup","buildMenuTree","menuItems","posIds","menuItem","onAddChannel","onCloseModal","previousApiKey","paypalPosSalesChannelRepository","loadSalesChannel","entity","updateRun","updateCloneSalesChannel","updateButtons","onButtonClick","redirect","loadLastRun","needComplete","not","$forceUpdate","products","actions","callback","onProductDetails","getProductLog","elements","hasSync","paypalPosLog","paypalPosSync","getSyncDate","updatedAt","createdAt","getLevel","syncingRunId","checkForSync","mountedComponent","forceUpdate","startSync","callable","updateSync","onStartSync","startCompleteSync","onStartProductSync","startProductSync","onStartImageSync","startImageSync","onStartInventorySync","startInventorySync","onSyncAbort","abortSync","unshift","mapPropertyErrors","getComponentHelper","ShopwareError","showDeleteModal","showResetModal","isTestingCredentials","isTestCredentialsSuccessful","apiKeyUrl","generateApiUrl","optionSyncPrices","optionNotSyncPrices","optionsReplace","swagPaypalPosSalesChannel","catchAuthenticationError","registerWebhook","catchError","cloneProductVisibility","placeholder","mediaDomain","expression","commit","testCredentials","onConfirmDelete","deleteSalesChannel","unregisterWebhook","onConfirmReset","resetSync","changeLanguage","runs","isCleaningLog","showModal","currentRunId","onShowModal","onClearLogs","startLogCleanup","stepperPages","stepper","currentStep","wizardTitle","displayStepperPages","stepInitialItemVariants","maxNavigationIndex","navigationIndex","navigationSteps","handleRouteUpdate","toName","generateStepper","createNewSalesChannel","step","pageName","_isNew","routeToDashboard","routeToDetailOverview","onFinishWizard","finished","activateSalesChannel","silentWebhook","isNewEntity","silent","webhookPromise","systemLanguageId","typeId","imageDomain","productStreamId","syncPrices","salesChannelService","generateKey","accessKey","toggleLoading","isConnecting","setTitle","position","routeToConnectionSuccess","toggleLoadingState","mixin","saveSalesChannel","Function","posData","isFetchingInformation","posUser","firstName","lastName","mail","fullName","routeToCustomization","onDisconnect","routeBackToConnectionSuccess","loading","routeToProductSelection","nextButtonDisabled","manualSalesChannel","hasClone","localCloneSalesChannelId","routeBackToCustomization","routeToSyncLibrary","updateClone","routeBackToSyncLibrary","routeToFinish","shopwareProductsCount","posProductsCount","fetchProductCounts","routeBackToProductSelection","routeToSyncPrices","getProductCount","localCount","remoteCount","routeBackToSyncPrices","onFinish","overview","syncedProducts","settings","wizard","connection","connectionSuccess","connectionDisconnect","customization","productSelection","syncLibrary","capitalizeString","string","dispute","resolutionCenterUrl","orderModuleLink","orderTransactionRepository","orderTransactionCriteria","_JSON$parse$orderTran","_JSON$parse","disputed_transactions","disputedTransaction","custom","parse","setIds","externalDetailPageLink","dispute_id","getDetail","setLinkToOrderModule","errorDetail","getExternalDetailPageLink","orderTransactions","formatTechnicalText","technicalText","getInquiryClass","stage","getDueDate","sellerResponseDueDate","buyerResponseDueDate","createNotificationInfo","DISPUTE_STATE_REQUIRED_ACTION","DISPUTE_STATE_REQUIRED_OTHER_PARTY_ACTION","DISPUTE_STATE_UNDER_PAYPAL_REVIEW","DISPUTE_STATE_RESOLVED","DISPUTE_STATE_OPEN_INQUIRIES","DISPUTE_STATE_APPEALABLE","disputes","disputeStates","disputesColumns","visibleDisputes","disputeList","items","sortDisputes","debouncedGetList","formatUpdateDate","formatUpdateTime","day","month","year","onPageChange","onRefresh","onChangeDisputeStateFilter","onSalesChannelChanged","favicon","route","navigation","snippet","_i18n","errorText","parameters","salesChannelIds","changeMode","getSSLMode"],"mappings":"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","file":"static/js/swag-pay-pal.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/bundles/swagpaypal/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"uRbb\");\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-shipping-detail.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"7b5e4bb4\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-disputes-list.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"74c154fb\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-settings-hint.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"122c0d43\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-payment-actions.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"ff341848\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-getting-started.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"c9b93ef6\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-first-run-wizard-paypal-credentials.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"dd928612\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-disputes-detail.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"a60f0bf0\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-campaign-banner.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"3dbd7f10\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-wizard-customization.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"0155ebb5\", content, true, {});","const { Mixin } = Shopware;\nconst { debug } = Shopware.Utils;\n\nMixin.register('swag-paypal-credentials-loader', {\n\n    inject: ['SwagPayPalApiCredentialsService'],\n\n    data() {\n        return {\n            isGetCredentialsSuccessful: false,\n            lastOnboardingSandbox: false,\n            nonceLive: `${Shopware.Utils.createId()}${Shopware.Utils.createId()}`,\n            nonceSandbox: `${Shopware.Utils.createId()}${Shopware.Utils.createId()}`,\n            payPalPartnerIdLive: 'DYKPBPEAW5JNA',\n            payPalPartnerClientIdLive: 'AR1aQ13lHxH1c6b3CDd8wSY6SWad2Lt5fv5WkNIZg-qChBoGNfHr2kT180otUmvE_xXtwkgahXUBBurW',\n            payPalPartnerIdSandbox: '45KXQA7PULGAG',\n            payPalPartnerClientIdSandbox: 'AQ9g8qMYHpE8s028VCq_GO3Roy9pjeqGDjKTkR_sxzX0FtncBb3QUWbFtoQMtdpe2lG9NpnDT419dK8s',\n\n            requestParams: {\n                channelId: 'partner',\n                product: 'ppcp',\n                secondaryProducts: 'payment_methods',\n                capabilities: 'PAY_UPON_INVOICE',\n                integrationType: 'FO',\n                features: [\n                    'PAYMENT',\n                    'REFUND',\n                    'READ_SELLER_DISPUTE',\n                    'UPDATE_SELLER_DISPUTE',\n                    'ADVANCED_TRANSACTIONS_SEARCH',\n                    'ACCESS_MERCHANT_INFORMATION',\n                    'TRACKING_SHIPMENT_READWRITE',\n                ],\n                displayMode: 'minibrowser',\n                partnerLogoUrl: 'https://assets.shopware.com/media/logos/shopware_logo_blue.svg',\n            },\n        };\n    },\n\n    computed: {\n        onboardingUrlLive() {\n            const params = this.createRequestParameter({\n                partnerId: this.payPalPartnerIdLive,\n                partnerClientId: this.payPalPartnerClientIdLive,\n                returnToPartnerUrl: this.returnUrl(),\n                sellerNonce: this.nonceLive,\n            });\n\n            return `https://www.paypal.com/bizsignup/partner/entry?${params.toString()}`;\n        },\n        onboardingUrlSandbox() {\n            const params = this.createRequestParameter({\n                partnerId: this.payPalPartnerIdSandbox,\n                partnerClientId: this.payPalPartnerClientIdSandbox,\n                returnToPartnerUrl: this.returnUrl(),\n                sellerNonce: this.nonceSandbox,\n            });\n\n            return `https://www.sandbox.paypal.com/bizsignup/partner/entry?${params.toString()}`;\n        },\n    },\n\n    created() {\n        this.$root.$on('paypal-onboarding-finish', this.getPayPalCredentials);\n        window.onboardingCallbackLive = function onboardingCallback(authCode, sharedId) {\n            Shopware.Application.getApplicationRoot().$emit(\n                'paypal-onboarding-finish',\n                { authCode, sharedId, sandbox: false },\n            );\n        };\n        window.onboardingCallbackSandbox = function onboardingCallbackSandbox(authCode, sharedId) {\n            Shopware.Application.getApplicationRoot().$emit(\n                'paypal-onboarding-finish',\n                { authCode, sharedId, sandbox: true },\n            );\n        };\n    },\n\n    mounted() {\n        this.createScript();\n    },\n\n    destroyed() {\n        this.$root.$off('paypal-onboarding-finish');\n    },\n\n    methods: {\n        returnUrl() {\n            return `${window.location.origin}${window.location.pathname}#${this.$route.path}`;\n        },\n\n        createRequestParameter(config = {}) {\n            const params = { ...this.requestParams, ...config };\n            return Object.keys(params).reduce((accumulator, key) => {\n                let value = params[key];\n\n                if (Array.isArray(value)) {\n                    value = value.join(',');\n                }\n                accumulator.append(key, value);\n\n                return accumulator;\n            }, new URLSearchParams());\n        },\n\n        createScript() {\n            const id = 'paypal-js';\n            if (!document.getElementById(id)) {\n                const payPalScriptUrl = 'https://www.paypal.com/webapps/merchantboarding/js/lib/lightbox/partner.js';\n                const payPalScript = document.createElement('script');\n                payPalScript.id = id;\n                payPalScript.type = 'text/javascript';\n                payPalScript.src = payPalScriptUrl;\n                payPalScript.async = true;\n                payPalScript.addEventListener('load', this.renderPayPalButton.bind(this), false);\n\n                document.head.appendChild(payPalScript);\n            } else if (window.PAYPAL) {\n                this.renderPayPalButton();\n            }\n        },\n\n        renderPayPalButton() {\n            // The original render function inside the partner.js is overwritten here.\n            // The function gets overwritten again, as soon as PayPals signup.js is loaded.\n            // A loop is created and the render() function is executed until the real render() function is available.\n            // PayPal does originally nearly the same, but only once and not in a loop.\n            // If the signup.js is loaded to slow the button is not rendered.\n            window.PAYPAL.apps.Signup.render = function proxyPPrender() {\n                if (window.PAYPAL.apps.Signup.timeout) {\n                    clearTimeout(window.PAYPAL.apps.Signup.timeout);\n                }\n\n                window.PAYPAL.apps.Signup.timeout = setTimeout(window.PAYPAL.apps.Signup.render, 300);\n            };\n\n            window.PAYPAL.apps.Signup.render();\n        },\n\n        getPayPalCredentials({ authCode, sharedId, sandbox }) {\n            if (this.isLoading) {\n                return Promise.resolve(false);\n            }\n\n            this.isGetCredentialsSuccessful = null;\n            this.lastOnboardingSandbox = sandbox;\n\n            this.$emit('on-change-loading', true);\n\n            return this.SwagPayPalApiCredentialsService.getApiCredentials(\n                authCode,\n                sharedId,\n                sandbox ? this.nonceSandbox : this.nonceLive,\n                sandbox,\n            ).then((response) => {\n                this.isGetCredentialsSuccessful = true;\n                this.onPayPalCredentialsLoadSuccess(response.client_id, response.client_secret, response.payer_id, sandbox);\n            }).catch(() => {\n                this.isGetCredentialsSuccessful = false;\n                this.onPayPalCredentialsLoadFailed(sandbox);\n            }).finally(() => {\n                this.$emit('on-change-loading', false);\n            });\n        },\n\n        /**\n         *\n         * @param clientId string\n         * @param clientSecret string\n         * @param merchantPayerId string\n         * @param sandbox bool\n         */\n        onPayPalCredentialsLoadSuccess() {\n            // needs to be implemented by using component\n            debug.warn(\n                'swag-paypal-credentials-loader Mixin',\n                'When using the paypal-credentials-loader mixin ' +\n                'you have to implement your custom \"onPayPalCredentialsLoadSuccess()\" method.',\n            );\n        },\n\n        /**\n         *\n         * @param sandbox bool\n         */\n        onPayPalCredentialsLoadFailed() {\n            // needs to be implemented by using component\n            debug.warn(\n                'swag-paypal-credentials-loader Mixin',\n                'When using the paypal-credentials-loader mixin ' +\n                'you have to implement your custom \"onPayPalCredentialsLoadFailed()\" method.',\n            );\n        },\n    },\n});\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-detail-settings.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"071a1f32\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-wizard-connection-success.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"a74e3b2c\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-boolean-radio.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"f1eb8db2\", content, true, {});","module.exports = \"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"40\\\" viewBox=\\\"0 0 48 48\\\"><g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\"><path fill=\\\"#013088\\\" d=\\\"M1.36196923,45.9634625 C0.525969231,45.9634625 -0.113723077,45.2159 0.0165846154,44.3907125 L6.62843077,2.599775 C6.80104615,1.4978375 7.75381538,0.6878375 8.87073846,0.6878375 L24.7445846,0.6878375 C30.2124308,0.6878375 34.4855077,1.8387125 36.8530462,4.5269 C39.0005846,6.9687125 39.6284308,9.6653375 39.0056615,13.6259 C39.8924308,14.0946875 40.6522769,14.670125 41.2648923,15.3636875 C43.2888923,17.66375 43.6848923,20.934125 42.9199692,24.8508125 C41.0888923,34.2265625 34.8239692,37.4665625 26.8210462,37.4665625 L25.5856615,37.4665625 C24.6075077,37.4665625 23.7748923,38.1753125 23.6225846,39.1405625 L23.5227385,39.6805625 L21.9675077,49.5220625 L21.8862769,49.9405625 C21.7322769,50.9024375 20.9013538,51.6111875 19.9232,51.6111875 L11.6630462,51.6111875 C10.9319692,51.6111875 10.3735077,50.9598125 10.4868923,50.2375625 L11.1620698,45.9634625 L1.36196923,45.9634625 Z\\\"></path><path fill=\\\"#019CDE\\\" d=\\\"M39.0039692,13.6255625 C38.9565846,13.927625 38.9024308,14.2364375 38.8415077,14.5536875 C36.7481231,25.271 29.5862769,28.973375 20.4393538,28.973375 L15.7821231,28.973375 C14.6635077,28.973375 13.7208923,29.783375 13.5465846,30.883625 L11.1621231,45.963125 L10.4868923,50.2375625 C10.3735077,50.9598125 10.9319692,51.6111875 11.6630462,51.6111875 L19.9232,51.6111875 C20.9013538,51.6111875 21.7322769,50.9024375 21.8862769,49.9405625 L21.9675077,49.5220625 L23.5227385,39.6805625 L23.6225846,39.1405625 C23.7748923,38.1753125 24.6075077,37.4665625 25.5856615,37.4665625 L26.8210462,37.4665625 C34.8239692,37.4665625 41.0888923,34.2265625 42.9199692,24.8508125 C43.6848923,20.934125 43.2888923,17.66375 41.2648923,15.3636875 C40.6522769,14.670125 39.8924308,14.0946875 39.0039692,13.6255625\\\"></path><path fill=\\\"#012269\\\" d=\\\"M36.8142923,12.7546437 C36.4944462,12.6618312 36.1644462,12.5774562 35.8259846,12.5015187 C35.4858308,12.4272687 35.1372154,12.3614562 34.7784462,12.3040812 C33.5227538,12.1015812 32.1469077,12.0053937 30.6729077,12.0053937 L18.2310615,12.0053937 C17.9247538,12.0053937 17.6336769,12.0745812 17.3730615,12.1994562 C16.7993692,12.4745187 16.3729077,13.0162062 16.2696769,13.6793937 L13.6229077,30.3957687 L13.5467538,30.8834562 C13.7210615,29.7832062 14.6636769,28.9732062 15.7822923,28.9732062 L20.4395231,28.9732062 C29.5864462,28.9732062 36.7482923,25.2691437 38.8416769,14.5535187 C38.9042923,14.2362687 38.9567538,13.9274562 39.0041385,13.6253937 C38.4744462,13.3452687 37.9007538,13.1056437 37.2830615,12.9014562 C37.1307538,12.8508312 36.9733692,12.8018937 36.8142923,12.7546437\\\"></path></g></svg>\"","var map = {\n\t\"./icons-paypal-multicolor.svg\": \"EZ7i\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"F19+\";","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-wizard-connection-disconnect.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"1ea72e66\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-order-user-card.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"71e44449\", content, true, {});","Shopware.Service('privileges').addPrivilegeMappingEntry({\n    category: 'permissions',\n    parent: 'swag_paypal',\n    key: 'swag_paypal',\n    roles: {\n        viewer: {\n            privileges: [\n                'sales_channel:read',\n                'sales_channel_payment_method:read',\n                'system_config:read',\n            ],\n            dependencies: [],\n        },\n        editor: {\n            privileges: [\n                'sales_channel:update',\n                'sales_channel_payment_method:create',\n                'sales_channel_payment_method:update',\n                'system_config:update',\n                'system_config:create',\n                'system_config:delete',\n            ],\n            dependencies: [\n                'swag_paypal.viewer',\n            ],\n        },\n    },\n});\n\nShopware.Service('privileges').addPrivilegeMappingEntry({\n    category: 'permissions',\n    parent: null,\n    key: 'sales_channel',\n    roles: {\n        viewer: {\n            privileges: [\n                'swag_paypal_pos_sales_channel:read',\n                'swag_paypal_pos_sales_channel_run:read',\n                'swag_paypal_pos_sales_channel_run:update',\n                'swag_paypal_pos_sales_channel_run:create',\n                'swag_paypal_pos_sales_channel_run_log:read',\n                'sales_channel_payment_method:read',\n            ],\n        },\n        editor: {\n            privileges: [\n                'swag_paypal_pos_sales_channel:update',\n                'swag_paypal_pos_sales_channel_run:delete',\n                'payment_method:update',\n            ],\n        },\n        creator: {\n            privileges: [\n                'swag_paypal_pos_sales_channel:create',\n                'payment_method:create',\n                'shipping_method:create',\n                'delivery_time:create',\n            ],\n        },\n        deleter: {\n            privileges: [\n                'swag_paypal_pos_sales_channel:delete',\n            ],\n        },\n    },\n});\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-wizard-connection.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"cb6288c0\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-checkout-method.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"47ac73c4\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-plus.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"72cdac04\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-detail-synced-products.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"2e2c32d2\", content, true, {});","/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nexport default function listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n","/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\nimport listToStyles from './listToStyles'\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\nvar options = null\nvar ssrIdKey = 'data-vue-ssr-id'\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nexport default function addStylesClient (parentId, list, _isProduction, _options) {\n  isProduction = _isProduction\n\n  options = _options || {}\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n  if (options.ssrId) {\n    styleElement.setAttribute(ssrIdKey, obj.id)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-detail-runs.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"3173c923\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-checkout.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"634d0ad2\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-sales-channel-modal-grid.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"ae3197a0\", content, true, {});","Shopware.Service('privileges').addPrivilegeMappingEntry({\n    category: 'permissions',\n    parent: 'swag_paypal',\n    key: 'swag_paypal_disputes',\n    roles: {\n        viewer: {\n            privileges: [\n                'sales_channel:read',\n            ],\n            dependencies: [],\n        },\n    },\n});\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-payment-actions-v2.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"2577fcab\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-detail-overview.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"30b35570\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-payment-detail.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"5adad03c\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-order-detail-details.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"637be6eb\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-wizard-finish.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"231a212a\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-sales-channel-modal-detail.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"112c93e5\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-settings-icon.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"8867cfa6\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-wizard.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"6f512ba2\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-continue-setup.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"c0fb548c\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-payment-detail.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"63a46a80\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-detail-logs.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"28782552\", content, true, {});","const { Mixin } = Shopware;\n\nMixin.register('swag-paypal-pos-log-label', {\n    methods: {\n        /**\n         * Returns the corresponding sw-label variant for a Zettle log\n         *\n         * @param {Number} level\n         * @returns {string}\n         */\n        getLabelVariant(level) {\n            if (level >= 400) {\n                return 'danger';\n            }\n\n            if (level >= 300) {\n                return 'warning';\n            }\n\n            if (level > 200) {\n                return 'info';\n            }\n\n            return 'success';\n        },\n\n        /**\n         * Returns the corresponding translation path for a Zettle log\n         *\n         * @param {Number} level\n         * @returns {string}\n         */\n        getLabel(level) {\n            if (level >= 300) {\n                return 'swag-paypal-pos.detail.logs.states.failed';\n            }\n\n            return 'swag-paypal-pos.detail.logs.states.success';\n        },\n    },\n});\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-status.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"8aeaae96\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-account.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"0e844060\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-locale-field.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"2afcc75e\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-wizard-sync-prices.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"a4bcec84\", content, true, {});","import template from './sw-dashboard-index.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-dashboard-index', {\n    template,\n\n    inject: [\n        'systemConfigApiService',\n    ],\n\n    data() {\n        return {\n            /**\n             * @private\n             */\n            payPalSystemConfig: null,\n        };\n    },\n\n    computed: {\n        /**\n         * @private\n         */\n        showPayPalBanner() {\n            if (!this.payPalSystemConfig) {\n                return false;\n            }\n\n            return new Date() < new Date('2022-12-31')\n                && (this.payPalSystemConfig['SwagPayPal.settings.clientId']\n                    || this.payPalSystemConfig['SwagPayPal.settings.clientIdSandbox']);\n        },\n    },\n\n    methods: {\n        createdComponent() {\n            this.$super('createdComponent');\n\n            this.systemConfigApiService.getValues('SwagPayPal.settings').then((config) => {\n                this.payPalSystemConfig = config;\n            });\n        },\n    },\n});\n","export default \"{% block sw_dashboard_index_content_campaign_banner %}\\n    {% parent %}\\n\\n    <swag-paypal-campaign-banner v-if=\\\"showPayPalBanner\\\"></swag-paypal-campaign-banner>\\n{% endblock %}\\n\";","import template from './swag-paypal-campaign-banner.html.twig';\nimport './swag-paypal-campaign-banner.scss';\n\nconst { Component } = Shopware;\n\n/**\n * @private may be removed oder changed at any time\n */\nComponent.register('swag-paypal-campaign-banner', {\n    template,\n\n    i18n: {\n        messages: {\n            'de-DE': {\n                '2022-10': {\n                    title: 'Spare bares Geld!',\n                    text: 'Am 01.08.2022 hat PayPal die Standardgebühren angepasst. ' +\n                        'Migriere bis 31.12.2022 zu PayPal Checkout* und behalte deine alten Gebühren bis 31.07.2023.<br>' +\n                        // eslint-disable-next-line max-len\n                        '* Erfahre mehr in unserem <a href=\"https://www.shopware.com/de/news/paypal-aktualisiert-gebuehren/\" target=\"_blank\">Blog Beitrag</a>',\n                    labelText: '',\n                },\n                linkTitle: 'Zu den PayPal-Einstellungen',\n            },\n            'en-GB': {\n                '2022-10': {\n                    title: 'Save money now!',\n                    text: 'On 1 August 2022, PayPal adjusted the standard fees. ' +\n                        // eslint-disable-next-line max-len\n                        'Migrate to PayPal Checkout by 31 December 2022* and maintain your old prices until 31 July 2023!<br>' +\n                        // eslint-disable-next-line max-len\n                        '* Learn more about in our <a href=\"https://www.shopware.com/en/news/paypal-updated-fees/\" target=\"_blank\">blog</a>',\n                    labelText: '',\n                },\n                linkTitle: 'Go to PayPal settings',\n            },\n        },\n    },\n\n    data() {\n        return {\n            closed: true,\n        };\n    },\n\n    computed: {\n        linkTitle() {\n            return this.$tc('linkTitle');\n        },\n\n        timePrefix() {\n            return '2022-10';\n        },\n\n        labelText() {\n            return this.$tc(`${this.timePrefix}.labelText`);\n        },\n\n        showLabel() {\n            return this.labelText !== `${this.timePrefix}.labelText`;\n        },\n\n        title() {\n            return this.$tc(`${this.timePrefix}.title`);\n        },\n\n        text() {\n            return this.$tc(`${this.timePrefix}.text`);\n        },\n\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n\n        currentLocale() {\n            return Shopware.State.get('session').currentLocale;\n        },\n\n        image() {\n            const suffix = this.currentLocale === 'de-DE' ? 'de' : 'en';\n\n            return this.assetFilter(`swagpaypal/static/img/campaign/${this.timePrefix}_${suffix}.png`);\n        },\n\n        cardClasses() {\n            return {\n                'sw-campaign-banner': true,\n                'swag-paypal-campaign-banner': true,\n                'swag-paypal-campaign-banner__closed': this.closed,\n            };\n        },\n\n        localStorageKey() {\n            return `swag-paypal-campaign-banner.${this.timePrefix}.closed`;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.closed = window.localStorage.getItem(this.localStorageKey) === 'true';\n        },\n\n        close() {\n            this.closed = true;\n\n            window.localStorage.setItem(this.localStorageKey, 'true');\n        },\n    },\n});\n","export default \"<sw-meteor-card :class=\\\"cardClasses\\\">\\n    <div class=\\\"sw-campaign-banner__container\\\">\\n        <div class=\\\"sw-campaign-banner__image\\\">\\n            <img :src=\\\"image\\\">\\n        </div>\\n\\n        <div class=\\\"sw-campaign-banner__content\\\">\\n            <div class=\\\"sw-campaign-banner__text\\\">\\n                <span\\n                    v-if=\\\"showLabel\\\"\\n                    class=\\\"sw-campaign-banner__label\\\"\\n                >{{ labelText }}</span>\\n                <h3>{{ title }}</h3>\\n                <p v-html=\\\"text\\\"></p>\\n            </div>\\n\\n            <div class=\\\"sw-campaign-banner__action\\\">\\n                <sw-button variant=\\\"ghost\\\" :routerLink=\\\"{ name: 'swag.paypal.index' }\\\">\\n                    {{ linkTitle }}\\n                </sw-button>\\n            </div>\\n\\n\\n            <button\\n                class=\\\"swag-paypal-campaign-banner__close\\\"\\n                @click.prevent=\\\"close\\\"\\n            >\\n                <sw-icon\\n                    name=\\\"regular-times-s\\\"\\n                    small\\n                />\\n            </button>\\n        </div>\\n    </div>\\n</sw-meteor-card>\\n\";","import template from './sw-first-run-wizard-paypal-credentials.html.twig';\nimport './sw-first-run-wizard-paypal-credentials.scss';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-first-run-wizard-paypal-credentials', {\n    template,\n\n    inject: [\n        'systemConfigApiService',\n        'SwagPaypalPaymentMethodService',\n    ],\n\n    mixins: [\n        'notification',\n        'swag-paypal-credentials-loader',\n    ],\n\n    data() {\n        return {\n            config: {},\n            isLoading: false,\n            setDefault: false,\n        };\n    },\n\n    computed: {\n        sandboxMode() {\n            return this.config['SwagPayPal.settings.sandbox'] || false;\n        },\n\n        onboardingUrl() {\n            return this.sandboxMode ? this.onboardingUrlSandbox : this.onboardingUrlLive;\n        },\n\n        onboardingCallback() {\n            return this.sandboxMode ? 'onboardingCallbackSandbox' : 'onboardingCallbackLive';\n        },\n\n        buttonConfig() {\n            const prev = this.$super('buttonConfig');\n\n            return prev.reduce((acc, button) => {\n                if (button.key === 'next') {\n                    button.action = this.onClickNext.bind(this);\n                }\n\n                return [...acc, button];\n            }, []);\n        },\n\n        credentialsProvided() {\n            return (!this.sandboxMode && this.credentialsProvidedLive)\n                || (this.sandboxMode && this.credentialsProvidedSandbox);\n        },\n\n        credentialsProvidedLive() {\n            return !!this.config['SwagPayPal.settings.clientId']\n                && !!this.config['SwagPayPal.settings.clientSecret'];\n        },\n\n        credentialsProvidedSandbox() {\n            return !!this.config['SwagPayPal.settings.clientIdSandbox']\n                && !!this.config['SwagPayPal.settings.clientSecretSandbox'];\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.$super('createdComponent');\n            this.fetchPayPalConfig();\n        },\n\n        onPayPalCredentialsLoadSuccess(clientId, clientSecret, merchantPayerId, sandbox) {\n            this.setConfig(clientId, clientSecret, merchantPayerId, sandbox);\n        },\n\n        onPayPalCredentialsLoadFailed(sandbox) {\n            this.setConfig('', '', sandbox, '');\n            this.createNotificationError({\n                message: this.$tc('swag-paypal-frw-credentials.messageFetchedError'),\n                duration: 10000,\n            });\n        },\n\n        setConfig(clientId, clientSecret, merchantPayerId, sandbox) {\n            const suffix = sandbox ? 'Sandbox' : '';\n            this.$set(this.config, `SwagPayPal.settings.clientId${suffix}`, clientId);\n            this.$set(this.config, `SwagPayPal.settings.clientSecret${suffix}`, clientSecret);\n            this.$set(this.config, `SwagPayPal.settings.merchantPayerId${suffix}`, merchantPayerId);\n        },\n\n        onClickNext() {\n            if (!this.credentialsProvided) {\n                this.createNotificationError({\n                    message: this.$tc('swag-paypal-frw-credentials.messageNoCredentials'),\n                });\n                return Promise.resolve(true);\n            }\n\n            // Do not test the credentials if they have been fetched from the PayPal api\n            if (this.isGetCredentialsSuccessful) {\n                return this.saveConfig().then(() => {\n                    this.$emit('frw-redirect', 'sw.first.run.wizard.index.plugins');\n\n                    return Promise.resolve(false);\n                }).catch(() => {\n                    return Promise.resolve(true);\n                });\n            }\n\n            return this.testApiCredentials()\n                .then(() => {\n                    return this.saveConfig();\n                }).then(() => {\n                    this.$emit('frw-redirect', 'sw.first.run.wizard.index.plugins');\n\n                    return Promise.resolve(false);\n                }).catch(() => {\n                    return Promise.resolve(true);\n                });\n        },\n\n        fetchPayPalConfig() {\n            this.isLoading = true;\n            return this.systemConfigApiService.getValues('SwagPayPal.settings', null)\n                .then(values => {\n                    this.config = values;\n                })\n                .finally(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        saveConfig() {\n            this.isLoading = true;\n            return this.systemConfigApiService.saveValues(this.config, null)\n                .then(() => {\n                    if (this.setDefault) {\n                        return this.SwagPaypalPaymentMethodService.setDefaultPaymentForSalesChannel();\n                    }\n\n                    return Promise.resolve();\n                }).then(() => {\n                    this.isLoading = false;\n                });\n        },\n\n        testApiCredentials() {\n            this.isLoading = true;\n\n            const sandbox = this.config['SwagPayPal.settings.sandbox'];\n            const sandboxSetting = sandbox ? 'Sandbox' : '';\n            const clientId = this.config[`SwagPayPal.settings.clientId${sandboxSetting}`];\n            const clientSecret = this.config[`SwagPayPal.settings.clientSecret${sandboxSetting}`];\n\n            return this.SwagPayPalApiCredentialsService.validateApiCredentials(clientId, clientSecret, sandbox)\n                .then((response) => {\n                    const credentialsValid = response.credentialsValid;\n\n                    if (credentialsValid) {\n                        this.isLoading = false;\n                        return Promise.resolve();\n                    }\n\n                    return Promise.reject();\n                }).catch((errorResponse) => {\n                    if (errorResponse.response.data && errorResponse.response.data.errors) {\n                        const message = errorResponse.response.data.errors.map((error) => {\n                            return error.detail;\n                        }).join(' / ');\n\n                        this.createNotificationError({\n                            message: message,\n                        });\n                        this.isLoading = false;\n                    }\n\n                    return Promise.reject();\n                });\n        },\n\n        onCredentialsChanged() {\n            this.isGetCredentialsSuccessful = null;\n        },\n    },\n});\n","export default \"{% block sw_first_run_wizard_paypal_credentials %}\\n    <div class=\\\"sw-first-run-wizard-paypal-credentials\\\">\\n\\n        {% block sw_first_run_wizard_paypal_credentials_inner %}\\n            <sw-loader v-if=\\\"isLoading\\\"></sw-loader>\\n\\n            {% block sw_first_run_wizard_paypal_credentials_intro %}\\n                <p class=\\\"sw-first-run-wizard-paypal-credentials__headerText\\\">\\n                    {{ $tc('swag-paypal-frw-credentials.textIntroPayPal') }}\\n                </p>\\n            {% endblock %}\\n\\n            {% block sw_first_run_wizard_paypal_credentials_sandbox %}\\n                <sw-switch-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"config['SwagPayPal.settings.sandbox']\\\"\\n                        {% else %}\\n                        v-model=\\\"config['SwagPayPal.settings.sandbox']\\\"\\n                        {% endif %}\\n                        :label=\\\"$tc('swag-paypal-frw-credentials.labelSandbox')\\\"\\n                        :helpText=\\\"$tc('swag-paypal-frw-credentials.tooltipSandbox')\\\">\\n                </sw-switch-field>\\n            {% endblock %}\\n\\n            {% block sw_first_run_wizard_paypal_credentials_button_container %}\\n                <div class=\\\"sw-first-run-wizard-paypal-credentials__button-container\\\">\\n\\n                    {% block sw_first_run_wizard_paypal_credentials_button %}\\n                        <a class=\\\"sw-button sw-button--primary swag-paypal-frw__signup-button\\\"\\n                           target=\\\"_blank\\\"\\n                           :data-paypal-onboard-complete=\\\"onboardingCallback\\\"\\n                           :href=\\\"`${onboardingUrl}`\\\"\\n                           data-paypal-button=\\\"true\\\">\\n                            {{ $tc('swag-paypal-frw-credentials.buttonGetCredentials') }}\\n                        </a>\\n                    {% endblock %}\\n\\n                    {% block sw_first_run_wizard_paypal_credentials_indicator %}\\n                        <div class=\\\"sw-first-run-wizard-paypal-credentials__indicator\\\">\\n                            <template v-if=\\\"isGetCredentialsSuccessful\\\">\\n\\n                                {% block sw_first_run_wizard_paypal_credentials_indicator_icon %}\\n                                    <sw-icon name=\\\"regular-checkmark-s\\\"\\n                                             class=\\\"sw-first-run-wizard-paypal-credentials__icon-successful\\\">\\n                                    </sw-icon>\\n                                {% endblock %}\\n\\n                                {% block sw_first_run_wizard_paypal_credentials_indicator_text %}\\n                                    <span class=\\\"sw-first-run-wizard-paypal-credentials__text-indicator\\\">\\n                                        {{ $tc('swag-paypal-frw-credentials.textFetchedSuccessful') }}\\n                                    </span>\\n                                {% endblock %}\\n                            </template>\\n                        </div>\\n                    {% endblock %}\\n                </div>\\n            {% endblock %}\\n\\n            {% block sw_first_run_wizard_paypal_credentials_client_id %}\\n                <sw-text-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"config['SwagPayPal.settings.clientId']\\\"\\n                        {% else %}\\n                        v-model=\\\"config['SwagPayPal.settings.clientId']\\\"\\n                        {% endif %}\\n                        v-show=\\\"!sandboxMode\\\"\\n                        :label=\\\"$tc('swag-paypal-frw-credentials.labelClientId')\\\"\\n                        @change=\\\"onCredentialsChanged\\\">\\n                </sw-text-field>\\n            {% endblock %}\\n\\n            {% block sw_first_run_wizard_paypal_credentials_client_secret %}\\n                <sw-text-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"config['SwagPayPal.settings.clientSecret']\\\"\\n                        {% else %}\\n                        v-model=\\\"config['SwagPayPal.settings.clientSecret']\\\"\\n                        {% endif %}\\n                        v-show=\\\"!sandboxMode\\\"\\n                        :label=\\\"$tc('swag-paypal-frw-credentials.labelClientSecret')\\\"\\n                        @change=\\\"onCredentialsChanged\\\">\\n                </sw-text-field>\\n            {% endblock %}\\n\\n            {% block sw_first_run_wizard_paypal_credentials_merchant_id %}\\n                <sw-text-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"config['SwagPayPal.settings.merchantPayerId']\\\"\\n                        {% else %}\\n                        v-model=\\\"config['SwagPayPal.settings.merchantPayerId']\\\"\\n                        {% endif %}\\n                        v-show=\\\"!sandboxMode\\\"\\n                        :label=\\\"$tc('swag-paypal-frw-credentials.labelMerchantPayerId')\\\"\\n                        @change=\\\"onCredentialsChanged\\\">\\n                </sw-text-field>\\n            {% endblock %}\\n\\n            {% block sw_first_run_wizard_paypal_credentials_client_id_sandbox %}\\n                <sw-text-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"config['SwagPayPal.settings.clientIdSandbox']\\\"\\n                        {% else %}\\n                        v-model=\\\"config['SwagPayPal.settings.clientIdSandbox']\\\"\\n                        {% endif %}\\n                        v-show=\\\"sandboxMode\\\"\\n                        :label=\\\"$tc('swag-paypal-frw-credentials.labelClientIdSandbox')\\\"\\n                        @change=\\\"onCredentialsChanged\\\">\\n                </sw-text-field>\\n            {% endblock %}\\n\\n            {% block sw_first_run_wizard_paypal_credentials_client_secret_sandbox %}\\n                <sw-text-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"config['SwagPayPal.settings.clientSecretSandbox']\\\"\\n                        {% else %}\\n                        v-model=\\\"config['SwagPayPal.settings.clientSecretSandbox']\\\"\\n                        {% endif %}\\n                        v-show=\\\"sandboxMode\\\"\\n                        :label=\\\"$tc('swag-paypal-frw-credentials.labelClientSecretSandbox')\\\"\\n                        @change=\\\"onCredentialsChanged\\\">\\n                </sw-text-field>\\n            {% endblock %}\\n\\n            {% block sw_first_run_wizard_paypal_credentials_merchant_id_sandbox %}\\n                <sw-text-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"config['SwagPayPal.settings.merchantPayerIdSandbox']\\\"\\n                        {% else %}\\n                        v-model=\\\"config['SwagPayPal.settings.merchantPayerIdSandbox']\\\"\\n                        {% endif %}\\n                        v-show=\\\"sandboxMode\\\"\\n                        :label=\\\"$tc('swag-paypal-frw-credentials.labelMerchantPayerIdSandbox')\\\"\\n                        @change=\\\"onCredentialsChanged\\\">\\n                </sw-text-field>\\n            {% endblock %}\\n\\n            {% block sw_first_run_wizard_paypal_credentials_set_default %}\\n                <sw-switch-field\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"setDefault\\\"\\n                        {% else %}\\n                        v-model=\\\"setDefault\\\"\\n                        {% endif %}\\n                        :disabled=\\\"!credentialsProvided\\\"\\n                        :label=\\\"$tc('swag-paypal-frw-credentials.labelSetDefault')\\\"\\n                        :helpText=\\\"$tc('swag-paypal-frw-credentials.tooltipSetDefault')\\\">\\n                </sw-switch-field>\\n            {% endblock %}\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","export default \"{% block sw_sales_channel_modal_detail_header_icon %}\\n    <span v-if=\\\"isPayPalPosSalesChannel(detailType.id)\\\"\\n          class=\\\"sw-sales-channel-modal-detail__header-icon\\\">\\n         <img class=\\\"swag-paypal-pos-modal-detail__icon\\\"\\n              :src=\\\"assetFilter('swagpaypal/static/img/paypal-pos-logo.svg')\\\">\\n    </span>\\n\\n    <template v-else>\\n        {% parent %}\\n    </template>\\n{% endblock %}\\n\\n{% block sw_sales_channel_modal_detail_header_meta %}\\n    <div v-if=\\\"isPayPalPosSalesChannel(detailType.id)\\\"\\n         class=\\\"sw-sales-channel-modal-detail__header-meta\\\">\\n        <h4 class=\\\"sw-sales-channel-modal-detail__header-name\\\">\\n            {{ detailType.translated.name }}\\n        </h4>\\n        <div class=\\\"sw-sales-channel-modal-detail__header-manufacturer\\\">\\n            {{ $tc('swag-paypal-pos.general.salesChannelDetailDescription.manufacturer') }}\\n        </div>\\n    </div>\\n\\n    <template v-else>\\n        {% parent %}\\n    </template>\\n{% endblock %}\\n\\n{% block sw_sales_channel_modal_detail_description %}\\n    <template v-if=\\\"isPayPalPosSalesChannel(detailType.id)\\\">\\n        <h4 class=\\\"sw-sales-channel-modal-detail__description-long-title\\\">\\n            {{ $tc('swag-paypal-pos.general.salesChannelDetailDescription.title') }}\\n        </h4>\\n        <div v-if=\\\"detailType.translated.descriptionLong\\\"\\n             class=\\\"sw-sales-channel-modal-detail__description-long-text\\\">\\n            {{ detailType.translated.descriptionLong }}\\n        </div>\\n        <div v-else\\n             class=\\\"sw-sales-channel-modal-detail__description-long-text\\\">\\n            {{ detailType.translated.description }}\\n        </div>\\n    </template>\\n\\n    <template v-else>\\n        {% parent %}\\n    </template>\\n{% endblock %}\\n\";","export const PAYPAL_POS_SALES_CHANNEL_TYPE_ID = '1ce0868f406d47d98cfe4b281e62f099';\nexport const PAYPAL_POS_SALES_CHANNEL_EXTENSION = 'paypalPosSalesChannel';\n\nexport default {\n    PAYPAL_POS_SALES_CHANNEL_TYPE_ID,\n    PAYPAL_POS_SALES_CHANNEL_EXTENSION,\n};\n","import template from './sw-sales-channel-modal-detail.html.twig';\nimport './sw-sales-channel-modal-detail.scss';\nimport { PAYPAL_POS_SALES_CHANNEL_TYPE_ID } from '../../../constant/swag-paypal.constant';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-sales-channel-modal-detail', {\n    template,\n\n    methods: {\n        isPayPalPosSalesChannel(salesChannelTypeId) {\n            return salesChannelTypeId === PAYPAL_POS_SALES_CHANNEL_TYPE_ID;\n        },\n    },\n\n    computed: {\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n});\n","import template from './sw-sales-channel-modal-grid.html.twig';\nimport './sw-sales-channel-modal-grid.scss';\nimport { PAYPAL_POS_SALES_CHANNEL_TYPE_ID } from '../../../constant/swag-paypal.constant';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-sales-channel-modal-grid', {\n    template,\n\n    methods: {\n        isPayPalPosSalesChannel(salesChannelTypeId) {\n            const salesChannelType = this.salesChannelTypes.find(type => type.id === salesChannelTypeId);\n\n            return salesChannelType.id === PAYPAL_POS_SALES_CHANNEL_TYPE_ID;\n        },\n    },\n\n    computed: {\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n});\n","export default \"{% block sw_sales_channel_grid_columns_icon %}\\n    <sw-grid-column\\n            v-if=\\\"isPayPalPosSalesChannel(item.id)\\\"\\n            class=\\\"sw-sales-channel-modal-grid__icon-column\\\"\\n            flex=\\\"85px\\\"\\n            dataIndex=\\\"icon\\\">\\n        <span class=\\\"sw-sales-channel-modal-grid__icon\\\" @click=\\\"onOpenDetail(item.id)\\\">\\n             <img class=\\\"swag-paypal-pos-modal-grid__icon\\\"\\n                  :src=\\\"assetFilter('swagpaypal/static/img/paypal-pos-logo.svg')\\\">\\n        </span>\\n    </sw-grid-column>\\n\\n    <template v-else>\\n        {% parent %}\\n    </template>\\n{% endblock %}\\n\";","import template from './swag-paypal-overview-card.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-overview-card', {\n    template,\n\n    props: {\n        paymentMethods: {\n            type: Array,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            salesChannels: [],\n            config: null,\n        };\n    },\n\n    computed: {\n        pluginId() {\n            if (this.paymentMethods.length === 0) {\n                return '';\n            }\n\n            return this.paymentMethods[0].pluginId;\n        },\n    },\n\n    methods: {\n        async save() {\n            this.isLoading = true;\n\n            try {\n                const response = await this.$refs.swagPayPalConfigComponent.save();\n\n                if (response.payPalWebhookErrors) {\n                    const errorMessage = this.$tc('swag-paypal.settingForm.messageWebhookError');\n                    response.payPalWebhookErrors.forEach((error) => {\n                        this.createNotificationError({\n                            message: `${errorMessage}<br><br><ul><li>${error}</li></ul>`,\n                        });\n                    });\n                }\n\n                await this.$refs.swagPayPalCheckoutComponent.getPaymentMethodsAndMerchantIntegrations();\n            } finally {\n                this.isLoading = false;\n            }\n        },\n\n        onChangeLoading(state) {\n            this.isLoading = state;\n        },\n    },\n});\n","export default \"{% block swag_paypal_overview_card %}\\n<sw-sales-channel-config\\n        {% if VUE3 %}\\n        v-model:value=\\\"config\\\"\\n        {% else %}\\n        v-model=\\\"config\\\"\\n        {% endif %}\\n        ref=\\\"swagPayPalConfigComponent\\\"\\n        domain=\\\"SwagPayPal.settings\\\">\\n\\n    {% block swag_paypal_overview_card_select %}\\n        <template #select>\\n            <div></div>\\n        </template>\\n    {% endblock %}\\n\\n    {% block swag_paypal_overview_card_content %}\\n        <template #content=\\\"{ actualConfigData, allConfigs, selectedSalesChannelId }\\\">\\n            <div v-if=\\\"actualConfigData\\\">\\n\\n                {% block swag_paypal_overview_card_checkout %}\\n                    <swag-paypal-checkout\\n                        ref=\\\"swagPayPalCheckoutComponent\\\"\\n                        :pluginId=\\\"pluginId\\\"\\n                        :allowShowCredentials=\\\"false\\\"\\n                        :actualConfigData=\\\"actualConfigData\\\"\\n                        :allConfigs=\\\"allConfigs\\\"\\n                        :isLoading=\\\"isLoading\\\"\\n                        showSettingsLink\\n                        @on-save-settings=\\\"save\\\"\\n                        @on-deactivate-paypal-plus=\\\"save\\\"\\n                        @on-change-loading=\\\"onChangeLoading\\\"\\n                    />\\n                {% endblock %}\\n            </div>\\n        </template>\\n    {% endblock %}\\n\\n</sw-sales-channel-config>\\n{% endblock %}\\n\";","import template from './sw-settings-payment-list.html.twig';\nimport './sw-settings-payment-list.scss';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-settings-payment-list', {\n    template,\n\n    inject: [\n        'SwagPayPalApiCredentialsService',\n    ],\n\n    data() {\n        return {\n            merchantIntegrations: [],\n        };\n    },\n\n    methods: {\n        needsOnboarding(item) {\n            const integrationIds = Object.keys(this.merchantIntegrations);\n\n            if (!integrationIds.includes(item.id)) {\n                return false;\n            }\n\n            return this.merchantIntegrations[item.id].toUpperCase() === 'INACTIVE';\n        },\n\n        fetchMerchantIntegrations() {\n            this.SwagPayPalApiCredentialsService\n                .getMerchantInformation()\n                .then((response) => {\n                    this.merchantIntegrations = response.merchantIntegrations ?? [];\n                });\n        },\n    },\n});\n","export default \"{% block sw_settings_payment_list_column_active_editor %}\\n<sw-icon\\n    v-if=\\\"needsOnboarding(item)\\\"\\n    v-tooltip.left=\\\"{\\n        message: $tc('sw-settings-payment-list.needOnboardingTooltip'),\\n    }\\\"\\n    name=\\\"regular-lock\\\"\\n    small\\n/>\\n<template v-else>\\n    {% parent %}\\n</template>\\n{% endblock %}\\n\\n{% block sw_settings_payment_list_column_active_label %}\\n<sw-icon\\n    v-if=\\\"needsOnboarding(item)\\\"\\n    v-tooltip.left=\\\"{\\n        message: $tc('sw-settings-payment-list.needOnboardingTooltip'),\\n    }\\\"\\n    name=\\\"regular-lock\\\"\\n    small\\n/>\\n<template v-else>\\n    {% parent %}\\n</template>\\n{% endblock %}\\n\\n{% block sw_settings_payment_list_content_inner %}\\n    <swag-paypal-created-component-helper\\n        @on-created-component=\\\"fetchMerchantIntegrations\\\"\\n    />\\n\\n    {% parent %}\\n{% endblock %}\\n\";","import template from './sw-settings-payment-detail.html.twig';\nimport './sw-settings-payment-detail.scss';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-settings-payment-detail', {\n    template,\n\n    inject: [\n        'SwagPayPalApiCredentialsService',\n    ],\n\n    data() {\n        return {\n            merchantIntegrations: [],\n        };\n    },\n\n    computed: {\n        disableActiveSwitch() {\n            return !this.acl.can('payment.editor') || this.needsOnboarding(this.paymentMethod.id);\n        },\n    },\n\n    methods: {\n        createdComponent() {\n            this.$super('createdComponent');\n\n            this.fetchMerchantIntegrations();\n        },\n\n        needsOnboarding(id) {\n            const integrationIds = Object.keys(this.merchantIntegrations);\n\n            if (!integrationIds.includes(id)) {\n                return false;\n            }\n\n            return this.merchantIntegrations[id].toUpperCase() === 'INACTIVE';\n        },\n\n        fetchMerchantIntegrations() {\n            this.SwagPayPalApiCredentialsService\n                .getMerchantInformation()\n                .then((response) => {\n                    this.merchantIntegrations = response.merchantIntegrations ?? [];\n                });\n        },\n    },\n});\n\n","export default \"{% block sw_settings_payment_detail_content_field_plugin %}\\n<template v-if=\\\"needsOnboarding(paymentMethod.id)\\\">\\n    <swag-paypal-plugin-box-with-onboarding\\n        v-if=\\\"!!paymentMethod.pluginId\\\"\\n        :plugin-id=\\\"paymentMethod.pluginId\\\"\\n        :payment-method=\\\"paymentMethod\\\"\\n    />\\n</template>\\n<template v-else>\\n    {% parent %}\\n</template>\\n{% endblock %}\\n\\n{% block sw_settings_payment_detail_content_field_active %}\\n<template v-if=\\\"disableActiveSwitch\\\">\\n    <sw-switch-field\\n        {% if VUE3 %}\\n        v-model:value=\\\"paymentMethod.active\\\"\\n        {% else %}\\n        v-model=\\\"paymentMethod.active\\\"\\n        {% endif %}\\n        v-tooltip.left=\\\"{ message: $tc('sw-settings-payment-detail.tooltip') }\\\"\\n        class=\\\"sw-settings-payment-detail__field-active\\\"\\n        :disabled=\\\"disableActiveSwitch\\\"\\n        :label=\\\"$tc('sw-settings-payment.detail.labelActive')\\\"\\n    />\\n</template>\\n<template v-else>\\n    {% parent %}\\n</template>\\n{% endblock %}\\n\";","export default \"{% block sw_settings_shipping_detail_tax_cost %}\\n\\n    {% block sw_settings_shipping_detail_paypal_default_carrier %}\\n    <sw-card\\n        v-if=\\\"isPayPalEnabled\\\"\\n        class=\\\"swag-paypal-settings-shipping-carrier\\\"\\n        position-identifier=\\\"swag-paypal-settings-shipping-carrier\\\"\\n    >\\n        {% block sw_settings_shipping_detail_paypal_default_carrier_title %}\\n        <template #title>\\n            <div class=\\\"sw-card__title\\\">\\n                {{ $tc('swag-paypal-settings-shipping-carrier.cardTitle') }}\\n                <sw-help-text :text=\\\"$tc('swag-paypal-settings-shipping-carrier.cardHelpText')\\\"></sw-help-text>\\n            </div>\\n        </template>\\n        {% endblock %}\\n\\n        {% block sw_settings_shipping_detail_paypal_default_carrier_description %}\\n            <div\\n                v-html=\\\"$tc('swag-paypal-settings-shipping-carrier.description')\\\"\\n                class=\\\"swag-paypal-settings-shipping-carrier__description\\\"\\n            ></div>\\n        {% endblock %}\\n\\n        {% block sw_settings_shipping_detail_paypal_default_carrier_input %}\\n        <sw-text-field\\n            {% if VUE3 %}\\n            v-model:value=\\\"payPalDefaultCarrier\\\"\\n            {% else %}\\n            v-model=\\\"payPalDefaultCarrier\\\"\\n            {% endif %}\\n            :label=\\\"$tc('swag-paypal-settings-shipping-carrier.inputLabel')\\\"\\n            :placeholder=\\\"$tc('swag-paypal-settings-shipping-carrier.inputPlaceholder')\\\"\\n        ></sw-text-field>\\n        {% endblock %}\\n\\n    </sw-card>\\n    {% endblock %}\\n\\n    {% parent %}\\n{% endblock %}\\n\";","import template from './sw-settings-shipping-detail.html.twig';\nimport './sw-settings-shipping-detail.scss';\n\nconst { Component, Utils } = Shopware;\n\nComponent.override('sw-settings-shipping-detail', {\n    template,\n\n    inject: [\n        'SwagPayPalApiCredentialsService',\n    ],\n\n    data() {\n        return {\n            isPayPalEnabled: false,\n        };\n    },\n\n    computed: {\n        shippingMethodCustomFields() {\n            if (this.shippingMethod.customFields) {\n                return this.shippingMethod.customFields;\n            }\n\n            return Utils.object.get(this.shippingMethod, 'translated.customFields', null);\n        },\n\n        payPalDefaultCarrier: {\n            get() {\n                if (this.shippingMethodCustomFields === null) {\n                    return '';\n                }\n\n                return this.shippingMethodCustomFields.swag_paypal_carrier || '';\n            },\n            set(value) {\n                Utils.object.set(this.shippingMethod, 'customFields.swag_paypal_carrier', value);\n            },\n        },\n    },\n\n    methods: {\n        createdComponent() {\n            this.$super('createdComponent');\n\n            this.fetchMerchantIntegrations();\n        },\n\n        fetchMerchantIntegrations() {\n            this.SwagPayPalApiCredentialsService\n                .getMerchantInformation()\n                .then((response) => {\n                    this.isPayPalEnabled =\n                        response.hasOwnProperty('merchantIntegrations')\n                        && response.merchantIntegrations !== null;\n                });\n        },\n    },\n});\n\n","/**\n * @deprecated tag:v8.0.0 - Will be removed without replacement.\n */\nexport const MERCHANT_LOCATION_GERMANY = 'germany';\n\n/**\n * @deprecated tag:v8.0.0 - Will be removed without replacement.\n */\nexport const MERCHANT_LOCATION_OTHER = 'other';\n\nexport default {\n    MERCHANT_LOCATION_GERMANY,\n    MERCHANT_LOCATION_OTHER,\n};\n","import template from './swag-paypal.html.twig';\nimport './swag-paypal.scss';\nimport constants from './swag-paypal-consts';\n\nconst { Component, Defaults } = Shopware;\nconst { Criteria } = Shopware.Data;\nconst { hasOwnProperty } = Shopware.Utils.object;\n\nComponent.register('swag-paypal', {\n    template,\n\n    inject: [\n        'SwagPayPalApiCredentialsService',\n        'SwagPaypalPaymentMethodService',\n        'repositoryFactory',\n        'acl',\n    ],\n\n    mixins: [\n        'notification',\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n            isSaveSuccessful: false,\n            isTestSuccessful: false,\n            isTestSandboxSuccessful: false,\n            clientIdFilled: false,\n            clientSecretFilled: false,\n            clientIdSandboxFilled: false,\n            clientSecretSandboxFilled: false,\n            sandboxChecked: false,\n            salesChannels: [],\n            config: {},\n            isSetDefaultPaymentSuccessful: false,\n            isSettingDefaultPaymentMethods: false,\n            savingDisabled: false,\n            messageBlankErrorState: null,\n            showCredentials: false,\n            allowShowCredentials: true,\n            ...constants,\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.$createTitle(),\n        };\n    },\n\n    computed: {\n        showSPBCard() {\n            if (hasOwnProperty(this.config, 'SwagPayPal.settings.merchantLocation') &&\n                    this.config['SwagPayPal.settings.merchantLocation'] !== null\n            ) {\n                return this.config['SwagPayPal.settings.merchantLocation'] === this.MERCHANT_LOCATION_OTHER;\n            }\n\n            const defaultConfig = this.$refs.configComponent?.allConfigs.null;\n\n            if (!defaultConfig) {\n                return false;\n            }\n\n            return defaultConfig['SwagPayPal.settings.merchantLocation'] === this.MERCHANT_LOCATION_OTHER;\n        },\n\n        /**\n         * @deprecated tag:v8.0.0 - Will be removed without replacement.\n         */\n        showPlusCard() {\n            if (hasOwnProperty(this.config, 'SwagPayPal.settings.merchantLocation') &&\n                    this.config['SwagPayPal.settings.merchantLocation'] !== null\n            ) {\n                return this.config['SwagPayPal.settings.merchantLocation'] === this.MERCHANT_LOCATION_GERMANY;\n            }\n\n            const defaultConfig = this.$refs.configComponent?.allConfigs.null;\n\n            if (!defaultConfig) {\n                return false;\n            }\n\n            return defaultConfig['SwagPayPal.settings.merchantLocation'] === this.MERCHANT_LOCATION_GERMANY;\n        },\n\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        },\n\n        clientIdErrorState() {\n            if (this.sandboxChecked || this.clientIdFilled) {\n                return null;\n            }\n\n            return this.messageBlankErrorState;\n        },\n\n        clientSecretErrorState() {\n            if (this.sandboxChecked || this.clientSecretFilled) {\n                return null;\n            }\n\n            return this.messageBlankErrorState;\n        },\n\n        clientIdSandboxErrorState() {\n            if (!this.sandboxChecked || this.clientIdSandboxFilled) {\n                return null;\n            }\n\n            return this.messageBlankErrorState;\n        },\n\n        clientSecretSandboxErrorState() {\n            if (!this.sandboxChecked || this.clientSecretSandboxFilled) {\n                return null;\n            }\n\n            return this.messageBlankErrorState;\n        },\n\n        hasError() {\n            return (!this.sandboxChecked && !(this.clientIdFilled && this.clientSecretFilled)) ||\n                (this.sandboxChecked && !(this.clientIdSandboxFilled && this.clientSecretSandboxFilled));\n        },\n\n        salesChannelCriteria() {\n            const criteria = new Criteria(1, 500);\n            criteria.addFilter(Criteria.equalsAny('typeId', [\n                Defaults.storefrontSalesChannelTypeId,\n                Defaults.apiSalesChannelTypeId,\n            ]));\n\n            return criteria;\n        },\n\n        tab() {\n            return this.$route.params.tab || 'general';\n        },\n    },\n\n    watch: {\n        config: {\n            handler() {\n                const defaultConfig = this.$refs.configComponent?.allConfigs?.null;\n                const salesChannelId = this.$refs.configComponent?.selectedSalesChannelId;\n\n                if (salesChannelId === null) {\n                    this.clientIdFilled = !!this.config['SwagPayPal.settings.clientId'];\n                    this.clientSecretFilled = !!this.config['SwagPayPal.settings.clientSecret'];\n                    this.clientIdSandboxFilled = !!this.config['SwagPayPal.settings.clientIdSandbox'];\n                    this.clientSecretSandboxFilled = !!this.config['SwagPayPal.settings.clientSecretSandbox'];\n                    this.sandboxChecked = !!this.config['SwagPayPal.settings.sandbox'];\n                } else {\n                    this.clientIdFilled = !!this.config['SwagPayPal.settings.clientId']\n                        || !!defaultConfig['SwagPayPal.settings.clientId'];\n                    this.clientSecretFilled = !!this.config['SwagPayPal.settings.clientSecret']\n                        || !!defaultConfig['SwagPayPal.settings.clientSecret'];\n                    this.clientIdSandboxFilled = !!this.config['SwagPayPal.settings.clientIdSandbox']\n                        || !!defaultConfig['SwagPayPal.settings.clientIdSandbox'];\n                    this.clientSecretSandboxFilled = !!this.config['SwagPayPal.settings.clientSecretSandbox']\n                        || !!defaultConfig['SwagPayPal.settings.clientSecretSandbox'];\n                    this.sandboxChecked = !!this.config['SwagPayPal.settings.sandbox']\n                        || !!defaultConfig['SwagPayPal.settings.sandbox'];\n                }\n            },\n            deep: true,\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            if (!this.$route.params.tab) {\n                this.$router.push({ name: 'swag.paypal.index', params: { tab: 'general' } });\n            }\n\n            this.isLoading = true;\n\n            this.salesChannelRepository.search(this.salesChannelCriteria, Shopware.Context.api).then(res => {\n                res.add({\n                    id: null,\n                    translated: {\n                        name: this.$tc('sw-sales-channel-switch.labelDefaultOption'),\n                    },\n                });\n\n                this.salesChannels = res;\n            }).finally(() => {\n                this.isLoading = false;\n            });\n\n            this.messageBlankErrorState = {\n                code: 1,\n                detail: this.$tc('swag-paypal.messageNotBlank'),\n            };\n        },\n\n        onSave() {\n            if (this.hasError) {\n                return;\n            }\n\n            this.save();\n        },\n\n        onChangeLoading(state) {\n            this.isLoading = state;\n        },\n\n        save() {\n            this.isLoading = true;\n\n            this.$refs.configComponent.save().then((response) => {\n                this.isSaveSuccessful = true;\n\n                if (response.payPalWebhookErrors) {\n                    const errorMessage = this.$tc('swag-paypal.settingForm.messageWebhookError');\n                    response.payPalWebhookErrors.forEach((error) => {\n                        this.createNotificationError({\n                            message: `${errorMessage}<br><br><ul><li>${error}</li></ul>`,\n                        });\n                    });\n                }\n            }).finally(() => {\n                this.isLoading = false;\n            });\n        },\n\n        onSetPaymentMethodDefault() {\n            this.isSettingDefaultPaymentMethods = true;\n\n            this.SwagPaypalPaymentMethodService.setDefaultPaymentForSalesChannel(\n                this.$refs.configComponent?.selectedSalesChannelId,\n            ).then(() => {\n                this.isSettingDefaultPaymentMethods = false;\n                this.isSetDefaultPaymentSuccessful = true;\n            });\n        },\n\n        preventSave(mode) {\n            if (!mode) {\n                this.savingDisabled = false;\n                return;\n            }\n\n            this.savingDisabled = true;\n        },\n\n        onChangeCredentialsVisibility(visibility) {\n            this.showCredentials = visibility;\n        },\n    },\n});\n","export default \"{% block swag_paypal %}\\n    <sw-page class=\\\"swag-paypal\\\">\\n\\n        {% block swag_paypal_header %}\\n            <template #smart-bar-header>\\n                <h2>\\n                    {{ $tc('sw-settings.index.title') }}\\n                    <sw-icon name=\\\"regular-chevron-right-xs\\\" small></sw-icon>\\n                    {{ $tc('swag-paypal.header') }}\\n                </h2>\\n            </template>\\n        {% endblock %}\\n\\n        {% block swag_paypal_actions %}\\n            <template #smart-bar-actions>\\n                {% block swag_paypal_actions_save %}\\n                    <sw-button-process\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"isSaveSuccessful\\\"\\n                        {% else %}\\n                        v-model=\\\"isSaveSuccessful\\\"\\n                        {% endif %}\\n                        class=\\\"sw-settings-login-registration__save-action\\\"\\n                        variant=\\\"primary\\\"\\n                        :isLoading=\\\"isLoading\\\"\\n                        :disabled=\\\"isLoading || savingDisabled || hasError || !acl.can('swag_paypal.editor')\\\"\\n                        @click=\\\"onSave\\\">\\n                        {{ $tc('global.default.save') }}\\n                    </sw-button-process>\\n                {% endblock %}\\n\\n            </template>\\n        {% endblock %}\\n\\n        {% block swag_paypal_content %}\\n            <template #content>\\n\\n                {% block swag_paypal_content_card %}\\n                    <sw-card-view>\\n\\n                        {% block swag_paypal_content_tabs %}\\n                            <sw-tabs\\n                                default-item=\\\"general\\\"\\n                                position-identifier=\\\"swag-paypal-content-tabs\\\">\\n                                <template #default=\\\"{ active }\\\">\\n                                    <sw-tabs-item\\n                                        key=\\\"general\\\"\\n                                        :active-tab=\\\"active\\\"\\n                                        :route=\\\"{ name: 'swag.paypal.index', params: { tab: 'general' } }\\\">\\n                                        {{ $tc('swag-paypal.tabs.general') }}\\n                                    </sw-tabs-item>\\n                                    <sw-tabs-item\\n                                        key=\\\"storefront\\\"\\n                                        :active-tab=\\\"active\\\"\\n                                        :route=\\\"{ name: 'swag.paypal.index', params: { tab: 'storefront' } }\\\">\\n                                        {{ $tc('swag-paypal.tabs.storefront') }}\\n                                    </sw-tabs-item>\\n                                </template>\\n                            </sw-tabs>\\n                        {% endblock %}\\n\\n                        {# @deprecated tag:v8.0.0 - will be removed without replacement #}\\n                        {% block swag_paypal_content_card_shipping_alert %}\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_content_card_channel_config %}\\n                            <sw-sales-channel-config\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"config\\\"\\n                                {% else %}\\n                                v-model=\\\"config\\\"\\n                                {% endif %}\\n                                ref=\\\"configComponent\\\"\\n                                domain=\\\"SwagPayPal.settings\\\">\\n\\n                                {% block swag_paypal_content_card_channel_config_sales_channel %}\\n                                    <template #select=\\\"{ onInput, selectedSalesChannelId }\\\">\\n\\n                                        {% block swag_paypal_content_card_channel_config_sales_channel_card %}\\n                                            <sw-card position-identifier=\\\"swag-paypal-sales-channel-card\\\"\\n                                                     :title=\\\"$tc('global.entities.sales_channel', 2)\\\">\\n\\n                                                {% block swag_paypal_content_card_channel_config_sales_channel_card_title %}\\n                                                    <sw-single-select\\n                                                        {% if VUE3 %}\\n                                                        v-model:value=\\\"selectedSalesChannelId\\\"\\n                                                        {% else %}\\n                                                        v-model=\\\"selectedSalesChannelId\\\"\\n                                                        {% endif %}\\n                                                        labelProperty=\\\"translated.name\\\"\\n                                                        valueProperty=\\\"id\\\"\\n                                                        :isLoading=\\\"isLoading\\\"\\n                                                        :options=\\\"salesChannels\\\"\\n                                                        :disabled=\\\"!acl.can('swag_paypal.editor')\\\"\\n                                                        @change=\\\"onInput\\\">\\n                                                    </sw-single-select>\\n                                                {% endblock %}\\n\\n                                                {% block swag_paypal_content_card_channel_config_sales_channel_card_footer %}\\n                                                    <template #footer>\\n\\n                                                        {% block swag_paypal_content_card_channel_config_sales_channel_card_footer_container %}\\n                                                        <sw-container columns=\\\"2fr 1fr\\\"\\n                                                                      gap=\\\"0px 30px\\\">\\n\\n                                                            {% block swag_paypal_content_card_channel_config_sales_channel_card_footer_container_text %}\\n                                                                <p>{{ $tc('swag-paypal.saleschannelCard.button.description') }}</p>\\n                                                            {% endblock %}\\n\\n                                                            {% block swag_paypal_content_card_channel_config_sales_channel_card_footer_container_button %}\\n                                                                <sw-button-process\\n                                                                    {% if VUE3 %}\\n                                                                    v-model:processSuccess=\\\"isSetDefaultPaymentSuccessful\\\"\\n                                                                    {% else %}\\n                                                                    v-model=\\\"isSetDefaultPaymentSuccessful\\\"\\n                                                                    {% endif %}\\n                                                                    :isLoading=\\\"isSettingDefaultPaymentMethods\\\"\\n                                                                    :disabled=\\\"!acl.can('swag_paypal.editor')\\\"\\n                                                                    @click=\\\"onSetPaymentMethodDefault\\\">\\n                                                                    {{ $tc('swag-paypal.saleschannelCard.button.label') }}\\n                                                                </sw-button-process>\\n                                                            {% endblock %}\\n\\n                                                        </sw-container>\\n                                                        {% endblock %}\\n\\n                                                    </template>\\n                                                {% endblock %}\\n\\n                                            </sw-card>\\n                                        {% endblock %}\\n\\n                                    </template>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_content_card_channel_config_cards %}\\n                                    <template #content=\\\"{ actualConfigData, allConfigs, selectedSalesChannelId }\\\">\\n\\n                                        {# @deprecated tag:v8.0.0 - Will be removed without replacement #}\\n                                        {% block swag_paypal_content_card_channel_config_checkout_card %}\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_content_card_channel_config_credentials_card %}\\n                                            <swag-paypal-credentials v-if=\\\"tab === 'general'\\\"\\n                                                                     :actualConfigData=\\\"actualConfigData\\\"\\n                                                                     :allConfigs=\\\"allConfigs\\\"\\n                                                                     :selectedSalesChannelId=\\\"selectedSalesChannelId\\\"\\n                                                                     :clientIdErrorState=\\\"clientIdErrorState\\\"\\n                                                                     :clientSecretErrorState=\\\"clientSecretErrorState\\\"\\n                                                                     :clientIdSandboxErrorState=\\\"clientIdSandboxErrorState\\\"\\n                                                                     :clientSecretSandboxErrorState=\\\"clientSecretSandboxErrorState\\\"\\n                                                                     :clientIdFilled=\\\"clientIdFilled\\\"\\n                                                                     :clientSecretFilled=\\\"clientSecretFilled\\\"\\n                                                                     :clientIdSandboxFilled=\\\"clientIdSandboxFilled\\\"\\n                                                                     :clientSecretSandboxFilled=\\\"clientSecretSandboxFilled\\\"\\n                                                                     :isLoading=\\\"isLoading\\\">\\n                                            </swag-paypal-credentials>\\n                                        {% endblock %}\\n\\n                                        {# @deprecated tag:v8.0.0 - Will be removed without replacement #}\\n                                        {% block swag_paypal_content_card_channel_config_plus %}\\n                                            <swag-paypal-plus v-if=\\\"showPlusCard && tab === 'storefront'\\\"\\n                                                              :actualConfigData=\\\"actualConfigData\\\"\\n                                                              :allConfigs=\\\"allConfigs\\\"\\n                                                              :selectedSalesChannelId=\\\"selectedSalesChannelId\\\">\\n                                            </swag-paypal-plus>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_content_card_channel_config_behavior %}\\n                                            <swag-paypal-behavior v-if=\\\"tab === 'general'\\\"\\n                                                                  :actualConfigData=\\\"actualConfigData\\\"\\n                                                                  :allConfigs=\\\"allConfigs\\\"\\n                                                                  :selectedSalesChannelId=\\\"selectedSalesChannelId\\\">\\n                                            </swag-paypal-behavior>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_content_card_channel_config_express %}\\n                                            <swag-paypal-express v-if=\\\"tab === 'storefront'\\\"\\n                                                                 :actualConfigData=\\\"actualConfigData\\\"\\n                                                                 :allConfigs=\\\"allConfigs\\\"\\n                                                                 :selectedSalesChannelId=\\\"selectedSalesChannelId\\\"\\n                                                                 @preventSave=\\\"preventSave\\\">\\n                                            </swag-paypal-express>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_content_card_channel_config_installment %}\\n                                            <swag-paypal-installment v-if=\\\"tab === 'storefront'\\\"\\n                                                                     :actualConfigData=\\\"actualConfigData\\\"\\n                                                                     :allConfigs=\\\"allConfigs\\\"\\n                                                                     :selectedSalesChannelId=\\\"selectedSalesChannelId\\\">\\n                                            </swag-paypal-installment>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_content_card_channel_config_acdc %}\\n                                            <swag-paypal-acdc v-if=\\\"tab === 'general'\\\"\\n                                                              :actualConfigData=\\\"actualConfigData\\\"\\n                                                              :allConfigs=\\\"allConfigs\\\"\\n                                                              :selectedSalesChannelId=\\\"selectedSalesChannelId\\\">\\n                                            </swag-paypal-acdc>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_content_card_channel_config_pui %}\\n                                            <swag-paypal-pui v-if=\\\"tab === 'general'\\\"\\n                                                             :actualConfigData=\\\"actualConfigData\\\"\\n                                                             :allConfigs=\\\"allConfigs\\\"\\n                                                             :selectedSalesChannelId=\\\"selectedSalesChannelId\\\">\\n                                            </swag-paypal-pui>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_content_card_channel_config_spb %}\\n                                            <swag-paypal-spb v-if=\\\"showSPBCard && tab === 'storefront'\\\"\\n                                                             :actualConfigData=\\\"actualConfigData\\\"\\n                                                             :allConfigs=\\\"allConfigs\\\"\\n                                                             :selectedSalesChannelId=\\\"selectedSalesChannelId\\\"\\n                                                             @preventSave=\\\"preventSave\\\">\\n                                            </swag-paypal-spb>\\n                                        {% endblock %}\\n                                    </template>\\n                                {% endblock %}\\n\\n                            </sw-sales-channel-config>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_content_card_loading %}\\n                            <sw-loader v-if=\\\"isLoading\\\"></sw-loader>\\n                        {% endblock %}\\n\\n                    </sw-card-view>\\n                {% endblock %}\\n\\n            </template>\\n        {% endblock %}\\n\\n    </sw-page>\\n{% endblock %}\\n\";","import './swag-paypal-settings-hint.scss';\nimport template from './swag-paypal-settings-hint.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-settings-hint', {\n    template,\n\n    props: {\n        hintText: {\n            type: String,\n            required: true,\n        },\n    },\n});\n","export default \"{% block swag_paypal_settings_hint %}\\n    <p class=\\\"swag-paypal-settings-hint\\\">\\n        {{ hintText }}\\n    </p>\\n{% endblock %}\\n\";","import template from './swag-paypal-acdc.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-acdc', {\n    template,\n\n    inject: [\n        'acl',\n    ],\n\n    props: {\n        actualConfigData: {\n            type: Object,\n            required: true,\n            default: () => { return {}; },\n        },\n        allConfigs: {\n            type: Object,\n            required: true,\n        },\n        selectedSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    methods: {\n        checkBoolFieldInheritance(value) {\n            return typeof value !== 'boolean';\n        },\n    },\n});\n","export default \"{% block swag_paypal_content_card_channel_config_acdc %}\\n    <sw-card position-identifier=\\\"swag-paypal-card-channel-config-acdc\\\"\\n             :title=\\\"$tc('swag-paypal.settingForm.acdc.cardTitle')\\\">\\n\\n        {% block swag_paypal_content_card_channel_config_acdc_settings %}\\n            <div v-if=\\\"actualConfigData\\\" class=\\\"swag-paypal-settings-acdc-fields\\\">\\n\\n                {% block swag_paypal_content_card_channel_config_acdc_settings_detail_enabled %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.acdcForce3DS']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.acdcForce3DS']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.acdcForce3DS']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.acdcForce3DS\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.acdc.acdcForce3DS.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.acdc.acdcForce3DS.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './swag-paypal-behavior.html.twig';\nimport constants from '../../page/swag-paypal/swag-paypal-consts';\n\nconst { Component } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('swag-paypal-behavior', {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'acl',\n    ],\n\n    props: {\n        actualConfigData: {\n            type: Object,\n            required: true,\n            default: () => { return {}; },\n        },\n        allConfigs: {\n            type: Object,\n            required: true,\n        },\n        selectedSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            ...constants,\n        };\n    },\n\n    computed: {\n        intentOptions() {\n            return [\n                {\n                    id: 'CAPTURE',\n                    name: this.$tc('swag-paypal.settingForm.behavior.intent.CAPTURE'),\n                },\n                {\n                    id: 'AUTHORIZE',\n                    name: this.$tc('swag-paypal.settingForm.behavior.intent.AUTHORIZE'),\n                },\n            ];\n        },\n\n        /**\n         * @deprecated tag:v8.0.0 Will be removed without replacement.\n         */\n        merchantLocationOptions() {\n            return [\n                {\n                    id: this.MERCHANT_LOCATION_GERMANY,\n                    name: this.$tc('swag-paypal.settingForm.behavior.merchantLocation.germany'),\n                },\n                {\n                    id: this.MERCHANT_LOCATION_OTHER,\n                    name: this.$tc('swag-paypal.settingForm.behavior.merchantLocation.other'),\n                },\n            ];\n        },\n\n        landingPageOptions() {\n            return [\n                {\n                    id: 'LOGIN',\n                    name: this.$tc('swag-paypal.settingForm.behavior.landingPage.options.login'),\n                },\n                {\n                    id: 'BILLING',\n                    name: this.$tc('swag-paypal.settingForm.behavior.landingPage.options.billing'),\n                },\n                {\n                    id: 'NO_PREFERENCE',\n                    name: this.$tc('swag-paypal.settingForm.behavior.landingPage.options.no_preference'),\n                },\n            ];\n        },\n\n        landingPageHint() {\n            let landingPageOption = this.actualConfigData['SwagPayPal.settings.landingPage'] || 'NO_PREFERENCE';\n            landingPageOption = landingPageOption.toLowerCase();\n            const translationKey = `swag-paypal.settingForm.behavior.landingPage.helpText.${landingPageOption}`;\n            return this.$tc(translationKey);\n        },\n\n        /**\n         * @deprecated tag:v8.0.0 Will be removed without replacement.\n         */\n        loggingLevelOptions() {\n            return [\n                {\n                    value: 300,\n                    label: this.$tc('swag-paypal.settingForm.behavior.loggingLevel.options.basic'),\n                },\n                {\n                    value: 100,\n                    label: this.$tc('swag-paypal.settingForm.behavior.loggingLevel.options.advanced'),\n                },\n            ];\n        },\n\n        /**\n         * @deprecated tag:v8.0.0 Will be removed without replacement.\n         */\n        loggingLevel: {\n            get() {\n                if (!this.allConfigs.null) {\n                    return 300;\n                }\n\n                return this.allConfigs.null['SwagPayPal.settings.loggingLevel'];\n            },\n            set(value) {\n                this.allConfigs.null['SwagPayPal.settings.loggingLevel'] = value;\n            },\n        },\n\n        productRepository() {\n            return this.repositoryFactory.create('product');\n        },\n\n        productStreamRepository() {\n            return this.repositoryFactory.create('product_stream');\n        },\n\n        excludedProductCriteria() {\n            const criteria = new Criteria(1, 25);\n            criteria.addAssociation('options.group');\n\n            return criteria;\n        },\n    },\n\n    methods: {\n        checkTextFieldInheritance(value) {\n            if (typeof value !== 'string') {\n                return true;\n            }\n\n            return value.length <= 0;\n        },\n\n        checkArrayFieldInheritance(value) {\n            if (!Array.isArray(value)) {\n                return true;\n            }\n\n            return value.length <= 0;\n        },\n\n        checkBoolFieldInheritance(value) {\n            return typeof value !== 'boolean';\n        },\n    },\n});\n","export default \"{% block swag_paypal_content_card_channel_config_behavior %}\\n    <sw-card position-identifier=\\\"swag-paypal-card-channel-config-behavior\\\"\\n             :title=\\\"$tc('swag-paypal.settingForm.behavior.cardTitle')\\\">\\n\\n        {% block swag_paypal_content_card_channel_config_behavior_settings %}\\n            <div v-if=\\\"actualConfigData\\\" class=\\\"swag-paypal-settings-behavior-field\\\">\\n\\n                {# @deprecated tag:v8.0.0 - Will be removed without replacement #}\\n                {% block swag_paypal_content_card_channel_config_behavior_settings_merchant_location %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.merchantLocation']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.merchantLocation']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.merchantLocation']\\\"\\n                        :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\"\\n                        :label=\\\"$tc('swag-paypal.settingForm.behavior.merchantLocation.label')\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-single-select name=\\\"SwagPayPal.settings.merchantLocation\\\"\\n                                              labelProperty=\\\"name\\\"\\n                                              valueProperty=\\\"id\\\"\\n                                              :options=\\\"merchantLocationOptions\\\"\\n                                              :isInherited=\\\"props.isInherited\\\"\\n                                              :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                              :value=\\\"props.currentValue\\\"\\n                                              {% if VUE3 %}\\n                                              @update:value=\\\"props.updateCurrentValue\\\"\\n                                              {% else %}\\n                                              @change=\\\"props.updateCurrentValue\\\"\\n                                              {% endif %}>\\n                            </sw-single-select>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_behavior_settings_intent %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.intent']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.intent']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.intent']\\\"\\n                        :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\"\\n                        :label=\\\"$tc('swag-paypal.settingForm.behavior.intent.label')\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-single-select name=\\\"SwagPayPal.settings.intent\\\"\\n                                              labelProperty=\\\"name\\\"\\n                                              valueProperty=\\\"id\\\"\\n                                              :options=\\\"intentOptions\\\"\\n                                              :isInherited=\\\"props.isInherited\\\"\\n                                              :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                              :value=\\\"props.currentValue\\\"\\n                                              {% if VUE3 %}\\n                                              @update:value=\\\"props.updateCurrentValue\\\"\\n                                              {% else %}\\n                                              @change=\\\"props.updateCurrentValue\\\"\\n                                              {% endif %}>\\n                            </sw-single-select>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_behavior_settings_submit_cart %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.submitCart']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.submitCart']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.submitCart']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.submitCart\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.behavior.submitCart.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.behavior.submitCart.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_behavior_settings_brand_name %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.brandName']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.brandName']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.brandName']\\\"\\n                        :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-text-field name=\\\"SwagPayPal.settings.brandName\\\"\\n                                           :mapInheritance=\\\"props\\\"\\n                                           :label=\\\"$tc('swag-paypal.settingForm.behavior.brandName.label')\\\"\\n                                           :helpText=\\\"$tc('swag-paypal.settingForm.behavior.brandName.tooltipText')\\\"\\n                                           :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                           :value=\\\"props.currentValue\\\"\\n                                           {% if VUE3 %}\\n                                           @update:value=\\\"props.updateCurrentValue\\\"\\n                                           {% else %}\\n                                           @change=\\\"props.updateCurrentValue\\\"\\n                                           {% endif %}>\\n                            </sw-text-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_behavior_settings_landing_page %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.landingPage']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.landingPage']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.landingPage']\\\"\\n                        :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\"\\n                        :label=\\\"$tc('swag-paypal.settingForm.behavior.landingPage.label')\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-single-select name=\\\"SwagPayPal.settings.landingPage\\\"\\n                                              labelProperty=\\\"name\\\"\\n                                              valueProperty=\\\"id\\\"\\n                                              :options=\\\"landingPageOptions\\\"\\n                                              :isInherited=\\\"props.isInherited\\\"\\n                                              :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                              :value=\\\"props.currentValue\\\"\\n                                              {% if VUE3 %}\\n                                              @update:value=\\\"props.updateCurrentValue\\\"\\n                                              {% else %}\\n                                              @change=\\\"props.updateCurrentValue\\\"\\n                                              {% endif %}>\\n                            </sw-single-select>\\n\\n                            {% block swag_paypal_content_card_channel_config_behaviour_settings_landing_page_hint %}\\n                                <swag-paypal-settings-hint :hintText=\\\"landingPageHint\\\"></swag-paypal-settings-hint>\\n                            {% endblock %}\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_behavior_settings_send_order_number %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.sendOrderNumber']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.sendOrderNumber']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.sendOrderNumber']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.sendOrderNumber\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.behavior.sendOrderNumber.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.behavior.sendOrderNumber.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n\\n                {% block swag_paypal_content_card_channel_config_behavior_settings_order_number %}\\n                    <sw-container columns=\\\"1fr 1fr\\\" gap=\\\"0px 30px\\\">\\n\\n                        {% block swag_paypal_content_card_channel_config_behavior_settings_order_number_prefix %}\\n                            <sw-inherit-wrapper\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"actualConfigData['SwagPayPal.settings.orderNumberPrefix']\\\"\\n                                {% else %}\\n                                v-model=\\\"actualConfigData['SwagPayPal.settings.orderNumberPrefix']\\\"\\n                                {% endif %}\\n                                :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.orderNumberPrefix']\\\"\\n                                :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                                <template #content=\\\"props\\\">\\n                                    <sw-text-field name=\\\"SwagPayPal.settings.orderNumberPrefix\\\"\\n                                                   :mapInheritance=\\\"props\\\"\\n                                                   :label=\\\"$tc('swag-paypal.settingForm.behavior.orderNumberPrefix.label')\\\"\\n                                                   :helpText=\\\"$tc('swag-paypal.settingForm.behavior.orderNumberPrefix.tooltipText')\\\"\\n                                                   :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                                   :value=\\\"props.currentValue\\\"\\n                                                   {% if VUE3 %}\\n                                                   @update:value=\\\"props.updateCurrentValue\\\"\\n                                                   {% else %}\\n                                                   @change=\\\"props.updateCurrentValue\\\"\\n                                                   {% endif %}>\\n                                    </sw-text-field>\\n                                </template>\\n                            </sw-inherit-wrapper>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_content_card_channel_config_behavior_settings_order_number_suffix %}\\n                            <sw-inherit-wrapper\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"actualConfigData['SwagPayPal.settings.orderNumberSuffix']\\\"\\n                                {% else %}\\n                                v-model=\\\"actualConfigData['SwagPayPal.settings.orderNumberSuffix']\\\"\\n                                {% endif %}\\n                                :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.orderNumberSuffix']\\\"\\n                                :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                                <template #content=\\\"props\\\">\\n                                    <sw-text-field name=\\\"SwagPayPal.settings.orderNumberSuffix\\\"\\n                                                   :mapInheritance=\\\"props\\\"\\n                                                   :label=\\\"$tc('swag-paypal.settingForm.behavior.orderNumberSuffix.label')\\\"\\n                                                   :helpText=\\\"$tc('swag-paypal.settingForm.behavior.orderNumberSuffix.tooltipText')\\\"\\n                                                   :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                                   :value=\\\"props.currentValue\\\"\\n                                                   {% if VUE3 %}\\n                                                   @update:value=\\\"props.updateCurrentValue\\\"\\n                                                   {% else %}\\n                                                   @change=\\\"props.updateCurrentValue\\\"\\n                                                   {% endif %}>\\n                                    </sw-text-field>\\n                                </template>\\n                            </sw-inherit-wrapper>\\n                        {% endblock %}\\n\\n                    </sw-container>\\n                {% endblock %}\\n\\n                {# @deprecated tag:v8.0.0 - will be removed #}\\n                {% block swag_paypal_content_card_channel_config_behavior_settings_logging_level %}\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_behavior_settings_excluded_product_ids %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.excludedProductIds']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.excludedProductIds']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.excludedProductIds']\\\"\\n                        :customInheritationCheckFunction=\\\"checkArrayFieldInheritance\\\"\\n                        :label=\\\"$tc('swag-paypal.settingForm.behavior.excludedProductIds.label')\\\"\\n                        :helpText=\\\"$tc('swag-paypal.settingForm.behavior.excludedProductIds.tooltipText')\\\"\\n                    >\\n                        <template #content=\\\"props\\\">\\n                            <sw-entity-multi-id-select\\n                                name=\\\"SwagPayPal.settings.excludedProductIds\\\"\\n                                :repository=\\\"productRepository\\\"\\n                                :criteria=\\\"excludedProductCriteria\\\"\\n                                :mapInheritance=\\\"props\\\"\\n                                :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                :ids=\\\"props.currentValue\\\"\\n                                {% if VUE3 %}\\n                                @update:ids=\\\"props.updateCurrentValue\\\"\\n                                {% else %}\\n                                @change=\\\"props.updateCurrentValue\\\"\\n                                {% endif %}\\n                            >\\n\\n                                {% block swag_paypal_content_card_channel_config_behavior_settings_excluded_product_ids_label_property %}\\n                                    <template #selection-label-property=\\\"{ item }\\\">\\n                                        <sw-product-variant-info\\n                                            :variations=\\\"item.variation\\\"\\n                                        >\\n                                            {{ item.translated.name || item.name }}\\n                                        </sw-product-variant-info>\\n                                    </template>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_content_card_channel_config_behavior_settings_excluded_product_ids_result_label_property %}\\n                                    <template #result-label-property=\\\"{ item, searchTerm, highlightSearchTerm }\\\">\\n                                        <sw-product-variant-info\\n                                            :variations=\\\"item.variation\\\"\\n                                        >\\n                                            {{ item.translated.name || item.name }}\\n                                        </sw-product-variant-info>\\n                                    </template>\\n                                {% endblock %}\\n\\n                            </sw-entity-multi-id-select>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_behavior_settings_excluded_product_streams_ids %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.excludedProductStreamIds']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.excludedProductStreamIds']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.excludedProductStreamIds']\\\"\\n                        :customInheritationCheckFunction=\\\"checkArrayFieldInheritance\\\"\\n                        :label=\\\"$tc('swag-paypal.settingForm.behavior.excludedProductStreamIds.label')\\\"\\n                        :helpText=\\\"$tc('swag-paypal.settingForm.behavior.excludedProductStreamIds.tooltipText')\\\"\\n                    >\\n                        <template #content=\\\"props\\\">\\n                            <sw-entity-multi-id-select\\n                                name=\\\"SwagPayPal.settings.excludedProductStreamIds\\\"\\n                                :repository=\\\"productStreamRepository\\\"\\n                                :mapInheritance=\\\"props\\\"\\n                                :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                :ids=\\\"props.currentValue\\\"\\n                                {% if VUE3 %}\\n                                @update:ids=\\\"props.updateCurrentValue\\\"\\n                                {% else %}\\n                                @change=\\\"props.updateCurrentValue\\\"\\n                                {% endif %}\\n                            ></sw-entity-multi-id-select>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n            </div>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './swag-paypal-checkout.html.twig';\nimport './swag-paypal-checkout.scss';\n\nconst { Component, Context } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('swag-paypal-checkout', {\n    template,\n\n    inject: [\n        'acl',\n        'repositoryFactory',\n        'SwagPayPalApiCredentialsService',\n    ],\n\n    mixins: [\n        'notification',\n        'swag-paypal-credentials-loader',\n    ],\n\n    props: {\n        actualConfigData: {\n            type: Object,\n            required: true,\n            default: () => { return {}; },\n        },\n        allConfigs: {\n            type: Object,\n            required: true,\n        },\n        selectedSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n        clientIdErrorState: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        clientSecretErrorState: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        clientIdSandboxErrorState: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        clientSecretSandboxErrorState: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        clientIdFilled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        clientSecretFilled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        clientIdSandboxFilled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        clientSecretSandboxFilled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        isLoading: {\n            type: Boolean,\n            required: true,\n        },\n        // @deprecated tag:v8.0.0 - will be removed, credentials are separate now\n        allowShowCredentials: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        // @deprecated tag:v8.0.0 - will be removed\n        showSettingsLink: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            // @deprecated tag:v8.0.0 - will be removed, credentials are separate now\n            showCredentials: false,\n            paymentMethods: [],\n            merchantInformation: {\n                merchantIntegrations: {\n                    legalName: null,\n                    primaryEmail: null,\n                },\n                capabilities: [],\n            },\n            plusDeprecationModalOpen: false,\n            showHintMerchantIdMustBeEnteredManually: false,\n            isLoadingPaymentMethods: false,\n        };\n    },\n\n    computed: {\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n\n        paymentMethodRepository() {\n            return this.repositoryFactory.create('payment_method');\n        },\n\n        paymentMethodCriteria() {\n            const criteria = new Criteria(1, 500);\n\n            criteria.addAssociation('media');\n\n            criteria.addFilter(Criteria.equals('plugin.name', 'SwagPayPal'));\n            criteria.addSorting(Criteria.sort('position', 'ASC'), true);\n\n            return criteria;\n        },\n\n        isLive() {\n            return !this.isSandbox;\n        },\n\n        isSandbox() {\n            return this.actualConfigData['SwagPayPal.settings.sandbox'];\n        },\n\n        liveButtonTitle() {\n            if (!this.actualConfigData['SwagPayPal.settings.clientSecret']) {\n                return this.$tc('swag-paypal.settingForm.checkout.button.liveTitle');\n            }\n\n            if (this.isSandbox) {\n                return this.$tc('swag-paypal.settingForm.checkout.button.changeLiveTitle');\n            }\n\n            if (!this.isOnboardingPPCPFinished) {\n                return this.$tc('swag-paypal.settingForm.checkout.button.onboardingLiveTitle');\n            }\n\n            if (this.paymentMethods.some((pm) => this.onboardingStatus(pm) !== 'active')) {\n                return this.$tc('swag-paypal.settingForm.checkout.button.restartOnboardingLiveTitle');\n            }\n\n            return this.$tc('swag-paypal.settingForm.checkout.button.changeLiveTitle');\n        },\n\n        sandboxButtonTitle() {\n            if (!this.actualConfigData['SwagPayPal.settings.clientSecretSandbox']) {\n                return this.$tc('swag-paypal.settingForm.checkout.button.sandboxTitle');\n            }\n\n            if (this.isLive) {\n                return this.$tc('swag-paypal.settingForm.checkout.button.changeSandboxTitle');\n            }\n\n            if (!this.isOnboardingPPCPFinished) {\n                return this.$tc('swag-paypal.settingForm.checkout.button.onboardingSandboxTitle');\n            }\n\n            if (this.paymentMethods.find((pm) => this.onboardingStatus(pm) !== 'active')) {\n                return this.$tc('swag-paypal.settingForm.checkout.button.restartOnboardingSandboxTitle');\n            }\n\n            return this.$tc('swag-paypal.settingForm.checkout.button.changeSandboxTitle');\n        },\n\n        sandboxToggleDisabled() {\n            return ((!this.actualConfigData['SwagPayPal.settings.clientSecret']\n                        && this.actualConfigData['SwagPayPal.settings.clientSecretSandbox']\n                        && this.isSandbox)\n                || (this.actualConfigData['SwagPayPal.settings.clientSecret']\n                        && !this.actualConfigData['SwagPayPal.settings.clientSecretSandbox']\n                        && this.isLive))\n                && !this.selectedSalesChannelId;\n        },\n\n        isOnboardingPPCPFinished() {\n            const sepaPaymentMethod = this.paymentMethods\n                .find((pm) => pm.formattedHandlerIdentifier === 'handler_swag_sepahandler');\n\n            if (!sepaPaymentMethod) {\n                return false;\n            }\n\n            return this.onboardingStatus(sepaPaymentMethod) === 'active';\n        },\n\n        showMerchantInformation() {\n            return this.isOnboardingPPCPFinished;\n        },\n\n        showSandboxToggle() {\n            return this.actualConfigData['SwagPayPal.settings.clientSecret']\n                || this.actualConfigData['SwagPayPal.settings.clientSecretSandbox']\n                || this.selectedSalesChannelId;\n        },\n\n        merchantEmail() {\n            return this.merchantInformation.merchantIntegrations.primary_email\n                ?? this.merchantInformation.merchantIntegrations.tracking_id;\n        },\n    },\n\n    watch: {\n        isSandbox() {\n            this.$emit('on-save-settings');\n        },\n\n        isOnboardingPPCPFinished() {\n            // open the deactivate PayPalPLUS modal if ppcp onboarding was successful and PayPalPlus is still active\n            const plusCheckoutEnabled = this.actualConfigData['SwagPayPal.settings.plusCheckoutEnabled'];\n\n            if (!plusCheckoutEnabled) {\n                return;\n            }\n\n            this.plusDeprecationModalOpen = plusCheckoutEnabled && this.isOnboardingPPCPFinished;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        async createdComponent() {\n            await this.getPaymentMethodsAndMerchantIntegrations();\n        },\n\n        // @deprecated tag:v8.0.0 - will be removed, credentials are separate now\n        updateShowCredentials() {\n            this.$emit('on-change-credentials-visibility', this.showCredentials);\n        },\n\n        deactivatePayPalPlus() {\n            this.$set(this.actualConfigData, 'SwagPayPal.settings.plusCheckoutEnabled', false);\n            this.$set(this.actualConfigData, 'SwagPayPal.settings.merchantLocation', 'other');\n            this.$set(this.actualConfigData, 'SwagPayPal.settings.spbAlternativePaymentMethodsEnabled', false);\n            this.$emit('on-deactivate-paypal-plus');\n\n            this.plusDeprecationModalOpen = false;\n        },\n\n        async getPaymentMethodsAndMerchantIntegrations() {\n            this.isLoadingPaymentMethods = true;\n            await this.fetchMerchantIntegrations();\n            await this.getPaymentMethods();\n            this.isLoadingPaymentMethods = false;\n        },\n\n        async getPaymentMethods() {\n            this.paymentMethods = await this.paymentMethodRepository.search(this.paymentMethodCriteria, Context.api)\n                .then((response) => {\n                    return response.filter((paymentMethod) => {\n                        return paymentMethod.formattedHandlerIdentifier !== 'handler_swag_pospayment'\n                            && paymentMethod.formattedHandlerIdentifier !== 'handler_swag_trustlyapmhandler';\n                    });\n                });\n        },\n\n        async fetchMerchantIntegrations() {\n            this.merchantInformation = await this.SwagPayPalApiCredentialsService\n                .getMerchantInformation(this.selectedSalesChannelId)\n                .then((response) => {\n                    return response;\n                });\n            this.merchantIntegrations = this.merchantInformation.capabilities;\n        },\n\n        onboardingStatus(paymentMethod) {\n            return this.merchantInformation.capabilities[paymentMethod.id];\n        },\n\n        onChangePaymentMethodActive(paymentMethod) {\n            paymentMethod.active = !paymentMethod.active;\n\n            this.paymentMethodRepository.save(paymentMethod, Context.api)\n                .then(() => {\n                    const state = paymentMethod.active ? 'active' : 'inactive';\n\n                    this.createNotificationSuccess({\n                        message: this.$tc(\n                            `swag-paypal.settingForm.checkout.paymentMethodStatusChangedSuccess.${state}`,\n                            0,\n                            { name: paymentMethod.name },\n                        ),\n                    });\n                });\n        },\n\n        closeModal() {\n            this.plusDeprecationModalOpen = false;\n        },\n\n        onPayPalCredentialsLoadSuccess(clientId, clientSecret, merchantPayerId, sandbox) {\n            this.setConfig(clientId, clientSecret, merchantPayerId, sandbox);\n            this.$emit('on-save-settings');\n        },\n\n        onPayPalCredentialsLoadFailed(sandbox) {\n            this.setConfig('', '', '', sandbox);\n            this.createNotificationError({\n                message: this.$tc('swag-paypal.settingForm.credentials.button.messageFetchedError'),\n                duration: 10000,\n            });\n        },\n\n        setConfig(clientId, clientSecret, merchantPayerId, sandbox) {\n            const suffix = sandbox ? 'Sandbox' : '';\n            this.$set(this.actualConfigData, `SwagPayPal.settings.clientId${suffix}`, clientId);\n            this.$set(this.actualConfigData, `SwagPayPal.settings.clientSecret${suffix}`, clientSecret);\n            this.$set(this.actualConfigData, `SwagPayPal.settings.merchantPayerId${suffix}`, merchantPayerId);\n        },\n\n        checkBoolFieldInheritance(value) {\n            return typeof value !== 'boolean';\n        },\n    },\n});\n","export default \"{% block swag_paypal_content_card_channel_config_checkout %}\\n<sw-card\\n    class=\\\"sw-card--grid\\\"\\n    position-identifier=\\\"swag-paypal-checkout\\\"\\n    :is-loading=\\\"isLoading || isLoadingPaymentMethods\\\"\\n    :title=\\\"$tc('swag-paypal.settingForm.checkout.cardTitle')\\\"\\n>\\n    <template #avatar>\\n        {% block swag_paypal_content_card_channel_config_checkout_avatar %}\\n        <img\\n            :src=\\\"assetFilter('swagpaypal/static/img/paypal-logo-avatar.svg')\\\"\\n            :alt=\\\"$tc('swag-paypal.settingForm.checkout.appImageAlt')\\\"\\n        >\\n        {% endblock %}\\n    </template>\\n\\n    <template #header-right>\\n        {% block swag_paypal_content_card_channel_config_checkout_settings_link %}\\n        <sw-internal-link\\n            v-if=\\\"showSettingsLink\\\"\\n            :routerLink=\\\"{ name: 'swag.paypal.index' }\\\"\\n        >\\n            {{ $tc('swag-paypal.settingForm.checkout.settingsLink') }}\\n        </sw-internal-link>\\n        {% endblock %}\\n    </template>\\n\\n    {% block swag_paypal_content_card_channel_config_checkout_container %}\\n    <div class=\\\"swag-paypal-checkout\\\">\\n\\n        {% block swag_paypal_content_card_channel_config_checkout_container_box %}\\n        <div :class=\\\"{'swag-paypal-checkout__box': showMerchantInformation }\\\">\\n\\n            {% block swag_paypal_content_card_channel_config_checkout_container_sandbox_switch %}\\n            <sw-inherit-wrapper v-if=\\\"showSandboxToggle\\\"\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"actualConfigData['SwagPayPal.settings.sandbox']\\\"\\n                                {% else %}\\n                                v-model=\\\"actualConfigData['SwagPayPal.settings.sandbox']\\\"\\n                                {% endif %}\\n                                class=\\\"swag-paypal-checkout__sandbox-toggle\\\"\\n                                :inheritedValue=\\\"selectedSalesChannelId === null ? null : allConfigs['null']['SwagPayPal.settings.sandbox']\\\"\\n                                :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                <template #content=\\\"props\\\">\\n                    <sw-switch-field v-tooltip.left=\\\"{\\n                                         message: isSandbox ? $tc('swag-paypal.settingForm.checkout.sandbox.onlySandboxTooltip') : $tc('swag-paypal.settingForm.checkout.sandbox.onlyLiveTooltip'),\\n                                         disabled: !sandboxToggleDisabled,\\n                                     }\\\"\\n                                     name=\\\"SwagPayPal.settings.sandbox\\\"\\n                                     :mapInheritance=\\\"props\\\"\\n                                     :label=\\\"$tc('swag-paypal.settingForm.checkout.sandbox.label')\\\"\\n                                     :helpText=\\\"$tc('swag-paypal.settingForm.checkout.sandbox.helpText')\\\"\\n                                     :disabled=\\\"sandboxToggleDisabled || props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                     :value=\\\"props.currentValue\\\"\\n                                     @change=\\\"props.updateCurrentValue\\\">\\n                    </sw-switch-field>\\n                </template>\\n            </sw-inherit-wrapper>\\n            {% endblock %}\\n\\n            {% block swag_paypal_content_card_channel_config_checkout_container_header %}\\n            <p\\n                v-if=\\\"!showMerchantInformation\\\"\\n                class=\\\"swag-paypal-checkout__header\\\"\\n            >\\n                {{ $tc('swag-paypal.settingForm.checkout.header') }}\\n            </p>\\n            {% endblock %}\\n\\n            {% block swag_paypal_content_card_channel_config_checkout_container_description %}\\n            <p\\n                v-if=\\\"!showMerchantInformation\\\"\\n                class=\\\"swag-paypal-checkout__description\\\"\\n            >\\n                {{ $tc('swag-paypal.settingForm.checkout.description') }}\\n            </p>\\n            {% endblock %}\\n\\n            {% block swag_paypal_content_card_channel_config_checkout_container_banner %}\\n            <sw-alert\\n                v-if=\\\"!isOnboardingPPCPFinished\\\"\\n                variant=\\\"info\\\"\\n                class=\\\"swag-paypal-checkout__banner\\\"\\n            >\\n                <span v-html=\\\"$tc('swag-paypal.settingForm.checkout.banner')\\\"></span>\\n            </sw-alert>\\n            {% endblock %}\\n\\n            {% block swag_paypal_content_card_channel_config_checkout_container_merchant_information %}\\n            <p\\n                v-if=\\\"showMerchantInformation\\\"\\n                class=\\\"swag-paypal-checkout__merchant-information\\\"\\n            >\\n                {{ merchantEmail }}\\n                <br>\\n                {{ merchantInformation.merchantIntegrations.legal_name }}\\n            </p>\\n            {% endblock %}\\n\\n            {% block swag_paypal_content_card_channel_config_checkout_container_onboarding %}\\n                {% block swag_paypal_content_card_channel_config_checkout_container_onboarding_button %}\\n                <a\\n                    class=\\\"sw-button sw-button--ghost\\\"\\n                    target=\\\"_blank\\\"\\n                    :href=\\\"onboardingUrlLive\\\"\\n                    :disabled=\\\"!acl.can('swag_paypal.editor')\\\"\\n                    data-paypal-onboard-complete=\\\"onboardingCallbackLive\\\"\\n                    data-paypal-button=\\\"true\\\"\\n                >\\n                    {{ liveButtonTitle }}\\n                </a>\\n                <a\\n                    class=\\\"swag-paypal-checkout__button-onboarding-sandbox\\\"\\n                    target=\\\"_blank\\\"\\n                    :href=\\\"onboardingUrlSandbox\\\"\\n                    :disabled=\\\"!acl.can('swag_paypal.editor')\\\"\\n                    data-paypal-onboard-complete=\\\"onboardingCallbackSandbox\\\"\\n                    data-paypal-button=\\\"true\\\"\\n                >\\n                    {{ sandboxButtonTitle }}\\n                </a>\\n                {% endblock %}\\n            {% endblock %}\\n        </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_content_card_channel_config_checkout_container_payment_methods %}\\n        <p class=\\\"swag-paypal-checkout__payment-method-headline\\\">\\n            {{ $tc('swag-paypal.settingForm.checkout.paymentMethodText') }}\\n        </p>\\n        {% endblock %}\\n\\n        {% block swag_paypal_content_card_channel_config_checkout_container_payment_methods_items %}\\n        <div class=\\\"swag-paypal-checkout-payment-method_container\\\">\\n\\n            {% block swag_paypal_content_card_channel_config_checkout_container_payment_methods_items_item %}\\n            <swag-paypal-checkout-method\\n                v-for=\\\"paymentMethod in paymentMethods\\\"\\n                :key=\\\"paymentMethod.id\\\"\\n                :payment-method=\\\"paymentMethod\\\"\\n                :onboarding-status=\\\"onboardingStatus(paymentMethod)\\\"\\n            />\\n            {% endblock %}\\n\\n        </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_content_card_channel_config_checkout_container_switch_show_credentials %}\\n        <sw-switch-field\\n            v-if=\\\"allowShowCredentials\\\"\\n            {% if VUE3 %}\\n            v-model:value=\\\"showCredentials\\\"\\n            {% else %}\\n            v-model=\\\"showCredentials\\\"\\n            {% endif %}\\n            :label=\\\"$tc('swag-paypal.settingForm.checkout.showCredentials')\\\"\\n            :disabled=\\\"!acl.can('swag_paypal.editor')\\\"\\n            {% if VUE3 %}\\n            @update:value=\\\"updateShowCredentials\\\"\\n            {% else %}\\n            @change=\\\"updateShowCredentials\\\"\\n            {% endif %}\\n        />\\n        {% endblock %}\\n\\n        {% block swag_paypal_content_card_channel_config_checkout_container_credentials_slot %}\\n        <slot name=\\\"credentials\\\"></slot>\\n        {% endblock %}\\n\\n    </div>\\n    {% endblock %}\\n\\n    {% block sw_deactivate_paypal_plus_modal %}\\n    <sw-modal\\n        v-if=\\\"plusDeprecationModalOpen\\\"\\n        class=\\\"swag-paypal-checkout-modal\\\"\\n        :title=\\\"$tc('swag-paypal.settingForm.checkout.deactivatePayPalPlusModal.title')\\\"\\n        variant=\\\"default\\\"\\n        @modal-close=\\\"closeModal\\\"\\n    >\\n        {% block sw_deactivate_paypal_plus_modal_text %}\\n        <p class=\\\"swag-paypal-checkout-modal__text\\\">\\n            {{ $tc('swag-paypal.settingForm.checkout.deactivatePayPalPlusModal.text') }}\\n        </p>\\n        {% endblock %}\\n\\n        {% block sw_deactivate_paypal_plus_modal_warning %}\\n        <sw-alert\\n            class=\\\"swag-paypal-checkout-modal__warning\\\"\\n            variant=\\\"warning\\\"\\n        >\\n            {{ $tc('swag-paypal.settingForm.checkout.deactivatePayPalPlusModal.warning') }}\\n        </sw-alert>\\n        {% endblock %}\\n\\n        {% block sw_deactivate_paypal_plus_modal_footer %}\\n        <template #modal-footer>\\n            {% block sw_deactivate_paypal_plus_modal_cancel_button %}\\n            <sw-button @click=\\\"closeModal\\\">\\n                {{ $tc('swag-paypal.settingForm.checkout.deactivatePayPalPlusModal.button.cancel') }}\\n            </sw-button>\\n            {% endblock %}\\n\\n            {% block ssw_deactivate_paypal_plus_modal_confirm_button %}\\n            <sw-button\\n                variant=\\\"primary\\\"\\n                @click=\\\"deactivatePayPalPlus\\\"\\n            >\\n                {{ $tc('swag-paypal.settingForm.checkout.deactivatePayPalPlusModal.button.deactivate') }}\\n            </sw-button>\\n            {% endblock %}\\n\\n        </template>\\n        {% endblock %}\\n    </sw-modal>\\n    {% endblock %}\\n\\n</sw-card>\\n{% endblock %}\\n\";","export default \"{% block swag_paypal_checkout_method %}\\n<div class=\\\"swag-paypal-checkout-method\\\">\\n\\n    {% block swag_paypal_checkout_method_icon %}\\n    <img\\n        v-if=\\\"paymentMethod.media\\\"\\n        class=\\\"swag-paypal-checkout-method__icon\\\"\\n        :src=\\\"paymentMethod.media.url\\\"\\n        :alt=\\\"paymentMethod.media.translated.alt\\\"\\n    >\\n    {% endblock %}\\n\\n    {% block swag_paypal_checkout_method_name %}\\n    <div class=\\\"swag-paypal-checkout-method__name\\\">\\n        {{ paymentMethod.translated.name }}\\n    </div>\\n    {% endblock %}\\n\\n    {% block swag_paypal_checkout_method_dynamic %}\\n    <div class=\\\"swag-paypal-checkout-method__dynamic\\\">\\n        {% block swag_paypal_checkout_method_pui_help_text %}\\n        <sw-help-text\\n            v-if=\\\"availabilityToolTip\\\"\\n            :text=\\\"availabilityToolTip\\\"\\n        />\\n        {% endblock %}\\n\\n        {% block swag_paypal_checkout_method_onboarding_status %}\\n        <sw-label\\n            v-tooltip=\\\"{\\n                message: onboardingStatusTooltip,\\n                position: 'top',\\n                disabled: !onboardingStatusTooltip,\\n            }\\\"\\n            class=\\\"swag-plugin-box-with-onboarding__status-label\\\"\\n            size=\\\"medium\\\"\\n            appearance=\\\"pill\\\"\\n            :variant=\\\"statusBadgeVariant\\\"\\n            :ghost=\\\"false\\\"\\n            :caps=\\\"false\\\"\\n        >\\n\\n            {% block swag_paypal_checkout_method_onboarding_status_badge %}\\n            <sw-color-badge\\n                class=\\\"swag-plugin-box-with-onboarding__status-badge\\\"\\n                rounded\\n                :color=\\\"statusBadgeColor\\\"\\n            />\\n            {% endblock %}\\n\\n            {% block swag_paypal_checkout_method_onboarding_status_text %}\\n            <span class=\\\"swag-plugin-box-with-onboarding__status-text\\\">\\n                {{ onboardingStatusText }}\\n            </span>\\n            {% endblock %}\\n\\n        </sw-label>\\n        {% endblock %}\\n\\n        {% block swag_paypal_checkout_method_edit_detail_link %}\\n        <router-link\\n            v-if=\\\"showEditLink\\\"\\n            class=\\\"swag-paypal-checkout-method__show-detail-link\\\"\\n            :to=\\\"editLink\\\"\\n        >\\n            {{ $tc('swag-paypal.settingForm.checkout.editDetail') }}\\n        </router-link>\\n        {% endblock %}\\n    </div>\\n    {% endblock %}\\n\\n    {% block swag_paypal_checkout_method_active_switch %}\\n    <sw-switch-field\\n        :label=\\\"$tc('swag-paypal.settingForm.checkout.switch.label')\\\"\\n        :disabled=\\\"paymentMethodToggleDisabled || !acl.can('swag_paypal.editor')\\\"\\n        :value=\\\"paymentMethod.active\\\"\\n        {% if VUE3 %}\\n        @update:value=\\\"onChangePaymentMethodActive\\\"\\n        {% else %}\\n        @change=\\\"onChangePaymentMethodActive\\\"\\n        {% endif %}\\n    />\\n    {% endblock %}\\n</div>\\n{% endblock %}\\n\";","import template from './swag-paypal-checkout-method.html.twig';\nimport './swag-paypal-checkout-method.scss';\n\nconst { Component, Context } = Shopware;\n\nComponent.register('swag-paypal-checkout-method', {\n    template,\n\n    inject: [\n        'acl',\n        'repositoryFactory',\n    ],\n\n    mixins: [\n        'notification',\n    ],\n\n    props: {\n        paymentMethod: {\n            type: Object,\n            required: true,\n        },\n        onboardingStatus: {\n            type: String,\n            required: false,\n            default: 'inactive',\n        },\n    },\n\n    data() {\n        return {\n            merchantIntegrations: {},\n        };\n    },\n\n    computed: {\n        paymentMethodRepository() {\n            return this.repositoryFactory.create('payment_method');\n        },\n\n        editLink() {\n            return {\n                name: 'sw.settings.payment.detail',\n                params: {\n                    id: this.paymentMethod.id,\n                },\n            };\n        },\n\n        /**\n         * @deprecated tag:v8.0.0 - will be removed, use `showEditLink` instead\n         */\n        needsOnboarding() {\n            return this.onboardingStatus?.toUpperCase() !== 'ACTIVE';\n        },\n\n        paymentMethodToggleDisabled() {\n            // should be able to deactivate active payment method\n            if (this.paymentMethod.active) {\n                return false;\n            }\n\n            return !this.showEditLink;\n        },\n\n        showEditLink() {\n            return ['active', 'limited', 'mybank'].includes(this.onboardingStatus);\n        },\n\n        statusBadgeVariant() {\n            let variant;\n\n            switch (this.onboardingStatus) {\n                case 'active': variant = 'success'; break;\n                case 'limited': case 'mybank': variant = 'danger'; break;\n                case 'inactive': case 'ineligible': variant = 'neutral'; break;\n                case 'pending': variant = 'info'; break;\n                default: variant = 'neutral';\n            }\n\n            return variant;\n        },\n\n        statusBadgeColor() {\n            let variant;\n\n            switch (this.onboardingStatus) {\n                case 'active':\n                    variant = '#37D046';\n                    break;\n                case 'limited':\n                case 'mybank':\n                    variant = '#ff9800';\n                    break;\n                case 'inactive':\n                case 'ineligible':\n                    variant = '#52667A';\n                    break;\n                case 'pending':\n                    variant = '#189eff';\n                    break;\n                default:\n                    variant = '#189eff';\n            }\n\n            return variant;\n        },\n\n        onboardingStatusText() {\n            return this.$tc(`swag-paypal.settingForm.checkout.onboardingStatusText.${this.onboardingStatus}`);\n        },\n\n        onboardingStatusTooltip() {\n            const snippetKey = `swag-paypal.settingForm.checkout.onboardingStatusTooltip.${this.onboardingStatus}`;\n\n            if (!this.$te(snippetKey)) {\n                return null;\n            }\n\n            return this.$tc(snippetKey);\n        },\n\n        availabilityToolTip() {\n            const handlerElements = this.paymentMethod.formattedHandlerIdentifier.split('_');\n            const handlerName = handlerElements[handlerElements.length - 1];\n            const snippetKey = `swag-paypal.settingForm.checkout.availabilityToolTip.${handlerName}`;\n\n            if (!this.$te(snippetKey)) {\n                return null;\n            }\n\n            return this.$tc(snippetKey);\n        },\n    },\n\n    methods: {\n        onChangePaymentMethodActive() {\n            this.paymentMethod.active = !this.paymentMethod.active;\n\n            this.paymentMethodRepository.save(this.paymentMethod, Context.api)\n                .then(() => {\n                    const state = this.paymentMethod.active ? 'active' : 'inactive';\n\n                    this.createNotificationSuccess({\n                        message: this.$tc(\n                            `swag-paypal.settingForm.checkout.paymentMethodStatusChangedSuccess.${state}`,\n                            0,\n                            { name: this.paymentMethod.name },\n                        ),\n                    });\n                });\n        },\n    },\n});\n","import template from './swag-paypal-created-component-helper.html.twig';\n\nconst { Component } = Shopware;\n\n/* This component exists only to implement the createdComponent live-cycle\n * hook in without using it of the actual component. the reason is that there\n * are problems in the cloud with other plugins (e.g. Mollie) that already\n * overwrite created-Component. Since the order of plugin overrides is not deterministic,\n * race conditions can occur here.\n*/\n\nComponent.register('swag-paypal-created-component-helper', {\n    template,\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.$emit('on-created-component');\n        },\n    },\n});\n","export default \"{% block swag_paypal_created_component_helper %}\\n    {# only an empty element needed to render the component #}\\n    <div/>\\n{% endblock %}\\n\";","import template from './swag-paypal-credentials.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-credentials', {\n    template,\n\n    inject: [\n        'acl',\n        'SwagPayPalApiCredentialsService',\n    ],\n\n    mixins: [\n        'notification',\n    ],\n\n    props: {\n        actualConfigData: {\n            type: Object,\n            required: true,\n            default: () => { return {}; },\n        },\n        allConfigs: {\n            type: Object,\n            required: true,\n        },\n        selectedSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n        clientIdErrorState: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        clientSecretErrorState: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        clientIdSandboxErrorState: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        clientSecretSandboxErrorState: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        clientIdFilled: {\n            type: Boolean,\n            required: true,\n        },\n        clientSecretFilled: {\n            type: Boolean,\n            required: true,\n        },\n        clientIdSandboxFilled: {\n            type: Boolean,\n            required: true,\n        },\n        clientSecretSandboxFilled: {\n            type: Boolean,\n            required: true,\n        },\n        isLoading: {\n            type: Boolean,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            isTestingLive: false,\n            isTestingSandbox: false,\n            isTestLiveSuccessful: false,\n            isTestSandboxSuccessful: false,\n        };\n    },\n\n    computed: {\n        testLiveButtonDisabled() {\n            return this.isLoading || !this.clientSecretFilled || !this.clientIdFilled || this.isTestingLive;\n        },\n\n        testSandboxButtonDisabled() {\n            return this.isLoading || !this.clientSecretSandboxFilled || !this.clientIdSandboxFilled || this.isTestingSandbox;\n        },\n    },\n\n    methods: {\n        checkTextFieldInheritance(value) {\n            if (typeof value !== 'string') {\n                return true;\n            }\n\n            return value.length <= 0;\n        },\n\n        checkBoolFieldInheritance(value) {\n            return typeof value !== 'boolean';\n        },\n\n        onTest(sandbox) {\n            if (sandbox) {\n                this.isTestingSandbox = true;\n            } else {\n                this.isTestingLive = true;\n            }\n\n            const sandboxSetting = sandbox ? 'Sandbox' : '';\n            const clientId = this.actualConfigData[`SwagPayPal.settings.clientId${sandboxSetting}`] ||\n                    this.allConfigs.null[`SwagPayPal.settings.clientId${sandboxSetting}`];\n            const clientSecret = this.actualConfigData[`SwagPayPal.settings.clientSecret${sandboxSetting}`] ||\n                    this.allConfigs.null[`SwagPayPal.settings.clientSecret${sandboxSetting}`];\n\n            this.SwagPayPalApiCredentialsService.validateApiCredentials(\n                clientId,\n                clientSecret,\n                sandbox,\n            ).then((response) => {\n                const credentialsValid = response.credentialsValid;\n\n                if (credentialsValid) {\n                    if (sandbox) {\n                        this.isTestingSandbox = false;\n                        this.isTestSandboxSuccessful = true;\n                    } else {\n                        this.isTestingLive = false;\n                        this.isTestLiveSuccessful = true;\n                    }\n                }\n            }).catch((errorResponse) => {\n                if (errorResponse.response.data && errorResponse.response.data.errors) {\n                    let message = `<b>${this.$tc('swag-paypal.settingForm.messageTestError')}</b> `;\n                    message += errorResponse.response.data.errors.map((error) => {\n                        return error.detail;\n                    }).join(' / ');\n\n                    this.createNotificationError({\n                        message: message,\n                    });\n\n                    if (sandbox) {\n                        this.isTestingSandbox = false;\n                        this.isTestSandboxSuccessful = false;\n                    } else {\n                        this.isTestingLive = false;\n                        this.isTestLiveSuccessful = false;\n                    }\n                }\n            });\n        },\n    },\n});\n","export default \"{% block swag_paypal_content_card_channel_config_credentials %}\\n    <sw-card position-identifier=\\\"swag-paypal-credentials\\\"\\n             :title=\\\"$tc('swag-paypal.settingForm.credentials.cardTitle')\\\">\\n\\n        {% block swag_paypal_content_card_channel_config_credentials_card_container %}\\n            <sw-container>\\n\\n                {% block swag_paypal_content_card_channel_config_credentials_card_container_settings %}\\n                    <div v-if=\\\"actualConfigData\\\" class=\\\"swag-paypal-settings-credentials-fields\\\">\\n\\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_client_id %}\\n                            <sw-inherit-wrapper\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"actualConfigData['SwagPayPal.settings.clientId']\\\"\\n                                {% else %}\\n                                v-model=\\\"actualConfigData['SwagPayPal.settings.clientId']\\\"\\n                                {% endif %}\\n                                :inheritedValue=\\\"selectedSalesChannelId === null ? null : allConfigs['null']['SwagPayPal.settings.clientId']\\\"\\n                                :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                                <template #content=\\\"props\\\">\\n                                    <sw-text-field name=\\\"SwagPayPal.settings.clientId\\\"\\n                                                   :mapInheritance=\\\"props\\\"\\n                                                   :label=\\\"$tc('swag-paypal.settingForm.credentials.clientId.label')\\\"\\n                                                   :helpText=\\\"$tc('swag-paypal.settingForm.credentials.clientId.tooltipText')\\\"\\n                                                   :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                                   :value=\\\"props.currentValue\\\"\\n                                                   :error=\\\"clientIdErrorState\\\"\\n                                                   {% if VUE3 %}\\n                                                   @update:value=\\\"props.updateCurrentValue\\\"\\n                                                   {% else %}\\n                                                   @change=\\\"props.updateCurrentValue\\\"\\n                                                   @input=\\\"props.updateCurrentValue\\\"\\n                                                   {% endif %}>\\n                                    </sw-text-field>\\n                                </template>\\n                            </sw-inherit-wrapper>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_client_secret %}\\n                            <sw-inherit-wrapper\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"actualConfigData['SwagPayPal.settings.clientSecret']\\\"\\n                                {% else %}\\n                                v-model=\\\"actualConfigData['SwagPayPal.settings.clientSecret']\\\"\\n                                {% endif %}\\n                                :inheritedValue=\\\"selectedSalesChannelId === null ? null : allConfigs['null']['SwagPayPal.settings.clientSecret']\\\"\\n                                :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                                <template #content=\\\"props\\\">\\n                                    <sw-text-field name=\\\"SwagPayPal.settings.clientSecret\\\"\\n                                                   :mapInheritance=\\\"props\\\"\\n                                                   :label=\\\"$tc('swag-paypal.settingForm.credentials.clientSecret.label')\\\"\\n                                                   :helpText=\\\"$tc('swag-paypal.settingForm.credentials.clientSecret.tooltipText')\\\"\\n                                                   :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                                   :value=\\\"props.currentValue\\\"\\n                                                   :error=\\\"clientSecretErrorState\\\"\\n                                                   {% if VUE3 %}\\n                                                   @update:value=\\\"props.updateCurrentValue\\\"\\n                                                   {% else %}\\n                                                   @input=\\\"props.updateCurrentValue\\\"\\n                                                   @change=\\\"props.updateCurrentValue\\\"\\n                                                   {% endif %}>\\n                                    </sw-text-field>\\n                                </template>\\n                            </sw-inherit-wrapper>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_merchant_id %}\\n                            <sw-inherit-wrapper\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"actualConfigData['SwagPayPal.settings.merchantPayerId']\\\"\\n                                {% else %}\\n                                v-model=\\\"actualConfigData['SwagPayPal.settings.merchantPayerId']\\\"\\n                                {% endif %}\\n                                :inheritedValue=\\\"selectedSalesChannelId === null ? null : allConfigs['null']['SwagPayPal.settings.merchantPayerId']\\\"\\n                                :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                                <template #content=\\\"props\\\">\\n                                    <sw-text-field name=\\\"SwagPayPal.settings.merchantPayerId\\\"\\n                                                   :mapInheritance=\\\"props\\\"\\n                                                   :label=\\\"$tc('swag-paypal.settingForm.credentials.merchantPayerId.label')\\\"\\n                                                   :helpText=\\\"$tc('swag-paypal.settingForm.credentials.merchantPayerId.tooltipText')\\\"\\n                                                   :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                                   :value=\\\"props.currentValue\\\"\\n                                                   {% if VUE3 %}\\n                                                   @update:value=\\\"props.updateCurrentValue\\\"\\n                                                   {% else %}\\n                                                   @change=\\\"props.updateCurrentValue\\\"\\n                                                   {% endif %}>\\n                                    </sw-text-field>\\n                                </template>\\n                            </sw-inherit-wrapper>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_actions_test %}\\n                            <sw-button-process\\n                                {% if VUE3 %}\\n                                v-model:processSuccess=\\\"isTestLiveSuccessful\\\"\\n                                {% else %}\\n                                v-model=\\\"isTestLiveSuccessful\\\"\\n                                {% endif %}\\n                                class=\\\"swag-paypal-settings-credentials-fields__test-button\\\"\\n                                :isLoading=\\\"isTestingLive\\\"\\n                                :disabled=\\\"testLiveButtonDisabled\\\"\\n                                @click=\\\"onTest(false)\\\">\\n                                {{ $tc('swag-paypal.settingForm.testLive') }}\\n                            </sw-button-process>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_sandbox %}\\n                            <sw-inherit-wrapper\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"actualConfigData['SwagPayPal.settings.sandbox']\\\"\\n                                {% else %}\\n                                v-model=\\\"actualConfigData['SwagPayPal.settings.sandbox']\\\"\\n                                {% endif %}\\n                                :inheritedValue=\\\"selectedSalesChannelId === null ? null : allConfigs['null']['SwagPayPal.settings.sandbox']\\\"\\n                                :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                                <template #content=\\\"props\\\">\\n                                    <sw-switch-field name=\\\"SwagPayPal.settings.sandbox\\\"\\n                                                     :mapInheritance=\\\"props\\\"\\n                                                     :label=\\\"$tc('swag-paypal.settingForm.credentials.sandbox.label')\\\"\\n                                                     :helpText=\\\"$tc('swag-paypal.settingForm.credentials.sandbox.tooltipText')\\\"\\n                                                     :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                                     :value=\\\"props.currentValue\\\"\\n                                                     {% if VUE3 %}\\n                                                     @update:value=\\\"props.updateCurrentValue\\\"\\n                                                     {% else %}\\n                                                     @change=\\\"props.updateCurrentValue\\\"\\n                                                     {% endif %}>\\n                                    </sw-switch-field>\\n                                </template>\\n                            </sw-inherit-wrapper>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_client_id_sandbox %}\\n                            <sw-inherit-wrapper\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"actualConfigData['SwagPayPal.settings.clientIdSandbox']\\\"\\n                                {% else %}\\n                                v-model=\\\"actualConfigData['SwagPayPal.settings.clientIdSandbox']\\\"\\n                                {% endif %}\\n                                :inheritedValue=\\\"selectedSalesChannelId === null ? null : allConfigs['null']['SwagPayPal.settings.clientIdSandbox']\\\"\\n                                :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                                <template #content=\\\"props\\\">\\n                                    <sw-text-field name=\\\"SwagPayPal.settings.clientIdSandbox\\\"\\n                                                   :mapInheritance=\\\"props\\\"\\n                                                   :label=\\\"$tc('swag-paypal.settingForm.credentials.clientIdSandbox.label')\\\"\\n                                                   :helpText=\\\"$tc('swag-paypal.settingForm.credentials.clientIdSandbox.tooltipText')\\\"\\n                                                   :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                                   :value=\\\"props.currentValue\\\"\\n                                                   :error=\\\"clientIdSandboxErrorState\\\"\\n                                                   {% if VUE3 %}\\n                                                   @update:value=\\\"props.updateCurrentValue\\\"\\n                                                   {% else %}\\n                                                   @change=\\\"props.updateCurrentValue\\\"\\n                                                   @input=\\\"props.updateCurrentValue\\\"\\n                                                   {% endif %}>\\n                                    </sw-text-field>\\n                                </template>\\n                            </sw-inherit-wrapper>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_client_secret_sandbox %}\\n                            <sw-inherit-wrapper\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"actualConfigData['SwagPayPal.settings.clientSecretSandbox']\\\"\\n                                {% else %}\\n                                v-model=\\\"actualConfigData['SwagPayPal.settings.clientSecretSandbox']\\\"\\n                                {% endif %}\\n                                :inheritedValue=\\\"selectedSalesChannelId === null ? null : allConfigs['null']['SwagPayPal.settings.clientSecretSandbox']\\\"\\n                                :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                                <template #content=\\\"props\\\">\\n                                    <sw-text-field name=\\\"SwagPayPal.settings.clientSecretSandbox\\\"\\n                                                   :mapInheritance=\\\"props\\\"\\n                                                   :label=\\\"$tc('swag-paypal.settingForm.credentials.clientSecretSandbox.label')\\\"\\n                                                   :helpText=\\\"$tc('swag-paypal.settingForm.credentials.clientSecretSandbox.tooltipText')\\\"\\n                                                   :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                                   :value=\\\"props.currentValue\\\"\\n                                                   :error=\\\"clientSecretSandboxErrorState\\\"\\n                                                   {% if VUE3 %}\\n                                                   @update:value=\\\"props.updateCurrentValue\\\"\\n                                                   {% else %}\\n                                                   @change=\\\"props.updateCurrentValue\\\"\\n                                                   @input=\\\"props.updateCurrentValue\\\"\\n                                                   {% endif %}>\\n                                    </sw-text-field>\\n                                </template>\\n                            </sw-inherit-wrapper>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_merchant_id_sandbox %}\\n                            <sw-inherit-wrapper\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"actualConfigData['SwagPayPal.settings.merchantPayerIdSandbox']\\\"\\n                                {% else %}\\n                                v-model=\\\"actualConfigData['SwagPayPal.settings.merchantPayerIdSandbox']\\\"\\n                                {% endif %}\\n                                :inheritedValue=\\\"selectedSalesChannelId === null ? null : allConfigs['null']['SwagPayPal.settings.merchantPayerIdSandbox']\\\"\\n                                :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                                <template #content=\\\"props\\\">\\n                                    <sw-text-field name=\\\"SwagPayPal.settings.merchantPayerIdSandbox\\\"\\n                                                   :mapInheritance=\\\"props\\\"\\n                                                   :label=\\\"$tc('swag-paypal.settingForm.credentials.merchantPayerIdSandbox.label')\\\"\\n                                                   :helpText=\\\"$tc('swag-paypal.settingForm.credentials.merchantPayerIdSandbox.tooltipText')\\\"\\n                                                   :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                                   :value=\\\"props.currentValue\\\"\\n                                                   {% if VUE3 %}\\n                                                   @update:value=\\\"props.updateCurrentValue\\\"\\n                                                   {% else %}\\n                                                   @change=\\\"props.updateCurrentValue\\\"\\n                                                   {% endif %}>\\n                                    </sw-text-field>\\n                                </template>\\n                            </sw-inherit-wrapper>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_actions_test_sandbox %}\\n                            <sw-button-process\\n                                {% if VUE3 %}\\n                                v-model:processSuccess=\\\"isTestSandboxSuccessful\\\"\\n                                {% else %}\\n                                v-model=\\\"isTestSandboxSuccessful\\\"\\n                                {% endif %}\\n                                :isLoading=\\\"isTestingSandbox\\\"\\n                                :disabled=\\\"testSandboxButtonDisabled\\\"\\n                                @click=\\\"onTest(true)\\\">\\n                                {{ $tc('swag-paypal.settingForm.testSandbox') }}\\n                            </sw-button-process>\\n                        {% endblock %}\\n                    </div>\\n                {% endblock %}\\n            </sw-container>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './swag-paypal-express.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-express', {\n    template,\n\n    inject: [\n        'acl',\n    ],\n\n    props: {\n        actualConfigData: {\n            type: Object,\n            required: true,\n            default: () => { return {}; },\n        },\n        allConfigs: {\n            type: Object,\n            required: true,\n        },\n        selectedSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    computed: {\n        buttonColorOptions() {\n            return [\n                {\n                    id: 'blue',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonColor.options.blue'),\n                },\n                {\n                    id: 'black',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonColor.options.black'),\n                },\n                {\n                    id: 'gold',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonColor.options.gold'),\n                },\n                {\n                    id: 'silver',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonColor.options.silver'),\n                },\n                {\n                    id: 'white',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonColor.options.white'),\n                },\n            ];\n        },\n        buttonShapeOptions() {\n            return [\n                {\n                    id: 'pill',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonShape.options.pill'),\n                },\n                {\n                    id: 'rect',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonShape.options.rect'),\n                },\n            ];\n        },\n\n        renderSettingsDisabled() {\n            return !this.acl.can('swag_paypal.editor') || (\n                !this.actualConfigData['SwagPayPal.settings.ecsDetailEnabled']\n                && !this.actualConfigData['SwagPayPal.settings.ecsCartEnabled']\n                && !this.actualConfigData['SwagPayPal.settings.ecsOffCanvasEnabled']\n                && !this.actualConfigData['SwagPayPal.settings.ecsProductDetailEnabled']\n                && !this.actualConfigData['SwagPayPal.settings.ecsListingEnabled']\n            );\n        },\n    },\n\n    methods: {\n        checkTextFieldInheritance(value) {\n            if (typeof value !== 'string') {\n                return true;\n            }\n\n            return value.length <= 0;\n        },\n\n        checkBoolFieldInheritance(value) {\n            return typeof value !== 'boolean';\n        },\n\n        preventSave(mode) {\n            this.$emit('preventSave', mode);\n        },\n    },\n});\n","export default \"{% block swag_paypal_content_card_channel_config_express %}\\n    <sw-card position-identifier=\\\"swag-paypal-card-channel-config-express\\\"\\n             :title=\\\"$tc('swag-paypal.settingForm.express.cardTitle')\\\"\\n             :subtitle=\\\"$tc('swag-paypal.settingForm.express.cardSubtitle')\\\">\\n\\n        {% block swag_paypal_content_card_channel_config_express_settings %}\\n            <div v-if=\\\"actualConfigData\\\" class=\\\"swag-paypal-settings-express-fields\\\">\\n\\n                {% block swag_paypal_content_card_channel_config_express_settings_detail_enabled %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.ecsDetailEnabled']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.ecsDetailEnabled']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.ecsDetailEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.ecsDetailEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.express.ecsDetailEnabled.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.express.ecsDetailEnabled.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_express_settings_cart_enabled %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.ecsCartEnabled']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.ecsCartEnabled']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.ecsCartEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.ecsCartEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.express.ecsCartEnabled.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.express.ecsCartEnabled.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_express_settings_off_canvas_enabled %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.ecsOffCanvasEnabled']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.ecsOffCanvasEnabled']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.ecsOffCanvasEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.ecsOffCanvasEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.express.ecsOffCanvasEnabled.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.express.ecsOffCanvasEnabled.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n\\n                {% block swag_paypal_content_card_channel_config_express_settings_login_enabled %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.ecsLoginEnabled']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.ecsLoginEnabled']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.ecsLoginEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.ecsLoginEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.express.ecsLoginEnabled.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.express.ecsLoginEnabled.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_express_settings_listing_enabled %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.ecsListingEnabled']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.ecsListingEnabled']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.ecsListingEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.ecsListingEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.express.ecsListingEnabled.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.express.ecsListingEnabled.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_express_settings_button_color %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.ecsButtonColor']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.ecsButtonColor']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.ecsButtonColor']\\\"\\n                        :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\"\\n                        :label=\\\"$tc('swag-paypal.settingForm.express.ecsButtonColor.label')\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-single-select name=\\\"SwagPayPal.settings.ecsButtonColor\\\"\\n                                              labelProperty=\\\"name\\\"\\n                                              valueProperty=\\\"id\\\"\\n                                              :options=\\\"buttonColorOptions\\\"\\n                                              :isInherited=\\\"props.isInherited\\\"\\n                                              :disabled=\\\"props.isInherited || renderSettingsDisabled\\\"\\n                                              :value=\\\"props.currentValue\\\"\\n                                              {% if VUE3 %}\\n                                              @update:value=\\\"props.updateCurrentValue\\\"\\n                                              {% else %}\\n                                              @change=\\\"props.updateCurrentValue\\\"\\n                                              {% endif %}>\\n                            </sw-single-select>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_express_settings_button_shape %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.ecsButtonShape']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.ecsButtonShape']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.ecsButtonShape']\\\"\\n                        :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\"\\n                        :label=\\\"$tc('swag-paypal.settingForm.express.ecsButtonShape.label')\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-single-select name=\\\"SwagPayPal.settings.ecsButtonShape\\\"\\n                                              labelProperty=\\\"name\\\"\\n                                              valueProperty=\\\"id\\\"\\n                                              :options=\\\"buttonShapeOptions\\\"\\n                                              :isInherited=\\\"props.isInherited\\\"\\n                                              :disabled=\\\"props.isInherited || renderSettingsDisabled\\\"\\n                                              :value=\\\"props.currentValue\\\"\\n                                              {% if VUE3 %}\\n                                              @update:value=\\\"props.updateCurrentValue\\\"\\n                                              {% else %}\\n                                              @change=\\\"props.updateCurrentValue\\\"\\n                                              {% endif %}>\\n                            </sw-single-select>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_express_settings_button_locale %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.ecsButtonLanguageIso']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.ecsButtonLanguageIso']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.ecsButtonLanguageIso']\\\"\\n                        :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <swag-paypal-locale-field name=\\\"SwagPayPal.settings.ecsButtonLanguageIso\\\"\\n                                                    :mapInheritance=\\\"props\\\"\\n                                                    :label=\\\"$tc('swag-paypal.settingForm.express.ecsButtonLanguageIso.label')\\\"\\n                                                    :helpText=\\\"$tc('swag-paypal.settingForm.express.ecsButtonLanguageIso.helpText')\\\"\\n                                                    :disabled=\\\"props.isInherited || renderSettingsDisabled\\\"\\n                                                    :value=\\\"props.currentValue\\\"\\n                                                    {% if VUE3 %}\\n                                                    @update:value=\\\"props.updateCurrentValue\\\"\\n                                                    {% else %}\\n                                                    @change=\\\"props.updateCurrentValue\\\"\\n                                                    {% endif %}\\n                                                    @preventSave=\\\"preventSave\\\">\\n                            </swag-paypal-locale-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_express_settings_show_pay_later %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.ecsShowPayLater']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.ecsShowPayLater']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.ecsShowPayLater']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.ecsShowPayLater\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.express.ecsShowPayLater.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.express.ecsShowPayLater.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || renderSettingsDisabled\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './swag-paypal-installment.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-installment', {\n    template,\n\n    inject: [\n        'acl',\n    ],\n\n    props: {\n        actualConfigData: {\n            type: Object,\n            required: true,\n            default: () => { return {}; },\n        },\n        allConfigs: {\n            type: Object,\n            required: true,\n        },\n        selectedSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    methods: {\n        checkTextFieldInheritance(value) {\n            if (typeof value !== 'string') {\n                return true;\n            }\n\n            return value.length <= 0;\n        },\n\n        checkBoolFieldInheritance(value) {\n            return typeof value !== 'boolean';\n        },\n    },\n});\n","export default \"{% block swag_paypal_content_card_channel_config_installment %}\\n    <sw-card position-identifier=\\\"swag-paypal-card-channel-config-installment\\\"\\n             :title=\\\"$tc('swag-paypal.settingForm.installment.cardTitle')\\\"\\n             :subtitle=\\\"$tc('swag-paypal.settingForm.installment.cardSubtitle')\\\">\\n\\n        {% block swag_paypal_content_card_channel_config_installment_settings %}\\n            <div v-if=\\\"actualConfigData\\\" class=\\\"swag-paypal-settings-installment-fields\\\">\\n\\n                {# @deprecated tag:v8.0.0 - will be removed #}\\n                {% block swag_paypal_content_card_channel_config_installment_settings_checkout_enabled %}\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_installment_settings_detail_page_enabled %}\\n                    <sw-inherit-wrapper\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.installmentBannerDetailPageEnabled']\\\"\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.installmentBannerDetailPageEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.installmentBannerDetailPageEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.installment.installmentBannerEnabled.detailPage.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.installment.installmentBannerEnabled.detailPage.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_installment_settings_cart_enabled %}\\n                    <sw-inherit-wrapper\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.installmentBannerCartEnabled']\\\"\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.installmentBannerCartEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.installmentBannerCartEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.installment.installmentBannerEnabled.cart.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.installment.installmentBannerEnabled.cart.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_installment_settings_off_canvas_cart_enabled %}\\n                    <sw-inherit-wrapper\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.installmentBannerOffCanvasCartEnabled']\\\"\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.installmentBannerOffCanvasCartEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.installmentBannerOffCanvasCartEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.installment.installmentBannerEnabled.offCanvasCart.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.installment.installmentBannerEnabled.offCanvasCart.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             @change=\\\"props.updateCurrentValue\\\">\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_installment_settings_login_page_enabled %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.installmentBannerEnabled']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.installmentBannerLoginPageEnabled']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.installmentBannerLoginPageEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.installmentBannerLoginPageEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.installment.installmentBannerEnabled.loginPage.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.installment.installmentBannerEnabled.loginPage.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             @change=\\\"props.updateCurrentValue\\\">\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_installment_settings_footer_enabled %}\\n                    <sw-inherit-wrapper\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.installmentBannerFooterEnabled']\\\"\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.installmentBannerFooterEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.installmentBannerFooterEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.installment.installmentBannerEnabled.footer.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.installment.installmentBannerEnabled.footer.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             @change=\\\"props.updateCurrentValue\\\">\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n            </div>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './swag-paypal-plus.html.twig';\nimport './swag-paypal-plus.scss';\n\nconst { Component } = Shopware;\n\n/**\n * @deprecated tag:v8.0.0 - Will be removed without replacement.\n */\nComponent.register('swag-paypal-plus', {\n    template,\n\n    inject: [\n        'acl',\n    ],\n\n    props: {\n        actualConfigData: {\n            type: Object,\n            required: true,\n            default: () => { return {}; },\n        },\n        allConfigs: {\n            type: Object,\n            required: true,\n        },\n        selectedSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    computed: {\n        isPayPalPLUSActive() {\n            return this.actualConfigData['SwagPayPal.settings.plusCheckoutEnabled'];\n        },\n\n        isPayPalPLUSInActive() {\n            return !this.isPayPalPLUSActive;\n        },\n    },\n\n    methods: {\n        checkTextFieldInheritance(value) {\n            if (typeof value !== 'string') {\n                return true;\n            }\n\n            return value.length <= 0;\n        },\n\n        checkBoolFieldInheritance(value) {\n            return typeof value !== 'boolean';\n        },\n\n        ifItWasNotActive() {\n            return !this.actualConfigData['SwagPayPal.settings.plusCheckoutEnabled'];\n        },\n    },\n});\n","export default \"{# @deprecated tag:v8.0.0 - Will be removed without replacement #}\\n{% block swag_paypal_content_card_channel_config_plus %}\\n    <sw-card position-identifier=\\\"swag-paypal-card-channel-config-plus\\\"\\n             :title=\\\"$tc('swag-paypal.settingForm.plus.cardTitle')\\\">\\n\\n        {# @deprecated tag:v8.0.0 - Will be removed without replacement #}\\n        {% block swag_paypal_content_card_channel_config_plus_settings %}\\n            <div v-if=\\\"actualConfigData\\\" class=\\\"swag-paypal-settings-plus-fields\\\">\\n\\n                {# @deprecated tag:v8.0.0 - Will be removed without replacement #}\\n                {% block swag_paypal_content_card_channel_config_plus_settings_warning %}\\n                <template v-if=\\\"isPayPalPLUSActive\\\">\\n                    <sw-alert\\n                        variant=\\\"warning\\\"\\n                    >\\n                        <span v-html=\\\"$tc('swag-paypal.settingForm.plus.warning.active')\\\"></span>\\n                    </sw-alert>\\n                </template>\\n\\n                <template v-if=\\\"isPayPalPLUSInActive\\\">\\n                    <sw-alert\\n                        variant=\\\"info\\\"\\n                    >\\n                        <span v-html=\\\"$tc('swag-paypal.settingForm.plus.warning.inactive')\\\"></span>\\n                    </sw-alert>\\n                </template>\\n                {% endblock %}\\n\\n                {# @deprecated tag:v8.0.0 - Will be removed without replacement #}\\n                {% block swag_paypal_content_card_channel_config_plus_settings_onboarding %}\\n                    <p v-bind:class=\\\"{ 'swag-paypal-payal-plus-disabled': isPayPalPLUSInActive}\\\"\\n                       v-html=\\\"$tc('swag-paypal.settingForm.plus.introduction')\\\"></p>\\n                {% endblock %}\\n\\n                {# @deprecated tag:v8.0.0 - Will be removed without replacement #}\\n                {% block swag_paypal_content_card_channel_config_plus_settings_checkout_enabled %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.plusCheckoutEnabled']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.plusCheckoutEnabled']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.plusCheckoutEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.plusCheckoutEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.plus.plusCheckoutEnabled.label')\\\"\\n                                             :disabled=\\\"ifItWasNotActive() || props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             {% if VUE3 %}\\n                                             @update:value=\\\"props.updateCurrentValue\\\"\\n                                             {% else %}\\n                                             @change=\\\"props.updateCurrentValue\\\"\\n                                             {% endif %}>\\n                            </sw-switch-field>\\n\\n                            {# @deprecated tag:v8.0.0 - Will be removed without replacement #}\\n                            {% block swag_paypal_content_card_channel_config_behaviour_settings_intent_hint %}\\n                                <swag-paypal-settings-hint :hintText=\\\"$tc('swag-paypal.settingForm.plus.hint')\\\">\\n                                </swag-paypal-settings-hint>\\n                            {% endblock %}\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './swag-paypal-pui.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pui', {\n    template,\n\n    inject: [\n        'acl',\n    ],\n\n    props: {\n        actualConfigData: {\n            type: Object,\n            required: true,\n            default: () => { return {}; },\n        },\n        allConfigs: {\n            type: Object,\n            required: true,\n        },\n        selectedSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    methods: {\n        checkTextFieldInheritance(value) {\n            if (typeof value !== 'string') {\n                return true;\n            }\n\n            return value.length <= 0;\n        },\n    },\n});\n","export default \"{% block swag_paypal_content_card_channel_config_pui %}\\n    <sw-card position-identifier=\\\"swag-paypal-card-channel-config-pui\\\"\\n             :title=\\\"$tc('swag-paypal.settingForm.pui.cardTitle')\\\">\\n\\n        {% block swag_paypal_content_card_channel_config_pui_settings %}\\n            <div v-if=\\\"actualConfigData\\\" class=\\\"swag-paypal-settings-pui-fields\\\">\\n\\n                {% block swag_paypal_content_card_channel_config_pui_settings_customer_service_instructions %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.puiCustomerServiceInstructions']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.puiCustomerServiceInstructions']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.puiCustomerServiceInstructions']\\\"\\n                        :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-text-field name=\\\"SwagPayPal.settings.spbButtonLanguageIso\\\"\\n                                           :mapInheritance=\\\"props\\\"\\n                                           :label=\\\"$tc('swag-paypal.settingForm.pui.customerServiceInstructions.label')\\\"\\n                                           :helpText=\\\"$tc('swag-paypal.settingForm.pui.customerServiceInstructions.helpText')\\\"\\n                                           :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                           :value=\\\"props.currentValue\\\"\\n                                           {% if VUE3 %}\\n                                           @update:value=\\\"props.updateCurrentValue\\\"\\n                                           {% else %}\\n                                           @change=\\\"props.updateCurrentValue\\\"\\n                                           {% endif %}>\\n                            </sw-text-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './swag-paypal-settings-icon.html.twig';\nimport './swag-paypal-settings-icon.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-settings-icon', {\n    template,\n});\n","export default \"{% block swag_paypal_settings_icon %}\\n    <icons-paypal-multicolor class=\\\"swag-paypal-settings-icon\\\"></icons-paypal-multicolor>\\n{% endblock %}\\n\";","import template from './swag-paypal-spb.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-spb', {\n    template,\n\n    inject: [\n        'acl',\n    ],\n\n    props: {\n        actualConfigData: {\n            type: Object,\n            required: true,\n            default: () => { return {}; },\n        },\n        allConfigs: {\n            type: Object,\n            required: true,\n        },\n        selectedSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    computed: {\n        buttonColorOptions() {\n            return [\n                {\n                    id: 'blue',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonColor.options.blue'),\n                },\n                {\n                    id: 'black',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonColor.options.black'),\n                },\n                {\n                    id: 'gold',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonColor.options.gold'),\n                },\n                {\n                    id: 'silver',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonColor.options.silver'),\n                },\n                {\n                    id: 'white',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonColor.options.white'),\n                },\n            ];\n        },\n        buttonShapeOptions() {\n            return [\n                {\n                    id: 'pill',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonShape.options.pill'),\n                },\n                {\n                    id: 'rect',\n                    name: this.$tc('swag-paypal.settingForm.express.ecsButtonShape.options.rect'),\n                },\n            ];\n        },\n\n        renderSettingsDisabled() {\n            return !this.acl.can('swag_paypal.editor') || !this.actualConfigData['SwagPayPal.settings.spbCheckoutEnabled'];\n        },\n    },\n\n    methods: {\n        checkTextFieldInheritance(value) {\n            if (typeof value !== 'string') {\n                return true;\n            }\n\n            return value.length <= 0;\n        },\n\n        checkBoolFieldInheritance(value) {\n            return typeof value !== 'boolean';\n        },\n\n        preventSave(mode) {\n            this.$emit('preventSave', mode);\n        },\n    },\n});\n","export default \"{% block swag_paypal_content_card_channel_config_spb %}\\n    <sw-card position-identifier=\\\"swag-paypal-card-channel-config-spb\\\"\\n             :title=\\\"$tc('swag-paypal.settingForm.spb.cardTitle')\\\">\\n\\n        {% block swag_paypal_content_card_channel_config_spb_settings %}\\n            <div v-if=\\\"actualConfigData\\\" class=\\\"swag-paypal-settings-spb-fields\\\">\\n\\n                {% block swag_paypal_content_card_channel_config_spb_settings_checkout_enabled %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.spbCheckoutEnabled']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.spbCheckoutEnabled']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.spbCheckoutEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.spbCheckoutEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.spb.spbCheckoutEnabled.label')\\\"\\n                                             :disabled=\\\"props.isInherited || !acl.can('swag_paypal.editor')\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             @change=\\\"props.updateCurrentValue\\\">\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_spb_settings_alternaitve_payment_methods_enabled %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.spbAlternativePaymentMethodsEnabled']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.spbAlternativePaymentMethodsEnabled']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.spbAlternativePaymentMethodsEnabled']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.spbAlternativePaymentMethodsEnabled\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.spb.spbAlternativePaymentMethodsEnabled.label')\\\"\\n                                             :helpText=\\\"$tc('swag-paypal.settingForm.spb.spbAlternativePaymentMethodsEnabled.helpText')\\\"\\n                                             :disabled=\\\"props.isInherited || renderSettingsDisabled\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             @change=\\\"props.updateCurrentValue\\\">\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_spb_settings_show_pay_later %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.spbShowPayLater']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.spbShowPayLater']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.spbShowPayLater']\\\"\\n                        :customInheritationCheckFunction=\\\"checkBoolFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-switch-field name=\\\"SwagPayPal.settings.spbShowPayLater\\\"\\n                                             bordered\\n                                             :mapInheritance=\\\"props\\\"\\n                                             :label=\\\"$tc('swag-paypal.settingForm.spb.spbShowPayLater.label')\\\"\\n                                             :disabled=\\\"props.isInherited || renderSettingsDisabled\\\"\\n                                             :value=\\\"props.currentValue\\\"\\n                                             @change=\\\"props.updateCurrentValue\\\">\\n                            </sw-switch-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_spb_settings_button_color %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.spbButtonColor']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.spbButtonColor']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.spbButtonColor']\\\"\\n                        :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\"\\n                        :label=\\\"$tc('swag-paypal.settingForm.express.ecsButtonColor.label')\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-single-select name=\\\"SwagPayPal.settings.spbButtonColor\\\"\\n                                              labelProperty=\\\"name\\\"\\n                                              valueProperty=\\\"id\\\"\\n                                              :options=\\\"buttonColorOptions\\\"\\n                                              :isInherited=\\\"props.isInherited\\\"\\n                                              :disabled=\\\"props.isInherited || renderSettingsDisabled\\\"\\n                                              :value=\\\"props.currentValue\\\"\\n                                              @change=\\\"props.updateCurrentValue\\\">\\n                            </sw-single-select>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_spb_settings_button_shape %}\\n                    <sw-inherit-wrapper\\n                        {% if VUE3 %}\\n                        v-model:value=\\\"actualConfigData['SwagPayPal.settings.spbButtonShape']\\\"\\n                        {% else %}\\n                        v-model=\\\"actualConfigData['SwagPayPal.settings.spbButtonShape']\\\"\\n                        {% endif %}\\n                        :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.spbButtonShape']\\\"\\n                        :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\"\\n                        :label=\\\"$tc('swag-paypal.settingForm.express.ecsButtonShape.label')\\\">\\n                        <template #content=\\\"props\\\">\\n                            <sw-single-select name=\\\"SwagPayPal.settings.spbButtonShape\\\"\\n                                              labelProperty=\\\"name\\\"\\n                                              valueProperty=\\\"id\\\"\\n                                              :options=\\\"buttonShapeOptions\\\"\\n                                              :isInherited=\\\"props.isInherited\\\"\\n                                              :disabled=\\\"props.isInherited || renderSettingsDisabled\\\"\\n                                              :value=\\\"props.currentValue\\\"\\n                                              @change=\\\"props.updateCurrentValue\\\">\\n                            </sw-single-select>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n\\n                {% block swag_paypal_content_card_channel_config_spb_settings_locale %}\\n                    <sw-inherit-wrapper\\n                            {% if VUE3 %}\\n                            v-model:value=\\\"actualConfigData['SwagPayPal.settings.spbButtonLanguageIso']\\\"\\n                            {% else %}\\n                            v-model=\\\"actualConfigData['SwagPayPal.settings.spbButtonLanguageIso']\\\"\\n                            {% endif %}\\n                            :inheritedValue=\\\"selectedSalesChannelId == null ? null : allConfigs['null']['SwagPayPal.settings.spbButtonLanguageIso']\\\"\\n                            :customInheritationCheckFunction=\\\"checkTextFieldInheritance\\\">\\n                        <template #content=\\\"props\\\">\\n                            <swag-paypal-locale-field name=\\\"SwagPayPal.settings.spbButtonLanguageIso\\\"\\n                                                    :mapInheritance=\\\"props\\\"\\n                                                    :label=\\\"$tc('swag-paypal.settingForm.spb.spbButtonLanguageIso.label')\\\"\\n                                                    :helpText=\\\"$tc('swag-paypal.settingForm.spb.spbButtonLanguageIso.helpText')\\\"\\n                                                    :disabled=\\\"props.isInherited || renderSettingsDisabled\\\"\\n                                                    :value=\\\"props.currentValue\\\"\\n                                                    @change=\\\"props.updateCurrentValue\\\"\\n                                                    @preventSave=\\\"preventSave\\\">\\n                            </swag-paypal-locale-field>\\n                        </template>\\n                    </sw-inherit-wrapper>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './sw-plugin-box-with-onboarding.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.extend('swag-paypal-plugin-box-with-onboarding', 'sw-plugin-box', {\n    template,\n\n    props: {\n        paymentMethod: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    methods: {\n        createdComponent() {\n            this.$super('createdComponent');\n        },\n    },\n});\n","export default \"{% block sw_plugin_box_container_button %}\\n<template>\\n    {% block swag_paypal_plugin_box_with_button_link_to_extension %}\\n        <sw-button\\n            variant=\\\"ghost\\\"\\n            size=\\\"small\\\"\\n            class=\\\"sw-plugin-box__button\\\"\\n            :router-link=\\\"{ path: '/swag/paypal/index' }\\\"\\n        >\\n            {{ $tc('sw-plugin-box.buttonPluginSettings') }}\\n        </sw-button>\\n    {% endblock %}\\n</template>\\n{% endblock %}\\n\";","export default \"{% block sw_text_field %}\\n    {% block swag_paypal_locale_field %}\\n        <div class=\\\"swag-paypal-locale-field\\\">\\n\\n            {% block swag_paypal_locale_field_contextual_field %}\\n                <sw-contextual-field class=\\\"sw-field--text\\\"\\n                                     v-bind=\\\"$attrs\\\"\\n                                     :name=\\\"formFieldName\\\"\\n                                     :error=\\\"error\\\"\\n                                     @inheritance-restore=\\\"$emit('inheritance-restore', $event)\\\"\\n                                     @inheritance-remove=\\\"$emit('inheritance-remove', $event)\\\"\\n                                     {% if VUE2 %}\\n                                     v-on=\\\"$listeners\\\"\\n                                     {% endif %}>\\n\\n                    <template #sw-field-input=\\\"{ identification, error, disabled, size, setFocusClass, removeFocusClass, hasSuffix, hasPrefix }\\\">\\n                        <input type=\\\"text\\\"\\n                               :name=\\\"identification\\\"\\n                               :id=\\\"identification\\\"\\n                               :disabled=\\\"disabled\\\"\\n                               :value=\\\"currentValue\\\"\\n                               :placeHolder=\\\"placeholder\\\"\\n                               @input=\\\"onInput\\\"\\n                               @focus=\\\"setFocusClass\\\"\\n                               @blur=\\\"onBlur($event, removeFocusClass)\\\"\\n                               v-on=\\\"additionalListeners\\\">\\n                    </template>\\n                </sw-contextual-field>\\n            {% endblock %}\\n\\n            {% block swag_paypal_locale_field_information %}\\n                <p class=\\\"swag-paypal-locale-field__text\\\">\\n\\n                    {% block swag_paypal_locale_field_information_text %}\\n                        {{ $tc('swag-paypal.settingForm.locale-field.infobox.text') }}\\n                    {% endblock %}\\n\\n                    {% block swag_paypal_locale_field_information_href %}\\n                        <sw-external-link class=\\\"swag-paypal-locale-field__text-href\\\"\\n                                          href=\\\"https://developer.paypal.com/docs/api/reference/locale-codes/\\\">\\n                            {{ $tc('swag-paypal.settingForm.locale-field.infobox.href') }}\\n                        </sw-external-link>\\n                    {% endblock %}\\n\\n                </p>\\n            {% endblock %}\\n\\n        </div>\\n    {% endblock %}\\n\\n{% endblock %}\\n\";","import template from './swag-paypal-locale-field.html.twig';\nimport './swag-paypal-locale-field.scss';\n\nconst { Component } = Shopware;\nconst { debounce } = Shopware.Utils;\n\nComponent.extend('swag-paypal-locale-field', 'sw-text-field', {\n    template,\n\n    inject: ['feature'],\n\n    data() {\n        return {\n            error: null,\n        };\n    },\n\n    methods: {\n        onInput: debounce(function onInput(event) {\n            this.checkValue(event.target.value);\n        }, 350),\n\n        onBlur(event, removeFocusClass) {\n            removeFocusClass();\n            this.checkValue(event.target.value);\n        },\n\n        checkValue(value) {\n            const localeCodeRegex = /^[a-z]{2}_[A-Z]{2}$/;\n\n            if (this.feature.isActive('VUE3')) {\n                this.$emit('update:value', value || '');\n            } else {\n                this.$emit('change', value || '');\n            }\n\n\n            if (!value || localeCodeRegex.exec(value)) {\n                this.preventSave(false);\n                this.error = null;\n                return;\n            }\n\n            this.preventSave(true);\n            this.error = {\n                code: 1,\n                detail: this.$tc('swag-paypal.settingForm.locale-field.error.detail'),\n            };\n        },\n\n        preventSave(mode) {\n            this.$emit('preventSave', mode);\n        },\n    },\n});\n","import './acl';\nimport './page/swag-paypal';\nimport './components/swag-paypal-settings-hint';\nimport './components/swag-paypal-acdc';\nimport './components/swag-paypal-behavior';\nimport './components/swag-paypal-checkout';\nimport './components/swag-paypal-checkout-method';\nimport './components/swag-paypal-created-component-helper';\nimport './components/swag-paypal-credentials';\nimport './components/swag-paypal-express';\nimport './components/swag-paypal-installment';\nimport './components/swag-paypal-plus';\nimport './components/swag-paypal-pui';\nimport './components/swag-paypal-settings-icon';\nimport './components/swag-paypal-spb';\nimport './components/swag-paypal-plugin-box-with-onboarding';\nimport './components/swag-paypal-locale-field';\n\nconst { Module } = Shopware;\n\nModule.register('swag-paypal', {\n    type: 'plugin',\n    name: 'SwagPayPal',\n    title: 'swag-paypal.general.mainMenuItemGeneral',\n    description: 'swag-paypal.general.descriptionTextModule',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n    color: '#9AA8B5',\n    icon: 'regular-cog',\n\n    routes: {\n        index: {\n            component: 'swag-paypal',\n            path: ':tab?',\n            meta: {\n                parentPath: 'sw.settings.index',\n                privilege: 'swag_paypal.viewer',\n            },\n        },\n    },\n\n    settingsItem: {\n        group: 'plugins',\n        to: 'swag.paypal.index',\n        iconComponent: 'swag-paypal-settings-icon',\n        backgroundEnabled: true,\n        privilege: 'swag_paypal.viewer',\n    },\n});\n","export default \"{% block swag_paypal_payment_actions %}\\n    <div>\\n        <div class=\\\"swag-paypal-payment-actions__button-container\\\">\\n            <div class=\\\"swag-paypal-payment-actions__authorize-button-group\\\">\\n\\n                {% block swag_paypal_payment_actions_void %}\\n                    <sw-button v-if=\\\"showVoidButton\\\"\\n                               size=\\\"small\\\"\\n                               :disabled=\\\"!acl.can('order.editor')\\\"\\n                               @click=\\\"spawnModal('void')\\\">\\n                        {{ $tc('swag-paypal-payment.buttons.label.void') }}\\n                    </sw-button>\\n                {% endblock %}\\n\\n                {% block swag_paypal_payment_actions_capture %}\\n                    <sw-button v-if=\\\"captureableAmount > 0\\\"\\n                               size=\\\"small\\\"\\n                               :disabled=\\\"!acl.can('order.editor')\\\"\\n                               @click=\\\"spawnModal('capture')\\\">\\n                        {{ $tc('swag-paypal-payment.buttons.label.capture') }}\\n                    </sw-button>\\n                {% endblock %}\\n            </div>\\n\\n            {% block swag_paypal_payment_actions_refund %}\\n                <sw-button variant=\\\"primary\\\"\\n                           size=\\\"small\\\"\\n                           :disabled=\\\"refundableAmount <= 0 || !acl.can('order.editor')\\\"\\n                           @click=\\\"spawnModal('refund')\\\">\\n                    {{ $tc('swag-paypal-payment.buttons.label.refund') }}\\n                </sw-button>\\n            {% endblock %}\\n\\n        </div>\\n\\n        {% block swag_paypal_payment_actions_modal %}\\n                {% block swag_paypal_payment_actions_modal_capture %}\\n                    <swag-paypal-payment-action-capture v-if=\\\"modalType === 'capture'\\\"\\n                                                        :orderId=\\\"orderId\\\"\\n                                                        :paymentResource=\\\"paymentResource\\\"\\n                                                        :maxCaptureValue=\\\"captureableAmount\\\"\\n                                                        @modal-close=\\\"closeModal\\\">\\n                    </swag-paypal-payment-action-capture>\\n                {% endblock %}\\n\\n                {% block swag_paypal_payment_actions_modal_refund %}\\n                    <swag-paypal-payment-action-refund v-if=\\\"modalType === 'refund'\\\"\\n                                                       :orderId=\\\"orderId\\\"\\n                                                       :paymentResource=\\\"paymentResource\\\"\\n                                                       @modal-close=\\\"closeModal\\\">\\n                    </swag-paypal-payment-action-refund>\\n                {% endblock %}\\n\\n                {% block swag_paypal_payment_actions_modal_void %}\\n                    <swag-paypal-payment-action-void v-if=\\\"modalType === 'void'\\\"\\n                                                     :orderId=\\\"orderId\\\"\\n                                                     :paymentResource=\\\"paymentResource\\\"\\n                                                     @modal-close=\\\"closeModal\\\">\\n                    </swag-paypal-payment-action-void>\\n                {% endblock %}\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-payment-action-capture.html.twig';\n\nconst { Component } = Shopware;\nconst utils = Shopware.Utils;\n\nComponent.register('swag-paypal-payment-action-capture', {\n    template,\n\n    inject: ['SwagPayPalPaymentService'],\n\n    mixins: [\n        'notification',\n    ],\n\n    props: {\n        paymentResource: {\n            type: Object,\n            required: true,\n        },\n\n        maxCaptureValue: {\n            type: Number,\n            required: true,\n        },\n\n        orderId: {\n            type: String,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            isFinalCapture: true,\n            captureValue: this.maxCaptureValue,\n            isLoading: true,\n            currency: this.paymentResource.transactions[0].amount.currency,\n        };\n    },\n\n    computed: {\n        showHint() {\n            return this.isFinalCapture && this.captureValue !== this.maxCaptureValue;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.isLoading = false;\n        },\n\n        capture() {\n            const captureAmount = this.captureValue;\n            const currency = this.currency;\n            const isFinalCapture = this.isFinalCapture;\n            const resourceType = this.paymentResource.intent;\n            const resourceId = this.getResourceId(this.paymentResource);\n\n            this.isLoading = true;\n            this.SwagPayPalPaymentService.capturePayment(\n                this.orderId,\n                resourceType,\n                resourceId,\n                captureAmount,\n                currency,\n                isFinalCapture,\n            ).then(() => {\n                this.createNotificationSuccess({\n                    message: this.$tc('swag-paypal-payment.captureAction.successMessage'),\n                });\n                this.isLoading = false;\n                this.$emit('modal-close');\n                this.$nextTick(() => {\n                    this.$router.replace(`${this.$route.path}?hash=${utils.createId()}`);\n                });\n            }).catch((errorResponse) => {\n                try {\n                    this.createNotificationError({\n                        message: `${errorResponse.response.data.errors[0].title}: ${\n                            errorResponse.response.data.errors[0].detail}`,\n                        autoClose: false,\n                    });\n                } catch (e) {\n                    this.createNotificationError({\n                        message: `${errorResponse.title}: ${errorResponse.message}`,\n                        autoClose: false,\n                    });\n                } finally {\n                    this.isLoading = false;\n                }\n            });\n        },\n\n        getResourceId(paymentResource) {\n            let relatedResourceId = null;\n            paymentResource.transactions[0].related_resources.forEach((relatedResource) => {\n                if (relatedResource.authorization) {\n                    relatedResourceId = relatedResource.authorization.id;\n                }\n                if (relatedResource.order) {\n                    relatedResourceId = relatedResource.order.id;\n                }\n            });\n            return relatedResourceId;\n        },\n    },\n});\n","export default \"{% block swag_paypal_payment_action_capture %}\\n    <sw-modal variant=\\\"small\\\"\\n              :title=\\\"$tc(`swag-paypal-payment.modal.title.capture`)\\\"\\n              @modal-close=\\\"$emit('modal-close')\\\">\\n\\n        {% block swag_paypal_payment_action_capture_max_amount %}\\n            <sw-text-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"maxCaptureValue\\\"\\n                    {% else %}\\n                    v-model=\\\"maxCaptureValue\\\"\\n                    {% endif %}\\n                    :label=\\\"$tc('swag-paypal-payment.captureAction.maxAmount')\\\"\\n                    :disabled=\\\"true\\\">\\n            </sw-text-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_capture_value %}\\n            <sw-number-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"captureValue\\\"\\n                    {% else %}\\n                    v-model=\\\"captureValue\\\"\\n                    {% endif %}\\n                    :max=\\\"maxCaptureValue\\\"\\n                    :min=\\\"0\\\"\\n                    :label=\\\"$tc('swag-paypal-payment.captureAction.currentAmount')\\\">\\n                <template #suffix>\\n                    {{ currency }}\\n                </template>\\n            </sw-number-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_capture_is_final_capture %}\\n            <sw-checkbox-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"isFinalCapture\\\"\\n                    {% else %}\\n                    v-model=\\\"isFinalCapture\\\"\\n                    {% endif %}\\n                    :label=\\\"$tc('swag-paypal-payment.captureAction.isFinal')\\\">\\n            </sw-checkbox-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_capture_hint %}\\n            <sw-alert v-if=\\\"showHint\\\">\\n                {{ $tc('swag-paypal-payment.captureAction.isFinalHint') }}\\n            </sw-alert>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_capture_submit_button %}\\n            <template #modal-footer>\\n                <sw-button variant=\\\"primary\\\"\\n                           @click=\\\"capture\\\">\\n                    {{ $tc('swag-paypal-payment.captureAction.button.text') }}\\n                </sw-button>\\n            </template>\\n        {% endblock %}\\n\\n        <sw-loader v-if=\\\"isLoading\\\"></sw-loader>\\n    </sw-modal>\\n{% endblock %}\\n\";","export default \"{% block swag_paypal_payment_action_refund %}\\n    <sw-modal variant=\\\"small\\\"\\n              :title=\\\"$tc(`swag-paypal-payment.modal.title.refund`)\\\"\\n              @modal-close=\\\"$emit('modal-close')\\\">\\n\\n        {% block swag_paypal_payment_action_refund_invoice_select %}\\n            <sw-select-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"selectedCaptureId\\\"\\n                    {% else %}\\n                    v-model=\\\"selectedCaptureId\\\"\\n                    {% endif %}\\n                    :label=\\\"$tc('swag-paypal-payment.refundAction.invoiceSelect.label')\\\"\\n                    {% if VUE3 %}\\n                    @update:value=\\\"preserveCapture\\\"\\n                    {% else %}\\n                    @change=\\\"preserveCapture\\\"\\n                    {% endif %}>\\n                <option v-for=\\\"capture in captures\\\"\\n                        :value=\\\"capture.id\\\">\\n                    {{ capture.label }}\\n                </option>\\n            </sw-select-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_refund_invoice_number %}\\n            <swag-paypal-text-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"refundInvoiceNumber\\\"\\n                    {% elseif %}\\n                    v-model=\\\"refundInvoiceNumber\\\"\\n                    {% endif %}\\n                    maxLength=\\\"127\\\"\\n                    :label=\\\"$tc('swag-paypal-payment.refundAction.refundInvoiceNumber.label')\\\"\\n                    :placeholder=\\\"$tc('swag-paypal-payment.refundAction.refundInvoiceNumber.placeholder')\\\">\\n            </swag-paypal-text-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_refund_reason %}\\n            <swag-paypal-text-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"refundReason\\\"\\n                    {% elseif %}\\n                    v-model=\\\"refundReason\\\"\\n                    {% endif %}\\n                    maxLength=\\\"30\\\"\\n                    :label=\\\"$tc('swag-paypal-payment.refundAction.refundReason.label')\\\"\\n                    :placeholder=\\\"$tc('swag-paypal-payment.refundAction.refundReason.placeholder')\\\">\\n            </swag-paypal-text-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_refund_amount %}\\n            <sw-number-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"refundAmount\\\"\\n                    {% else %}\\n                    v-model=\\\"refundAmount\\\"\\n                    {% endif %}\\n                    :max=\\\"refundableAmount\\\"\\n                    :min=\\\"0\\\"\\n                    :label=\\\"$tc('swag-paypal-payment.refundAction.refundAmount.label')\\\"\\n                    :helpText=\\\"$tc('swag-paypal-payment.refundAction.refundAmount.helpText')\\\">\\n                <template #suffix>\\n                    {{ selectedCapture.currency }}\\n                </template>\\n            </sw-number-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_refund_description %}\\n            <sw-textarea-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"refundDescription\\\"\\n                    {% else %}\\n                    v-model=\\\"refundDescription\\\"\\n                    {% endif %}\\n                    :placeholder=\\\"$tc('swag-paypal-payment.refundAction.refundDescription.placeholder')\\\"\\n                    :label=\\\"$tc('swag-paypal-payment.refundAction.refundDescription.label')\\\">\\n            </sw-textarea-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_refund_confirm_button %}\\n            <template #modal-footer>\\n                <sw-button variant=\\\"primary\\\"\\n                           @click=\\\"refund\\\">\\n                    {{ $tc('swag-paypal-payment.refundAction.confirmButton.text') }}\\n                </sw-button>\\n            </template>\\n        {% endblock %}\\n\\n        <sw-loader v-if=\\\"isLoading\\\"></sw-loader>\\n    </sw-modal>\\n{% endblock %}\\n\";","export const REFUNDED_STATE = 'refunded';\nexport const VOIDED_STATE = 'voided';\nexport const CAPTURED_STATE = 'captured';\nexport const COMPLETED_STATE = 'completed';\nexport const CAPTURE_RESOURCE_TYPE = 'capture';\nexport const SALE_RESOURCE_TYPE = 'sale';\nexport const FAILED_STATE = 'failed';\nexport const DENIED_STATE = 'denied';\nexport const CANCELLED_STATE = 'cancelled';\n\nexport default {\n    REFUNDED_STATE,\n    VOIDED_STATE,\n    CAPTURED_STATE,\n    COMPLETED_STATE,\n    CAPTURE_RESOURCE_TYPE,\n    SALE_RESOURCE_TYPE,\n    FAILED_STATE,\n    DENIED_STATE,\n    CANCELLED_STATE,\n};\n","import template from './swag-paypal-payment-action-refund.html.twig';\nimport {\n    REFUNDED_STATE,\n    SALE_RESOURCE_TYPE,\n    CAPTURE_RESOURCE_TYPE,\n} from '../../swag-paypal-payment-consts';\n\nconst { Component, Filter } = Shopware;\nconst utils = Shopware.Utils;\n\nComponent.register('swag-paypal-payment-action-refund', {\n    template,\n\n    inject: ['SwagPayPalPaymentService'],\n\n    mixins: [\n        'notification',\n    ],\n\n    props: {\n        paymentResource: {\n            type: Object,\n            required: true,\n        },\n\n        orderId: {\n            type: String,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            captures: [],\n            selectedCapture: {},\n            existingRefunds: [],\n            refundAmount: 0,\n            refundableAmount: 0,\n            refundDescription: '',\n            refundReason: '',\n            refundInvoiceNumber: '',\n            isLoading: true,\n            selectedCaptureId: '',\n        };\n    },\n\n    computed: {\n        dateFilter() {\n            return Filter.getByName('date');\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.getRefundableCaptures();\n            this.mapRefunds();\n            this.selectedCaptureId = this.captures[0].id;\n            this.isLoading = false;\n            this.preserveCapture();\n            this.refundAmount = Number(this.captures[0].refundableAmount);\n        },\n\n        getRefundableCaptures() {\n            const relatedResources = this.paymentResource.transactions[0].related_resources;\n\n            this.captures = relatedResources.reduce((accumulator, relatedResource) => {\n                if (relatedResource.sale) {\n                    const sale = relatedResource.sale;\n\n                    if (sale.state !== REFUNDED_STATE) {\n                        accumulator.push(this.formatCapture(sale, SALE_RESOURCE_TYPE));\n                    }\n                }\n\n                if (relatedResource.capture) {\n                    const capture = relatedResource.capture;\n\n                    if (capture.state !== REFUNDED_STATE) {\n                        accumulator.push(this.formatCapture(capture, CAPTURE_RESOURCE_TYPE));\n                    }\n                }\n\n                if (relatedResource.refund) {\n                    this.existingRefunds.push(relatedResource.refund);\n                }\n\n                return accumulator;\n            }, this.captures);\n        },\n\n        formatCapture(resource, resourceType) {\n            const createDate = this.dateFilter(resource.create_time);\n\n            return {\n                label: `${createDate} (${resource.amount.total} ${resource.amount.currency})` +\n                    ` - ${resource.id} [${resource.state}]`,\n                id: resource.id,\n                refundableAmount: resource.amount.total,\n                currency: resource.amount.currency,\n                type: resourceType,\n            };\n        },\n\n        mapRefunds() {\n            this.existingRefunds.forEach((refund) => {\n                const capture = this.captures.find((resource) => {\n                    switch (resource.type) {\n                        case CAPTURE_RESOURCE_TYPE:\n                            return (refund.capture_id === resource.id);\n                        case SALE_RESOURCE_TYPE:\n                            return (refund.sale_id === resource.id);\n                        default:\n                            return false;\n                    }\n                });\n\n                if (capture) {\n                    let refundAmount = Number(refund.amount.total);\n                    if (refundAmount < 0) {\n                        refundAmount *= -1.0;\n                    }\n                    capture.refundableAmount -= refundAmount;\n                }\n            });\n        },\n\n        preserveCapture() {\n            const capture = this.captures.find((selectedCapture) => {\n                return selectedCapture.id === this.selectedCaptureId;\n            });\n\n            this.selectedCapture = capture;\n            this.refundableAmount = Number(capture.refundableAmount);\n            this.refundAmount = Number(capture.refundableAmount);\n        },\n\n        refund() {\n            this.isLoading = true;\n\n            let refundAmount = this.refundAmount;\n            const description = this.refundDescription;\n            const currency = this.selectedCapture.currency;\n            const resourceType = this.selectedCapture.type;\n            const resourceId = this.selectedCapture.id;\n            const reason = this.refundReason;\n            const invoiceNumber = this.refundInvoiceNumber;\n\n            if (refundAmount === 0) {\n                refundAmount = this.refundableAmount;\n            }\n\n            this.SwagPayPalPaymentService.refundPayment(\n                this.orderId,\n                resourceType,\n                resourceId,\n                refundAmount,\n                currency,\n                description,\n                reason,\n                invoiceNumber,\n            ).then(() => {\n                this.createNotificationSuccess({\n                    message: this.$tc('swag-paypal-payment.refundAction.successMessage'),\n                });\n                this.isLoading = false;\n                this.$emit('modal-close');\n                this.$nextTick(() => {\n                    this.$router.replace(`${this.$route.path}?hash=${utils.createId()}`);\n                });\n            }).catch((errorResponse) => {\n                try {\n                    this.createNotificationError({\n                        message: `${errorResponse.response.data.errors[0].title}: ${\n                            errorResponse.response.data.errors[0].detail}`,\n                        autoClose: false,\n                    });\n                } catch (e) {\n                    this.createNotificationError({\n                        message: `${errorResponse.title}: ${errorResponse.message}`,\n                        autoClose: false,\n                    });\n                } finally {\n                    this.isLoading = false;\n                }\n            });\n        },\n    },\n});\n","export default \"{% block swag_paypal_paymemnt_action_void %}\\n    <sw-modal variant=\\\"small\\\"\\n              :title=\\\"$tc(`swag-paypal-payment.modal.title.void`)\\\"\\n              @modal-close=\\\"closeModal\\\">\\n\\n        {% block swag_paypal_paymemnt_action_void_headline %}\\n            <p>{{ $tc('swag-paypal-payment.voidAction.confirm.message') }}</p>\\n        {% endblock %}\\n\\n        <template #modal-footer>\\n\\n            {% block swag_paypal_paymemnt_action_void_cancel_button %}\\n                <sw-button @click=\\\"closeModal\\\">\\n                    {{ $tc('global.default.no') }}\\n                </sw-button>\\n            {% endblock %}\\n\\n            {% block swag_paypal_paymemnt_action_void_confirm_button %}\\n                <sw-button variant=\\\"primary\\\"\\n                           @click=\\\"voidPayment\\\">\\n                    {{ $tc('swag-paypal-payment.voidAction.confirm.button.confirm') }}\\n                </sw-button>\\n            {% endblock %}\\n\\n        </template>\\n\\n        <sw-loader v-if=\\\"isLoading\\\"\\n                   size=\\\"43px\\\">\\n        </sw-loader>\\n    </sw-modal>\\n{% endblock %}\\n\";","import template from './swag-paypal-payment-action-void.html.twig';\n\nconst { Component } = Shopware;\nconst utils = Shopware.Utils;\n\nComponent.register('swag-paypal-payment-action-void', {\n    template,\n\n    inject: ['SwagPayPalPaymentService'],\n\n    mixins: [\n        'notification',\n    ],\n\n    props: {\n        paymentResource: {\n            type: Object,\n            required: true,\n        },\n\n        orderId: {\n            type: String,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n        };\n    },\n\n    methods: {\n        voidPayment() {\n            this.isLoading = true;\n            const resourceType = this.paymentResource.intent;\n            const resourceId = this.getResourceId();\n            const orderId = this.$route.params.id;\n\n            this.SwagPayPalPaymentService.voidPayment(this.orderId, resourceType, resourceId, orderId).then(() => {\n                this.createNotificationSuccess({\n                    message: this.$tc('swag-paypal-payment.voidAction.successMessage'),\n                });\n                this.isLoading = false;\n                this.closeModal();\n                this.$nextTick(() => {\n                    this.$router.replace(`${this.$route.path}?hash=${utils.createId()}`);\n                });\n            }).catch((errorResponse) => {\n                try {\n                    this.createNotificationError({\n                        message: `${errorResponse.response.data.errors[0].title}: ${\n                            errorResponse.response.data.errors[0].detail}`,\n                        autoClose: false,\n                    });\n                } catch (e) {\n                    this.createNotificationError({\n                        message: `${errorResponse.title}: ${errorResponse.message}`,\n                        autoClose: false,\n                    });\n                } finally {\n                    this.isLoading = false;\n                }\n            });\n        },\n\n        getResourceId() {\n            const firstRelatedResource = this.paymentResource.transactions[0].related_resources[0];\n\n            if (firstRelatedResource.order) {\n                return firstRelatedResource.order.id;\n            }\n\n            return firstRelatedResource.authorization.id;\n        },\n\n        closeModal() {\n            this.$emit('modal-close');\n        },\n    },\n});\n","import template from './swag-paypal-payment-actions.html.twig';\nimport './swag-paypal-payment-actions.scss';\nimport './extensions/swag-paypal-payment-action-capture';\nimport './extensions/swag-paypal-payment-action-refund';\nimport './extensions/swag-paypal-payment-action-void';\nimport {\n    VOIDED_STATE,\n    CAPTURED_STATE,\n    COMPLETED_STATE,\n    CANCELLED_STATE,\n    FAILED_STATE,\n} from './swag-paypal-payment-consts';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-payment-actions', {\n    template,\n\n    inject: [\n        'acl',\n    ],\n\n    props: {\n        paymentResource: {\n            type: Object,\n            required: true,\n        },\n\n        orderId: {\n            type: String,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            modalType: '',\n            refundableAmount: 0,\n            captureableAmount: 0,\n            showVoidButton: false,\n            relatedResources: null,\n        };\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.relatedResources = this.paymentResource.transactions[0].related_resources;\n            this.setPaymentActionAmounts();\n            this.setShowVoidButton();\n            this.captureableAmount = this.formatAmount(this.captureableAmount);\n            this.refundableAmount = this.formatAmount(this.refundableAmount);\n        },\n\n        spawnModal(modalType) {\n            this.modalType = modalType;\n        },\n\n        closeModal() {\n            this.modalType = '';\n        },\n\n        setPaymentActionAmounts() {\n            if (this.relatedResources === null) {\n                return;\n            }\n\n            this.relatedResources.forEach((relatedResource) => {\n                if (relatedResource.authorization) {\n                    if (relatedResource.authorization.state !== COMPLETED_STATE) {\n                        this.captureableAmount += Number(relatedResource.authorization.amount.total);\n                    }\n                }\n\n                if (relatedResource.order) {\n                    if (relatedResource.order.state !== COMPLETED_STATE) {\n                        this.captureableAmount += Number(relatedResource.order.amount.total);\n                    }\n                }\n\n                if (relatedResource.sale) {\n                    this.refundableAmount += Number(relatedResource.sale.amount.total);\n                }\n\n                if (relatedResource.capture) {\n                    const captureAmount = Number(relatedResource.capture.amount.total);\n                    this.captureableAmount -= captureAmount;\n                    this.refundableAmount += captureAmount;\n                }\n\n                if (relatedResource.refund) {\n                    if (relatedResource.refund.state !== FAILED_STATE\n                        && relatedResource.refund.state !== CANCELLED_STATE\n                    ) {\n                        let refund = Number(relatedResource.refund.amount.total);\n                        if (refund > 0) {\n                            refund *= -1.0;\n                        }\n                        this.refundableAmount += refund;\n                    }\n                }\n            });\n        },\n\n        setShowVoidButton() {\n            if (this.relatedResources === null) {\n                return;\n            }\n\n            const firstRelatedResource = this.relatedResources[0];\n\n            if (!firstRelatedResource) {\n                return;\n            }\n\n            const nonVoidAbleStates = [VOIDED_STATE, CAPTURED_STATE, COMPLETED_STATE];\n\n            if (firstRelatedResource.sale) {\n                return;\n            }\n\n            if (firstRelatedResource.order) {\n                const order = firstRelatedResource.order;\n                if (nonVoidAbleStates.includes(order.state)) {\n                    this.captureableAmount = 0;\n                    return;\n                }\n\n                this.showVoidButton = true;\n            }\n\n            if (firstRelatedResource.authorization) {\n                const authorization = firstRelatedResource.authorization;\n                if (nonVoidAbleStates.includes(authorization.state)) {\n                    this.captureableAmount = 0;\n                    return;\n                }\n\n                this.showVoidButton = true;\n            }\n        },\n\n        formatAmount(value) {\n            return Number(`${Math.round(`${value}e2`)}e-2`);\n        },\n    },\n});\n","export default \"{% block swag_paypal_payment_actions_v2 %}\\n    <div>\\n        <div class=\\\"swag-paypal-payment-actions-v2__button-container\\\">\\n            <div>\\n                {% block swag_paypal_payment_actions_v2_void %}\\n                    <sw-button v-if=\\\"showVoidButton\\\"\\n                               size=\\\"small\\\"\\n                               :disabled=\\\"!acl.can('order.editor')\\\"\\n                               @click=\\\"spawnModal('void')\\\">\\n                        {{ $tc('swag-paypal-payment.buttons.label.void') }}\\n                    </sw-button>\\n                {% endblock %}\\n\\n                {% block swag_paypal_payment_actions_v2_capture %}\\n                    <sw-button v-if=\\\"captureableAmount > 0\\\"\\n                               size=\\\"small\\\"\\n                               :disabled=\\\"!acl.can('order.editor')\\\"\\n                               @click=\\\"spawnModal('capture')\\\">\\n                        {{ $tc('swag-paypal-payment.buttons.label.capture') }}\\n                    </sw-button>\\n                {% endblock %}\\n            </div>\\n\\n            {% block swag_paypal_payment_actions_v2_refund %}\\n                <sw-button variant=\\\"primary\\\"\\n                           size=\\\"small\\\"\\n                           :disabled=\\\"refundableAmount <= 0 || !acl.can('order.editor')\\\"\\n                           @click=\\\"spawnModal('refund')\\\">\\n                    {{ $tc('swag-paypal-payment.buttons.label.refund') }}\\n                </sw-button>\\n            {% endblock %}\\n\\n        </div>\\n\\n        {% block swag_paypal_payment_actions_v2_modal %}\\n            {% block swag_paypal_payment_actions_v2_modal_refund %}\\n                <swag-paypal-payment-action-v2-refund\\n                        v-if=\\\"modalType === 'refund'\\\"\\n                        :orderTransactionId=\\\"orderTransactionId\\\"\\n                        :paypalOrder=\\\"paypalOrder\\\"\\n                        :paypalPartnerAttributionId=\\\"paypalPartnerAttributionId\\\"\\n                        @modal-close=\\\"closeModal\\\">\\n                </swag-paypal-payment-action-v2-refund>\\n            {% endblock %}\\n\\n            {% block swag_paypal_payment_actions_v2_modal_capture %}\\n                <swag-paypal-payment-action-v2-capture\\n                        v-if=\\\"modalType === 'capture'\\\"\\n                        :orderTransactionId=\\\"orderTransactionId\\\"\\n                        :paypalOrder=\\\"paypalOrder\\\"\\n                        :paypalPartnerAttributionId=\\\"paypalPartnerAttributionId\\\"\\n                        :captureableAmount=\\\"captureableAmount\\\"\\n                        @modal-close=\\\"closeModal\\\">\\n                </swag-paypal-payment-action-v2-capture>\\n            {% endblock %}\\n\\n            {% block swag_paypal_payment_actions_v2_modal_void %}\\n                <swag-paypal-payment-action-v2-void\\n                        v-if=\\\"modalType === 'void'\\\"\\n                        :orderTransactionId=\\\"orderTransactionId\\\"\\n                        :paypalOrder=\\\"paypalOrder\\\"\\n                        :paypalPartnerAttributionId=\\\"paypalPartnerAttributionId\\\"\\n                        @modal-close=\\\"closeModal\\\">\\n                </swag-paypal-payment-action-v2-void>\\n            {% endblock %}\\n        {% endblock %}\\n\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-payment-action-v2-capture.html.twig';\n\nconst { Component } = Shopware;\nconst utils = Shopware.Utils;\n\nComponent.register('swag-paypal-payment-action-v2-capture', {\n    template,\n\n    inject: ['SwagPayPalOrderService'],\n\n    mixins: [\n        'notification',\n    ],\n\n    props: {\n        paypalOrder: {\n            type: Object,\n            required: true,\n        },\n\n        orderTransactionId: {\n            type: String,\n            required: true,\n        },\n\n        paypalPartnerAttributionId: {\n            type: String,\n            required: true,\n        },\n\n        captureableAmount: {\n            type: Number,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            authorization: {},\n            isFinalCapture: true,\n            captureAmount: this.captureableAmount,\n            captureInvoiceNumber: '',\n            captureNoteToPayer: '',\n            currencyCode: '',\n            isLoading: true,\n        };\n    },\n\n    computed: {\n        showHint() {\n            return this.isFinalCapture && this.captureAmount !== this.captureableAmount;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.authorization = this.paypalOrder.purchase_units[0].payments.authorizations[0];\n            this.currencyCode = this.authorization.amount.currency_code;\n            this.isLoading = false;\n        },\n\n        capture() {\n            this.isLoading = true;\n\n            let captureAmount = this.captureAmount;\n            if (captureAmount === 0) {\n                captureAmount = this.captureableAmount;\n            }\n\n            this.SwagPayPalOrderService.captureAuthorization(\n                this.orderTransactionId,\n                this.authorization.id,\n                this.currencyCode,\n                captureAmount,\n                this.captureInvoiceNumber,\n                this.captureNoteToPayer,\n                this.paypalPartnerAttributionId,\n                this.isFinalCapture,\n            ).then(() => {\n                this.createNotificationSuccess({\n                    message: this.$tc('swag-paypal-payment.captureAction.successMessage'),\n                });\n                this.isLoading = false;\n                this.$emit('modal-close');\n                this.$nextTick(() => {\n                    this.$router.replace(`${this.$route.path}?hash=${utils.createId()}`);\n                });\n            }).catch((errorResponse) => {\n                try {\n                    this.createNotificationError({\n                        message: `${errorResponse.response.data.errors[0].title}: ${\n                            errorResponse.response.data.errors[0].detail}`,\n                        autoClose: false,\n                    });\n                } catch (e) {\n                    this.createNotificationError({\n                        message: `${errorResponse.title}: ${errorResponse.message}`,\n                        autoClose: false,\n                    });\n                } finally {\n                    this.isLoading = false;\n                }\n            });\n        },\n    },\n});\n","export default \"{% block swag_paypal_payment_action_capture_v2 %}\\n    <sw-modal variant=\\\"small\\\"\\n              :title=\\\"$tc(`swag-paypal-payment.modal.title.capture`)\\\"\\n              @modal-close=\\\"$emit('modal-close')\\\">\\n\\n        {% block swag_paypal_payment_action_capture_v2_max_amount %}\\n            <sw-text-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"captureableAmount\\\"\\n                    {% else %}\\n                    v-model=\\\"captureableAmount\\\"\\n                    {% endif %}\\n                    :label=\\\"$tc('swag-paypal-payment.captureAction.maxAmount')\\\"\\n                    :disabled=\\\"true\\\">\\n                <template #suffix v-if=\\\"currencyCode\\\">\\n                    {{ currencyCode }}\\n                </template>\\n            </sw-text-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_capture_v2_amount %}\\n            <sw-number-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"captureAmount\\\"\\n                    {% else %}\\n                    v-model=\\\"captureAmount\\\"\\n                    {% endif %}\\n                    :max=\\\"captureableAmount\\\"\\n                    :min=\\\"0\\\"\\n                    :label=\\\"$tc('swag-paypal-payment.captureAction.currentAmount')\\\">\\n                <template #suffix v-if=\\\"currencyCode\\\">\\n                    {{ currencyCode }}\\n                </template>\\n            </sw-number-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_capture_v2_invoice_number %}\\n            <swag-paypal-text-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"captureInvoiceNumber\\\"\\n                    {% else %}\\n                    v-model=\\\"captureInvoiceNumber\\\"\\n                    {% endif %}\\n                    maxLength=\\\"127\\\"\\n                    :label=\\\"$tc('swag-paypal-payment.captureAction.captureInvoiceNumber.label')\\\"\\n                    :placeholder=\\\"$tc('swag-paypal-payment.captureAction.captureInvoiceNumber.placeholder')\\\">\\n            </swag-paypal-text-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_capture_v2_note_to_payer %}\\n            <swag-paypal-textarea-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"captureNoteToPayer\\\"\\n                    {% else %}\\n                    v-model=\\\"captureNoteToPayer\\\"\\n                    {% endif %}\\n                    maxLength=\\\"255\\\"\\n                    :placeholder=\\\"$tc('swag-paypal-payment.captureAction.captureNoteToPayer.placeholder')\\\"\\n                    :label=\\\"$tc('swag-paypal-payment.captureAction.captureNoteToPayer.label')\\\">\\n            </swag-paypal-textarea-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_capture_v2_is_final_capture %}\\n            <sw-checkbox-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"isFinalCapture\\\"\\n                    {% else %}\\n                    v-model=\\\"isFinalCapture\\\"\\n                    {% endif %}\\n                    :label=\\\"$tc('swag-paypal-payment.captureAction.isFinal')\\\">\\n            </sw-checkbox-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_capture_v2_hint %}\\n            <sw-alert v-if=\\\"showHint\\\">\\n                {{ $tc('swag-paypal-payment.captureAction.isFinalHint') }}\\n            </sw-alert>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_capture_v2_confirm_button %}\\n            <template #modal-footer>\\n                <sw-button variant=\\\"primary\\\"\\n                           @click=\\\"capture\\\">\\n                    {{ $tc('swag-paypal-payment.captureAction.button.text') }}\\n                </sw-button>\\n            </template>\\n        {% endblock %}\\n\\n        <sw-loader v-if=\\\"isLoading\\\"></sw-loader>\\n    </sw-modal>\\n{% endblock %}\\n\";","export default \"{% block swag_paypal_payment_action_refund_v2 %}\\n    <sw-modal variant=\\\"small\\\"\\n              :title=\\\"$tc(`swag-paypal-payment.modal.title.refund`)\\\"\\n              @modal-close=\\\"$emit('modal-close')\\\">\\n\\n        {% block swag_paypal_payment_action_refund_v2_capture_select %}\\n            <sw-select-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"selectedCaptureId\\\"\\n                    {% else %}\\n                    v-model=\\\"selectedCaptureId\\\"\\n                    {% endif %}\\n                    :label=\\\"$tc('swag-paypal-payment.refundAction.invoiceSelect.label')\\\"\\n                    {% if VUE3 %}\\n                    @update:value=\\\"setCapture\\\"\\n                    {% else %}\\n                    @change=\\\"setCapture\\\"\\n                    {% endif %}>\\n                <option v-for=\\\"capture in captures\\\"\\n                        :value=\\\"capture.id\\\">\\n                    {{ dateFilter(capture.create_time) }} ({{ capture.amount.value }} {{ capture.amount.currency_code }}) - {{ capture.id }} [{{ capture.status }}]\\n                </option>\\n            </sw-select-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_refund_v2_invoice_number %}\\n            <swag-paypal-text-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"refundInvoiceNumber\\\"\\n                    {% else %}\\n                    v-model=\\\"refundInvoiceNumber\\\"\\n                    {% endif %}\\n                    maxLength=\\\"127\\\"\\n                    :label=\\\"$tc('swag-paypal-payment.refundAction.refundInvoiceNumber.label')\\\"\\n                    :placeholder=\\\"$tc('swag-paypal-payment.refundAction.refundInvoiceNumber.placeholder')\\\">\\n            </swag-paypal-text-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_refund_v2_amount %}\\n            <sw-number-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"refundAmount\\\"\\n                    {% else %}\\n                    v-model=\\\"refundAmount\\\"\\n                    {% endif %}\\n                    :max=\\\"Number(selectedCapture.amount.value)\\\"\\n                    :min=\\\"0\\\"\\n                    :label=\\\"$tc('swag-paypal-payment.refundAction.refundAmount.label')\\\"\\n                    :helpText=\\\"$tc('swag-paypal-payment.refundAction.refundAmount.helpText')\\\">\\n                <template #suffix>\\n                    {{ selectedCapture.amount.currency_code }}\\n                </template>\\n            </sw-number-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_refund_v2_note_to_payer %}\\n            <swag-paypal-textarea-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"refundNoteToPayer\\\"\\n                    {% else %}\\n                    v-model=\\\"refundNoteToPayer\\\"\\n                    {% endif %}\\n                    maxLength=\\\"255\\\"\\n                    :placeholder=\\\"$tc('swag-paypal-payment.refundAction.refundNoteToPayer.placeholder')\\\"\\n                    :label=\\\"$tc('swag-paypal-payment.refundAction.refundNoteToPayer.label')\\\">\\n            </swag-paypal-textarea-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_action_refund_v2_confirm_button %}\\n            <template #modal-footer>\\n                <sw-button variant=\\\"primary\\\"\\n                           @click=\\\"refund\\\">\\n                    {{ $tc('swag-paypal-payment.refundAction.confirmButton.text') }}\\n                </sw-button>\\n            </template>\\n        {% endblock %}\\n\\n        <sw-loader v-if=\\\"isLoading\\\"></sw-loader>\\n    </sw-modal>\\n{% endblock %}\\n\";","export const ORDER_CREATED = 'CREATED';\nexport const ORDER_SAVED = 'SAVED';\nexport const ORDER_APPROVED = 'APPROVED';\nexport const ORDER_VOIDED = 'VOIDED';\nexport const ORDER_COMPLETED = 'COMPLETED';\nexport const ORDER_PAYER_ACTION_REQUIRED = 'PAYER_ACTION_REQUIRED';\n\nexport const ORDER_CAPTURE_COMPLETED = 'COMPLETED';\nexport const ORDER_CAPTURE_DECLINED = 'DECLINED';\nexport const ORDER_CAPTURE_PARTIALLY_REFUNDED = 'PARTIALLY_REFUNDED';\nexport const ORDER_CAPTURE_PENDING = 'PENDING';\nexport const ORDER_CAPTURE_REFUNDED = 'REFUNDED';\n\nexport const ORDER_AUTHORIZATION_CREATED = 'CREATED';\nexport const ORDER_AUTHORIZATION_CAPTURED = 'CAPTURED';\nexport const ORDER_AUTHORIZATION_DENIED = 'DENIED';\nexport const ORDER_AUTHORIZATION_EXPIRED = 'EXPIRED';\nexport const ORDER_AUTHORIZATION_PARTIALLY_CAPTURED = 'PARTIALLY_CAPTURED';\nexport const ORDER_AUTHORIZATION_VOIDED = 'VOIDED';\nexport const ORDER_AUTHORIZATION_PENDING = 'PENDING';\n\nexport const ORDER_REFUND_CANCELLED = 'CANCELLED';\nexport const ORDER_REFUND_PENDING = 'PENDING';\nexport const ORDER_REFUND_COMPLETED = 'COMPLETED';\n\nexport default {\n    ORDER_CREATED,\n    ORDER_SAVED,\n    ORDER_APPROVED,\n    ORDER_VOIDED,\n    ORDER_COMPLETED,\n    ORDER_PAYER_ACTION_REQUIRED,\n\n    ORDER_CAPTURE_COMPLETED,\n    ORDER_CAPTURE_DECLINED,\n    ORDER_CAPTURE_PARTIALLY_REFUNDED,\n    ORDER_CAPTURE_PENDING,\n    ORDER_CAPTURE_REFUNDED,\n\n    ORDER_AUTHORIZATION_CREATED,\n    ORDER_AUTHORIZATION_CAPTURED,\n    ORDER_AUTHORIZATION_DENIED,\n    ORDER_AUTHORIZATION_EXPIRED,\n    ORDER_AUTHORIZATION_PARTIALLY_CAPTURED,\n    ORDER_AUTHORIZATION_VOIDED,\n    ORDER_AUTHORIZATION_PENDING,\n\n    ORDER_REFUND_CANCELLED,\n    ORDER_REFUND_PENDING,\n    ORDER_REFUND_COMPLETED,\n};\n","import template from './swag-paypal-payment-action-v2-refund.html.twig';\nimport { ORDER_CAPTURE_REFUNDED } from '../../../swag-paypal-payment-details-v2/swag-paypal-order-consts';\n\nconst { Component, Filter } = Shopware;\nconst utils = Shopware.Utils;\n\nComponent.register('swag-paypal-payment-action-v2-refund', {\n    template,\n\n    inject: ['SwagPayPalOrderService'],\n\n    mixins: [\n        'notification',\n    ],\n\n    props: {\n        paypalOrder: {\n            type: Object,\n            required: true,\n        },\n\n        orderTransactionId: {\n            type: String,\n            required: true,\n        },\n\n        paypalPartnerAttributionId: {\n            type: String,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            captures: [],\n            selectedCapture: {},\n            refundAmount: 0,\n            refundInvoiceNumber: '',\n            refundNoteToPayer: '',\n            selectedCaptureId: '',\n            isLoading: true,\n        };\n    },\n\n    computed: {\n        dateFilter() {\n            return Filter.getByName('date');\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.getRefundableCaptures();\n            const firstCapture = this.captures[0];\n            this.selectedCaptureId = firstCapture.id;\n            this.selectedCapture = firstCapture;\n            this.refundAmount = Number(firstCapture.amount.value);\n            this.isLoading = false;\n        },\n\n        getRefundableCaptures() {\n            const rawCaptures = this.paypalOrder.purchase_units[0].payments.captures;\n            const refundableCaptures = [];\n\n            rawCaptures.forEach((capture) => {\n                if (capture.status !== ORDER_CAPTURE_REFUNDED) {\n                    refundableCaptures.push(capture);\n                }\n            });\n\n            this.captures = refundableCaptures;\n        },\n\n        setCapture() {\n            this.selectedCapture = this.captures.find((selectedCapture) => {\n                return selectedCapture.id === this.selectedCaptureId;\n            });\n\n            this.refundAmount = Number(this.selectedCapture.amount.value);\n        },\n\n        refund() {\n            this.isLoading = true;\n\n            let refundAmount = this.refundAmount;\n            if (refundAmount === 0) {\n                refundAmount = this.selectedCapture.amount.value;\n            }\n\n            this.SwagPayPalOrderService.refundCapture(\n                this.orderTransactionId,\n                this.selectedCapture.id,\n                this.paypalOrder.id,\n                this.selectedCapture.amount.currency_code,\n                refundAmount,\n                this.refundInvoiceNumber,\n                this.refundNoteToPayer,\n                this.paypalPartnerAttributionId,\n            ).then(() => {\n                this.createNotificationSuccess({\n                    message: this.$tc('swag-paypal-payment.refundAction.successMessage'),\n                });\n                this.isLoading = false;\n                this.$emit('modal-close');\n                this.$nextTick(() => {\n                    this.$router.replace(`${this.$route.path}?hash=${utils.createId()}`);\n                });\n            }).catch((errorResponse) => {\n                try {\n                    this.createNotificationError({\n                        message: `${errorResponse.response.data.errors[0].title}: ${\n                            errorResponse.response.data.errors[0].detail}`,\n                        autoClose: false,\n                    });\n                } catch (e) {\n                    this.createNotificationError({\n                        message: `${errorResponse.title}: ${errorResponse.message}`,\n                        autoClose: false,\n                    });\n                } finally {\n                    this.isLoading = false;\n                }\n            });\n        },\n    },\n});\n","export default \"{% block swag_paypal_paymemnt_action_v2_void %}\\n    <sw-modal variant=\\\"small\\\"\\n              :title=\\\"$tc(`swag-paypal-payment.modal.title.void`)\\\"\\n              @modal-close=\\\"closeModal\\\">\\n\\n        {% block swag_paypal_paymemnt_action_v2_void_headline %}\\n            <p>{{ $tc('swag-paypal-payment.voidAction.confirm.message') }}</p>\\n        {% endblock %}\\n\\n        <template #modal-footer>\\n\\n            {% block swag_paypal_paymemnt_action_v2_void_cancel_button %}\\n                <sw-button @click=\\\"closeModal\\\">\\n                    {{ $tc('global.default.no') }}\\n                </sw-button>\\n            {% endblock %}\\n\\n            {% block swag_paypal_paymemnt_action_v2_void_confirm_button %}\\n                <sw-button variant=\\\"primary\\\"\\n                           @click=\\\"voidPayment\\\">\\n                    {{ $tc('swag-paypal-payment.voidAction.confirm.button.confirm') }}\\n                </sw-button>\\n            {% endblock %}\\n\\n        </template>\\n\\n        <sw-loader v-if=\\\"isLoading\\\" size=\\\"43px\\\">\\n        </sw-loader>\\n    </sw-modal>\\n{% endblock %}\\n\";","import template from './swag-paypal-payment-action-v2-void.html.twig';\n\nconst { Component } = Shopware;\nconst utils = Shopware.Utils;\n\nComponent.register('swag-paypal-payment-action-v2-void', {\n    template,\n\n    inject: ['SwagPayPalOrderService'],\n\n    mixins: [\n        'notification',\n    ],\n\n    props: {\n        paypalOrder: {\n            type: Object,\n            required: true,\n        },\n\n        orderTransactionId: {\n            type: String,\n            required: true,\n        },\n\n        paypalPartnerAttributionId: {\n            type: String,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n        };\n    },\n\n    methods: {\n        voidPayment() {\n            this.isLoading = true;\n            const authorization = this.paypalOrder.purchase_units[0].payments.authorizations[0];\n\n            this.SwagPayPalOrderService.voidAuthorization(\n                this.orderTransactionId,\n                authorization.id,\n                this.paypalPartnerAttributionId,\n            ).then(() => {\n                this.createNotificationSuccess({\n                    message: this.$tc('swag-paypal-payment.voidAction.successMessage'),\n                });\n                this.isLoading = false;\n                this.closeModal();\n                this.$nextTick(() => {\n                    this.$router.replace(`${this.$route.path}?hash=${utils.createId()}`);\n                });\n            }).catch((errorResponse) => {\n                try {\n                    this.createNotificationError({\n                        message: `${errorResponse.response.data.errors[0].title}: ${\n                            errorResponse.response.data.errors[0].detail}`,\n                        autoClose: false,\n                    });\n                } catch (e) {\n                    this.createNotificationError({\n                        message: `${errorResponse.title}: ${errorResponse.message}`,\n                        autoClose: false,\n                    });\n                } finally {\n                    this.isLoading = false;\n                }\n            });\n        },\n\n        closeModal() {\n            this.$emit('modal-close');\n        },\n    },\n});\n","import template from './swag-paypal-payment-actions-v2.html.twig';\nimport './extensions/swag-paypal-payment-action-v2-capture';\nimport './extensions/swag-paypal-payment-action-v2-refund';\nimport './extensions/swag-paypal-payment-action-v2-void';\nimport './swag-paypal-payment-actions-v2.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-payment-actions-v2', {\n    template,\n\n    inject: [\n        'acl',\n    ],\n\n    props: {\n        paypalOrder: {\n            type: Object,\n            required: true,\n        },\n\n        orderTransactionId: {\n            type: String,\n            required: true,\n        },\n\n        paypalPartnerAttributionId: {\n            type: String,\n            required: true,\n        },\n\n        refundableAmount: {\n            type: Number,\n            required: true,\n        },\n\n        captureableAmount: {\n            type: Number,\n            required: true,\n        },\n\n        showVoidButton: {\n            type: Boolean,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            modalType: '',\n        };\n    },\n\n    methods: {\n        spawnModal(modalType) {\n            this.modalType = modalType;\n        },\n\n        closeModal() {\n            this.modalType = '';\n        },\n    },\n});\n","export default \"{% block swag_paypal_payment_details_v1 %}\\n    <div class=\\\"swag-paypal-payment-details_v1\\\">\\n        <sw-card position-identifier=\\\"swag-paypal-payment-details-v1\\\"\\n                 :title=\\\"$tc('swag-paypal-payment.paymentDetails.cardTitle')\\\">\\n            <template #grid>\\n\\n                {% block swag_paypal_payment_actions_section %}\\n                    <sw-card-section secondary\\n                                     slim>\\n                        <swag-paypal-payment-actions :orderId=\\\"orderId\\\" :paymentResource=\\\"paymentResource\\\">\\n                        </swag-paypal-payment-actions>\\n                    </sw-card-section>\\n                {% endblock %}\\n\\n                <sw-card-section divider=\\\"top\\\">\\n                    <sw-container columns=\\\"1fr\\\"\\n                                  gap=\\\"0px 30px\\\">\\n\\n                        {% block swag_paypal_payment_detail_invoice %}\\n                            {% block swag_paypal_payment_detail_invoice_heading %}\\n                                <h3>\\n                                    {{ $tc('swag-paypal-payment.paymentDetails.invoice.heading') }}\\n                                </h3>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_payment_detail_invoice_list %}\\n                                <sw-description-list class=\\\"swag-paypal-payment-detail__data\\\" grid=\\\"1fr 1fr\\\">\\n                                    <dt>{{ $tc('swag-paypal-payment.paymentDetails.invoice.totalAmount') }}</dt>\\n                                    <dd>{{ amount.total }} {{ currency }}</dd>\\n\\n                                    <dt>{{ $tc('swag-paypal-payment.paymentDetails.invoice.subTotal') }}</dt>\\n                                    <dd> {{ amount.details.subtotal }} {{ currency }}</dd>\\n\\n                                    <dt>{{ $tc('swag-paypal-payment.paymentDetails.invoice.shipping') }}</dt>\\n                                    <dd> {{ amount.details.shipping }} {{ currency }}</dd>\\n                                </sw-description-list>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_payment_detail_payment %}\\n                                {% block swag_paypal_payment_detail_payment_heading %}\\n                                    <h3 class=\\\"swag-paypal-payment-detail__heading\\\">\\n                                        {{ $tc('swag-paypal-payment.paymentDetails.payment.heading') }}\\n                                    </h3>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_payment_detail_payment_list %}\\n                                    <sw-description-list class=\\\"swag-paypal-payment-detail__data\\\" grid=\\\"1fr 1fr\\\">\\n                                        <dt>{{ $tc('swag-paypal-payment.paymentDetails.payment.intent') }}</dt>\\n                                        <dd>{{ $tc(`swag-paypal.settingForm.behavior.intent.${paymentResource.intent}`) }}</dd>\\n\\n                                        <dt>{{ $tc('swag-paypal-payment.paymentDetails.payment.paymentId') }}</dt>\\n                                        <dd>{{ paymentResource.id }}</dd>\\n\\n                                        <dt>{{ $tc('swag-paypal-payment.paymentDetails.payment.cartId') }}</dt>\\n                                        <dd>{{ paymentResource.cart }}</dd>\\n\\n                                        <dt>{{ $tc('swag-paypal-payment.paymentDetails.payment.state') }}</dt>\\n                                        <dd>{{ paymentResource.state }}</dd>\\n\\n                                        <dt>{{ $tc('swag-paypal-payment.paymentDetails.payment.createTime') }}</dt>\\n                                        <dd>{{ createDateTime }}</dd>\\n\\n                                        <dt>{{ $tc('swag-paypal-payment.paymentDetails.payment.updateTime') }}</dt>\\n                                        <dd>{{ updateDateTime }}</dd>\\n                                    </sw-description-list>\\n                                {% endblock %}\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_payment_detail_customer %}\\n                                {% block swag_paypal_payment_detail_customer_heading %}\\n                                    <h3 class=\\\"swag-paypal-payment-detail__heading\\\">\\n                                        {{ $tc('swag-paypal-payment.paymentDetails.customer.heading') }}\\n                                    </h3>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_payment_detail_customer_list %}\\n                                    <sw-description-list class=\\\"swag-paypal-payment-detail__data\\\" grid=\\\"1fr 1fr\\\">\\n                                        <dt>{{ $tc('swag-paypal-payment.paymentDetails.customer.payerId') }}</dt>\\n                                        <dd>{{ payerId }}</dd>\\n                                    </sw-description-list>\\n                                {% endblock %}\\n                            {% endblock %}\\n                        {% endblock %}\\n\\n                    </sw-container>\\n                </sw-card-section>\\n            </template>\\n        </sw-card>\\n\\n        {% block swag_paypal_payment_transaction_history_card %}\\n            <sw-card position-identifier=\\\"swag-paypal-payment-transaction-history-v1\\\"\\n                     :title=\\\"$tc('swag-paypal-payment.transactionHistory.cardTitle')\\\">\\n                <template #grid>\\n\\n                    {% block swag_paypal_payment_transaction_history_grid %}\\n                        <sw-data-grid :dataSource=\\\"relatedResources\\\"\\n                                      :columns=\\\"relatedResourceColumns\\\"\\n                                      :showActions=\\\"false\\\"\\n                                      :showSelection=\\\"false\\\">\\n                        </sw-data-grid>\\n                    {% endblock %}\\n\\n                </template>\\n            </sw-card>\\n        {% endblock %}\\n\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-payment-details-v1.html.twig';\n\nconst { Component, Filter } = Shopware;\n\nComponent.register('swag-paypal-payment-details-v1', {\n    template,\n\n    props: {\n        paymentResource: {\n            type: Object,\n            required: true,\n        },\n\n        orderId: {\n            type: String,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            relatedResources: [],\n            createDateTime: '',\n            updateDateTime: '',\n            currency: '',\n            amount: {},\n            payerId: '',\n        };\n    },\n\n    computed: {\n        dateFilter() {\n            return Filter.getByName('date');\n        },\n\n        relatedResourceColumns() {\n            return [\n                {\n                    property: 'type',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.type'),\n                    rawData: true,\n                },\n                {\n                    property: 'total',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.amount'),\n                    rawData: true,\n                },\n                {\n                    property: 'id',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.trackingId'),\n                    rawData: true,\n                },\n                {\n                    property: 'status',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.state'),\n                    rawData: true,\n                },\n                {\n                    property: 'transactionFee',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.transactionFee'),\n                    rawData: true,\n                },\n                {\n                    property: 'paymentMode',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.paymentMode'),\n                    rawData: true,\n                },\n                {\n                    property: 'create',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.createTime'),\n                    rawData: true,\n                },\n                {\n                    property: 'update',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.updateTime'),\n                    rawData: true,\n                },\n            ];\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.createDateTime = this.formatDate(this.paymentResource.create_time);\n            this.updateDateTime = this.formatDate(this.paymentResource.update_time);\n            this.amount = this.paymentResource.transactions[0].amount;\n            this.currency = this.paymentResource.transactions[0].amount.currency;\n            if (this.paymentResource.payer && this.paymentResource.payer.payer_info) {\n                this.payerId = this.paymentResource.payer.payer_info.payer_id;\n            }\n\n            this.setRelatedResources();\n        },\n\n        setRelatedResources() {\n            const rawRelatedResources = this.paymentResource.transactions[0].related_resources;\n            if (rawRelatedResources === null) {\n                return;\n            }\n\n            rawRelatedResources.forEach((relatedResource) => {\n                if (relatedResource.sale) {\n                    this.pushRelatedResource('sale', relatedResource.sale);\n                }\n\n                if (relatedResource.authorization) {\n                    this.pushRelatedResource('authorization', relatedResource.authorization);\n                }\n\n                if (relatedResource.order) {\n                    this.pushRelatedResource('order', relatedResource.order);\n                }\n\n                if (relatedResource.refund) {\n                    this.pushRelatedResource('refund', relatedResource.refund);\n                }\n\n                if (relatedResource.capture) {\n                    this.pushRelatedResource('capture', relatedResource.capture);\n                }\n            });\n        },\n\n        pushRelatedResource(type, relatedResource) {\n            let transactionFee = null;\n            const currency = relatedResource.amount.currency;\n            if (relatedResource.transaction_fee) {\n                transactionFee = `${relatedResource.transaction_fee.value} ${currency}`;\n            }\n\n            this.relatedResources.push({\n                id: relatedResource.id,\n                type: this.$tc(`swag-paypal-payment.transactionHistory.states.${type}`),\n                total: `${relatedResource.amount.total} ${currency}`,\n                create: this.formatDate(relatedResource.create_time),\n                createRaw: relatedResource.create_time,\n                update: this.formatDate(relatedResource.update_time),\n                transactionFee: transactionFee,\n                status: relatedResource.state,\n                paymentMode: relatedResource.payment_mode,\n            });\n\n            this.relatedResources.sort((a, b) => {\n                const dateA = new Date(a.createRaw);\n                const dateB = new Date(b.createRaw);\n\n                return dateA - dateB;\n            });\n        },\n\n        formatDate(dateTime) {\n            return this.dateFilter(dateTime, {\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n            });\n        },\n    },\n});\n","export default \"{% block swag_paypal_payment_details_v2 %}\\n    <div class=\\\"swag-paypal-payment-details_v2\\\">\\n        <sw-card position-identifier=\\\"swag-paypal-payment-details-v2\\\"\\n                 :title=\\\"$tc('swag-paypal-payment.paymentDetails.cardTitle')\\\">\\n            <template #grid>\\n\\n                {% block swag_paypal_payment_actions_section %}\\n                    <sw-card-section secondary slim>\\n                        <swag-paypal-payment-actions-v2\\n                                :orderTransactionId=\\\"orderTransaction.id\\\"\\n                                :paypalOrder=\\\"paypalOrder\\\"\\n                                :paypalPartnerAttributionId=\\\"orderTransaction.customFields.swag_paypal_partner_attribution_id\\\"\\n                                :refundableAmount=\\\"refundableAmount\\\"\\n                                :captureableAmount=\\\"captureableAmount\\\"\\n                                :showVoidButton=\\\"showVoidButton\\\">\\n                        </swag-paypal-payment-actions-v2>\\n                    </sw-card-section>\\n                {% endblock %}\\n\\n                <sw-card-section divider=\\\"top\\\">\\n\\n                        {% block swag_paypal_payment_detail_invoice %}\\n                            {% block swag_paypal_payment_detail_invoice_heading %}\\n                                <h3>\\n                                    {{ $tc('swag-paypal-payment.paymentDetails.invoice.heading') }}\\n                                </h3>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_payment_detail_invoice_list %}\\n                                <sw-description-list class=\\\"swag-paypal-payment-detail__data\\\" grid=\\\"1fr 1fr\\\">\\n\\n                                    {% block swag_paypal_payment_detail_invoice_list_total %}\\n                                        <dt>{{ $tc('swag-paypal-payment.paymentDetails.invoice.totalAmount') }}</dt>\\n                                        <dd>{{ amount.value }} {{ currency }}</dd>\\n                                    {% endblock %}\\n\\n                                    <template v-if=\\\"amount.breakdown\\\">\\n                                        {% block swag_paypal_payment_detail_invoice_list_sub_total %}\\n                                            <dt>{{ $tc('swag-paypal-payment.paymentDetails.invoice.subTotal') }}</dt>\\n                                            <dd> {{ amount.breakdown.item_total.value }} {{ currency }}</dd>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_payment_detail_invoice_list_discount %}\\n                                            <template v-if=\\\"amount.breakdown.discount\\\">\\n                                                <dt>{{ $tc('swag-paypal-payment.paymentDetails.invoice.discount') }}</dt>\\n                                                <dd> {{ amount.breakdown.discount.value }} {{ currency }}</dd>\\n                                            </template>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_payment_detail_invoice_list_handling %}\\n                                            <template v-if=\\\"amount.breakdown.handling\\\">\\n                                                <dt>{{ $tc('swag-paypal-payment.paymentDetails.invoice.handling') }}</dt>\\n                                                <dd> {{ amount.breakdown.handling.value }} {{ currency }}</dd>\\n                                            </template>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_payment_detail_invoice_list_insurance %}\\n                                            <template v-if=\\\"amount.breakdown.insurance\\\">\\n                                                <dt>{{ $tc('swag-paypal-payment.paymentDetails.invoice.insurance') }}</dt>\\n                                                <dd> {{ amount.breakdown.insurance.value }} {{ currency }}</dd>\\n                                            </template>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_payment_detail_invoice_list_shipping %}\\n                                            <dt>{{ $tc('swag-paypal-payment.paymentDetails.invoice.shipping') }}</dt>\\n                                            <dd> {{ amount.breakdown.shipping.value }} {{ currency }}</dd>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_payment_detail_invoice_list_shipping_discount %}\\n                                            <template v-if=\\\"amount.breakdown.insurance\\\">\\n                                                <dt>{{ $tc('swag-paypal-payment.paymentDetails.invoice.shipping_discount') }}</dt>\\n                                                <dd> {{ amount.breakdown.shipping_discount.value }} {{ currency }}</dd>\\n                                            </template>\\n                                        {% endblock %}\\n                                    </template>\\n\\n                                </sw-description-list>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_payment_detail_payment %}\\n                                {% block swag_paypal_payment_detail_payment_heading %}\\n                                    <h3 class=\\\"swag-paypal-payment-detail__heading\\\">\\n                                        {{ $tc('swag-paypal-payment.paymentDetails.payment.heading') }}\\n                                    </h3>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_payment_detail_payment_list %}\\n                                    <sw-description-list class=\\\"swag-paypal-payment-detail__data\\\" grid=\\\"1fr 1fr\\\">\\n                                        {% block swag_paypal_payment_detail_payment_list_intent %}\\n                                            <dt>{{ $tc('swag-paypal-payment.paymentDetails.payment.intent') }}</dt>\\n                                            <dd>{{ $tc(`swag-paypal.settingForm.behavior.intent.${paypalOrder.intent}`) }}</dd>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_payment_detail_payment_list_id %}\\n                                            <dt>{{ $tc('swag-paypal-payment.paymentDetails.payment.paymentId') }}</dt>\\n                                            <dd>{{ paypalOrder.id }}</dd>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_payment_detail_payment_list_status %}\\n                                            <dt>{{ $tc('swag-paypal-payment.paymentDetails.payment.state') }}</dt>\\n                                            <dd>{{ paypalOrder.status }}</dd>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_payment_detail_payment_list_create_time %}\\n                                        <template v-if=\\\"createDateTime\\\">\\n                                            <dt>{{ $tc('swag-paypal-payment.paymentDetails.payment.createTime') }}</dt>\\n                                            <dd>{{ createDateTime }}</dd>\\n                                        </template>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_payment_detail_payment_list_update_time %}\\n                                        <template v-if=\\\"updateDateTime\\\">\\n                                            <dt>{{ $tc('swag-paypal-payment.paymentDetails.payment.updateTime') }}</dt>\\n                                            <dd>{{ updateDateTime }}</dd>\\n                                        </template>\\n                                        {% endblock %}\\n\\n                                    </sw-description-list>\\n                                {% endblock %}\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_payment_detail_customer %}\\n                            <template v-if=\\\"payerId\\\">\\n\\n                                {% block swag_paypal_payment_detail_customer_heading %}\\n                                    <h3 class=\\\"swag-paypal-payment-detail__heading\\\">\\n                                        {{ $tc('swag-paypal-payment.paymentDetails.customer.heading') }}\\n                                    </h3>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_payment_detail_customer_list %}\\n                                    <sw-description-list class=\\\"swag-paypal-payment-detail__data\\\" grid=\\\"1fr 1fr\\\">\\n                                        <dt>{{ $tc('swag-paypal-payment.paymentDetails.customer.payerId') }}</dt>\\n                                        <dd>{{ payerId }}</dd>\\n                                    </sw-description-list>\\n                                {% endblock %}\\n\\n                            </template>\\n                            {% endblock %}\\n                        {% endblock %}\\n\\n                </sw-card-section>\\n            </template>\\n        </sw-card>\\n\\n        {% block swag_paypal_payment_pui_details %}\\n            <swag-paypal-pui-details v-if=\\\"puiDetails\\\"\\n                                     :details=\\\"puiDetails\\\"\\n                                     :purchase-unit-amount=\\\"amount\\\"\\n            ></swag-paypal-pui-details>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_transaction_history_card %}\\n            <sw-card position-identifier=\\\"swag-paypal-payment-transaction-history-v2\\\"\\n                     :title=\\\"$tc('swag-paypal-payment.transactionHistory.cardTitle')\\\">\\n                <template #grid>\\n\\n                    {% block swag_paypal_payment_transaction_history_grid %}\\n                        <sw-data-grid :dataSource=\\\"payments\\\"\\n                                      :columns=\\\"paymentColumns\\\"\\n                                      :showActions=\\\"false\\\"\\n                                      :showSelection=\\\"false\\\">\\n                        </sw-data-grid>\\n                    {% endblock %}\\n                </template>\\n            </sw-card>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-payment-details-v2.html.twig';\nimport {\n    ORDER_AUTHORIZATION_CREATED,\n    ORDER_AUTHORIZATION_PARTIALLY_CAPTURED,\n    ORDER_AUTHORIZATION_PENDING,\n} from './swag-paypal-order-consts';\n\nconst { Component, Filter } = Shopware;\n\nComponent.register('swag-paypal-payment-details-v2', {\n    template,\n\n    props: {\n        paypalOrder: {\n            type: Object,\n            required: true,\n        },\n\n        orderTransaction: {\n            type: Object,\n            required: true,\n        },\n\n        /**\n         * @deprecated tag:v8.0.0 - will be removed, use orderTransaction instead\n         */\n        orderTransactionId: {\n            type: String,\n            required: false,\n            default: '',\n        },\n\n        /**\n         * @deprecated tag:v8.0.0 - will be removed, use orderTransaction instead\n         */\n        paypalPartnerAttributionId: {\n            type: String,\n            required: false,\n            default: '',\n        },\n    },\n\n    data() {\n        return {\n            payments: [],\n            createDateTime: '',\n            updateDateTime: '',\n            currency: '',\n            amount: {},\n            payerId: '',\n            refundableAmount: 0,\n            captureableAmount: 0,\n            showVoidButton: false,\n        };\n    },\n\n    computed: {\n        dateFilter() {\n            return Filter.getByName('date');\n        },\n\n        paymentColumns() {\n            return [\n                {\n                    property: 'type',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.type'),\n                    rawData: true,\n                },\n                {\n                    property: 'id',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.trackingId'),\n                    rawData: true,\n                },\n                {\n                    property: 'total',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.amount'),\n                    rawData: true,\n                },\n                {\n                    property: 'status',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.state'),\n                    rawData: true,\n                },\n                {\n                    property: 'transactionFee',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.transactionFee'),\n                    rawData: true,\n                },\n                {\n                    property: 'create',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.createTime'),\n                    rawData: true,\n                },\n                {\n                    property: 'update',\n                    label: this.$tc('swag-paypal-payment.transactionHistory.types.updateTime'),\n                    rawData: true,\n                },\n            ];\n        },\n\n        puiDetails() {\n            return this.orderTransaction.customFields.swag_paypal_pui_payment_instruction;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.createDateTime = this.formatDate(this.paypalOrder.create_time);\n            this.updateDateTime = this.formatDate(this.paypalOrder.update_time);\n            this.amount = this.paypalOrder.purchase_units[0].amount;\n            this.currency = this.amount.currency_code;\n            this.payerId = this.paypalOrder.payer?.payer_id ?? '';\n\n            this.setPayments();\n        },\n\n        setPayments() {\n            const payments = this.paypalOrder.purchase_units[0].payments;\n            if (payments === null) {\n                return;\n            }\n\n            const rawAuthorizations = payments.authorizations;\n            const rawCaptures = payments.captures;\n            const rawRefunds = payments.refunds;\n\n            if (rawAuthorizations !== null) {\n                rawAuthorizations.forEach((authorization) => {\n                    this.pushPayment('authorization', authorization);\n                    const authStatus = authorization.status;\n                    if (authStatus === ORDER_AUTHORIZATION_CREATED\n                        || authStatus === ORDER_AUTHORIZATION_PARTIALLY_CAPTURED\n                    ) {\n                        this.captureableAmount += Number(authorization.amount.value);\n                        this.showVoidButton = true;\n                    }\n                    if (authStatus === ORDER_AUTHORIZATION_PENDING) {\n                        this.showVoidButton = true;\n                    }\n                });\n            }\n\n            if (rawCaptures !== null) {\n                rawCaptures.forEach((capture) => {\n                    this.pushPayment('capture', capture);\n                    const captureAmount = Number(capture.amount.value);\n                    this.refundableAmount += captureAmount;\n                    this.captureableAmount -= captureAmount;\n                });\n            }\n\n            if (rawRefunds !== null) {\n                rawRefunds.forEach((refund) => {\n                    this.pushPayment('refund', refund);\n                    this.refundableAmount -= Number(refund.amount.value);\n                });\n            }\n\n            this.refundableAmount = this.formatAmount(this.refundableAmount);\n            this.captureableAmount = this.formatAmount(this.captureableAmount);\n        },\n\n        pushPayment(type, payment) {\n            this.payments.push({\n                id: payment.id,\n                type: this.$tc(`swag-paypal-payment.transactionHistory.states.${type}`),\n                total: `${payment.amount.value} ${payment.amount.currency_code}`,\n                create: this.formatDate(payment.create_time),\n                createRaw: payment.create_time,\n                update: this.formatDate(payment.update_time),\n                transactionFee: this.getTransactionFee(type, payment),\n                status: payment.status,\n            });\n\n            this.payments.sort((a, b) => {\n                const dateA = new Date(a.createRaw);\n                const dateB = new Date(b.createRaw);\n\n                return dateA - dateB;\n            });\n        },\n\n        getTransactionFee(type, payment) {\n            if (type === 'capture') {\n                const sellerReceivableBreakdown = payment.seller_receivable_breakdown;\n                if (sellerReceivableBreakdown === null) {\n                    return null;\n                }\n\n                const paypalFee = sellerReceivableBreakdown.paypal_fee;\n                if (paypalFee == null) {\n                    return null;\n                }\n\n                return `${paypalFee.value} ${paypalFee.currency_code}`;\n            }\n\n            if (type === 'refund') {\n                const sellerPayableBreakdown = payment.seller_payable_breakdown;\n                if (sellerPayableBreakdown === null) {\n                    return null;\n                }\n\n                const paypalFee = sellerPayableBreakdown.paypal_fee;\n                if (paypalFee === null) {\n                    return null;\n                }\n\n                return `${paypalFee.value} ${paypalFee.currency_code}`;\n            }\n\n            return null;\n        },\n\n        formatDate(dateTime) {\n            return this.dateFilter(dateTime, {\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n            });\n        },\n\n        formatAmount(value) {\n            return Number(`${Math.round(`${value}e2`)}e-2`);\n        },\n    },\n});\n","import template from './swag-paypal-pui-details.html.twig';\nimport './swag-paypal-pui-details.scss';\n\nconst { Component } = Shopware;\nconst domUtils = Shopware.Utils.dom;\n\nComponent.register('swag-paypal-pui-details', {\n    template,\n\n    props: {\n        details: {\n            type: Object,\n            required: true,\n        },\n\n        purchaseUnitAmount: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    computed: {\n        copyText() {\n            return `${this.$tc('swag-paypal-payment.puiDetails.bank')} ${this.bankName}\n${this.$tc('swag-paypal-payment.puiDetails.iban')} ${this.iban}\n${this.$tc('swag-paypal-payment.puiDetails.bic')} ${this.bic}\n${this.$tc('swag-paypal-payment.puiDetails.accountHolder')} ${this.accountHolderName}\n${this.$tc('swag-paypal-payment.puiDetails.amount')} ${this.amount}\n${this.$tc('swag-paypal-payment.puiDetails.reference')} ${this.reference}`;\n        },\n\n        bankName() {\n            return this.details.deposit_bank_details.bank_name;\n        },\n\n        iban() {\n            return this.details.deposit_bank_details.iban;\n        },\n\n        bic() {\n            return this.details.deposit_bank_details.bic;\n        },\n\n        accountHolderName() {\n            return this.details.deposit_bank_details.account_holder_name;\n        },\n\n        reference() {\n            return this.details.payment_reference;\n        },\n\n        amount() {\n            return `${this.purchaseUnitAmount.value} ${this.purchaseUnitAmount.currency_code}`;\n        },\n    },\n\n    methods: {\n        async onCopy() {\n            if (!navigator?.clipboard) {\n                // non-https polyfill\n                domUtils.copyToClipboard(this.copyText);\n\n                return;\n            }\n\n            await navigator.clipboard.writeText(this.copyText);\n        },\n    },\n});\n","export default \"{% block swag_paypal_pui_details %}\\n    <sw-card\\n        position-identifier=\\\"swag-paypal-pui-details\\\"\\n        :title=\\\"$tc('swag-paypal-payment.puiDetails.cardTitle')\\\">\\n\\n        {% block swag_paypal_pui_details_textarea %}\\n        <div class=\\\"swag-paypal-pui-details__textarea\\\">\\n            <b>{{ $tc('swag-paypal-payment.puiDetails.bank') }}</b> {{ bankName }}<br>\\n            <b>{{ $tc('swag-paypal-payment.puiDetails.iban') }}</b> {{ iban }}<br>\\n            <b>{{ $tc('swag-paypal-payment.puiDetails.bic') }}</b> {{ bic }}<br>\\n            <b>{{ $tc('swag-paypal-payment.puiDetails.accountHolder') }}</b> {{ accountHolderName }}<br>\\n            <b>{{ $tc('swag-paypal-payment.puiDetails.amount') }}</b> {{ amount }}<br>\\n            <b>{{ $tc('swag-paypal-payment.puiDetails.reference') }}</b> {{ reference }}<br>\\n        </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pui_details_copy_button %}\\n        <sw-button\\n            class=\\\"swag-paypal-pui-details__copy-button\\\"\\n            variant=\\\"ghost\\\"\\n            size=\\\"small\\\"\\n            @click=\\\"onCopy\\\">\\n            {{ $tc('swag-paypal-payment.puiDetails.buttonCopy') }}\\n        </sw-button>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './swag-paypal-text-field.html.twig';\n\nconst { Component } = Shopware;\n\n/**\n * @protected\n * @description Simple text field. But this one allows attribute downpassing to the input field instead of the block.\n * @status ready\n * @example-type dynamic\n * @component-example\n * <swag-paypal-text-field label=\"Name\" placeholder=\"placeholder goes here...\"></swag-paypal-text-field>\n */\nComponent.extend('swag-paypal-text-field', 'sw-text-field', {\n    template,\n});\n","export default \"{% block sw_text_field %}\\n    <sw-contextual-field\\n            v-bind=\\\"$attrs\\\"\\n            {% if VUE2 %}\\n            v-on=\\\"$listeners\\\"\\n            {% endif %}\\n            class=\\\"sw-field--text\\\"\\n            :name=\\\"formFieldName\\\"\\n            @inheritance-restore=\\\"$emit('inheritance-restore', $event)\\\"\\n            @inheritance-remove=\\\"$emit('inheritance-remove', $event)\\\">\\n\\n        <template v-if=\\\"hasPrefix\\\" #sw-contextual-field-prefix=\\\"{ disabled, identification }\\\">\\n            <slot name=\\\"prefix\\\" v-bind=\\\"{disabled, identification}\\\"></slot>\\n        </template>\\n\\n        <template #sw-field-input=\\\"{ identification, error, disabled, size, setFocusClass, removeFocusClass, hasSuffix, hasPrefix }\\\">\\n            <input v-bind=\\\"$attrs\\\"\\n                   v-on=\\\"additionalListeners\\\"\\n                   type=\\\"text\\\"\\n                   :name=\\\"identification\\\"\\n                   :id=\\\"identification\\\"\\n                   :disabled=\\\"disabled\\\"\\n                   :value=\\\"currentValue\\\"\\n                   :placeHolder=\\\"placeholder\\\"\\n                   @input=\\\"onInput\\\"\\n                   @change=\\\"onChange\\\"\\n                   @focus=\\\"setFocusClass\\\"\\n                   @blur=\\\"removeFocusClass\\\">\\n        </template>\\n\\n        <template v-if=\\\"copyable || hasSuffix\\\" #sw-contextual-field-suffix=\\\"{disabled, identification}\\\">\\n            <slot name=\\\"suffix\\\" v-bind=\\\"{ identification }\\\"></slot>\\n            <sw-field-copyable v-if=\\\"copyable\\\"\\n                               :displayName=\\\"identification\\\"\\n                               :copyableText=\\\"currentValue\\\"\\n                               :tooltip=\\\"copyableTooltip\\\">\\n            </sw-field-copyable>\\n        </template>\\n    </sw-contextual-field>\\n{% endblock %}\\n\";","import template from './swag-paypal-textarea-field.html.twig';\n\nconst { Component } = Shopware;\n\n/**\n * @protected\n * @description textarea input field. But this one allows attribute downpassing to the input field instead of the block.\n * @status ready\n * @example-type static\n * @component-example\n * <swag-paypal-textarea-field label=\"Name\" placeholder=\"placeholder goes here...\"></swag-paypal-textarea-field>\n */\nComponent.extend('swag-paypal-textarea-field', 'sw-textarea-field', {\n    template,\n});\n","export default \"{% block sw_block_field %}\\n    <sw-block-field\\n            v-bind=\\\"$attrs\\\"\\n            class=\\\"sw-field--textarea\\\"\\n            :name=\\\"formFieldName\\\">\\n\\n        <template #sw-field-input=\\\"{identification, helpText, error, disabled, setFocusClass, removeFocusClass }\\\">\\n            <textarea v-bind=\\\"$attrs\\\"\\n                      :id=\\\"identification\\\"\\n                      :name=\\\"identification\\\"\\n                      :placeholder=\\\"placeholder\\\"\\n                      :disabled=\\\"disabled\\\"\\n                      :value=\\\"currentValue\\\"\\n                      @change=\\\"onChange\\\"\\n                      @input=\\\"onInput\\\"\\n                      @focus=\\\"setFocusClass\\\"\\n                      @blur=\\\"removeFocusClass\\\">\\n            </textarea>\\n        </template>\\n    </sw-block-field>\\n{% endblock %}\\n\";","export default \"{% block sw_order_detail_content_tabs_general %}\\n    {% parent %}\\n\\n    <sw-tabs-item v-if=\\\"isPayPalPayment\\\"\\n                  :route=\\\"{ name: 'swag.paypal.payment.detail', params: { id: $route.params.id } }\\\"\\n                  :title=\\\"$tc('swag-paypal.header')\\\">\\n        {{ $tc('swag-paypal.header') }}\\n    </sw-tabs-item>\\n{% endblock %}\\n\\n\\n{% block sw_order_detail_actions_slot_smart_bar_actions %}\\n    <template v-if=\\\"isEditable\\\">\\n        {% parent %}\\n    </template>\\n{% endblock %}\\n\";","import template from './sw-order-detail.html.twig';\n\nconst { Component, Context } = Shopware;\nconst { hasOwnProperty } = Shopware.Utils.object;\nconst Criteria = Shopware.Data.Criteria;\n\nComponent.override('sw-order-detail', {\n    template,\n\n    data() {\n        return {\n            isPayPalPayment: false,\n        };\n    },\n\n    computed: {\n        isEditable() {\n            return !this.isPayPalPayment || this.$route.name !== 'swag.paypal.payment.detail';\n        },\n    },\n\n    watch: {\n        orderId: {\n            deep: true,\n            handler() {\n                if (!this.orderId) {\n                    return;\n                }\n\n                const orderRepository = this.repositoryFactory.create('order');\n                const orderCriteria = new Criteria(1, 1);\n                orderCriteria.addAssociation('transactions');\n                orderCriteria\n                    .getAssociation('transactions')\n                    .addSorting(Criteria.sort('createdAt', 'DESC'))\n                    .setLimit(1);\n\n                orderRepository.get(this.orderId, Context.api, orderCriteria).then((order) => {\n                    const transaction = order.transactions.last();\n                    if (!transaction) {\n                        return;\n                    }\n\n                    this.isPayPalPayment = hasOwnProperty(transaction, 'customFields') &&\n                        (hasOwnProperty(transaction.customFields, 'swag_paypal_order_id') ||\n                         hasOwnProperty(transaction.customFields, 'swag_paypal_transaction_id'));\n                });\n            },\n            immediate: true,\n        },\n    },\n});\n","import template from './sw-order-detail-details.html.twig';\nimport './sw-order-detail-details.scss';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-order-detail-details', {\n    template,\n\n    inject: [\n        'systemConfigApiService',\n    ],\n\n    data() {\n        return {\n            isPayPalSandbox: false,\n        };\n    },\n\n    computed: {\n        transaction() {\n            return this.order?.transactions.last();\n        },\n\n        payPalResourceId() {\n            return this.transaction?.customFields?.swag_paypal_resource_id;\n        },\n\n        payPalCarrier() {\n            return this.order?.deliveries?.first().shippingMethod?.customFields?.swag_paypal_carrier ?? '';\n        },\n\n        payPalOrderLink() {\n            const prefix = this.isPayPalSandbox ? 'sandbox' : 'www';\n\n            return `https://${prefix}.paypal.com/activity/payment/${this.payPalResourceId}`;\n        },\n\n        payPalCarrierDescription() {\n            return this.$tc('sw-order-detail.payPalCarrierDescription', 1, { orderLink: this.payPalOrderLink });\n        },\n    },\n\n    watch: {\n        payPalResourceId: {\n            async handler(value) {\n                if (!value) {\n                    return;\n                }\n\n                const salesChannelConfig = await this.systemConfigApiService.getValues(\n                    'SwagPayPal.settings',\n                    this.order.salesChannelId,\n                );\n\n                if (salesChannelConfig.hasOwnProperty('SwagPayPal.settings.sandbox')) {\n                    this.isPayPalSandbox = salesChannelConfig['SwagPayPal.settings.sandbox'];\n                }\n\n                const config = await this.systemConfigApiService.getValues('SwagPayPal.settings');\n\n                this.isPayPalSandbox = config['SwagPayPal.settings.sandbox'];\n            },\n            immediate: true,\n        },\n    },\n});\n","export default \"{% block sw_order_detail_details_shipping_tracking_codes %}\\n    {% parent %}\\n\\n    {% block sw_order_detail_details_shipping_paypal_carrier %}\\n    <div class=\\\"swag-paypal-order-carrier\\\"\\n         v-if=\\\"payPalResourceId\\\">\\n        <sw-text-field\\n            {% if VUE3 %}\\n            v-model:value=\\\"payPalCarrier\\\"\\n            {% else %}\\n            v-model=\\\"payPalCarrier\\\"\\n            {% endif %}\\n            disabled\\n            :label=\\\"$tc('sw-order-detail.payPalCarrierLabel')\\\"\\n            :helpText=\\\"$tc('sw-order-detail.payPalCarrierHelpText')\\\"\\n            :placeholder=\\\"$tc('sw-order-detail.payPalCarrierPlaceholder')\\\"\\n        />\\n\\n        <div\\n            v-html=\\\"payPalCarrierDescription\\\"\\n            class=\\\"swag-paypal-order-carrier__description\\\"\\n        >\\n        </div>\\n    </div>\\n    {% endblock %}\\n\\n{% endblock %}\\n\";","import template from './sw-order-user-card.html.twig';\nimport './sw-order-user-card.scss';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-order-user-card', {\n    template,\n\n    inject: [\n        'systemConfigApiService',\n    ],\n\n    data() {\n        return {\n            isPayPalSandbox: false,\n        };\n    },\n\n    computed: {\n        transaction() {\n            return this.currentOrder.transactions?.last();\n        },\n\n        payPalResourceId() {\n            return this.transaction?.customFields?.swag_paypal_resource_id;\n        },\n\n        payPalCarrier() {\n            return this.delivery?.shippingMethod?.customFields?.swag_paypal_carrier ?? '';\n        },\n\n        payPalOrderLink() {\n            const prefix = this.isPayPalSandbox ? 'sandbox' : 'www';\n\n            return `https://${prefix}.paypal.com/activity/payment/${this.payPalResourceId}`;\n        },\n\n        payPalCarrierDescription() {\n            return this.$tc('sw-order-detail.payPalCarrierDescription', 1, { orderLink: this.payPalOrderLink });\n        },\n    },\n\n    watch: {\n        payPalResourceId: {\n            async handler(value) {\n                if (!value) {\n                    return;\n                }\n\n                const salesChannelConfig = await this.systemConfigApiService.getValues(\n                    'SwagPayPal.settings',\n                    this.currentOrder.salesChannelId,\n                );\n\n                if (salesChannelConfig.hasOwnProperty('SwagPayPal.settings.sandbox')) {\n                    this.isPayPalSandbox = salesChannelConfig['SwagPayPal.settings.sandbox'];\n                }\n\n                const config = await this.systemConfigApiService.getValues('SwagPayPal.settings');\n\n                this.isPayPalSandbox = config['SwagPayPal.settings.sandbox'];\n            },\n            immediate: true,\n        },\n    },\n});\n","export default \"{% block sw_order_detail_base_secondary_info_order_overview_right_column_slot %}\\n    {% parent %}\\n\\n    {% block sw_detail_base_secondary_info_order_overview_paypal_carrier %}\\n    <template v-if=\\\"payPalResourceId\\\">\\n        <dt>\\n            {{ $tc('sw-order-detail.payPalCarrierLabel') }}\\n            <sw-help-text :text=\\\"$tc('sw-order-detail.payPalCarrierHelpText')\\\" />\\n        </dt>\\n\\n        <dd>\\n            <div>\\n                {{ payPalCarrier ? payPalCarrier : $tc('sw-order-detail.payPalCarrierPlaceholder') }}\\n            </div>\\n\\n            <div\\n                v-html=\\\"payPalCarrierDescription\\\"\\n                class=\\\"sw-user-card__paypal-carrier-description\\\"\\n            >\\n            </div>\\n        </dd>\\n    </template>\\n    {% endblock %}\\n\\n{% endblock %}\\n\";","export default \"{% block swag_paypal_payment_detail %}\\n    <div class=\\\"swag-paypal-payment-detail\\\">\\n\\n        {% block swag_paypal_payment_detail_components %}\\n            <component v-if=\\\"!isLoading && showPayPalPayment\\\"\\n                       :is=\\\"'swag-paypal-payment-details-v1'\\\"\\n                       :paymentResource=\\\"paymentResource\\\"\\n                       :orderId=\\\"order.id\\\">\\n            </component>\\n\\n            <component v-if=\\\"!isLoading && showPayPalOrder\\\"\\n                       :is=\\\"'swag-paypal-payment-details-v2'\\\"\\n                       :paypalOrder=\\\"paypalOrder\\\"\\n                       :orderTransaction=\\\"orderTransaction\\\"\\n                       :orderTransactionId=\\\"orderTransaction.id\\\"\\n                       :paypalPartnerAttributionId=\\\"orderTransaction.customFields.swag_paypal_partner_attribution_id\\\">\\n            </component>\\n        {% endblock %}\\n\\n        {% block swag_paypal_payment_detail_error_page %}\\n            {% block swag_paypal_payment_detail_error_page_canceled %}\\n                <div v-if=\\\"showCanceledPaymentError\\\">\\n                    <sw-empty-state\\n                            :title=\\\"$tc('swag-paypal-payment.errorPage.title')\\\"\\n                            :subline=\\\"$tc('swag-paypal-payment.errorPage.canceledPaymentContent')\\\"\\n                            icon=\\\"regular-shopping-bag\\\"\\n                            color=\\\"#A092F0\\\">\\n                    </sw-empty-state>\\n                </div>\\n            {% endblock %}\\n\\n            {% block swag_paypal_payment_detail_error_page_sandbox_live %}\\n                <div v-if=\\\"showSandboxLiveError\\\">\\n                    <sw-empty-state\\n                            :title=\\\"$tc('swag-paypal-payment.errorPage.title')\\\"\\n                            :subline=\\\"$tc('swag-paypal-payment.errorPage.sandboxLiveContent')\\\"\\n                            icon=\\\"regular-shopping-bag\\\"\\n                            color=\\\"#A092F0\\\">\\n                    </sw-empty-state>\\n                </div>\\n            {% endblock %}\\n\\n            {% block swag_paypal_payment_detail_error_page_other %}\\n                <div v-if=\\\"showGeneralError\\\">\\n                    <sw-empty-state\\n                            :title=\\\"$tc('swag-paypal-payment.errorPage.title')\\\"\\n                            :subline=\\\"$tc('swag-paypal-payment.errorPage.other')\\\"\\n                            icon=\\\"regular-shopping-bag\\\"\\n                            color=\\\"#A092F0\\\">\\n                    </sw-empty-state>\\n                </div>\\n            {% endblock %}\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-payment-detail.html.twig';\nimport './swag-paypal-payment-detail.scss';\n\nconst { Component, Filter, Context } = Shopware;\nconst { isEmpty } = Shopware.Utils.types;\nconst Criteria = Shopware.Data.Criteria;\n\nComponent.register('swag-paypal-payment-detail', {\n    template,\n\n    inject: [\n        'SwagPayPalPaymentService',\n        'SwagPayPalOrderService',\n        'repositoryFactory',\n    ],\n\n    mixins: ['notification'],\n\n    data() {\n        return {\n            order: {},\n            orderTransaction: {},\n            paypalOrder: {},\n            paymentResource: {},\n            isLoading: true,\n            orderTransactionState: null,\n        };\n    },\n\n    computed: {\n        dateFilter() {\n            return Filter.getByName('date');\n        },\n\n        stateFailedCancelled() {\n            return this.orderTransactionState === 'failed' || this.orderTransactionState === 'cancelled';\n        },\n\n        showCanceledPaymentError() {\n            return this.isLoading === false\n                && this.showPayPalPayment === false\n                && this.showPayPalOrder === false\n                && this.stateFailedCancelled === true;\n        },\n\n        showSandboxLiveError() {\n            return this.isLoading === false\n                && this.showPayPalPayment === false\n                && this.showPayPalOrder === false\n                && this.stateFailedCancelled === false;\n        },\n\n        showGeneralError() {\n            return this.isLoading === false\n                && this.showPayPalPayment === false\n                && this.showPayPalOrder === false\n                && this.showCanceledPaymentError === false\n                && this.showSandboxLiveError === false;\n        },\n\n        showPayPalPayment() {\n            return isEmpty(this.paymentResource) === false;\n        },\n\n        showPayPalOrder() {\n            return isEmpty(this.paypalOrder) === false;\n        },\n    },\n\n    watch: {\n        '$route'() {\n            this.resetDataAttributes();\n            this.createdComponent();\n        },\n\n        'order.orderNumber'() {\n            this.emitIdentifier();\n        },\n\n        isLoading(value) {\n            this.$emit('loading-change', value);\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.$emit('loading-change', true);\n            const orderId = this.$route.params.id;\n            const orderRepository = this.repositoryFactory.create('order');\n            const orderCriteria = new Criteria(1, 1);\n            orderCriteria.addAssociation('transactions.stateMachineState');\n            orderCriteria\n                .getAssociation('transactions')\n                .addSorting(Criteria.sort('createdAt', 'DESC'))\n                .setLimit(1);\n\n            orderRepository.get(orderId, Context.api, orderCriteria).then((order) => {\n                this.order = order;\n                this.orderTransaction = order.transactions.last();\n                this.orderTransactionState = this.orderTransaction.stateMachineState.technicalName;\n\n                if (this.orderTransaction.customFields === null) {\n                    this.isLoading = false;\n\n                    return;\n                }\n\n                const paypalPaymentId = this.orderTransaction.customFields.swag_paypal_transaction_id;\n                if (paypalPaymentId) {\n                    this.handlePayPalPayment(paypalPaymentId);\n                }\n                const paypalOrderId = this.orderTransaction.customFields.swag_paypal_order_id;\n                if (paypalOrderId) {\n                    this.handlePayPalOrder(paypalOrderId);\n                }\n            });\n        },\n\n        handlePayPalOrder(paypalOrderId) {\n            this.SwagPayPalOrderService.getOrderDetails(this.orderTransaction.id, paypalOrderId).then((paypalOrder) => {\n                this.paypalOrder = paypalOrder;\n                this.isLoading = false;\n            }).catch(this.handleError);\n        },\n\n        handlePayPalPayment(paypalPaymentId) {\n            this.SwagPayPalPaymentService.getPaymentDetails(this.order.id, paypalPaymentId).then((payment) => {\n                this.paymentResource = payment;\n                this.isLoading = false;\n            }).catch(this.handleError);\n        },\n\n        handleError(errorResponse) {\n            try {\n                this.createNotificationError({\n                    message: `${this.$tc('swag-paypal-payment.paymentDetails.error.title')}: ${\n                        errorResponse.response.data.errors[0].detail}`,\n                    autoClose: false,\n                });\n            } catch (e) {\n                this.createNotificationError({\n                    message: `${this.$tc('swag-paypal-payment.paymentDetails.error.title')}: ${errorResponse.message}`,\n                    autoClose: false,\n                });\n            } finally {\n                this.isLoading = false;\n            }\n        },\n\n        emitIdentifier() {\n            const orderNumber = this.order !== null ? this.order.orderNumber : '';\n            this.$emit('identifier-change', orderNumber);\n        },\n\n        resetDataAttributes() {\n            this.isLoading = true;\n            this.paypalOrder = {};\n        },\n    },\n});\n","import './component/swag-paypal-payment-actions';\nimport './component/swag-paypal-payment-actions-v2';\nimport './component/swag-paypal-payment-details-v1';\nimport './component/swag-paypal-payment-details-v2';\nimport './component/swag-paypal-pui-details';\nimport './component/swag-paypal-text-field';\nimport './component/swag-paypal-textarea-field';\nimport './extension/sw-order-detail';\nimport './extension/sw-order-detail-details';\nimport './extension/sw-order-user-card';\nimport './page/swag-paypal-payment-detail';\n\nconst { Module } = Shopware;\n\nModule.register('swag-paypal-payment', {\n    type: 'plugin',\n    name: 'SwagPayPal',\n    title: 'swag-paypal-payment.general.title',\n    description: 'swag-paypal-payment.general.descriptionTextModule',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n    color: '#2b52ff',\n\n    routeMiddleware(next, currentRoute) {\n        if (currentRoute.name === 'sw.order.detail') {\n            currentRoute.children.push({\n                component: 'swag-paypal-payment-detail',\n                name: 'swag.paypal.payment.detail',\n                isChildren: true,\n                path: '/sw/order/detail/:id/paypal',\n                meta: {\n                    parentPath: 'sw.order.index',\n                    privilege: 'order.viewer',\n                },\n            });\n        }\n        next(currentRoute);\n    },\n});\n","const ApiService = Shopware.Classes.ApiService;\n\nclass SwagPayPalApiCredentialsService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'paypal') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    validateApiCredentials(clientId, clientSecret, sandboxActive) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .get(\n                `_action/${this.getApiBasePath()}/validate-api-credentials`,\n                {\n                    params: { clientId, clientSecret, sandboxActive },\n                    headers: headers,\n                },\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    getApiCredentials(authCode, sharedId, nonce, sandboxActive, additionalParams = {}, additionalHeaders = {}) {\n        const params = additionalParams;\n        const headers = this.getBasicHeaders(additionalHeaders);\n\n        return this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/get-api-credentials`,\n                { authCode, sharedId, nonce, sandboxActive },\n                { params, headers },\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    /**\n     * @param {string=} salesChannelId\n     */\n    getMerchantInformation(salesChannelId = null) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .get(\n                `_action/${this.getApiBasePath()}/merchant-information`,\n                {\n                    params: { salesChannelId },\n                    headers: headers,\n                },\n            )\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n}\n\nexport default SwagPayPalApiCredentialsService;\n","const ApiService = Shopware.Classes.ApiService;\n\nclass SwagPayPalPosSettingApiService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'paypal/pos') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    /**\n     * Checks, if an access token for this user data can be created\n     *\n     * @param {string} apiKey\n     * @param {string|null} salesChannelId\n     * @returns {Promise|Object}\n     */\n    validateApiCredentials(apiKey, salesChannelId = null) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .post(`_action/${this.getApiBasePath()}/validate-api-credentials`, { apiKey, salesChannelId }, { headers })\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    /**\n     * Fetch necessary information for the sales channel from Zettle (e.g. currency)\n     * and insert into salesChannel Object\n     *\n     * @param {Object} salesChannel\n     * @param {Boolean} forceLanguage\n     * @returns {Promise|Object}\n     */\n    fetchInformation(salesChannel, forceLanguage = false) {\n        const headers = this.getBasicHeaders();\n        const apiKey = salesChannel.extensions.paypalPosSalesChannel.apiKey;\n\n        return this.httpClient\n            .post(`${this.getApiBasePath()}/fetch-information`, { apiKey }, { headers })\n            .then((response) => {\n                const data = ApiService.handleResponse(response);\n                delete data.extensions;\n\n                if (data.languageId !== null && (salesChannel.id === null || forceLanguage)) {\n                    salesChannel.languages.length = 0;\n                    salesChannel.languages.push({\n                        id: data.languageId,\n                    });\n                } else {\n                    delete data.languageId;\n                }\n\n                Object.assign(salesChannel, data);\n\n                salesChannel.currencies.length = 0;\n                salesChannel.currencies.push({\n                    id: data.currencyId,\n                });\n\n                salesChannel.countries.length = 0;\n                salesChannel.countries.push({\n                    id: data.countryId,\n                });\n\n                return data;\n            });\n    }\n\n    /**\n     * Clone product visibilility from one sales channel to another\n     *\n     * @param {String} toSalesChannelId\n     * @param {String} fromSalesChannelId\n     * @returns {Promise|Object}\n     */\n    cloneProductVisibility(fromSalesChannelId, toSalesChannelId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .post(\n                `_action/${this.getApiBasePath()}/clone-product-visibility`,\n                { fromSalesChannelId, toSalesChannelId },\n                { headers },\n            ).then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    /**\n     * Get product count from Zettle and cloned Sales Channel\n     *\n     * @param {String} salesChannelId\n     * @param {String|null} cloneSalesChannelId\n     * @returns {Promise|Object}\n     */\n    getProductCount(salesChannelId, cloneSalesChannelId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .get(\n                `${this.getApiBasePath()}/product-count`,\n                {\n                    params: { salesChannelId, cloneSalesChannelId },\n                    headers,\n                },\n            ).then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    /**\n     * @returns {string}\n     */\n    generateApiUrl() {\n        const scopes = [\n            'READ:PURCHASE',\n            'READ:FINANCE',\n            'READ:USERINFO',\n            'READ:PRODUCT',\n            'WRITE:PRODUCT',\n        ];\n\n        // eslint-disable-next-line max-len\n        return `https://my.izettle.com/apps/api-keys?name=Shopware%20integration&scopes=${scopes.join('%20')}&utm_source=local_partnership&utm_medium=ecommerce&utm_campaign=shopware`;\n    }\n}\n\nexport default SwagPayPalPosSettingApiService;\n","const ApiService = Shopware.Classes.ApiService;\n\nclass SwagPayPalPosApiService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'paypal/pos') {\n        super(httpClient, loginService, apiEndpoint);\n        this.basicConfig = {\n            timeout: 300000,\n        };\n    }\n\n    startCompleteSync(salesChannelId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient.post(\n            `_action/${this.getApiBasePath()}/sync/${salesChannelId}`,\n            null,\n            {\n                ...this.basicConfig,\n                headers,\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    startProductSync(salesChannelId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient.post(\n            `_action/${this.getApiBasePath()}/sync/${salesChannelId}/products`,\n            null,\n            {\n                ...this.basicConfig,\n                headers,\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    startInventorySync(salesChannelId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient.post(\n            `_action/${this.getApiBasePath()}/sync/${salesChannelId}/inventory`,\n            null,\n            {\n                ...this.basicConfig,\n                headers,\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    startImageSync(salesChannelId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient.post(\n            `_action/${this.getApiBasePath()}/sync/${salesChannelId}/images`,\n            null,\n            {\n                ...this.basicConfig,\n                headers,\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    startLogCleanup(salesChannelId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient.post(\n            `_action/${this.getApiBasePath()}/log/cleanup/${salesChannelId}`,\n            null,\n            {\n                ...this.basicConfig,\n                headers,\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    abortSync(runId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient.post(\n            `_action/${this.getApiBasePath()}/sync/abort/${runId}`,\n            null,\n            {\n                ...this.basicConfig,\n                headers,\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    resetSync(salesChannelId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient.post(\n            `_action/${this.getApiBasePath()}/sync/reset/${salesChannelId}`,\n            null,\n            {\n                ...this.basicConfig,\n                headers,\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    getProductLog(salesChannelId, page = 1, limit = 10) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient.get(\n            `${this.getApiBasePath()}/product-log/${salesChannelId}`,\n            {\n                ...this.basicConfig,\n                headers,\n                params: { page, limit },\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n}\n\nexport default SwagPayPalPosApiService;\n","const ApiService = Shopware.Classes.ApiService;\n\nclass SwagPayPalPosWebhookRegisterService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'paypal/pos') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    registerWebhook(salesChannelId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .post(`_action/${this.getApiBasePath()}/webhook/registration/${salesChannelId}`, {}, { headers })\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n\n    unregisterWebhook(salesChannelId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient\n            .delete(`_action/${this.getApiBasePath()}/webhook/registration/${salesChannelId}`, {}, { headers })\n            .then((response) => {\n                return ApiService.handleResponse(response);\n            });\n    }\n}\n\nexport default SwagPayPalPosWebhookRegisterService;\n","const ApiService = Shopware.Classes.ApiService;\n\nclass SwagPayPalPaymentService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'paypal') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    getPaymentDetails(orderId, payPalPaymentId) {\n        const apiRoute = `${this.getApiBasePath()}/payment-details/${orderId}/${payPalPaymentId}`;\n        return this.httpClient.get(\n            apiRoute,\n            {\n                headers: this.getBasicHeaders(),\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    capturePayment(orderId, resourceType, resourceId, captureAmount, currency, isFinalCapture) {\n        const apiRoute = `_action/${this.getApiBasePath()}/capture-payment/${resourceType}/${resourceId}/${orderId}`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {\n                captureAmount: captureAmount,\n                currency: currency,\n                captureIsFinal: isFinalCapture,\n            },\n            {\n                headers: this.getBasicHeaders(),\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    refundPayment(orderId, resourceType, resourceId, refundAmount, currency, description, reason, invoiceNumber) {\n        const apiRoute = `_action/${this.getApiBasePath()}/refund-payment/${resourceType}/${resourceId}/${orderId}`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {\n                refundAmount: refundAmount,\n                currency: currency,\n                description: description,\n                reason: reason,\n                refundInvoiceNumber: invoiceNumber,\n            },\n            {\n                headers: this.getBasicHeaders(),\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    voidPayment(orderId, resourceType, resourceId) {\n        const apiRoute = `_action/${this.getApiBasePath()}/void-payment/${resourceType}/${resourceId}/${orderId}`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {},\n            {\n                headers: this.getBasicHeaders(),\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n}\n\nexport default SwagPayPalPaymentService;\n","const ApiService = Shopware.Classes.ApiService;\n\nclass SwagPayPalOrderService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'paypal-v2') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    /**\n     * @param {String} orderTransactionId\n     * @param {String} paypalOrderId\n     */\n    getOrderDetails(orderTransactionId, paypalOrderId) {\n        const apiRoute = `${this.getApiBasePath()}/order/${orderTransactionId}/${paypalOrderId}`;\n\n        return this.httpClient.get(\n            apiRoute,\n            this.getDefaultOptions(),\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    /**\n     * @param {String} orderTransactionId\n     * @param {String} captureId\n     * @param {String} paypalOrderId\n     * @param {String} currency\n     * @param {String|Number} amount\n     * @param {String} invoiceNumber\n     * @param {String} noteToPayer\n     * @param {String} partnerAttributionId\n     */\n    refundCapture(\n        orderTransactionId,\n        captureId,\n        paypalOrderId,\n        currency,\n        amount,\n        invoiceNumber,\n        noteToPayer,\n        partnerAttributionId,\n    ) {\n        const params = `/${orderTransactionId}/${captureId}/${paypalOrderId}`;\n        const apiRoute = `${this.getApiBasePath('', '_action')}/refund-capture${params}`;\n\n        return this.doPostRequest(apiRoute, partnerAttributionId, {\n            currency,\n            amount,\n            invoiceNumber,\n            noteToPayer,\n        });\n    }\n\n    /**\n     * @param {String} orderTransactionId\n     * @param {String} authorizationId\n     * @param {String} currency\n     * @param {String|Number} amount\n     * @param {String} invoiceNumber\n     * @param {String} noteToPayer\n     * @param {String} partnerAttributionId\n     * @param {Boolean} isFinal\n     */\n    captureAuthorization(\n        orderTransactionId,\n        authorizationId,\n        currency,\n        amount,\n        invoiceNumber,\n        noteToPayer,\n        partnerAttributionId,\n        isFinal,\n    ) {\n        const params = `/${orderTransactionId}/${authorizationId}`;\n        const apiRoute = `${this.getApiBasePath('', '_action')}/capture-authorization${params}`;\n\n        return this.doPostRequest(apiRoute, partnerAttributionId, {\n            currency,\n            amount,\n            invoiceNumber,\n            noteToPayer,\n            isFinal,\n        });\n    }\n\n    /**\n     * @param {String} orderTransactionId\n     * @param {String} authorizationId\n     * @param {String} partnerAttributionId\n     */\n    voidAuthorization(orderTransactionId, authorizationId, partnerAttributionId) {\n        const params = `/${orderTransactionId}/${authorizationId}`;\n        const apiRoute = `${this.getApiBasePath('', '_action')}/void-authorization${params}`;\n\n        return this.doPostRequest(apiRoute, partnerAttributionId);\n    }\n\n    /**\n     * @param {String} apiRoute\n     * @param {String} partnerAttributionId\n     * @param {Object} requestParameters\n     */\n    doPostRequest(apiRoute, partnerAttributionId, requestParameters = {}) {\n        const params = { partnerAttributionId, ...requestParameters };\n        return this.httpClient.post(\n            apiRoute,\n            params,\n            this.getDefaultOptions(),\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    getDefaultOptions() {\n        return {\n            headers: this.getBasicHeaders(),\n            version: Shopware.Context.api.apiVersion,\n        };\n    }\n}\n\nexport default SwagPayPalOrderService;\n","const ApiService = Shopware.Classes.ApiService;\n\nclass SwagPaypalPaymentMethodService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'paypal') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    /**\n     * Sets the default payment method to PayPal for the given Sales Channel id.\n     *\n     * @param {String|null} salesChannelId\n     *\n     * @returns {Promise}\n     */\n    setDefaultPaymentForSalesChannel(salesChannelId = null) {\n        const apiRoute = `_action/${this.getApiBasePath()}/saleschannel-default`;\n\n        return this.httpClient.post(\n            apiRoute,\n            {\n                salesChannelId,\n            },\n            {\n                headers: this.getBasicHeaders(),\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n}\n\nexport default SwagPaypalPaymentMethodService;\n","const ApiService = Shopware.Classes.ApiService;\n\nclass SwagPayPalDisputeApiService extends ApiService {\n    constructor(httpClient, loginService, apiEndpoint = 'paypal/dispute') {\n        super(httpClient, loginService, apiEndpoint);\n    }\n\n    /**\n     * Get a list of all disputes.\n     * Provide a sales channel ID if you have different merchant accounts for your sales channels.\n     * Disputes could also be filtered by their state.\n     *\n     * @param {String|null} salesChannelId\n     * @param {String|null} disputeStateFilter\n     *\n     * @returns {Promise}\n     */\n    list(salesChannelId = null, disputeStateFilter = null) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient.get(\n            this.getApiBasePath(),\n            {\n                params: { salesChannelId, disputeStateFilter },\n                headers,\n                version: Shopware.Context.api.apiVersion,\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n\n    /**\n     * Get the details of a dispute\n     *\n     * @param {String} disputeId\n     * @param {String|null} salesChannelId\n     *\n     * @returns {Promise}\n     */\n    detail(disputeId, salesChannelId) {\n        const headers = this.getBasicHeaders();\n\n        return this.httpClient.get(\n            `${this.getApiBasePath()}/${disputeId}`,\n            {\n                params: { salesChannelId },\n                headers,\n                version: Shopware.Context.api.apiVersion,\n            },\n        ).then((response) => {\n            return ApiService.handleResponse(response);\n        });\n    }\n}\n\nexport default SwagPayPalDisputeApiService;\n","import SwagPayPalApiCredentialsService from '../core/service/api/swag-paypal-api-credentials.service';\nimport SwagPayPalPosSettingApiService from '../core/service/api/swag-paypal-pos-setting.api.service';\nimport SwagPayPalPosApiService from '../core/service/api/swag-paypal-pos.api.service';\nimport SwagPayPalPosWebhookRegisterService from '../core/service/api/swag-paypal-pos-webhook-register.service';\nimport SwagPayPalPaymentService from '../core/service/api/swag-paypal-payment.service';\nimport SwagPayPalOrderService from '../core/service/api/swag-paypal-order.service';\nimport SwagPaypalPaymentMethodService from '../core/service/api/swag-paypal-payment-method.service';\nimport SwagPayPalDisputeApiService from '../core/service/api/swag-paypal-dispute.api.service';\n\nconst { Application } = Shopware;\n\nconst initContainer = Application.getContainer('init');\n\nApplication.addServiceProvider(\n    'SwagPayPalApiCredentialsService',\n    (container) => new SwagPayPalApiCredentialsService(initContainer.httpClient, container.loginService),\n);\n\nApplication.addServiceProvider(\n    'SwagPayPalPosSettingApiService',\n    (container) => new SwagPayPalPosSettingApiService(initContainer.httpClient, container.loginService),\n);\n\nApplication.addServiceProvider(\n    'SwagPayPalPosApiService',\n    (container) => new SwagPayPalPosApiService(initContainer.httpClient, container.loginService),\n);\n\nApplication.addServiceProvider(\n    'SwagPayPalPosWebhookRegisterService',\n    (container) => new SwagPayPalPosWebhookRegisterService(initContainer.httpClient, container.loginService),\n);\n\nApplication.addServiceProvider(\n    'SwagPayPalPaymentService',\n    (container) => new SwagPayPalPaymentService(initContainer.httpClient, container.loginService),\n);\n\nApplication.addServiceProvider(\n    'SwagPayPalOrderService',\n    (container) => new SwagPayPalOrderService(initContainer.httpClient, container.loginService),\n);\n\nApplication.addServiceProvider(\n    'SwagPaypalPaymentMethodService',\n    (container) => new SwagPaypalPaymentMethodService(initContainer.httpClient, container.loginService),\n);\n\nApplication.addServiceProvider(\n    'SwagPayPalDisputeApiService',\n    (container) => new SwagPayPalDisputeApiService(initContainer.httpClient, container.loginService),\n);\n","import deDeSnippets from '../module/extension/sw-first-run-wizard/snippets/de-DE.json';\nimport enGBSnippets from '../module/extension/sw-first-run-wizard/snippets/en-GB.json';\n\nShopware.Locale.extend('de-DE', deDeSnippets);\nShopware.Locale.extend('en-GB', enGBSnippets);\n","export default (() => {\n    const context = require.context('./svg', false, /svg$/);\n\n    return context.keys().reduce((accumulator, item) => {\n        const componentName = item.split('.')[1].split('/')[1];\n        const component = {\n            name: componentName,\n            functional: true,\n            render(createElement, elementContext) {\n                const data = elementContext.data;\n\n                return createElement('span', {\n                    class: [data.staticClass, data.class],\n                    style: data.style,\n                    attrs: data.attrs,\n                    on: data.on,\n                    domProps: {\n                        innerHTML: context(item),\n                    },\n                });\n            },\n        };\n\n        accumulator.push(component);\n        return accumulator;\n    }, []);\n})();\n","import iconComponents from '../app/assets/icons/icons';\n\nconst { Component } = Shopware;\n\nexport default (() => {\n    return iconComponents.map((component) => {\n        return Component.register(component.name, component);\n    });\n})();\n","import template from './swag-paypal-pos-status.html.twig';\nimport './swag-paypal-pos-status.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pos-status', {\n    template,\n\n    props: {\n        title: {\n            type: String,\n            required: false,\n            default: '',\n        },\n        status: {\n            type: String,\n            required: true,\n        },\n        disabled: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        disabledText: {\n            type: String,\n            required: false,\n            default: '',\n        },\n        icon: {\n            type: String,\n            required: true,\n        },\n        iconAnimated: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        subIcon: {\n            type: String,\n            required: false,\n            default: '',\n        },\n        showSubStatus: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n        isLoading: {\n            type: Boolean,\n            required: true,\n        },\n        variant: {\n            type: String,\n            default: 'info',\n            validValues: ['info', 'warning', 'error', 'success'],\n            validator(value) {\n                return ['info', 'warning', 'error', 'success'].includes(value);\n            },\n        },\n        subVariant: {\n            type: String,\n            default: 'info',\n            validValues: ['info', 'warning', 'error', 'success'],\n            validator(value) {\n                return ['info', 'warning', 'error', 'success'].includes(value);\n            },\n        },\n    },\n\n    computed: {\n        statusClasses() {\n            return {\n                'swag-paypal-pos-status': true,\n                [`swag-paypal-pos-status--${this.variant}`]: true,\n                'swag-paypal-pos-status--disabled': this.disabled,\n            };\n        },\n\n        iconClasses() {\n            return {\n                'swag-paypal-pos-status__icon': true,\n                'swag-paypal-pos-status__icon-animated': this.iconAnimated,\n            };\n        },\n\n        subIconClasses() {\n            return [\n                'swag-paypal-pos-status__subicon',\n                `swag-paypal-pos-status--${this.subVariant}`,\n            ];\n        },\n\n        showSubIcon() {\n            return this.subIcon !== null && this.subIcon !== undefined && this.subIcon !== this.icon;\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_status %}\\n    <sw-card position-identifier=\\\"swag-paypal-pos-status\\\"\\n             :class=\\\"statusClasses\\\"\\n             :isLoading=\\\"isLoading\\\"\\n             :title=\\\"title\\\">\\n\\n        {% block swag_paypal_pos_status_icon %}\\n            <div class=\\\"swag-paypal-pos-status__icon-base\\\">\\n                <sw-icon :class=\\\"iconClasses\\\"\\n                         :name=\\\"icon\\\">\\n                </sw-icon>\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_status_status %}\\n            <div class=\\\"swag-paypal-pos-status__status\\\">\\n                <slot name=\\\"status\\\">{{ status }}</slot>\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_status_detail %}\\n            <div class=\\\"swag-paypal-pos-status__detail\\\">\\n                <slot name=\\\"detail\\\"></slot>\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_status_substatus %}\\n            <div v-if=\\\"showSubStatus\\\" class=\\\"swag-paypal-pos-status__substatus\\\">\\n\\n                {% block swag_paypal_pos_status_substatus_icon %}\\n                    <sw-icon v-if=\\\"showSubIcon\\\"\\n                             :class=\\\"subIconClasses\\\"\\n                             :name=\\\"subIcon\\\">\\n                    </sw-icon>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_status_substatus_content %}\\n                    <span>\\n                        <slot name=\\\"substatus\\\"></slot>\\n                    </span>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_status_actions %}\\n            <div class=\\\"swag-paypal-pos-status__actions\\\">\\n                <slot name=\\\"actions\\\"></slot>\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_status_disabled %}\\n            <div v-if=\\\"disabled\\\" class=\\\"swag-paypal-pos-status__disabled\\\">\\n                <slot name=\\\"disabledText\\\">{{ disabledText }}</slot>\\n            </div>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-account.html.twig';\nimport './swag-paypal-pos-account.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pos-account', {\n    template,\n\n    inject: [\n        'SwagPayPalPosSettingApiService',\n        'repositoryFactory',\n    ],\n\n    props: {\n        salesChannel: {\n            type: Object,\n            require: false,\n            default: null,\n        },\n        lastRun: {\n            type: Object,\n            require: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            isError: false,\n            merchantInfo: null,\n        };\n    },\n\n    computed: {\n        accountName() {\n            if (this.isError) {\n                return this.$tc('swag-paypal-pos.account.errorName');\n            }\n\n            if (!this.merchantInfo) {\n                return this.$tc('swag-paypal-pos.account.loadingName');\n            }\n\n            return this.merchantInfo.name;\n        },\n\n        accountEmail() {\n            if (this.isError) {\n                return this.$tc('swag-paypal-pos.account.errorEmail');\n            }\n\n            if (!this.merchantInfo) {\n                return this.$tc('swag-paypal-pos.account.loadingEmail');\n            }\n\n            return this.merchantInfo.contactEmail;\n        },\n\n        connectionStatusText() {\n            if (this.isError) {\n                return this.$tc('swag-paypal-pos.account.noConnectionStatus');\n            }\n\n            return this.$tc('swag-paypal-pos.account.connectedStatus');\n        },\n\n        connectionStatusVariant() {\n            if (this.isError) {\n                return 'danger';\n            }\n\n            return 'success';\n        },\n\n        runRepository() {\n            return this.repositoryFactory.create('swag_paypal_pos_sales_channel_run');\n        },\n\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n    },\n\n    watch: {\n        salesChannel() {\n            this.loadMerchantData();\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.loadMerchantData();\n        },\n\n        loadMerchantData() {\n            this.isError = false;\n            this.isLoading = true;\n\n            if (this.salesChannel === null) {\n                return Promise.resolve();\n            }\n\n            return this.SwagPayPalPosSettingApiService.fetchInformation(this.salesChannel)\n                .then(({ merchantInformation }) => {\n                    this.merchantInfo = merchantInformation;\n                    this.isError = false;\n                }).catch(() => {\n                    this.merchantInfo = null;\n                    this.isError = true;\n                }).finally(() => {\n                    this.isLoading = false;\n                });\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_account %}\\n    <sw-card class=\\\"swag-paypal-pos-account\\\"\\n             position-identifier=\\\"swag-paypal-pos-account\\\"\\n             :title=\\\"$tc('sw-sales-channel.detail.titleAccount')\\\"\\n             :isLoading=\\\"isLoading\\\">\\n\\n        {% block swag_paypal_pos_account_grid %}\\n            <sw-container columns=\\\"min-content 1fr\\\" align=\\\"center\\\">\\n\\n                {% block swag_paypal_pos_account_grid_logo %}\\n                    <img class=\\\"swag-paypal-pos-account__logo\\\"\\n                         alt=\\\"Zettle Logo\\\"\\n                         :src=\\\"assetFilter('/swagpaypal/static/img/paypal-pos-logo.svg')\\\">\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_account_grid_container %}\\n                    <div class=\\\"swag-paypal-pos-account__container\\\">\\n\\n                        {% block swag_paypal_pos_account_grid_container_info %}\\n                            <div class=\\\"swag-paypal-pos-account__account-info\\\">\\n\\n                                {% block swag_paypal_pos_account_grid_container_info_name %}\\n                                    <div class=\\\"swag-paypal-pos-account__name\\\">\\n                                        {{ accountName }}\\n                                    </div>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_pos_account_grid_container_info_email %}\\n                                    <div class=\\\"swag-paypal-pos-account__email\\\">\\n                                        {{ accountEmail }}\\n                                    </div>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_pos_account_grid_container_info_link %}\\n                                    <sw-external-link href=\\\"https://my.zettle.com\\\"\\n                                                      class=\\\"swag-paypal-pos-account__manage-link\\\">\\n\\n                                        {% block swag_paypal_pos_account_grid_container_info_link_text %}\\n                                            {{ $tc('swag-paypal-pos.account.manageAccount') }}\\n                                        {% endblock %}\\n\\n                                    </sw-external-link>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_pos_account_grid_container_info_edit_button %}\\n                                    {# ToDo PPI-109 - Implement edit connection functionality #}\\n                                    <sw-button v-if=\\\"false\\\"\\n                                               class=\\\"swag-paypal-pos-account__edit-connection-button\\\"\\n                                               size=\\\"small\\\"\\n                                               block>\\n                                        {{ $tc('swag-paypal-pos.account.editConnection') }}\\n                                    </sw-button>\\n                                {% endblock %}\\n                            </div>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_pos_account_grid_container_status %}\\n                            <div class=\\\"swag-paypal-pos-account__status-container\\\">\\n\\n                                {% block swag_paypal_pos_account_grid_container_status_label %}\\n                                    <sw-label class=\\\"swag-paypal-pos-account__status-label\\\"\\n                                              size=\\\"medium\\\"\\n                                              appearance=\\\"pill\\\"\\n                                              :variant=\\\"connectionStatusVariant\\\"\\n                                              :ghost=\\\"false\\\"\\n                                              :caps=\\\"false\\\">\\n\\n                                        {% block swag_paypal_pos_account_grid_container_status_label_badge %}\\n                                            <sw-color-badge class=\\\"swag-paypal-pos-account__status-color-badge\\\"\\n                                                            rounded\\n                                                            :variant=\\\"connectionStatusVariant\\\">\\n                                            </sw-color-badge>\\n                                        {% endblock %}\\n\\n                                        {% block swag_paypal_pos_account_grid_container_status_label_text %}\\n                                            <span class=\\\"swag-paypal-pos-account__status-text\\\">\\n                                                {{ connectionStatusText }}\\n                                            </span>\\n                                        {% endblock %}\\n                                    </sw-label>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_pos_account_grid_container_status_updated %}\\n                                    <div v-if=\\\"lastRun\\\"\\n                                         class=\\\"swag-paypal-pos-account__status-updated\\\">\\n                                        {{ $tc('swag-paypal-pos.account.lastUpdated') }} {{ dateFilter(lastRun.updatedAt, {\\n                                            hour: '2-digit',\\n                                            minute: '2-digit',\\n                                            second: '2-digit',\\n                                            day: '2-digit',\\n                                            month: 'short',\\n                                            year: 'numeric'\\n                                        }) }}\\n                                    </div>\\n                                {% endblock %}\\n                            </div>\\n                        {% endblock %}\\n                    </div>\\n                {% endblock %}\\n            </sw-container>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-status-view.html.twig';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pos-status-view', {\n    template,\n\n    props: {\n        lastFinishedRun: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        lastCompleteRun: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        isLoading: {\n            type: Boolean,\n            default: false,\n        },\n        isSyncing: {\n            type: Boolean,\n            default: false,\n        },\n        salesChannel: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        syncErrors: {\n            type: Array,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            statusErrorLevel: null,\n            statusCompleteErrorLevel: null,\n            iconConfig: {\n                syncing: 'regular-sync',\n                warning: 'regular-exclamation-triangle',\n                error: 'regular-times-xs',\n                success: 'regular-checkmark',\n                noRunYet: 'regular-blocked-circle',\n            },\n        };\n    },\n\n    computed: {\n        status() {\n            if (this.isSyncing) {\n                return 'syncing';\n            }\n            if (this.noRunYet) {\n                return 'noRunYet';\n            }\n            return this.statusErrorLevel;\n        },\n\n        statusVariant() {\n            if (this.isSyncing || this.noRunYet) {\n                return 'info';\n            }\n            return this.statusErrorLevel;\n        },\n\n        statusIcon() {\n            return this.iconConfig[this.status] || 'regular-info-circle';\n        },\n\n        statusIconComplete() {\n            return this.iconConfig[this.statusCompleteErrorLevel];\n        },\n\n        noRunYet() {\n            return this.salesChannel === null\n                || this.salesChannel.id === null\n                || this.lastFinishedRun === null;\n        },\n\n        incompleteLastRun() {\n            return this.salesChannel !== null && this.salesChannel.id !== null\n                && this.lastFinishedRun !== null && this.lastCompleteRun !== null\n                && this.lastFinishedRun.id !== this.lastCompleteRun.id;\n        },\n\n        statusTitle() {\n            let title = this.$tc(`swag-paypal-pos.detail.overview.status.message.${this.status}`);\n            if (this.incompleteLastRun) {\n                const task = this.$tc(`swag-paypal-pos.detail.overview.status.task.${this.lastFinishedRun.task}`);\n                if (!this.isSyncing) {\n                    title += ` (${task})`;\n                }\n            }\n\n            if (this.lastFinishedRun && this.lastFinishedRun.status === 'cancelled' && !this.isSyncing) {\n                title = this.$tc('swag-paypal-pos.detail.overview.status.message.aborted');\n            }\n\n            return title;\n        },\n\n        disabled() {\n            return this.salesChannel !== null && this.salesChannel.id !== null && this.salesChannel.active === false;\n        },\n\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n    },\n\n    watch: {\n        lastFinishedRun: {\n            handler() {\n                this.statusErrorLevel = this.getHighestLevel(this.lastFinishedRun);\n            },\n            immediate: true,\n        },\n        lastCompleteRun: {\n            handler() {\n                this.statusCompleteErrorLevel = this.getHighestLevel(this.lastCompleteRun);\n            },\n            immediate: true,\n        },\n    },\n\n    methods: {\n        getHighestLevel(run) {\n            if (run === null) {\n                return null;\n            }\n\n            if (run.status === 'cancelled') {\n                return 'info';\n            }\n\n            const level = Math.max(...run.logs.map((log) => { return log.level; }));\n            if (level >= 400) {\n                return 'error';\n            }\n\n            if (level >= 300) {\n                return 'warning';\n            }\n\n            return 'success';\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_status_view %}\\n    <swag-paypal-pos-status :disabled=\\\"disabled\\\"\\n                            :disabledText=\\\"$tc('swag-paypal-pos.detail.overview.status.disabled')\\\"\\n                            :icon=\\\"statusIcon\\\"\\n                            :subIcon=\\\"statusIconComplete\\\"\\n                            :iconAnimated=\\\"isSyncing\\\"\\n                            :isLoading=\\\"isLoading || status === null\\\"\\n                            :status=\\\"statusTitle\\\"\\n                            :showSubStatus=\\\"incompleteLastRun\\\"\\n                            :title=\\\"$tc('swag-paypal-pos.detail.overview.titleSync')\\\"\\n                            :variant=\\\"statusVariant\\\"\\n                            :subVariant=\\\"statusCompleteErrorLevel\\\">\\n\\n        {% block swag_paypal_pos_status_view_actions %}\\n            <template #actions>\\n                <slot name=\\\"actions\\\"></slot>\\n            </template>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_status_view_detail %}\\n            <template #detail v-if=\\\"isSyncing\\\">\\n\\n                {% block swag_paypal_pos_status_view_detail_syncing %}\\n                    {{ $tc('swag-paypal-pos.detail.overview.status.syncingDetail') }}\\n                {% endblock %}\\n            </template>\\n\\n            <template #detail v-if=\\\"!isSyncing && lastFinishedRun\\\">\\n                <div>\\n                    {% block swag_paypal_pos_status_view_detail_static %}\\n                        {{ $tc('swag-paypal-pos.detail.overview.status.lastSynced') }}:\\n                        {{ dateFilter(lastFinishedRun.updatedAt, {\\n                            hour: '2-digit',\\n                            minute: '2-digit',\\n                            second: '2-digit',\\n                            day: '2-digit',\\n                            month: 'short',\\n                            year: 'numeric'\\n                        }) }}\\n                    {% endblock %}\\n                </div>\\n\\n                {% block swag_paypal_pos_status_view_detail_errors %}\\n                    <sw-alert v-if=\\\"syncErrors\\\"\\n                              variant=\\\"error\\\"\\n                              :closable=\\\"true\\\"\\n                              :title=\\\"$tc('swag-paypal-pos.detail.overview.syncErrorTitle')\\\">\\n                        <ul>\\n                            <li v-for=\\\"error in syncErrors\\\">{{ error.detail }} ({{ error.code }})</li>\\n                        </ul>\\n                    </sw-alert>\\n                {% endblock %}\\n            </template>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_status_view_substatus %}\\n            <template #substatus v-if=\\\"incompleteLastRun\\\">\\n                {{ $tc('swag-paypal-pos.detail.overview.status.lastSyncedComplete') }}:\\n                {{ dateFilter(lastCompleteRun.updatedAt, {\\n                    hour: '2-digit',\\n                    minute: '2-digit',\\n                    second: '2-digit',\\n                    day: '2-digit',\\n                    month: 'short',\\n                    year: 'numeric'\\n                }) }}\\n            </template>\\n        {% endblock %}\\n    </swag-paypal-pos-status>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-boolean-radio.html.twig';\nimport './swag-paypal-pos-boolean-radio.scss';\n\nconst { Component } = Shopware;\nconst utils = Shopware.Utils;\n\nComponent.register('swag-paypal-pos-boolean-radio', {\n    template,\n\n    model: {\n        prop: 'value',\n        event: 'change',\n    },\n\n    inject: ['feature'],\n\n    props: {\n        value: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n\n        optionTrue: {\n            type: Object,\n            required: true,\n            validator(value) {\n                return value.hasOwnProperty('name');\n            },\n        },\n\n        optionFalse: {\n            type: Object,\n            required: true,\n            validator(value) {\n                return value.hasOwnProperty('name');\n            },\n        },\n    },\n\n    data() {\n        return {\n            inputId: utils.createId(),\n        };\n    },\n\n    computed: {\n        options() {\n            return [\n                {\n                    value: true,\n                    ...this.optionTrue,\n                },\n                {\n                    value: false,\n                    ...this.optionFalse,\n                },\n            ];\n        },\n\n        castedValue: {\n            get() {\n                return this.value;\n            },\n\n            set(val) {\n                if (this.feature.isActive('VUE3')) {\n                    this.$emit('update:value', val);\n\n                    return;\n                }\n\n                this.$emit('change', val);\n            },\n        },\n\n        name() {\n            return `swag-paypal-pos-boolean-radio-${this.inputId}`;\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_boolean_radio %}\\n    <sw-radio-field\\n        {% if VUE3 %}\\n        v-model:value=\\\"castedValue\\\"\\n        {% else %}\\n        v-model=\\\"castedValue\\\"\\n        {% endif %}\\n        v-bind=\\\"$attrs\\\"\\n        class=\\\"swag-paypal-pos-boolean-radio\\\"\\n        :name=\\\"name\\\"\\n        :options=\\\"options\\\">\\n    </sw-radio-field>\\n{% endblock %}\\n\";","export default \"{% block swag_paypal_pos_detail_logs %}\\n    {% block swag_paypal_pos_detail_logs_grid %}\\n        <sw-data-grid identifier=\\\"swag-paypal-pos-detail-logs\\\"\\n                      :columns=\\\"columns\\\"\\n                      :dataSource=\\\"logs\\\"\\n                      :isLoading=\\\"isLoading || loadingLogs\\\"\\n                      :showActions=\\\"true\\\"\\n                      :showSelection=\\\"false\\\"\\n                      :showSettings=\\\"true\\\"\\n                      :allowColumnEdit=\\\"true\\\"\\n                      :sortBy=\\\"sortBy\\\"\\n                      :sortDirection=\\\"sortDirection\\\"\\n                      :skeletonItemAmount=\\\"limit\\\"\\n                      @column-sort=\\\"onSortColumn\\\">\\n\\n            {% block swag_paypal_pos_detail_logs_grid_pagination %}\\n                <template #pagination>\\n                    <sw-pagination :limit=\\\"limit\\\"\\n                                   :page=\\\"page\\\"\\n                                   :total=\\\"total\\\"\\n                                   :total-visible=\\\"7\\\"\\n                                   @page-change=\\\"onPageChange\\\">\\n                    </sw-pagination>\\n                </template>\\n            {% endblock %}\\n\\n            {% block swag_paypal_pos_detail_logs_grid_column_date %}\\n                <template #column-date=\\\"{ item }\\\">\\n\\n                    {% block swag_paypal_pos_detail_logs_grid_column_date_formatted %}\\n                        <template v-if=\\\"item.createdAt\\\">\\n                            {{ dateFilter(item.createdAt, {\\n                                hour: '2-digit',\\n                                minute: '2-digit',\\n                                day: '2-digit',\\n                                month: '2-digit',\\n                                year: '2-digit'\\n                            }) }}\\n                        </template>\\n                    {% endblock %}\\n\\n                    {% block swag_paypal_pos_detail_logs_grid_column_date_empty %}\\n                        <template v-else>\\n                            {{ $tc('swag-paypal-pos.detail.logs.noEntry') }}\\n                        </template>\\n                    {% endblock %}\\n\\n                </template>\\n            {% endblock %}\\n\\n            {% block swag_paypal_pos_detail_logs_grid_column_state %}\\n                <template #column-state=\\\"{ item }\\\">\\n\\n                    {% block swag_paypal_pos_detail_logs_grid_column_state_label %}\\n                        <sw-label v-if=\\\"item.level\\\"\\n                                  appearance=\\\"pill\\\"\\n                                  :variant=\\\"getLabelVariantForItem(item)\\\">\\n                            {{ $tc(getLabelForItem(item)) }}\\n                        </sw-label>\\n                    {% endblock %}\\n\\n                </template>\\n            {% endblock %}\\n\\n        </sw-data-grid>\\n    {% endblock %}\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-detail-logs.html.twig';\nimport './swag-paypal-pos-detail-logs.scss';\n\nconst { Component, Context } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('swag-paypal-pos-detail-logs', {\n    template,\n\n    inject: [\n        'SwagPayPalPosApiService',\n        'repositoryFactory',\n    ],\n\n    mixins: [\n        'notification',\n        'swag-paypal-pos-log-label',\n        'listing',\n    ],\n\n    props: {\n        runId: {\n            type: String,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            logs: [],\n            limit: 10,\n            sortBy: 'createdAt',\n            sortDirection: 'DESC',\n            loadingLogs: false,\n            isLoading: false,\n            disableRouteParams: true,\n        };\n    },\n\n    computed: {\n        logRepository() {\n            return this.repositoryFactory.create('swag_paypal_pos_sales_channel_run_log');\n        },\n\n        columns() {\n            return [{\n                property: 'date',\n                dataIndex: 'createdAt',\n                label: 'swag-paypal-pos.detail.syncedProducts.columns.date',\n                width: '140px',\n                sortable: true,\n            }, {\n                property: 'state',\n                dataIndex: 'level',\n                label: 'swag-paypal-pos.detail.syncedProducts.columns.state',\n                width: '120px',\n                sortable: true,\n            }, {\n                property: 'message',\n                dataIndex: 'message',\n                label: 'swag-paypal-pos.detail.logs.columnLastSync',\n                sortable: true,\n            }];\n        },\n\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n    },\n\n    methods: {\n        getListCriteria() {\n            const params = this.getMainListingParams();\n            const criteria = new Criteria(this.page, this.limit);\n            criteria.addFilter(Criteria.equals('runId', this.runId));\n            criteria.addAssociation('posSalesChannelRun');\n\n            criteria.addSorting(Criteria.sort(params.sortBy, params.sortDirection, params.naturalSorting));\n            criteria.addSorting(Criteria.sort('level', 'DESC'));\n            criteria.addSorting(Criteria.sort('createdAt', 'DESC'));\n\n            return criteria;\n        },\n\n        getList() {\n            this.loadingLogs = true;\n            return this.logRepository.search(this.getListCriteria(), Context.api).then((result) => {\n                this.logs = result;\n                this.total = result.total;\n                this.page = result.criteria.page;\n                this.limit = result.criteria.limit;\n                this.loadingLogs = false;\n            });\n        },\n\n        getLabelVariantForItem(item) {\n            if (item.posSalesChannelRun && item.posSalesChannelRun.status === 'cancelled') {\n                return 'info';\n            }\n\n            return this.getLabelVariant(item.level);\n        },\n\n        getLabelForItem(item) {\n            if (item.posSalesChannelRun && item.posSalesChannelRun.status === 'cancelled') {\n                return 'swag-paypal-pos.detail.logs.states.aborted';\n            }\n\n            return this.getLabel(item.level);\n        },\n    },\n});\n","import template from './swag-paypal-pos-getting-started.html.twig';\nimport './swag-paypal-pos-getting-started.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pos-getting-started', {\n    template,\n\n    computed: {\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_getting_started %}\\n    <sw-card position-identifier=\\\"swag-paypal-pos-getting-started\\\"\\n             :title=\\\"$tc('swag-paypal-pos.gettingStarted.cardTitle')\\\">\\n\\n        {% block swag_paypal_pos_getting_started_reader %}\\n            <sw-container\\n                    class=\\\"swag-paypal-pos-getting-started__container-reader\\\"\\n                    columns=\\\"1fr 3fr\\\"\\n                    justify=\\\"left\\\"\\n                    align=\\\"center\\\">\\n\\n                {% block swag_paypal_pos_getting_started_reader_image %}\\n                    <img class=\\\"swag-paypal-pos-getting-started__image\\\"\\n                         :src=\\\"assetFilter('swagpaypal/static/img/paypal-pos-reader.png')\\\"\\n                         :alt=\\\"$tc('swag-paypal-pos.gettingStarted.readerImageAlt')\\\"/>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_getting_started_reader_description %}\\n                    <div class=\\\"swag-paypal-pos-getting-started__description\\\">\\n\\n                        {% block swag_paypal_pos_getting_started_reader_description_headline %}\\n                            <div class=\\\"swag-paypal-pos-getting-started__description-headline\\\">\\n                                {{ $tc('swag-paypal-pos.gettingStarted.readerHeadline') }}\\n                            </div>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_pos_getting_started_reader_description_text %}\\n                            <div class=\\\"swag-paypal-pos-getting-started__description-text\\\">\\n                                {{ $tc('swag-paypal-pos.gettingStarted.readerText') }}\\n\\n                                {% block swag_paypal_pos_getting_started_reader_description_link %}\\n                                    <sw-external-link :href=\\\"$tc('swag-paypal-pos.gettingStarted.readerLinkTarget')\\\"\\n                                                      class=\\\"swag-paypal-pos-getting-started__description-text-link\\\">\\n                                        {{ $tc('swag-paypal-pos.gettingStarted.readerLinkText') }}\\n                                    </sw-external-link>\\n                                {% endblock %}\\n                            </div>\\n                        {% endblock %}\\n                    </div>\\n                {% endblock %}\\n            </sw-container>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_getting_started_app %}\\n            <sw-container\\n                    class=\\\"swag-paypal-pos-getting-started__container-app\\\"\\n                    columns=\\\"1fr 3fr\\\"\\n                    justify=\\\"left\\\"\\n                    align=\\\"center\\\">\\n\\n                {% block swag_paypal_pos_getting_started_app_image %}\\n                    <img class=\\\"swag-paypal-pos-getting-started__image\\\"\\n                         :src=\\\"assetFilter('swagpaypal/static/img/paypal-pos-app.png')\\\"\\n                         :alt=\\\"$tc('swag-paypal-pos.gettingStarted.appImageAlt')\\\"/>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_getting_started_app_description %}\\n                    <div class=\\\"swag-paypal-pos-getting-started__description \\\">\\n\\n                        {% block swag_paypal_pos_getting_started_app_description_headline %}\\n                            <div class=\\\"swag-paypal-pos-getting-started__description-headline\\\">\\n                                {{ $tc('swag-paypal-pos.gettingStarted.appHeadline') }}\\n                            </div>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_pos_getting_started_app_description_text %}\\n                            <div v-html=\\\"$tc('swag-paypal-pos.gettingStarted.appText')\\\"\\n                                 class=\\\"swag-paypal-pos-getting-started__description-text\\\">\\n                            </div>\\n                        {% endblock %}\\n                    </div>\\n                {% endblock %}\\n            </sw-container>\\n        {% endblock %}\\n    </sw-card>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-continue-setup.html.twig';\nimport './swag-paypal-pos-continue-setup.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pos-continue-setup', {\n    template,\n\n    methods: {\n        onContinueSetup() {\n            this.$router.push(\n                {\n                    name: 'swag.paypal.pos.wizard.customization',\n                    params: { id: this.$route.params.id },\n                },\n            );\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_continue_setup %}\\n    <sw-card position-identifier=\\\"swag-paypal-pos-continue-setup\\\"\\n             :title=\\\"$tc('swag-paypal-pos.detail.overview.continueSetup.cardTitle')\\\">\\n\\n        {% block swag_paypal_pos_continue_setup_container %}\\n            <div class=\\\"swag-paypal-pos__continue-setup\\\">\\n\\n                {% block swag_paypal_pos_continue_setup_container_headline %}\\n                    <h6>{{ $tc('swag-paypal-pos.detail.overview.continueSetup.content.headline') }}</h6>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_continue_setup_container_firstLine %}\\n                    <p>{{ $tc('swag-paypal-pos.detail.overview.continueSetup.content.firstLine') }}</p>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_continue_setup_container_secondLine %}\\n                    <p>{{ $tc('swag-paypal-pos.detail.overview.continueSetup.content.secondLine') }}</p>\\n                {% endblock %}\\n\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_continue_setup_button %}\\n            <sw-button variant=\\\"ghost\\\"\\n                       @click=\\\"onContinueSetup\\\">\\n                {{ $tc('swag-paypal-pos.detail.overview.continueSetup.content.headline') }}\\n            </sw-button>\\n        {% endblock %}\\n\\n    </sw-card>\\n{% endblock %}\\n\";","import { PAYPAL_POS_SALES_CHANNEL_TYPE_ID } from '../../../../constant/swag-paypal.constant';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-sales-channel-menu', {\n    computed: {\n        buildMenuTree() {\n            const menuItems = this.$super('buildMenuTree');\n\n            const posIds = [];\n            this.salesChannels.forEach((salesChannel) => {\n                if (salesChannel.type.id === PAYPAL_POS_SALES_CHANNEL_TYPE_ID) {\n                    posIds.push(salesChannel.id);\n                }\n            });\n\n            menuItems.forEach((menuItem) => {\n                if (posIds.includes(menuItem.id)) {\n                    menuItem.path = 'swag.paypal.pos.detail';\n                }\n            });\n\n            return menuItems;\n        },\n    },\n});\n","import { PAYPAL_POS_SALES_CHANNEL_TYPE_ID } from '../../../../constant/swag-paypal.constant';\n\nconst { Component } = Shopware;\n\nComponent.override('sw-sales-channel-modal', {\n\n    methods: {\n        onAddChannel(salesChannelTypeId) {\n            if (this.isPayPalPosSalesChannel(salesChannelTypeId)) {\n                this.onCloseModal();\n                this.$router.push({ name: 'swag.paypal.pos.wizard' });\n\n                return;\n            }\n\n            this.$super('onAddChannel', salesChannelTypeId);\n        },\n\n        isPayPalPosSalesChannel(salesChannelTypeId) {\n            return salesChannelTypeId === PAYPAL_POS_SALES_CHANNEL_TYPE_ID;\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos %}\\n    <sw-page class=\\\"swag-paypal-pos\\\">\\n\\n        {% block swag_paypal_pos_header %}\\n            <template #smart-bar-header>\\n                <h2>\\n                    {{ $tc('swag-paypal-pos.header') }}\\n                </h2>\\n            </template>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_actions %}\\n            <template #smart-bar-actions>\\n                <sw-button v-for=\\\"button in buttonConfig\\\"\\n                           size=\\\"small\\\"\\n                           {% if VUE2 %}\\n                           :key=\\\"button.key\\\"\\n                           {% endif %}\\n                           :disabled=\\\"button.disabled\\\"\\n                           :isLoading=\\\"button.isLoading || isLoading\\\"\\n                           :variant=\\\"button.variant\\\"\\n                           @click=\\\"onButtonClick(button.action)\\\">\\n                    {{ button.label }}\\n                </sw-button>\\n            </template>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_content %}\\n            <template #content>\\n                <sw-card-view>\\n\\n                    {% block swag_paypal_pos_content_tabs %}\\n                        <sw-tabs v-if=\\\"!isLoading\\\" position-identifier=\\\"swag_paypal_pos_content_tabs\\\" class=\\\"swag-paypal-pos__tabs\\\">\\n\\n                            {%  block swag_paypal_pos_content_tab_base %}\\n                                <sw-tabs-item :route=\\\"{ name: 'swag.paypal.pos.detail.overview', params: { id: $route.params.id } }\\\"\\n                                              :title=\\\"$tc('swag-paypal-pos.tabTitle.overview')\\\">\\n                                    {{ $tc('swag-paypal-pos.tabTitle.overview') }}\\n                                </sw-tabs-item>\\n                            {% endblock %}\\n\\n                            {%  block swag_paypal_pos_content_tab_synced_products %}\\n                                <sw-tabs-item :route=\\\"{ name: 'swag.paypal.pos.detail.syncedProducts', params: { id: $route.params.id } }\\\"\\n                                              :title=\\\"$tc('swag-paypal-pos.tabTitle.syncedProducts')\\\">\\n                                    {{ $tc('swag-paypal-pos.tabTitle.syncedProducts') }}\\n                                </sw-tabs-item>\\n                            {% endblock %}\\n\\n                            {%  block swag_paypal_pos_content_tab_settings %}\\n                                <sw-tabs-item :route=\\\"{ name: 'swag.paypal.pos.detail.settings', params: { id: $route.params.id } }\\\"\\n                                              :title=\\\"$tc('swag-paypal-pos.tabTitle.settings')\\\">\\n                                    {{ $tc('swag-paypal-pos.tabTitle.settings') }}\\n                                </sw-tabs-item>\\n                            {% endblock %}\\n\\n                            {%  block swag_paypal_pos_content_tab_runs %}\\n                                <sw-tabs-item :route=\\\"{ name: 'swag.paypal.pos.detail.runs', params: { id: $route.params.id } }\\\"\\n                                              :title=\\\"$tc('swag-paypal-pos.tabTitle.runs')\\\">\\n                                    {{ $tc('swag-paypal-pos.tabTitle.runs') }}\\n                                </sw-tabs-item>\\n                            {% endblock %}\\n\\n                            {%  block swag_paypal_pos_content_tab_help %}\\n                                <sw-tabs-item href=\\\"https://www.izettle.com/help/articles/1083274-what-is-pos\\\"\\n                                              target=\\\"_blank\\\"\\n                                              class=\\\"swag-paypal-pos__tab-help\\\"\\n                                              :title=\\\"$tc('swag-paypal-pos.tabTitle.help')\\\">\\n                                    {{ $tc('swag-paypal-pos.tabTitle.help') }}\\n                                </sw-tabs-item>\\n                            {% endblock %}\\n                        </sw-tabs>\\n                    {% endblock %}\\n\\n                    {% block swag_paypal_pos_content_account %}\\n                        <swag-paypal-pos-account :lastRun=\\\"lastRun\\\"\\n                                                 :salesChannel=\\\"salesChannel\\\">\\n                        </swag-paypal-pos-account>\\n                    {% endblock %}\\n\\n                    {% block swag_paypal_pos_content_card %}\\n                        {% if VUE3 %}\\n                            <router-view\\n                              v-if=\\\"!isLoading\\\"\\n                              :key=\\\"$route.params.id\\\"\\n                              v-slot=\\\"{ Component }\\\">\\n                               <component\\n                                   :is=\\\"Component\\\"\\n                                   :salesChannel=\\\"salesChannel\\\"\\n                                   :cloneSalesChannelId=\\\"cloneSalesChannelId\\\"\\n                                   :lastRun=\\\"lastRun\\\"\\n                                   :lastCompleteRun=\\\"lastCompleteRun\\\"\\n                                   @buttons-update=\\\"updateButtons\\\"\\n                                   @load-sales-channel=\\\"loadSalesChannel\\\"\\n                                   @run-update=\\\"loadLastRun\\\"\\n                                   @update-clone-sales-channel=\\\"updateCloneSalesChannel\\\"\\n                               />\\n                            </router-view>\\n                        {% else %}\\n                            <router-view v-if=\\\"!isLoading\\\"\\n                                         :key=\\\"$route.params.id\\\"\\n                                         :salesChannel=\\\"salesChannel\\\"\\n                                         :cloneSalesChannelId=\\\"cloneSalesChannelId\\\"\\n                                         :lastRun=\\\"lastRun\\\"\\n                                         :lastCompleteRun=\\\"lastCompleteRun\\\"\\n                                         @buttons-update=\\\"updateButtons\\\"\\n                                         @load-sales-channel=\\\"loadSalesChannel\\\"\\n                                         @run-update=\\\"loadLastRun\\\"\\n                                         @update-clone-sales-channel=\\\"updateCloneSalesChannel\\\">\\n                            </router-view>\\n                        {% endif %}\\n\\n                        <sw-loader v-if=\\\"isLoading\\\"></sw-loader>\\n                    {% endblock %}\\n\\n                    {% block swag_paypal_pos_disclaimer_hero %}\\n                        <sw-card v-show=\\\"!isLoading\\\"\\n                                 class=\\\"swag-paypal-pos__disclaimer-card\\\"\\n                                 position-identifier=\\\"swag-paypal-pos-disclaimer\\\"\\n                                 :hero=\\\"true\\\">\\n\\n                            {% block swag_paypal_pos_disclaimer_container %}\\n                                <div class=\\\"swag-paypal-pos__disclaimer\\\">\\n\\n                                    {% block swag_paypal_pos_disclaimer_title %}\\n                                        <div class=\\\"swag-paypal-pos__disclaimer-title disclaimer-content\\\">\\n                                            {{ $tc('swag-paypal-pos.detail.disclaimer.headline') }}\\n                                        </div>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_pos_disclaimer_subtitle %}\\n                                        <div class=\\\"swag-paypal-pos__disclaimer-subtitle disclaimer-content\\\">\\n                                            {{ $tc('swag-paypal-pos.detail.disclaimer.subheadline') }}\\n                                        </div>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_pos_disclaimer_link %}\\n                                        <a :href=\\\"$tc('swag-paypal-pos.detail.disclaimer.linkTarget')\\\"\\n                                           class=\\\"link swag-paypal-pos__disclaimer-link disclaimer-content\\\"\\n                                           target=\\\"_blank\\\">\\n                                            {{ $tc('swag-paypal-pos.detail.disclaimer.linkText') }}\\n                                        </a>\\n                                    {% endblock %}\\n                                </div>\\n                            {% endblock %}\\n                        </sw-card>\\n                    {% endblock %}\\n                </sw-card-view>\\n            </template>\\n        {% endblock %}\\n    </sw-page>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos.html.twig';\nimport './swag-paypal-pos.scss';\nimport { PAYPAL_POS_SALES_CHANNEL_EXTENSION } from '../../../../constant/swag-paypal.constant';\n\nconst { Component } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('swag-paypal-pos', {\n    template,\n\n    inject: [\n        'salesChannelService',\n        'repositoryFactory',\n    ],\n\n    mixins: [\n        'placeholder',\n    ],\n\n    data() {\n        return {\n            isLoading: false,\n            previousApiKey: null,\n            salesChannel: {},\n            lastRun: null,\n            lastCompleteRun: null,\n            cloneSalesChannelId: null,\n            buttonConfig: [],\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.title,\n        };\n    },\n\n    computed: {\n        title() {\n            return [\n                this.$tc('global.sw-admin-menu.textShopwareAdmin'),\n                this.$tc('sw-sales-channel.general.titleMenuItems'),\n                this.$tc('swag-paypal-pos.general.moduleTitle'),\n            ].reverse().join(' | ');\n        },\n\n        paypalPosSalesChannelRepository() {\n            return this.repositoryFactory.create('swag_paypal_pos_sales_channel');\n        },\n\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        },\n\n        runRepository() {\n            return this.repositoryFactory.create('swag_paypal_pos_sales_channel_run');\n        },\n\n        salesChannelCriteria() {\n            const criteria = new Criteria(1, 500);\n\n            criteria.addAssociation(PAYPAL_POS_SALES_CHANNEL_EXTENSION);\n            criteria.addAssociation('countries');\n            criteria.addAssociation('currencies');\n            criteria.addAssociation('domains');\n            criteria.addAssociation('languages');\n\n            return criteria;\n        },\n    },\n\n    watch: {\n        '$route.params.id'() {\n            this.loadSalesChannel();\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.loadSalesChannel();\n        },\n\n        loadSalesChannel() {\n            if (!this.$route.params.id) {\n                return Promise.resolve();\n            }\n\n            if (this.salesChannel) {\n                this.salesChannel = null;\n            }\n\n            this.isLoading = true;\n            return this.salesChannelRepository\n                .get(this.$route.params.id, Shopware.Context.api, this.salesChannelCriteria)\n                .then((entity) => {\n                    this.salesChannel = entity;\n                    this.previousApiKey = entity.extensions.paypalPosSalesChannel.apiKey;\n                    this.updateRun();\n                    this.isLoading = false;\n                });\n        },\n\n        updateCloneSalesChannel(cloneSalesChannelId) {\n            this.cloneSalesChannelId = cloneSalesChannelId;\n        },\n\n        updateButtons(buttonConfig) {\n            this.buttonConfig = buttonConfig;\n        },\n\n        onButtonClick(action) {\n            if (typeof action === 'string') {\n                this.redirect(action);\n                return;\n            }\n\n            if (typeof action !== 'function') {\n                return;\n            }\n\n            action.call();\n        },\n\n        updateRun() {\n            setTimeout(this.updateRun, 20000);\n            return this.loadLastRun();\n        },\n\n        loadLastRun(needComplete = false) {\n            const criteria = new Criteria(1, 1);\n            criteria.addFilter(Criteria.equals('salesChannelId', this.salesChannel.id));\n            criteria.addFilter(Criteria.not('AND', [Criteria.equals('status', 'in_progress')]));\n            criteria.addSorting(Criteria.sort('createdAt', 'DESC'));\n\n            if (needComplete) {\n                criteria.addFilter(Criteria.equals('task', 'complete'));\n            } else {\n                criteria.addAssociation('logs');\n            }\n\n            return this.runRepository.search(criteria, Shopware.Context.api).then((result) => {\n                if (needComplete) {\n                    this.lastCompleteRun = result.first();\n                    this.$forceUpdate();\n                    return;\n                }\n\n                this.lastRun = result.first();\n                if (this.lastRun !== null && this.lastRun.task !== 'complete') {\n                    this.loadLastRun(true);\n                } else {\n                    this.lastCompleteRun = this.lastRun;\n                }\n                this.$forceUpdate();\n            });\n        },\n    },\n});\n","import template from './swag-paypal-pos-detail-synced-products.html.twig';\nimport './swag-paypal-pos-detail-synced-products.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pos-detail-synced-products', {\n    template,\n\n    inject: [\n        'SwagPayPalPosApiService',\n    ],\n\n    mixins: [\n        'swag-paypal-pos-log-label',\n        'listing',\n    ],\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            products: [],\n            limit: 10,\n            isLoading: false,\n            actions: [\n                {\n                    label: 'swag-paypal-pos.detail.syncedProducts.actions.productDetails',\n                    callback: this.onProductDetails,\n                },\n            ],\n            columns: [\n                {\n                    property: 'name',\n                    label: 'swag-paypal-pos.detail.syncedProducts.columns.name',\n                    sortable: false,\n                },\n                {\n                    property: 'state',\n                    label: 'swag-paypal-pos.detail.syncedProducts.columns.state',\n                    sortable: false,\n                },\n                {\n                    property: 'date',\n                    label: 'swag-paypal-pos.detail.syncedProducts.columns.date',\n                    sortable: false,\n                },\n            ],\n        };\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    computed: {\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n    },\n\n    methods: {\n        createdComponent() {\n            this.$emit('buttons-update', []);\n            this.getList();\n        },\n\n        getList() {\n            if (this.salesChannel === null || this.salesChannel.id === null) {\n                return Promise.resolve();\n            }\n\n            this.isLoading = true;\n            const params = this.getMainListingParams();\n\n            return this.SwagPayPalPosApiService.getProductLog(\n                this.salesChannel.id,\n                params.page,\n                params.limit,\n            ).then((result) => {\n                this.products = Object.values(result.elements);\n                this.total = result.total;\n                this.isLoading = false;\n            });\n        },\n\n        onProductDetails(item) {\n            this.$router.push(\n                {\n                    name: 'sw.product.detail.base',\n                    params: {\n                        id: item.id,\n                    },\n                },\n            );\n        },\n\n        hasSync(item) {\n            return item.extensions.paypalPosLog.length || item.extensions.paypalPosSync.length;\n        },\n\n        getSyncDate(item) {\n            if (!this.hasSync(item)) {\n                return null;\n            }\n\n            if (item.extensions.paypalPosLog[0]) {\n                return item.extensions.paypalPosLog[0].posSalesChannelRun.updatedAt\n                    || item.extensions.paypalPosLog[0].createdAt;\n            }\n\n            return item.extensions.paypalPosSync[0].updatedAt\n                || item.extensions.paypalPosSync[0].createdAt;\n        },\n\n        getLevel(item) {\n            return item.extensions.paypalPosLog[0] ? item.extensions.paypalPosLog[0].level : 200;\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_synced_products %}\\n    <div class=\\\"swag-paypal-pos-detail-synced-products\\\">\\n\\n        {% block swag_paypal_pos_synced_products_grid %}\\n            <sw-card position-identifier=\\\"swag-paypal-pos-synced-products-grid\\\"\\n                     :title=\\\"$tc('swag-paypal-pos.detail.syncedProducts.title')\\\"\\n                     :isLoading=\\\"isLoading\\\">\\n\\n                {% block swag_paypal_pos_synced_products_grid %}\\n                    <template #grid>\\n                        <sw-data-grid v-if=\\\"total > 0\\\"\\n                                      identifier=\\\"swag-paypal-pos-detail-synced-products\\\"\\n                                      :dataSource=\\\"products\\\"\\n                                      :columns=\\\"columns\\\"\\n                                      :isLoading=\\\"isLoading\\\"\\n                                      :showActions=\\\"actions.length > 0\\\"\\n                                      :showSelection=\\\"false\\\"\\n                                      :showSettings=\\\"true\\\"\\n                                      :allowColumnEdit=\\\"true\\\"\\n                                      :sortBy=\\\"sortBy\\\"\\n                                      :sortDirection=\\\"sortDirection\\\"\\n                                      :skeletonItemAmount=\\\"limit\\\"\\n                                      @column-sort=\\\"onSortColumn\\\">\\n\\n                            {% block swag_paypal_pos_synced_products_grid_pagination %}\\n                                <template #pagination>\\n                                    <sw-pagination :limit=\\\"limit\\\"\\n                                                   :page=\\\"page\\\"\\n                                                   :total=\\\"total\\\"\\n                                                   :total-visible=\\\"7\\\"\\n                                                   @page-change=\\\"onPageChange\\\">\\n                                    </sw-pagination>\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_synced_products_grid_column_date %}\\n                                <template #column-date=\\\"{ item }\\\">\\n\\n                                    {% block swag_paypal_pos_synced_products_grid_column_date_formatted %}\\n                                        <template v-if=\\\"hasSync(item)\\\">\\n                                            {{ dateFilter(getSyncDate(item), {\\n                                                hour: '2-digit',\\n                                                minute: '2-digit',\\n                                                day: '2-digit',\\n                                                month: '2-digit',\\n                                                year: '2-digit'\\n                                            }) }}\\n                                        </template>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_pos_synced_products_grid_column_date_empty %}\\n                                        <template v-else>\\n                                            {{ $tc('swag-paypal-pos.detail.syncedProducts.notSyncedYet') }}\\n                                        </template>\\n                                    {% endblock %}\\n\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_synced_products_grid_column_state %}\\n                                <template #column-state=\\\"{ item }\\\">\\n\\n                                    {% block swag_paypal_pos_synced_products_grid_column_state_label_log %}\\n                                        <template v-if=\\\"hasSync(item)\\\">\\n                                            <sw-label appearance=\\\"pill\\\"\\n                                                      :variant=\\\"getLabelVariant(getLevel(item))\\\">\\n                                                {{ $tc(getLabel(getLevel(item))) }}\\n                                            </sw-label>\\n                                        </template>\\n                                    {% endblock %}\\n\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_synced_products_grid_actions %}\\n                                <template v-if=\\\"actions\\\"\\n                                          #actions=\\\"{ item }\\\">\\n                                    <sw-context-menu-item v-for=\\\"action in actions\\\"\\n                                                          {% if VUE2 %}\\n                                                          :key=\\\"action.label\\\"\\n                                                          {% endif %}\\n                                                          @click=\\\"action.callback(item)\\\">\\n                                        {{ $tc(action.label) }}\\n                                    </sw-context-menu-item>\\n                                </template>\\n                            {% endblock %}\\n\\n                        </sw-data-grid>\\n                    </template>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_synced_products_empty_state %}\\n                    <sw-empty-state v-if=\\\"total < 1\\\"\\n                                    class=\\\"swag-paypal-pos-detail-synced-products__empty-state\\\"\\n                                    :title=\\\"$tc('swag-paypal-pos.detail.syncedProducts.emptyState.title')\\\"\\n                                    :subline=\\\"$tc('swag-paypal-pos.detail.syncedProducts.emptyState.message')\\\">\\n                    </sw-empty-state>\\n                {% endblock %}\\n\\n            </sw-card>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","export default \"{% block swag_paypal_pos_detail_overview %}\\n    <div class=\\\"sw-sales-channel-detail-overview\\\">\\n\\n\\n        {% block swag_paypal_pos_detail_overview_status %}\\n            <swag-paypal-pos-status-view\\n                    v-if=\\\"salesChannel.active\\\"\\n                    :isLoading=\\\"isLoading\\\"\\n                    :isSyncing=\\\"isSyncing\\\"\\n                    :lastCompleteRun=\\\"lastCompleteRun\\\"\\n                    :lastFinishedRun=\\\"lastRun\\\"\\n                    :salesChannel=\\\"salesChannel\\\"\\n                    :syncErrors=\\\"syncErrors\\\">\\n\\n                {% block swag_paypal_pos_detail_overview_status_actions %}\\n                    <template #actions>\\n                        <sw-button-group v-if=\\\"salesChannel && salesChannel.active && !isSyncing\\\">\\n\\n                            {% block swag_paypal_pos_detail_overview_status_actions_sync_button %}\\n                                <sw-button class=\\\"swag-paypal-pos-detail-overview__sync-button\\\"\\n                                           variant=\\\"primary\\\"\\n                                           @click=\\\"onStartSync\\\">\\n                                    {{ $tc('swag-paypal-pos.detail.overview.buttonSync') }}\\n                                </sw-button>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_detail_overview_status_actions_sync_context_menu %}\\n                                <sw-context-button>\\n\\n                                    {% block swag_paypal_pos_detail_overview_status_actions_sync_context_menu_button %}\\n                                        <template #button>\\n                                            <sw-button class=\\\"swag-paypal-pos-detail-overview__sync-button-context\\\"\\n                                                       variant=\\\"primary\\\"\\n                                                       square\\n                                                       :disabled=\\\"isSyncing\\\">\\n                                                <sw-icon name=\\\"regular-chevron-down-xs\\\" size=\\\"16\\\"></sw-icon>\\n                                            </sw-button>\\n                                        </template>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_pos_detail_overview_status_actions_sync_context_menu_item_products %}\\n                                        <sw-context-menu-item @click=\\\"onStartProductSync\\\">\\n                                            {{ $tc('swag-paypal-pos.detail.overview.buttonSyncProducts') }}\\n                                        </sw-context-menu-item>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_pos_detail_overview_status_actions_sync_context_menu_item_image %}\\n                                        <sw-context-menu-item @click=\\\"onStartImageSync\\\">\\n                                            {{ $tc('swag-paypal-pos.detail.overview.buttonSyncImages') }}\\n                                        </sw-context-menu-item>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_pos_detail_overview_status_actions_sync_context_menu_item_inventory %}\\n                                        <sw-context-menu-item @click=\\\"onStartInventorySync\\\">\\n                                            {{ $tc('swag-paypal-pos.detail.overview.buttonSyncInventory') }}\\n                                        </sw-context-menu-item>\\n                                    {% endblock %}\\n                                </sw-context-button>\\n                            {% endblock %}\\n                        </sw-button-group>\\n\\n                        {% block swag_paypal_pos_detail_overview_status_actions_sync_abort_button %}\\n                            <sw-button v-if=\\\"isSyncing\\\"\\n                                       @click=\\\"onSyncAbort\\\">\\n                                {{ $tc('swag-paypal-pos.detail.overview.buttonSyncAbort') }}\\n                            </sw-button>\\n                        {% endblock %}\\n                    </template>\\n                {% endblock %}\\n            </swag-paypal-pos-status-view>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_detail_overview_setup %}\\n            <swag-paypal-pos-continue-setup v-else>\\n            </swag-paypal-pos-continue-setup>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_detail_overview_getting_started %}\\n            <swag-paypal-pos-getting-started>\\n            </swag-paypal-pos-getting-started>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-detail-overview.html.twig';\nimport './swag-paypal-pos-detail-overview.scss';\n\nconst { Component } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('swag-paypal-pos-detail-overview', {\n    template,\n\n    inject: [\n        'SwagPayPalPosApiService',\n        'salesChannelService',\n        'repositoryFactory',\n    ],\n\n    mixins: [\n        'placeholder',\n    ],\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        lastRun: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n        lastCompleteRun: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            isSyncing: false,\n            syncErrors: null,\n            syncingRunId: null,\n            statusErrorLevel: null,\n            isLoading: false,\n        };\n    },\n\n    computed: {\n        runRepository() {\n            return this.repositoryFactory.create('swag_paypal_pos_sales_channel_run');\n        },\n    },\n\n    watch: {\n        'salesChannel.id'() {\n            this.checkForSync();\n        },\n        lastRun() {\n            this.$forceUpdate();\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    mounted() {\n        this.mountedComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.checkForSync();\n        },\n\n        mountedComponent() {\n            this.updateButtons();\n        },\n\n        forceUpdate() {\n            this.$forceUpdate();\n        },\n\n        startSync(callable) {\n            this.syncErrors = null;\n            this.isSyncing = true;\n            this.updateButtons(true);\n            callable(this.salesChannel.id).then((response) => {\n                this.syncingRunId = response.runId;\n                this.updateSync();\n            }).catch((errorResponse) => {\n                this.syncErrors = errorResponse.response.data.errors;\n                this.$emit('run-update');\n                this.isSyncing = false;\n                this.updateButtons();\n            });\n        },\n\n        updateSync() {\n            if (this.syncingRunId === null) {\n                return;\n            }\n\n            this.runRepository.get(this.syncingRunId, Shopware.Context.api).then((entity) => {\n                if (entity !== null && entity.status === 'in_progress') {\n                    setTimeout(this.updateSync, 1500);\n                    return;\n                }\n\n                this.syncingRunId = null;\n                this.$emit('run-update');\n                this.isSyncing = false;\n                this.updateButtons();\n            });\n        },\n\n        onStartSync() {\n            this.startSync(this.SwagPayPalPosApiService.startCompleteSync.bind(this.SwagPayPalPosApiService));\n        },\n\n        onStartProductSync() {\n            this.startSync(this.SwagPayPalPosApiService.startProductSync.bind(this.SwagPayPalPosApiService));\n        },\n\n        onStartImageSync() {\n            this.startSync(this.SwagPayPalPosApiService.startImageSync.bind(this.SwagPayPalPosApiService));\n        },\n\n        onStartInventorySync() {\n            this.startSync(this.SwagPayPalPosApiService.startInventorySync.bind(this.SwagPayPalPosApiService));\n        },\n\n        onSyncAbort() {\n            if (this.syncingRunId !== null) {\n                this.SwagPayPalPosApiService.abortSync(this.syncingRunId).then(() => {\n                    this.updateSync();\n                });\n            }\n        },\n\n        checkForSync() {\n            if (this.salesChannel === null || this.salesChannel.id === null) {\n                return;\n            }\n\n            const criteria = new Criteria(1, 1);\n            criteria.addFilter(Criteria.equals('salesChannelId', this.salesChannel.id));\n            criteria.addFilter(Criteria.equals('status', 'in_progress'));\n            criteria.addSorting(Criteria.sort('createdAt', 'DESC'));\n\n            this.runRepository.search(criteria, Shopware.Context.api).then((result) => {\n                if (result.first() === null) {\n                    return;\n                }\n                this.isSyncing = true;\n                this.syncingRunId = result.first().id;\n                this.updateSync();\n            });\n        },\n\n        updateButtons(syncing = false) {\n            const buttonConfig = [\n                {\n                    key: 'sync',\n                    label: this.$tc('swag-paypal-pos.detail.overview.buttonSync'),\n                    variant: 'primary',\n                    action: this.onStartSync,\n                    disabled: !(this.salesChannel && this.salesChannel.active),\n                    isLoading: this.isSyncing,\n                },\n            ];\n\n            if (syncing) {\n                buttonConfig.unshift(\n                    {\n                        key: 'abortSync',\n                        label: this.$tc('swag-paypal-pos.detail.overview.buttonSyncAbort'),\n                        action: this.onSyncAbort,\n                        disabled: !(this.salesChannel && this.salesChannel.active),\n                    },\n                );\n            }\n\n            this.$emit('buttons-update', buttonConfig);\n        },\n    },\n});\n","import template from './swag-paypal-pos-detail-settings.html.twig';\nimport './swag-paypal-pos-detail-settings.scss';\n\nconst { Component, Context, State } = Shopware;\nconst { mapPropertyErrors } = Component.getComponentHelper();\nconst { ShopwareError } = Shopware.Classes;\n\n\nComponent.register('swag-paypal-pos-detail-settings', {\n    template,\n\n    inject: [\n        'SwagPayPalPosApiService',\n        'SwagPayPalPosSettingApiService',\n        'SwagPayPalPosWebhookRegisterService',\n        'salesChannelService',\n        'repositoryFactory',\n        'acl',\n    ],\n\n    mixins: [\n        'swag-paypal-pos-catch-error',\n        'placeholder',\n        'notification',\n    ],\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: true,\n        },\n        cloneSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            showDeleteModal: false,\n            showResetModal: false,\n            isSaveSuccessful: false,\n            isTestingCredentials: false,\n            isTestCredentialsSuccessful: false,\n            apiKeyUrl: this.SwagPayPalPosSettingApiService.generateApiUrl(),\n            previousApiKey: this.salesChannel.extensions.paypalPosSalesChannel.apiKey,\n        };\n    },\n\n    computed: {\n        ...mapPropertyErrors('salesChannel', ['name']),\n        ...mapPropertyErrors('swagPaypalPosSalesChannel', ['mediaDomain']),\n\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        },\n\n        optionSyncPrices() {\n            return {\n                name: this.$tc('swag-paypal-pos.wizard.syncPrices.optionTrueLabel'),\n                description: this.$tc('swag-paypal-pos.wizard.syncPrices.optionTrueDescription'),\n            };\n        },\n\n        optionNotSyncPrices() {\n            return {\n                name: this.$tc('swag-paypal-pos.wizard.syncPrices.optionFalseLabel'),\n                description: this.$tc('swag-paypal-pos.wizard.syncPrices.optionFalseDescription'),\n            };\n        },\n\n        optionsReplace() {\n            return [\n                {\n                    value: 2,\n                    name: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplacePermanentlyLabel'),\n                    description: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplacePermanentlyDescription'),\n                }, {\n                    value: 1,\n                    name: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplaceOneTimeLabel'),\n                    description: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplaceOneTimeDescription'),\n                }, {\n                    value: 0,\n                    name: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplaceNotLabel'),\n                    description: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplaceNotDescription'),\n                },\n            ];\n        },\n\n        swagPaypalPosSalesChannel() {\n            return this.salesChannel.extensions.paypalPosSalesChannel;\n        },\n    },\n\n    mounted() {\n        this.mountedComponent();\n    },\n\n    methods: {\n        mountedComponent() {\n            this.updateButtons();\n        },\n\n        forceUpdate() {\n            this.$forceUpdate();\n        },\n\n        onSave() {\n            this.isLoading = true;\n            this.isSaveSuccessful = false;\n            this.updateButtons();\n\n            if (this.swagPaypalPosSalesChannel.apiKey === this.previousApiKey) {\n                return this.save();\n            }\n\n            return this.SwagPayPalPosSettingApiService\n                .validateApiCredentials(this.swagPaypalPosSalesChannel.apiKey, this.salesChannel.id)\n                .then(() => {\n                    return this.SwagPayPalPosSettingApiService.fetchInformation(this.salesChannel, true);\n                })\n                .then(this.save)\n                .catch((errorResponse) => {\n                    this.catchAuthenticationError((errorResponse));\n                    this.isLoading = false;\n                    this.updateButtons();\n                    throw errorResponse;\n                });\n        },\n\n        save() {\n            this.SwagPayPalPosWebhookRegisterService.registerWebhook(this.salesChannel.id)\n                .catch(this.catchError.bind(this, 'swag-paypal-pos.messageWebhookRegisterError'));\n\n            return this.salesChannelRepository\n                .save(this.salesChannel, Context.api)\n                .then(() => {\n                    this.isLoading = false;\n                    this.isSaveSuccessful = true;\n                    this.updateButtons();\n\n                    this.$emit('load-sales-channel');\n                    this.$root.$emit('sales-channel-change');\n\n                    if (this.cloneSalesChannelId !== null) {\n                        this.SwagPayPalPosSettingApiService.cloneProductVisibility(\n                            this.cloneSalesChannelId,\n                            this.salesChannel.id,\n                        ).catch(this.catchError.bind(this, 'swag-paypal-pos.messageCloneError'));\n                    }\n                }).catch(() => {\n                    this.isLoading = false;\n                    this.updateButtons();\n\n                    this.createNotificationError({\n                        message: this.$tc('sw-sales-channel.detail.messageSaveError', 0, {\n                            name: this.salesChannel.name || this.placeholder(this.salesChannel, 'name'),\n                        }),\n                    });\n                }).finally(() => {\n                    if (this.swagPaypalPosSalesChannel.mediaDomain === null) {\n                        const expression =\n                            `swag_paypal_pos_sales_channel.${this.swagPaypalPosSalesChannel.id}.mediaDomain`;\n                        const error = new ShopwareError({ code: 'INVALID_URL' });\n                        State.commit('error/addApiError', { expression, error });\n                    }\n                });\n        },\n\n        testCredentials() {\n            const apiKey = this.swagPaypalPosSalesChannel.apiKey;\n\n            this.isTestingCredentials = true;\n            this.isTestCredentialsSuccessful = false;\n\n            this.SwagPayPalPosSettingApiService.validateApiCredentials(apiKey).then((response) => {\n                const credentialsValid = response.credentialsValid;\n                this.isTestingCredentials = false;\n                this.isTestCredentialsSuccessful = credentialsValid;\n            }).catch((errorResponse) => {\n                this.catchAuthenticationError(errorResponse);\n                this.isTestingCredentials = false;\n            });\n        },\n\n        catchAuthenticationError(errorResponse) {\n            this.catchError('swag-paypal-pos.authentication.messageTestError', errorResponse);\n\n            this.isTestingCredentials = false;\n            this.isTestCredentialsSuccessful = false;\n        },\n\n        updateButtons() {\n            const buttonConfig = [\n                {\n                    key: 'save',\n                    label: this.$tc('global.default.save'),\n                    variant: 'primary',\n                    action: this.onSave,\n                    disabled: false,\n                    isLoading: this.isLoading,\n                },\n            ];\n\n            this.$emit('buttons-update', buttonConfig);\n        },\n\n        onConfirmDelete() {\n            this.showDeleteModal = false;\n\n            this.$nextTick(() => {\n                this.deleteSalesChannel(this.salesChannel.id);\n                this.$router.push({ name: 'sw.dashboard.index' });\n            });\n        },\n\n        deleteSalesChannel(salesChannelId) {\n            return this.SwagPayPalPosWebhookRegisterService.unregisterWebhook(salesChannelId).finally(() => {\n                return this.salesChannelRepository.delete(salesChannelId, Shopware.Context.api).then(() => {\n                    this.$root.$emit('sales-channel-change');\n                });\n            });\n        },\n\n        onConfirmReset() {\n            this.showResetModal = false;\n\n            this.$nextTick(() => {\n                this.SwagPayPalPosApiService.resetSync(this.salesChannel.id).then(() => {\n                    this.$router.push({ name: 'swag.paypal.pos.detail.overview', params: { id: this.salesChannel.id } });\n                });\n            });\n        },\n\n        changeLanguage() {\n            this.$nextTick(() => {\n                this.salesChannel.languages.length = 0;\n                this.salesChannel.languages.push({\n                    id: this.salesChannel.languageId,\n                });\n                this.$forceUpdate();\n            });\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_detail_settings %}\\n    <div class=\\\"swag-paypal-pos-detail-settings\\\">\\n\\n        {% block swag_paypal_pos_detail_settings_alert %}\\n            <sw-alert class=\\\"swag-paypal-pos-detail-settings__save-alert\\\">\\n                {{ $tc('swag-paypal-pos.detail.settings.saveAlert') }}\\n            </sw-alert>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_detail_settings_basic %}\\n            <sw-card position-identifier=\\\"swag-paypal-pos-detail-settings-basic\\\"\\n                     :isLoading=\\\"isLoading\\\"\\n                     :title=\\\"$tc('swag-paypal-pos.detail.settings.titleGeneralSettings')\\\">\\n                <sw-container columns=\\\"1fr 200px\\\" gap=\\\"0px 30px\\\">\\n\\n                    {% block swag_paypal_pos_detail_settings_input_name %}\\n                        <sw-text-field\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"salesChannel.name\\\"\\n                                {% else %}\\n                                v-model=\\\"salesChannel.name\\\"\\n                                {% endif %}\\n                                required\\n                                type=\\\"text\\\"\\n                                validation=\\\"required\\\"\\n                                :error=\\\"salesChannelNameError\\\"\\n                                :disabled=\\\"!acl.can('sales_channel.editor')\\\"\\n                                :label=\\\"$tc('sw-sales-channel.detail.labelInputName')\\\"\\n                                :placeholder=\\\"placeholder(salesChannel, 'name', $tc('sw-sales-channel.detail.placeholderName'))\\\">\\n                        </sw-text-field>\\n                    {% endblock %}\\n\\n                    {% block swag_paypal_pos_detail_settings_input_active %}\\n                        <sw-switch-field\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"salesChannel.active\\\"\\n                                {% else %}\\n                                v-model=\\\"salesChannel.active\\\"\\n                                {% endif %}\\n                                bordered\\n                                :disabled=\\\"!acl.can('sales_channel.editor')\\\"\\n                                :label=\\\"$tc('sw-sales-channel.detail.labelInputActive')\\\"\\n                                :helpText=\\\"$tc('swag-paypal-pos.detail.settings.activeHelpText')\\\">\\n                        </sw-switch-field>\\n                    {% endblock %}\\n\\n                </sw-container>\\n\\n                {% block swag_paypal_pos_detail_settings_input_media_domain %}\\n                    <swag-paypal-pos-url-field\\n                            {% if VUE3 %}\\n                            v-model:value=\\\"swagPaypalPosSalesChannel.mediaDomain\\\"\\n                            {% else %}\\n                            v-model=\\\"swagPayPalPosSalesChannel.mediaDomain\\\"\\n                            {% endif %}\\n                            required\\n                            validation=\\\"required\\\"\\n                            :error=\\\"swagPaypalPosSalesChannelMediaDomainError\\\"\\n                            :disabled=\\\"!acl.can('sales_channel.editor')\\\"\\n                            :label=\\\"$tc('swag-paypal-pos.detail.settings.domain')\\\"\\n                            :helpText=\\\"$tc('swag-paypal-pos.detail.settings.domainHelpText')\\\"\\n                            @input=\\\"forceUpdate\\\">\\n                    </swag-paypal-pos-url-field>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_detail_settings_input_language %}\\n                    <sw-entity-single-select\\n                            {% if VUE3 %}\\n                            v-model:value=\\\"salesChannel.languageId\\\"\\n                            {% else %}\\n                            v-model=\\\"salesChannel.languageId\\\"\\n                            {% endif %}\\n                            entity=\\\"language\\\"\\n                            required\\n                            :disabled=\\\"!acl.can('sales_channel.editor')\\\"\\n                            :label=\\\"$tc('global.entities.language')\\\"\\n                            @change=\\\"changeLanguage\\\">\\n                    </sw-entity-single-select>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_detail_settings_input_product_stream %}\\n                    {# ToDo PPI-56 - implement support for product streams #}\\n                    <sw-entity-single-select\\n                            v-if=\\\"false\\\"\\n                            {% if VUE3 %}\\n                            v-model:value=\\\"swagPaypalPosSalesChannel.productStreamId\\\"\\n                            {% else %}\\n                            v-model=\\\"swagPaypalPosSalesChannel.productStreamId\\\"\\n                            {% endif %}\\n                            entity=\\\"product_stream\\\"\\n                            :disabled=\\\"!acl.can('sales_channel.editor')\\\"\\n                            :label=\\\"$tc('swag-paypal-pos.detail.settings.productStream')\\\"\\n                            @change=\\\"forceUpdate\\\">\\n                    </sw-entity-single-select>\\n                {% endblock %}\\n\\n            </sw-card>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_detail_settings_sync %}\\n            <div class=\\\"sw-sales-channel-detail-sync\\\">\\n                <sw-card position-identifier=\\\"swag-paypal-pos-detail-settings-sync\\\"\\n                         :isLoading=\\\"isLoading\\\"\\n                         :title=\\\"$tc('swag-paypal-pos.detail.settings.titleSync')\\\">\\n\\n                    {% block swag_paypal_pos_detail_settings_sync_input %}\\n                        <sw-radio-field\\n                            {% if VUE3 %}\\n                            v-model:value=\\\"salesChannel.extensions.paypalPosSalesChannel.replace\\\"\\n                            {% else %}\\n                            v-model=\\\"salesChannel.extensions.paypalPosSalesChannel.replace\\\"\\n                            {% endif %}\\n                            :label=\\\"$tc('swag-paypal-pos.wizard.syncLibrary.description')\\\"\\n                            class=\\\"swag-paypal-pos-boolean-radio\\\"\\n                            :options=\\\"optionsReplace\\\"\\n                            :disabled=\\\"!acl.can('sales_channel.editor')\\\"\\n                            @input=\\\"forceUpdate\\\">\\n                        </sw-radio-field>\\n                    {% endblock %}\\n\\n                </sw-card>\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_detail_settings_prices %}\\n            <div class=\\\"sw-sales-channel-detail-prices\\\">\\n                <sw-card position-identifier=\\\"swag-paypal-pos-detail-settings-prices\\\"\\n                         :isLoading=\\\"isLoading\\\"\\n                         :title=\\\"$tc('swag-paypal-pos.detail.settings.titlePrices')\\\">\\n\\n                    {% block swag_paypal_pos_detail_settings_prices_input %}\\n                        <swag-paypal-pos-boolean-radio\\n                            {% if VUE3 %}\\n                            v-model:value=\\\"swagPaypalPosSalesChannel.syncPrices\\\"\\n                            {% else %}\\n                            v-model=\\\"swagPaypalPosSalesChannel.syncPrices\\\"\\n                            {% endif %}\\n                            class=\\\"swag-paypal-pos-detail-settings__sync-prices-input\\\"\\n                            :label=\\\"$tc('swag-paypal-pos.wizard.syncPrices.description')\\\"\\n                            :optionTrue=\\\"optionSyncPrices\\\"\\n                            :optionFalse=\\\"optionNotSyncPrices\\\"\\n                            :disabled=\\\"!acl.can('sales_channel.editor')\\\"\\n                            @input=\\\"forceUpdate\\\">\\n                        </swag-paypal-pos-boolean-radio>\\n                    {% endblock %}\\n\\n                </sw-card>\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_detail_settings_credentials %}\\n            <div class=\\\"sw-sales-channel-detail-credentials\\\">\\n                <sw-card position-identifier=\\\"swag-paypal-pos-detail-settings-credentials\\\"\\n                         :isLoading=\\\"isLoading\\\"\\n                         :title=\\\"$tc('swag-paypal-pos.detail.settings.titleCredentials')\\\">\\n\\n                    {% block swag_paypal_pos_detail_settings_credentials_apikey %}\\n                        <sw-password-field\\n                                {% if VUE3 %}\\n                                v-model:value=\\\"swagPaypalPosSalesChannel.apiKey\\\"\\n                                {% else %}\\n                                v-model=\\\"swagPaypalPosSalesChannel.apiKey\\\"\\n                                {% endif %}\\n                                class=\\\"swag-paypal-pos-detail-settings__apikey-field\\\"\\n                                required\\n                                :label=\\\"$tc('swag-paypal-pos.authentication.labelApiKey')\\\"\\n                                :disabled=\\\"!acl.can('sales_channel.editor')\\\"\\n                                :placeholder=\\\"$tc('swag-paypal-pos.authentication.placeholderApiKey')\\\"\\n                                @input=\\\"forceUpdate\\\">\\n                            <template #suffix>\\n\\n                                {% block swag_paypal_pos_detail_settings_credentials_apikey_suffix %}\\n                                    <sw-icon name=\\\"regular-low-vision\\\"\\n                                             class=\\\"swag-paypal-pos-detail-settings__apikey-suffix\\\"\\n                                             size=\\\"22px\\\">\\n                                    </sw-icon>\\n                                {% endblock %}\\n                            </template>\\n                        </sw-password-field>\\n                    {% endblock %}\\n\\n                    {% block swag_paypal_pos_detail_settings_credentials_apikey_description %}\\n                        <div class=\\\"swag-paypal-pos-detail-settings__apikey-description\\\">\\n\\n                            {% block swag_paypal_pos_detail_settings_credentials_apikey_description_text %}\\n                                <div class=\\\"swag-paypal-pos-detail-settings__apikey-description-text\\\">\\n                                    {{ $tc('swag-paypal-pos.authentication.apiKeyDescription') }}\\n                                </div>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_detail_settings_credentials_apikey_description_link %}\\n                                <sw-external-link v-if=\\\"acl.can('sales_channel.editor')\\\"\\n                                                  :href=\\\"apiKeyUrl\\\"\\n                                                  class=\\\"swag-paypal-pos-detail-settings__apikey-description-link\\\">\\n\\n                                    {% block swag_paypal_pos_detail_settings_credentials_apikey_description_link_text %}\\n                                        {{ $tc('swag-paypal-pos.authentication.buttonGenerateKey') }}\\n                                    {% endblock %}\\n                                </sw-external-link>\\n                            {% endblock %}\\n                        </div>\\n                    {% endblock %}\\n\\n                </sw-card>\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_detail_settings_options %}\\n            <sw-card position-identifier=\\\"swag-paypal-pos-detail-settings-options\\\"\\n                     :title=\\\"$tc('swag-paypal-pos.detail.settings.optionsTitle')\\\"\\n                     :isLoading=\\\"isLoading\\\">\\n                <template #grid>\\n                    <sw-container rows=\\\"auto auto\\\">\\n\\n                        {% block swag_paypal_pos_detail_settings_options_reset %}\\n                            <sw-card-section>\\n                                <sw-container columns=\\\"1fr 175px\\\" gap=\\\"0px 30px\\\" class=\\\"swag-paypal-pos-detail-settings__reset-sync\\\">\\n\\n                                    {% block sw_sales_channel_detail_base_options_reset_text %}\\n                                        <div class=\\\"swag-paypal-pos-detail-settings__options-description-text\\\">\\n                                            {{ $tc('swag-paypal-pos.detail.settings.reset.descriptionText') }}\\n                                        </div>\\n                                    {% endblock %}\\n\\n                                    {% block sw_sales_channel_detail_base_options_reset_button %}\\n                                        <div class=\\\"swag-paypal-pos-detail-settings__options-button\\\">\\n                                            <sw-button size=\\\"small\\\"\\n                                                       :disabled=\\\"!acl.can('sales_channel.editor')\\\"\\n                                                       @click=\\\"showResetModal = true\\\">\\n                                                {{ $tc('swag-paypal-pos.detail.settings.reset.buttonTitle') }}\\n                                            </sw-button>\\n                                        </div>\\n                                    {% endblock %}\\n\\n                                </sw-container>\\n                            </sw-card-section>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_pos_detail_settings_options_delete %}\\n                            <sw-card-section divider=\\\"top\\\">\\n                                <sw-container columns=\\\"1fr 175px\\\" gap=\\\"0px 30px\\\" class=\\\"sw-sales-channel-detail-settings__delete-sales-channel\\\">\\n\\n                                    {% block sw_sales_channel_detail_base_options_delete_text %}\\n                                        <div class=\\\"swag-paypal-pos-detail-settings__options-description-text\\\">\\n                                            <strong>{{ $tc('global.default.warning') }}</strong>\\n                                            {{ $tc('sw-sales-channel.detail.textDeleteSalesChannelWarning') }}\\n                                        </div>\\n                                    {% endblock %}\\n\\n                                    {% block sw_sales_channel_detail_base_options_delete_button %}\\n                                        <div class=\\\"swag-paypal-pos-detail-settings__options-button\\\">\\n                                            <sw-button\\n                                                variant=\\\"danger\\\"\\n                                                size=\\\"small\\\"\\n                                                :disabled=\\\"!acl.can('sales_channel.deleter')\\\"\\n                                                @click=\\\"showDeleteModal = true\\\">\\n                                                {{ $tc('sw-sales-channel.detail.buttonDelete') }}\\n                                            </sw-button>\\n                                        </div>\\n                                    {% endblock %}\\n\\n                                </sw-container>\\n                            </sw-card-section>\\n                        {% endblock %}\\n\\n                    </sw-container>\\n                </template>\\n\\n                {% block swag_paypal_pos_detail_settings_options_reset_modal %}\\n                    <sw-modal v-if=\\\"showResetModal\\\"\\n                              class=\\\"swag-paypal-pos-detail-settings__reset-sync-modal\\\"\\n                              ref=\\\"modal\\\"\\n                              variant=\\\"small\\\"\\n                              :title=\\\"$tc('swag-paypal-pos.detail.settings.reset.modalTitle')\\\"\\n                              @modal-close=\\\"showResetModal = false\\\">\\n\\n                        {% block swag_paypal_pos_detail_settings_options_reset_modal_confirmtext %}\\n                            <p class=\\\"swag-paypal-pos-detail-settings__reset-modal-confirm-text\\\">\\n                                {{ $tc('swag-paypal-pos.detail.settings.reset.modalConfirmText') }}\\n                            </p>\\n                            <p class=\\\"swag-paypal-pos-detail-settings__reset-modal-name\\\">\\n                                <strong>{{ placeholder(salesChannel, 'name') }}</strong>\\n                            </p>\\n                            <p>{{ $tc('swag-paypal-pos.detail.settings.reset.modalTextInfo') }}</p>\\n                        {% endblock %}\\n\\n                        {% block sw_sales_channel_detail_options_reset_modal_footer %}\\n                            <template #modal-footer>\\n\\n                                {% block swag_paypal_pos_detail_settings_options_reset_modal_abort %}\\n                                    <sw-button size=\\\"small\\\" @click=\\\"showResetModal = false\\\">\\n                                        {{ $tc('global.default.cancel') }}\\n                                    </sw-button>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_pos_detail_settings_options_reset_modal_confirm %}\\n                                    <sw-button size=\\\"small\\\"\\n                                               variant=\\\"danger\\\"\\n                                               @click=\\\"onConfirmReset\\\">\\n                                        {{ $tc('swag-paypal-pos.detail.settings.reset.modalButtonConfirm') }}\\n                                    </sw-button>\\n                                {% endblock %}\\n\\n                            </template>\\n                        {% endblock %}\\n\\n                    </sw-modal>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_detail_settings_options_delete_modal %}\\n                    <sw-modal v-if=\\\"showDeleteModal\\\"\\n                              class=\\\"sw-sales-channel-detail-settings__delete-modal\\\"\\n                              ref=\\\"modal\\\"\\n                              variant=\\\"small\\\"\\n                              :title=\\\"$tc('sw-sales-channel.detail.deleteModalTitle')\\\"\\n                              @modal-close=\\\"showDeleteModal = false\\\">\\n\\n                        {% block swag_paypal_pos_detail_settings_options_delete_modal_confirmtext %}\\n                            <p class=\\\"sw-sales-channel-detail-settings__delete-modal-confirm-text\\\">\\n                                {{ $tc('sw-sales-channel.detail.textConfirmDelete') }}\\n                            </p>\\n                            <p class=\\\"sw-sales-channel-detail-settings__delete-modal-name\\\">\\n                                <strong>{{ placeholder(salesChannel, 'name') }}</strong>\\n                            </p>\\n                            <p>{{ $tc('sw-sales-channel.detail.textDeleteInfo') }}</p>\\n                        {% endblock %}\\n\\n                        {% block sw_sales_channel_detail_options_delete_modal_footer %}\\n                            <template #modal-footer>\\n\\n                                {% block swag_paypal_pos_detail_settings_options_delete_modal_abort %}\\n                                    <sw-button size=\\\"small\\\" @click=\\\"showDeleteModal = false\\\">\\n                                        {{ $tc('global.default.cancel') }}\\n                                    </sw-button>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_pos_detail_settings_options_delete_modal_confirm %}\\n                                    <sw-button size=\\\"small\\\"\\n                                               variant=\\\"danger\\\"\\n                                               @click=\\\"onConfirmDelete\\\">\\n                                        {{ $tc('sw-sales-channel.detail.buttonConfirmDelete') }}\\n                                    </sw-button>\\n                                {% endblock %}\\n\\n                            </template>\\n                        {% endblock %}\\n\\n                    </sw-modal>\\n                {% endblock %}\\n\\n            </sw-card>\\n        {% endblock %}\\n\\n    </div>\\n{% endblock %}\\n\";","export default \"{% block swag_paypal_pos_detail_runs %}\\n    <div class=\\\"swag-paypal-pos-detail-runs\\\">\\n\\n        {% block swag_paypal_pos_detail_runs_card %}\\n            <sw-card position-identifier=\\\"swag-paypal-pos-detail-runs\\\"\\n                     :title=\\\"$tc('swag-paypal-pos.detail.runs.title')\\\"\\n                     :isLoading=\\\"isLoading\\\">\\n\\n                {% block swag_paypal_pos_detail_runs_card_grid %}\\n                    <template #grid>\\n\\n                        <sw-data-grid v-if=\\\"total > 0\\\"\\n                                      identifier=\\\"swag-paypal-pos-detail-runs\\\"\\n                                      :columns=\\\"columns\\\"\\n                                      :dataSource=\\\"runs\\\"\\n                                      :isLoading=\\\"isLoading || total === 0\\\"\\n                                      :showActions=\\\"true\\\"\\n                                      :showSelection=\\\"false\\\"\\n                                      :showSettings=\\\"true\\\"\\n                                      :allowColumnEdit=\\\"true\\\"\\n                                      :sortBy=\\\"sortBy\\\"\\n                                      :sortDirection=\\\"sortDirection\\\"\\n                                      :skeletonItemAmount=\\\"limit\\\"\\n                                      @column-sort=\\\"onSortColumn\\\">\\n\\n                            {% block swag_paypal_pos_detail_runs_card_grid_pagination %}\\n                                <template #pagination>\\n                                    <sw-pagination :limit=\\\"limit\\\"\\n                                                   :page=\\\"page\\\"\\n                                                   :total=\\\"total\\\"\\n                                                   :total-visible=\\\"7\\\"\\n                                                   @page-change=\\\"onPageChange\\\">\\n                                    </sw-pagination>\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_detail_runs_other_grid_column_log %}\\n                                <template #column-task=\\\"{ item }\\\">\\n                                    {{ $tc(`swag-paypal-pos.detail.runs.${item.task}Task`) }}\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_detail_runs_card_grid_column_state %}\\n                                <template #column-state=\\\"{ item }\\\">\\n\\n                                    {% block swag_paypal_pos_detail_runs_card_grid_column_state_label %}\\n                                        <sw-label appearance=\\\"pill\\\"\\n                                                  :variant=\\\"getLabelVariant(item)\\\">\\n                                            {{ $tc(getLabel(item)) }}\\n                                        </sw-label>\\n                                    {% endblock %}\\n\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_detail_runs_card_grid_column_date %}\\n                                <template #column-date=\\\"{ item }\\\">\\n\\n                                    {% block swag_paypal_pos_detail_runs_card_grid_column_date_formatted %}\\n                                        {{ dateFilter(item.finishedAt, {\\n                                            hour: '2-digit',\\n                                            minute: '2-digit',\\n                                            day: '2-digit',\\n                                            month: '2-digit',\\n                                            year: '2-digit'\\n                                        }) }}\\n                                    {% endblock %}\\n\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_detail_runs_card_grid_actions %}\\n                                <template #actions=\\\"{ item }\\\">\\n\\n                                    {% block swag_paypal_pos_detail_runs_card_grid_actions_details %}\\n                                        <sw-context-menu-item :disabled=\\\"item.logs.length <= 0\\\"\\n                                                              @click=\\\"onShowModal(item.id)\\\">\\n                                            {{ $tc('swag-paypal-pos.detail.runs.actions.showDetails') }}\\n                                        </sw-context-menu-item>\\n                                    {% endblock %}\\n\\n                                </template>\\n                            {% endblock %}\\n\\n                        </sw-data-grid>\\n                    </template>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_detail_runs_card_empty_state %}\\n                    <template #default>\\n                        <sw-empty-state v-if=\\\"total < 1\\\"\\n                                        class=\\\"swag-paypal-pos-detail-runs__empty-state\\\"\\n                                        :title=\\\"$tc('swag-paypal-pos.detail.runs.emptyState.title')\\\"\\n                                        :subline=\\\"$tc('swag-paypal-pos.detail.runs.emptyState.message')\\\">\\n                        </sw-empty-state>\\n                    </template>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_detail_runs_card_toolbar %}\\n                    <template #toolbar v-if=\\\"total > 0\\\">\\n\\n                        {% block swag_paypal_pos_detail_runs_card_toolbar_container %}\\n                            <sw-container columns=\\\"1fr min-content\\\"\\n                                          align=\\\"center\\\">\\n\\n                                {% block swag_paypal_pos_detail_runs_card_toolbar_container_text %}\\n                                    <p>{{ $tc('swag-paypal-pos.detail.runs.toolbarText') }}</p>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_pos_detail_runs_card_toolbar_container_button %}\\n                                    <sw-button\\n                                            :disabled=\\\"!acl.can('sales_channel.editor')\\\"\\n                                            @click=\\\"onClearLogs\\\">\\n                                        {{ $tc('swag-paypal-pos.detail.cleanLog') }}\\n                                    </sw-button>\\n                                {% endblock %}\\n\\n                            </sw-container>\\n                        {% endblock %}\\n\\n                    </template>\\n                {% endblock %}\\n\\n            </sw-card>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_detail_runs_log_modal %}\\n            <sw-modal v-if=\\\"showModal\\\"\\n                      class=\\\"swag-paypal-pos-detail-runs__modal\\\"\\n                      :title=\\\"$tc('swag-paypal-pos.detail.runs.title')\\\"\\n                      :isLoading=\\\"isLoading\\\"\\n                      variant=\\\"large\\\"\\n                      @modal-close=\\\"onCloseModal\\\">\\n\\n                {% block swag_paypal_pos_detail_runs_log_modal_logs %}\\n                    <swag-paypal-pos-detail-logs :runId=\\\"currentRunId\\\"></swag-paypal-pos-detail-logs>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_detail_runs_log_modal_footer %}\\n                    <template #modal-footer>\\n\\n                        {% block swag_paypal_pos_detail_runs_log_modal_footer_close_modal_button %}\\n                            <sw-button variant=\\\"primary\\\"\\n                                       @click=\\\"onCloseModal\\\">\\n                                {{ $tc('global.default.cancel') }}\\n                            </sw-button>\\n                        {% endblock %}\\n\\n                    </template>\\n                {% endblock %}\\n\\n            </sw-modal>\\n        {% endblock %}\\n\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-detail-runs.html.twig';\nimport './swag-paypal-pos-detail-runs.scss';\n\nconst { Component, Context } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('swag-paypal-pos-detail-runs', {\n    template,\n\n    inject: [\n        'SwagPayPalPosApiService',\n        'repositoryFactory',\n        'acl',\n    ],\n\n    mixins: [\n        'swag-paypal-pos-catch-error',\n        'notification',\n        'listing',\n    ],\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            runs: [],\n            limit: 10,\n            sortBy: 'finishedAt',\n            sortDirection: 'DESC',\n            isLoading: false,\n            isCleaningLog: false,\n            showModal: false,\n            currentRunId: '',\n        };\n    },\n\n    computed: {\n        runRepository() {\n            return this.repositoryFactory.create('swag_paypal_pos_sales_channel_run');\n        },\n\n        columns() {\n            return [{\n                property: 'task',\n                dataIndex: 'task',\n                label: 'swag-paypal-pos.detail.runs.columns.task',\n                sortable: true,\n            }, {\n                property: 'state',\n                dataIndex: 'logs.level',\n                label: 'swag-paypal-pos.detail.runs.columns.state',\n                sortable: true,\n            }, {\n                property: 'date',\n                dataIndex: 'finishedAt',\n                label: 'swag-paypal-pos.detail.runs.columns.date',\n                sortable: true,\n            }];\n        },\n\n        dateFilter() {\n            return Shopware.Filter.getByName('date');\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.$emit('buttons-update', []);\n        },\n\n        getListCriteria() {\n            const criteria = new Criteria(this.page, this.limit);\n            criteria.addFilter(Criteria.equals('salesChannelId', this.salesChannel.id));\n            criteria.addFilter(Criteria.not('AND', [Criteria.equals('status', 'in_progress')]));\n\n            criteria.addAssociation('logs');\n            criteria.getAssociation('logs').limit = 1;\n            criteria.getAssociation('logs').addSorting(Criteria.sort('level', 'DESC'));\n\n            const params = this.getMainListingParams();\n            criteria.addSorting(Criteria.sort(params.sortBy, params.sortDirection, params.naturalSorting));\n            criteria.addSorting(Criteria.sort('finishedAt', 'DESC'));\n\n            return criteria;\n        },\n\n        getList() {\n            if (this.salesChannel === null || this.salesChannel.id === null) {\n                return Promise.resolve();\n            }\n\n            this.isLoading = true;\n            return this.runRepository.search(this.getListCriteria(), Context.api).then((result) => {\n                this.runs = result;\n                this.total = result.total;\n                this.page = result.criteria.page;\n                this.limit = result.criteria.limit;\n                this.isLoading = false;\n            });\n        },\n\n        onShowModal(id) {\n            this.currentRunId = id;\n            this.showModal = true;\n        },\n\n        onCloseModal() {\n            this.showModal = false;\n            this.currentRunId = '';\n        },\n\n        onClearLogs() {\n            this.isLoading = true;\n\n            return this.SwagPayPalPosApiService.startLogCleanup(this.salesChannel.id).then(() => {\n                this.$emit('run-update');\n                return this.getList();\n            }).catch((errorResponse) => {\n                this.catchError(null, errorResponse);\n                this.getList();\n            });\n        },\n\n        getLabelVariant(item) {\n            if (item.status === 'cancelled') {\n                return 'info';\n            }\n\n            if (item.status === 'failed') {\n                return 'danger';\n            }\n\n            if (item.logs.length <= 0) {\n                return 'success';\n            }\n\n            if (item.logs[0].level >= 400) {\n                return 'danger';\n            }\n\n            if (item.logs[0].level >= 300) {\n                return 'warning';\n            }\n\n            if (item.logs[0].level > 200) {\n                return 'info';\n            }\n\n            return 'success';\n        },\n\n        getLabel(item) {\n            if (item.status === 'cancelled') {\n                return 'swag-paypal-pos.detail.runs.states.aborted';\n            }\n\n            if (item.status === 'failed') {\n                return 'swag-paypal-pos.detail.runs.states.failed';\n            }\n\n            if (item.logs.length <= 0) {\n                return 'swag-paypal-pos.detail.runs.states.successful';\n            }\n\n            if (item.logs[0].level > 200) {\n                return 'swag-paypal-pos.detail.runs.states.withWarnings';\n            }\n\n            return 'swag-paypal-pos.detail.runs.states.successful';\n        },\n    },\n});\n","import template from './swag-paypal-pos-wizard.html.twig';\nimport './swag-paypal-pos-wizard.scss';\nimport {\n    PAYPAL_POS_SALES_CHANNEL_EXTENSION,\n    PAYPAL_POS_SALES_CHANNEL_TYPE_ID,\n} from '../../../../../constant/swag-paypal.constant';\n\nconst { Component, Context } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.extend('swag-paypal-pos-wizard', 'sw-first-run-wizard-modal', {\n    template,\n\n    inject: [\n        'SwagPayPalPosApiService',\n        'SwagPayPalPosSettingApiService',\n        'SwagPayPalPosWebhookRegisterService',\n        'salesChannelService',\n        'repositoryFactory',\n    ],\n\n    mixins: [\n        'swag-paypal-pos-catch-error',\n        'notification',\n    ],\n\n    data() {\n        return {\n            showModal: true,\n            isLoading: false,\n            salesChannel: {},\n            cloneSalesChannelId: null,\n            stepperPages: [\n                'connection',\n                'connectionSuccess',\n                'connectionDisconnect',\n                'customization',\n                'productSelection',\n                'syncLibrary',\n                'syncPrices',\n                'finish',\n            ],\n            stepper: {},\n            currentStep: {},\n        };\n    },\n\n    metaInfo() {\n        return {\n            title: this.wizardTitle,\n        };\n    },\n\n    computed: {\n        displayStepperPages() {\n            return this.stepperPages.filter((item) => {\n                return item !== 'connectionDisconnect';\n            });\n        },\n\n        stepInitialItemVariants() {\n            const maxNavigationIndex = this.stepperPages.length;\n            const { navigationIndex } = this.currentStep;\n            const navigationSteps = [];\n\n            for (let i = 1; i <= maxNavigationIndex; i += 1) {\n                if (i < navigationIndex) {\n                    navigationSteps.push('success');\n                } else if (i === navigationIndex) {\n                    navigationSteps.push('info');\n                } else {\n                    navigationSteps.push('disabled');\n                }\n            }\n            return navigationSteps;\n        },\n\n        paypalPosSalesChannelRepository() {\n            return this.repositoryFactory.create('swag_paypal_pos_sales_channel');\n        },\n\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        },\n\n        salesChannelCriteria() {\n            return (new Criteria(1, 500))\n                .addAssociation(PAYPAL_POS_SALES_CHANNEL_EXTENSION)\n                .addAssociation('countries')\n                .addAssociation('currencies')\n                .addAssociation('domains')\n                .addAssociation('languages');\n        },\n\n        wizardTitle() {\n            const params = [\n                this.$tc('global.sw-admin-menu.textShopwareAdmin'),\n                this.$tc('swag-paypal-pos.general.moduleTitle'),\n                this.title,\n            ];\n\n            return params.reverse().join(' | ');\n        },\n    },\n\n    watch: {\n        '$route'(to) {\n            this.handleRouteUpdate(to);\n        },\n    },\n\n    mounted() {\n        this.mountedComponent();\n    },\n\n    methods: {\n        handleRouteUpdate(to) {\n            const toName = to.name.replace('swag.paypal.pos.wizard.', '');\n\n            this.currentStep = this.stepper[toName];\n        },\n\n        createdComponent() {\n            this.generateStepper();\n\n            const salesChannelId = this.$route.params.id;\n            if (salesChannelId) {\n                this.loadSalesChannel();\n                return;\n            }\n\n            this.createNewSalesChannel();\n        },\n\n        mountedComponent() {\n            const step = this.$route.name.replace('swag.paypal.pos.wizard.', '');\n            this.currentStep = this.stepper[step];\n        },\n\n        generateStepper() {\n            let index = 1;\n            this.stepper = this.stepperPages.reduce((accumulator, pageName) => {\n                if (pageName === 'connectionDisconnect') {\n                    index -= 1;\n                }\n\n                accumulator[pageName] = {\n                    name: `swag.paypal.pos.wizard.${pageName}`,\n                    variant: 'large',\n                    navigationIndex: index,\n                };\n\n                if (index === 1) {\n                    this.currentStep = accumulator[pageName];\n                }\n                index += 1;\n\n                return accumulator;\n            }, {});\n        },\n\n        onCloseModal() {\n            if (!this.salesChannel._isNew && (this.$route.params.id || this.salesChannel.id)) {\n                this.routeToDetailOverview();\n\n                return;\n            }\n\n            this.routeToDashboard();\n        },\n\n        onFinishWizard() {\n            this.routeToDetailOverview(true);\n        },\n\n        routeToDashboard() {\n            this.showModal = false;\n\n            this.$nextTick(() => {\n                this.$router.push({ name: 'sw.dashboard.index' });\n            });\n        },\n\n        routeToDetailOverview(finished = false) {\n            this.showModal = false;\n\n            this.save(finished).then(() => {\n                if (finished) {\n                    this.SwagPayPalPosApiService.startCompleteSync(this.salesChannel.id);\n                }\n\n                this.$router.push({\n                    name: 'swag.paypal.pos.detail.overview',\n                    params: { id: this.salesChannel.id },\n                });\n            });\n        },\n\n        save(activateSalesChannel = false, silentWebhook = false) {\n            if (activateSalesChannel) {\n                this.salesChannel.active = true;\n            }\n\n            return this.salesChannelRepository.save(this.salesChannel, Context.api).then(async () => {\n                this.isLoading = false;\n                this.isSaveSuccessful = true;\n                this.isNewEntity = false;\n\n                this.$root.$emit('sales-channel-change');\n                await this.loadSalesChannel();\n\n                this.cloneProductVisibility();\n                this.registerWebhook(silentWebhook);\n            }).catch(() => {\n                this.isLoading = false;\n\n                this.createNotificationError({\n                    message: this.$tc('sw-sales-channel.detail.messageSaveError', 0, {\n                        name: this.salesChannel.name || this.placeholder(this.salesChannel, 'name'),\n                    }),\n                });\n            });\n        },\n\n        registerWebhook(silent = false) {\n            const webhookPromise = this.SwagPayPalPosWebhookRegisterService.registerWebhook(this.salesChannel.id);\n\n            if (!silent) {\n                return webhookPromise.catch(this.catchError.bind(this, 'swag-paypal-pos.messageWebhookRegisterError'));\n            }\n\n            return webhookPromise;\n        },\n\n        cloneProductVisibility() {\n            if (this.cloneSalesChannelId === null) {\n                return;\n            }\n\n            this.SwagPayPalPosSettingApiService.cloneProductVisibility(\n                this.cloneSalesChannelId,\n                this.salesChannel.id,\n            ).catch((errorResponse) => {\n                if (errorResponse.response.data && errorResponse.response.data.errors) {\n                    this.createNotificationError({\n                        message: this.$tc('swag-paypal-pos.messageCloneError'),\n                    });\n                }\n            });\n        },\n\n        createNewSalesChannel() {\n            if (Context.api.languageId !== Context.api.systemLanguageId) {\n                Context.api.languageId = Context.api.systemLanguageId;\n            }\n\n            this.previousApiKey = null;\n            this.salesChannel = this.salesChannelRepository.create(Context.api);\n            this.salesChannel.typeId = PAYPAL_POS_SALES_CHANNEL_TYPE_ID;\n            this.salesChannel.name = this.$tc('swag-paypal-pos.wizard.salesChannelPrototypeName');\n            this.salesChannel.active = false;\n\n            this.salesChannel.extensions.paypalPosSalesChannel\n                = this.paypalPosSalesChannelRepository.create(Context.api);\n\n            Object.assign(\n                this.salesChannel.extensions.paypalPosSalesChannel,\n                {\n                    mediaDomain: '',\n                    apiKey: '',\n                    imageDomain: '',\n                    productStreamId: null,\n                    syncPrices: true,\n                    replace: 0,\n                },\n            );\n\n            this.salesChannelService.generateKey().then((response) => {\n                this.salesChannel.accessKey = response.accessKey;\n            }).catch(() => {\n                this.createNotificationError({\n                    message: this.$tc('sw-sales-channel.detail.messageAPIError'),\n                });\n            });\n        },\n\n        loadSalesChannel() {\n            const salesChannelId = this.$route.params.id || this.salesChannel.id;\n            if (!salesChannelId) {\n                return new Promise((resolve) => { resolve(); });\n            }\n\n            this.isLoading = true;\n            return this.salesChannelRepository.get(salesChannelId, Shopware.Context.api, this.salesChannelCriteria)\n                .then((entity) => {\n                    this.salesChannel = entity;\n                    this.previousApiKey = entity.extensions.paypalPosSalesChannel.apiKey;\n                    this.isLoading = false;\n                });\n        },\n\n        updateCloneSalesChannel(cloneSalesChannelId) {\n            this.cloneSalesChannelId = cloneSalesChannelId;\n        },\n\n        toggleLoading(state) {\n            this.isLoading = state;\n        },\n    },\n});\n","export default \"{% block sw_first_run_wizard_modal %}\\n    <div class=\\\"swag-paypal-pos-wizard\\\">\\n        <sw-modal v-if=\\\"showModal\\\"\\n                  class=\\\"swag-paypal-pos-wizard-modal\\\"\\n                  position-identifier=\\\"swag-paypal-pos-wizard-modal\\\"\\n                  :title=\\\"title\\\"\\n                  :variant=\\\"variant\\\"\\n                  @modal-close=\\\"onCloseModal\\\">\\n\\n            {% block swag_paypal_pos_wizard_modal_content %}\\n                <div class=\\\"swag-paypal-pos-wizard__modal-content\\\">\\n                    <sw-container class=\\\"swag-paypal-pos-wizard__columns\\\"\\n                                  :class=\\\"{ 'swag-paypal-pos-wizard__columns--two': showSteps }\\\">\\n\\n                        {% block swag_paypal_pos_wizard_modal_content_steps %}\\n                            <div v-if=\\\"showSteps\\\"\\n                                 class=\\\"swag-paypal-pos-wizard__steps\\\">\\n                                <sw-step-display :initialItemVariants=\\\"stepInitialItemVariants\\\"\\n                                                 :itemIndex=\\\"stepIndex\\\"\\n                                                 :itemVariant=\\\"stepVariant\\\">\\n                                    <sw-step-item v-for=\\\"pageName in displayStepperPages\\\"\\n                                                  :key=\\\"pageName\\\">\\n                                        {{ $tc(`swag-paypal-pos.wizard.stepItemTitle.${pageName}`) }}\\n                                    </sw-step-item>\\n                                </sw-step-display>\\n                            </div>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_pos_wizard_modal_content_page %}\\n                            <div class=\\\"swag-paypal-pos-wizard__page\\\">\\n                                {% if VUE3 %}\\n                                    <router-view\\n                                        v-slot=\\\"{ Component }\\\"\\n                                    >\\n                                        <component\\n                                            :is=\\\"Component\\\"\\n                                            :salesChannel=\\\"salesChannel\\\"\\n                                            :cloneSalesChannelId=\\\"cloneSalesChannelId\\\"\\n                                            :saveSalesChannel=\\\"save\\\"\\n                                            :isLoading=\\\"isLoading\\\"\\n                                            @buttons-update=\\\"updateButtons\\\"\\n                                            @frw-set-title=\\\"setTitle\\\"\\n                                            @frw-finish=\\\"onFinishWizard\\\"\\n                                            @toggle-loading=\\\"toggleLoading\\\"\\n                                            @recreate-sales-channel=\\\"createNewSalesChannel\\\"\\n                                            @update-clone-sales-channel=\\\"updateCloneSalesChannel\\\"\\n                                        />\\n                                    </router-view>\\n                                {% else %}\\n                                    <router-view :salesChannel=\\\"salesChannel\\\"\\n                                                 :cloneSalesChannelId=\\\"cloneSalesChannelId\\\"\\n                                                 :saveSalesChannel=\\\"save\\\"\\n                                                 :isLoading=\\\"isLoading\\\"\\n                                                 @buttons-update=\\\"updateButtons\\\"\\n                                                 @frw-set-title=\\\"setTitle\\\"\\n                                                 @frw-finish=\\\"onFinishWizard\\\"\\n                                                 @toggle-loading=\\\"toggleLoading\\\"\\n                                                 @recreate-sales-channel=\\\"createNewSalesChannel\\\"\\n                                                 @update-clone-sales-channel=\\\"updateCloneSalesChannel\\\">\\n                                    </router-view>\\n                                {% endif %}\\n                            </div>\\n                        {% endblock %}\\n                    </sw-container>\\n                </div>\\n            {% endblock %}\\n\\n            {% block swag_paypal_pos_wizard_modal_footer %}\\n                <template #modal-footer>\\n                    <div class=\\\"swag-paypal-pos-wizard__footer\\\">\\n\\n                        {% block swag_paypal_pos_wizard_modal_footer_left %}\\n                            <div class=\\\"footer-left\\\">\\n                                <sw-button v-for=\\\"button in buttons.left\\\"\\n                                           size=\\\"small\\\"\\n                                           :key=\\\"button.key\\\"\\n                                           :disabled=\\\"button.disabled\\\"\\n                                           :isLoading=\\\"isLoading\\\"\\n                                           :variant=\\\"button.variant\\\"\\n                                           @click=\\\"onButtonClick(button.action)\\\">\\n                                    {{ button.label }}\\n                                </sw-button>\\n                            </div>\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_pos_wizard_modal_footer_right %}\\n                            <div class=\\\"footer-right\\\">\\n                                <sw-button v-for=\\\"button in buttons.right\\\"\\n                                           size=\\\"small\\\"\\n                                           :key=\\\"button.key\\\"\\n                                           :disabled=\\\"button.disabled\\\"\\n                                           :isLoading=\\\"isLoading\\\"\\n                                           :variant=\\\"button.variant\\\"\\n                                           @click=\\\"onButtonClick(button.action)\\\">\\n                                    {{ button.label }}\\n                                </sw-button>\\n                            </div>\\n                        {% endblock %}\\n                    </div>\\n                </template>\\n            {% endblock %}\\n        </sw-modal>\\n    </div>\\n{% endblock %}\\n\\n\";","import template from './swag-paypal-pos-wizard-connection.html.twig';\nimport './swag-paypal-pos-wizard-connection.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pos-wizard-connection', {\n    template,\n\n    inject: [\n        'SwagPayPalPosSettingApiService',\n    ],\n\n    mixins: [\n        'notification',\n        'swag-paypal-pos-catch-error',\n    ],\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: true,\n        },\n        cloneSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n        isLoading: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            isConnecting: false,\n            apiKeyUrl: this.SwagPayPalPosSettingApiService.generateApiUrl(),\n        };\n    },\n\n    watch: {\n        'salesChannel.extensions.paypalPosSalesChannel.apiKey'(key) {\n            if (!key) {\n                return;\n            }\n\n            this.updateButtons();\n        },\n    },\n\n    computed: {\n        assetFilter() {\n            return Shopware.Filter.getByName('asset');\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.updateButtons();\n            this.setTitle();\n        },\n\n        setTitle() {\n            this.$emit('frw-set-title', this.$tc('swag-paypal-pos.wizard.connection.modalTitle'));\n        },\n\n        updateButtons() {\n            const buttonConfig = [\n                {\n                    key: 'next',\n                    label: this.$tc('sw-first-run-wizard.general.buttonNext'),\n                    position: 'right',\n                    variant: 'primary',\n                    action: this.routeToConnectionSuccess,\n                    disabled: this.isLoading || !(this.salesChannel.extensions.paypalPosSalesChannel.apiKey),\n                },\n            ];\n\n            this.$emit('buttons-update', buttonConfig);\n        },\n\n        routeToConnectionSuccess() {\n            this.toggleLoadingState(true);\n            const apiKey = this.salesChannel.extensions.paypalPosSalesChannel.apiKey;\n\n            this.SwagPayPalPosSettingApiService.validateApiCredentials(apiKey).then((response) => {\n                if (response.credentialsValid === true) {\n                    this.toggleLoadingState(false);\n                    this.$router.push({ name: 'swag.paypal.pos.wizard.connectionSuccess' });\n                }\n            }).catch(\n                this.catchError.bind(this, 'swag-paypal-pos.authentication.messageTestError'),\n            ).finally(() => {\n                this.toggleLoadingState(false);\n            });\n        },\n\n        forceUpdate() {\n            this.$forceUpdate();\n            this.updateButtons();\n        },\n\n        toggleLoadingState(state) {\n            this.isConnecting = state;\n            this.$emit('toggle-loading', state);\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_wizard_connection %}\\n    <div class=\\\"swag-paypal-pos-wizard-connection\\\">\\n\\n        {% block swag_paypal_pos_wizard_connection_headline %}\\n            <div class=\\\"swag-paypal-pos-wizard-connection__headline\\\">\\n                {{ $tc('swag-paypal-pos.wizard.connection.headerConnect') }}\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_connection_apikey %}\\n            <sw-password-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"salesChannel.extensions.paypalPosSalesChannel.apiKey\\\"\\n                    {% else %}\\n                    v-model=\\\"salesChannel.extensions.paypalPosSalesChannel.apiKey\\\"\\n                    {% endif %}\\n                    class=\\\"swag-paypal-pos-wizard-connection__apikey-field\\\"\\n                    required\\n                    :label=\\\"$tc('swag-paypal-pos.authentication.labelApiKey')\\\"\\n                    :placeholder=\\\"$tc('swag-paypal-pos.authentication.placeholderApiKey')\\\"\\n                    {% if VUE3 %}\\n                    @update:value=\\\"forceUpdate\\\"\\n                    {% else %}\\n                    @input=\\\"forceUpdate\\\"\\n                    {% endif %}>\\n                <template #suffix>\\n\\n                    {% block swag_paypal_pos_wizard_connection_apikey_suffix %}\\n                        <sw-icon name=\\\"regular-low-vision\\\"\\n                                 class=\\\"swag-paypal-pos-wizard-connection__apikey-suffix\\\"\\n                                 size=\\\"22px\\\">\\n                        </sw-icon>\\n                    {% endblock %}\\n                </template>\\n            </sw-password-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_connection_apikey_description %}\\n            <div class=\\\"swag-paypal-pos-wizard-connection__apikey-description\\\">\\n\\n                {% block swag_paypal_pos_wizard_connection_apikey_description_text %}\\n                    <div class=\\\"swag-paypal-pos-wizard-connection__apikey-description-text\\\">\\n                        {{ $tc('swag-paypal-pos.authentication.apiKeyDescription') }}\\n                    </div>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_wizard_connection_apikey_description_link %}\\n                    <sw-external-link :href=\\\"apiKeyUrl\\\"\\n                                      class=\\\"swag-paypal-pos-wizard-connection__apikey-description-link\\\">\\n\\n                        {% block swag_paypal_pos_wizard_connection_apikey_description_link_text %}\\n                            {{ $tc('swag-paypal-pos.authentication.buttonGenerateKey') }}\\n                        {% endblock %}\\n                    </sw-external-link>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_connection_header_new_customer %}\\n            <div class=\\\"swag-paypal-pos-wizard-connection__new-customer-headline\\\">\\n                {{ $tc('swag-paypal-pos.wizard.connection.headerNewCustomer') }}\\n            </div>\\n        {% endblock %}\\n\\n\\n        {% block swag_paypal_pos_wizard_connection_new_customer %}\\n            <sw-card position-identifier=\\\"swag-paypal-pos-wizard-connection-new-customer\\\"\\n                     :isLoading=\\\"isConnecting\\\">\\n                <sw-container\\n                        class=\\\"swag-paypal-pos-wizard-connection__new-customer-container\\\"\\n                        columns=\\\"1fr 1fr\\\"\\n                        align=\\\"center\\\"\\n                        gap=\\\"300px\\\">\\n\\n                    {% block swag_paypal_pos_wizard_connection_new_customer_image %}\\n                        <img class=\\\"swag-paypal-pos-wizard-connection__pos-logo\\\"\\n                             :src=\\\"assetFilter('swagpaypal/static/img/paypal-pos-logo-full.png')\\\"\\n                             alt=\\\"Zettle logo\\\">\\n                    {% endblock %}\\n\\n                    {% block swag_paypal_pos_wizard_connection_new_customer_button %}\\n                        <sw-button class=\\\"swag-paypal-pos-wizard-connection__pos-link\\\"\\n                                   variant=\\\"ghost\\\"\\n                                   size=\\\"small\\\"\\n                                   :link=\\\"$tc('swag-paypal-pos.wizard.connection.buttonCreateAccountLink')\\\">\\n\\n                            {% block swag_paypal_pos_wizard_connection_new_customer_button_text %}\\n                                <span class=\\\"swag-paypal-pos-wizard-connection__pos-link-text\\\">\\n                                    {{ $tc('swag-paypal-pos.wizard.connection.buttonCreateAccount') }}\\n                                </span>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_wizard_connection_new_customer_button_icon %}\\n                                <sw-icon name=\\\"regular-external-link-s\\\"\\n                                         class=\\\"swag-paypal-pos-wizard-connection__pos-link-icon\\\"\\n                                         size=\\\"10px\\\">\\n                                </sw-icon>\\n                            {% endblock %}\\n                        </sw-button>\\n                    {% endblock %}\\n                </sw-container>\\n            </sw-card>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","export default \"{% block swag_paypal_pos_wizard_connection_success %}\\n    <div class=\\\"swag-paypal-pos-wizard-connection-success\\\">\\n\\n        {% block swag_paypal_pos_wizard_connection_success_headline_content %}\\n            <div class=\\\"swag-paypal-pos-wizard-connection-success__content\\\">\\n\\n                {% block swag_paypal_pos_wizard_connection_success_icon %}\\n                    <div class=\\\"swag-paypal-pos-wizard-connection-success__icon-wrapper\\\">\\n                        <sw-icon class=\\\"swag-paypal-pos-wizard-connection-success__icon\\\"\\n                                 name=\\\"regular-thumbs-up\\\"\\n                                 size=\\\"80px\\\"\\n                                 color=\\\"#37D046\\\">\\n                        </sw-icon>\\n                    </div>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_wizard_connection_success_headline %}\\n                    <div class=\\\"swag-paypal-pos-wizard-connection-success__headline\\\">\\n                        {{ $tc('swag-paypal-pos.wizard.connectionSuccess.headline') }}\\n                    </div>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_wizard_connection_success_info %}\\n                    <div class=\\\"swag-paypal-pos-wizard-connection-success__info\\\">\\n                        {{ $tc('swag-paypal-pos.wizard.connectionSuccess.info') }}\\n                    </div>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_wizard_connection_success_user %}\\n                    <sw-card class=\\\"swag-paypal-pos-wizard-connection-success__user\\\"\\n                             position-identifier=\\\"swag-paypal-pos-wizard-connection-success-user\\\"\\n                             :isLoading=\\\"isFetchingInformation\\\">\\n                        <sw-container class=\\\"swag-paypal-pos-wizard-connection-success__user-container\\\"\\n                                      columns=\\\"30px auto 150px\\\"\\n                                      align=\\\"center\\\"\\n                                      gap=\\\"30px\\\">\\n\\n                            {% block swag_paypal_pos_wizard_connection_success_user_avatar %}\\n                                <sw-avatar\\n                                        class=\\\"swag-paypal-pos-wizard-connection-success__user-avatar\\\"\\n                                        size=\\\"40px\\\"\\n                                        :firstName=\\\"posUser.firstName\\\"\\n                                        :lastName=\\\"posUser.lastName\\\">\\n                                </sw-avatar>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_wizard_connection_success_user_information %}\\n                                <div class=\\\"swag-paypal-pos-wizard-connection-success__user-info\\\">\\n\\n                                    {% block swag_paypal_pos_wizard_connection_success_user_information_real %}\\n                                        <div class=\\\"swag-paypal-pos-wizard-connection-success__user-info-name\\\">\\n                                            {{ posUser.fullName }}\\n                                        </div>\\n                                        <div class=\\\"swag-paypal-pos-wizard-connection-success__user-info-mail\\\">\\n                                            {{ posUser.mail }}\\n                                        </div>\\n                                    {% endblock %}\\n                                </div>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_wizard_connection_success_user_disconnect_button %}\\n                                <sw-button class=\\\"swag-paypal-pos-wizard-connection-success__user-disconnect\\\"\\n                                           variant=\\\"ghost\\\"\\n                                           size=\\\"small\\\"\\n                                           @click=\\\"onDisconnect\\\">\\n                                    {{ $tc('swag-paypal-pos.wizard.connectionSuccess.disconnectButton') }}\\n                                </sw-button>\\n                            {% endblock %}\\n                        </sw-container>\\n                    </sw-card>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_connection_success_disclaimer %}\\n            <div class=\\\"swag-paypal-pos-wizard-connection-success__disclaimer\\\">\\n                {{ $tc('swag-paypal-pos.wizard.connectionSuccess.disclaimer') }}\\n            </div>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-wizard-connection-success.html.twig';\nimport './swag-paypal-pos-wizard-connection-success.scss';\n\nconst { Component, Context } = Shopware;\n\nComponent.register('swag-paypal-pos-wizard-connection-success', {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'SwagPayPalPosSettingApiService',\n    ],\n\n    mixin: [\n        'placeholder',\n    ],\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: true,\n        },\n        cloneSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n        saveSalesChannel: {\n            type: Function,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            posData: null,\n            isFetchingInformation: true,\n        };\n    },\n\n    computed: {\n        posUser() {\n            if (this.isFetchingInformation) {\n                const firstName = this.$tc('swag-paypal-pos.wizard.connectionSuccess.fakeFirstName');\n                const lastName = this.$tc('swag-paypal-pos.wizard.connectionSuccess.fakeLastName');\n                const mail = this.$tc('swag-paypal-pos.wizard.connectionSuccess.fakeMail');\n\n                return {\n                    firstName,\n                    lastName,\n                    fullName: `${firstName} ${lastName}`,\n                    mail,\n                };\n            }\n            const parts = this.posData.merchantInformation.name.split(' ');\n\n            return {\n                firstName: parts[0],\n                lastName: parts[parts.length - 1],\n                fullName: this.posData.merchantInformation.name,\n                mail: this.posData.merchantInformation.contactEmail,\n            };\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.isFetchingInformation = true;\n            this.updateButtons();\n            this.setTitle();\n\n            return this.SwagPayPalPosSettingApiService.fetchInformation(this.salesChannel, true).then((response) => {\n                this.posData = response;\n\n                if (this.salesChannel.languageId === null) {\n                    this.salesChannel.languageId = Context.api.systemLanguageId;\n                    this.salesChannel.languages.push({\n                        id: Context.api.systemLanguageId,\n                    });\n                }\n\n                return this.saveSalesChannel(false, true);\n            }).finally(() => {\n                this.isFetchingInformation = false;\n                this.updateButtons();\n            });\n        },\n\n        setTitle() {\n            this.$emit('frw-set-title', this.$tc('swag-paypal-pos.wizard.connectionSuccess.modalTitle'));\n        },\n\n        updateButtons() {\n            const buttonConfig = [\n                {\n                    key: 'next',\n                    label: this.$tc('sw-first-run-wizard.general.buttonNext'),\n                    position: 'right',\n                    variant: 'primary',\n                    action: this.routeToCustomization,\n                    disabled: this.isFetchingInformation,\n                },\n            ];\n\n            this.$emit('buttons-update', buttonConfig);\n        },\n\n        routeToCustomization() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.customization',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        onDisconnect() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.connectionDisconnect',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        forceUpdate() {\n            this.$forceUpdate();\n            this.updateButtons();\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_wizard_connection_disconnect %}\\n    <div class=\\\"swag-paypal-pos-wizard-connection-disconnect\\\">\\n\\n        {% block swag_paypal_pos_wizard_connection_disconnect_headline_content %}\\n            <div class=\\\"swag-paypal-pos-wizard-connection-disconnect__content\\\">\\n\\n                {% block swag_paypal_pos_wizard_connection_disconnect_icon %}\\n                    <div class=\\\"swag-paypal-pos-wizard-connection-disconnect__icon-wrapper\\\">\\n                        <sw-icon class=\\\"swag-paypal-pos-wizard-connection-disconnect__icon\\\"\\n                                 name=\\\"regular-exclamation-triangle\\\"\\n                                 size=\\\"80px\\\"\\n                                 color=\\\"#de294c\\\">\\n                        </sw-icon>\\n                    </div>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_wizard_connection_disconnect_headline %}\\n                    <div class=\\\"swag-paypal-pos-wizard-connection-disconnect__headline\\\">\\n                        {{ $tc('swag-paypal-pos.wizard.connectionDisconnect.headline') }}\\n                    </div>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_wizard_connection_disconnect_info %}\\n                    <div class=\\\"swag-paypal-pos-wizard-connection-disconnect__info\\\">\\n                        {{ $tc('swag-paypal-pos.wizard.connectionDisconnect.info') }}\\n                    </div>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_wizard_connection_disconnect_user %}\\n                    <sw-card class=\\\"swag-paypal-pos-wizard-connection-disconnect__user\\\"\\n                             position-identifier=\\\"swag-paypal-pos-wizard-connection-disconnect-user\\\"\\n                             :isLoading=\\\"isFetchingInformation\\\">\\n                        <sw-container class=\\\"swag-paypal-pos-wizard-connection-disconnect__user-container\\\"\\n                                      columns=\\\"30px auto 150px\\\"\\n                                      align=\\\"center\\\"\\n                                      gap=\\\"30px\\\">\\n\\n                            {% block swag_paypal_pos_wizard_connection_disconnect_user_avatar %}\\n                                <sw-avatar\\n                                    class=\\\"swag-paypal-pos-wizard-connection-disconnect__user-avatar\\\"\\n                                    size=\\\"40px\\\"\\n                                    :firstName=\\\"posUser.firstName\\\"\\n                                    :lastName=\\\"posUser.lastName\\\">\\n                                </sw-avatar>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_pos_wizard_connection_disconnect_user_information %}\\n                                <div class=\\\"swag-paypal-pos-wizard-connection-disconnect__user-info\\\">\\n\\n                                    {% block swag_paypal_pos_wizard_connection_disconnect_user_information_real %}\\n                                        <div class=\\\"swag-paypal-pos-wizard-connection-disconnect__user-info-name\\\">\\n                                            {{ posUser.fullName }}\\n                                        </div>\\n                                        <div class=\\\"swag-paypal-pos-wizard-connection-disconnect__user-info-mail\\\">\\n                                            {{ posUser.mail }}\\n                                        </div>\\n                                    {% endblock %}\\n                                </div>\\n                            {% endblock %}\\n                        </sw-container>\\n                    </sw-card>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-wizard-connection-disconnect.html.twig';\nimport './swag-paypal-pos-wizard-connection-disconnect.scss';\n\nconst { Component, Context } = Shopware;\n\nComponent.register('swag-paypal-pos-wizard-connection-disconnect', {\n    template,\n\n    inject: [\n        'repositoryFactory',\n        'SwagPayPalPosSettingApiService',\n    ],\n\n    mixin: [\n        'placeholder',\n        'notification',\n    ],\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: true,\n        },\n        cloneSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n        saveSalesChannel: {\n            type: Function,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            posData: null,\n            isFetchingInformation: true,\n        };\n    },\n\n    computed: {\n        salesChannelRepository() {\n            return this.repositoryFactory.create('sales_channel');\n        },\n\n        posUser() {\n            if (this.isFetchingInformation) {\n                const firstName = this.$tc('swag-paypal-pos.wizard.connectionSuccess.fakeFirstName');\n                const lastName = this.$tc('swag-paypal-pos.wizard.connectionSuccess.fakeLastName');\n                const mail = this.$tc('swag-paypal-pos.wizard.connectionSuccess.fakeMail');\n\n                return {\n                    firstName,\n                    lastName,\n                    fullName: `${firstName} ${lastName}`,\n                    mail,\n                };\n            }\n            const parts = this.posData.merchantInformation.name.split(' ');\n\n            return {\n                firstName: parts[0],\n                lastName: parts[parts.length - 1],\n                fullName: this.posData.merchantInformation.name,\n                mail: this.posData.merchantInformation.contactEmail,\n            };\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.isFetchingInformation = true;\n            this.updateButtons();\n            this.setTitle();\n\n            this.SwagPayPalPosSettingApiService.fetchInformation(this.salesChannel, true).then((response) => {\n                this.posData = response;\n            }).finally(() => {\n                this.isFetchingInformation = false;\n                this.updateButtons();\n            });\n        },\n\n        setTitle() {\n            this.$emit('frw-set-title', this.$tc('swag-paypal-pos.wizard.connectionDisconnect.modalTitle'));\n        },\n\n        updateButtons() {\n            const buttonConfig = [\n                {\n                    key: 'cancel',\n                    label: this.$tc('global.default.cancel'),\n                    position: 'right',\n                    action: this.routeBackToConnectionSuccess,\n                    disabled: false,\n                },\n                {\n                    key: 'next',\n                    label: this.$tc('swag-paypal-pos.wizard.connectionDisconnect.disconnectButton'),\n                    position: 'right',\n                    variant: 'danger',\n                    action: this.onDisconnect,\n                    disabled: this.isFetchingInformation,\n                },\n            ];\n\n            this.$emit('buttons-update', buttonConfig);\n        },\n\n        routeBackToConnectionSuccess() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.connectionSuccess',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        onDisconnect() {\n            // ToDo PPI-22 - The module should go into a disconnected state instead of deleting the whole saleschannel.\n            this.salesChannelRepository.delete(this.salesChannel.id, Context.api).then(() => {\n                // Forces the sw-admin-menu component to refresh the SalesChannel list\n                this.$root.$emit('sales-channel-change');\n\n                this.$emit('recreate-sales-channel');\n                this.forceUpdate();\n\n                this.$router.push({ name: 'swag.paypal.pos.wizard.connection' });\n            }).catch(() => {\n                this.createNotificationError({\n                    message: this.$tc('swag-paypal-pos.wizard.connectionDisconnect.disconnectErrorMessage'),\n                });\n            });\n        },\n\n        forceUpdate() {\n            this.$forceUpdate();\n            this.updateButtons();\n        },\n    },\n});\n","import template from './swag-paypal-pos-wizard-customization.html.twig';\nimport './swag-paypal-pos-wizard-customization.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pos-wizard-customization', {\n    template,\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: true,\n        },\n        cloneSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n        saveSalesChannel: {\n            type: Function,\n            required: true,\n        },\n        isLoading: {\n            type: Boolean,\n            required: false,\n            default: false,\n        },\n    },\n\n    watch: {\n        'isLoading'(loading) {\n            if (loading) {\n                return;\n            }\n\n            this.updateButtons();\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.updateButtons();\n            this.setTitle();\n            this.changeLanguage();\n        },\n\n        setTitle() {\n            this.$emit('frw-set-title', this.$tc('swag-paypal-pos.wizard.customization.modalTitle'));\n        },\n\n        updateButtons() {\n            const buttonConfig = [\n                {\n                    key: 'back',\n                    label: this.$tc('sw-first-run-wizard.general.buttonBack'),\n                    position: 'left',\n                    action: this.routeBackToConnectionSuccess,\n                    disabled: false,\n                },\n                {\n                    key: 'next',\n                    label: this.$tc('sw-first-run-wizard.general.buttonNext'),\n                    position: 'right',\n                    variant: 'primary',\n                    action: this.routeToProductSelection,\n                    disabled: this.nextButtonDisabled(),\n                },\n            ];\n\n            this.$emit('buttons-update', buttonConfig);\n        },\n\n        nextButtonDisabled() {\n            return this.isLoading\n                || !(this.salesChannel.name)\n                || !(this.salesChannel.languageId)\n                || !(this.salesChannel.extensions.paypalPosSalesChannel.mediaDomain);\n        },\n\n        routeBackToConnectionSuccess() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.connectionSuccess',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        routeToProductSelection() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.productSelection',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        forceUpdate() {\n            this.$forceUpdate();\n            this.$nextTick().then(() => {\n                this.updateButtons();\n            });\n        },\n\n        changeLanguage() {\n            this.salesChannel.languages.length = 0;\n            this.salesChannel.languages.push({\n                id: this.salesChannel.languageId,\n            });\n            this.$forceUpdate();\n        },\n\n        toggleLoadingState(state) {\n            this.isConnecting = state;\n            this.$emit('toggle-loading', state);\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_wizard_customization %}\\n    <div v-if=\\\"!isLoading\\\"\\n         class=\\\"swag-paypal-pos-wizard-customization\\\">\\n\\n        {% block swag_paypal_pos_wizard_customization_name %}\\n            <sw-text-field\\n                {% if VUE3 %}\\n                v-model:value=\\\"salesChannel.name\\\"\\n                {% else %}\\n                v-model=\\\"salesChannel.name\\\"\\n                {% endif %}\\n                class=\\\"swag-paypal-pos-wizard-customization__name-field\\\"\\n                validation=\\\"required\\\"\\n                required\\n                :label=\\\"$tc('swag-paypal-pos.wizard.customization.salesChannelLabel')\\\"\\n                :placeholder=\\\"$tc('sw-sales-channel.detail.placeholderName')\\\"\\n                @input=\\\"forceUpdate\\\">\\n            </sw-text-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_customization_language %}\\n            <sw-entity-single-select\\n                {% if VUE3 %}\\n                v-model:value=\\\"salesChannel.languageId\\\"\\n                {% else %}\\n                v-model=\\\"salesChannel.languageId\\\"\\n                {% endif %}\\n                entity=\\\"language\\\"\\n                required\\n                :label=\\\"$tc('global.entities.language')\\\"\\n                @change=\\\"changeLanguage\\\">\\n            </sw-entity-single-select>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_customization_media_domain %}\\n            <sw-url-field\\n                {% if VUE3 %}\\n                v-model:value=\\\"salesChannel.extensions.paypalPosSalesChannel.mediaDomain\\\"\\n                {% else %}\\n                v-model=\\\"salesChannel.extensions.paypalPosSalesChannel.mediaDomain\\\"\\n                {% endif %}\\n                class=\\\"swag-paypal-pos-wizard-customization__domain-field\\\"\\n                required\\n                :label=\\\"$tc('swag-paypal-pos.wizard.customization.labelDomain')\\\"\\n                :placeholder=\\\"$tc('swag-paypal-pos.wizard.customization.placeholderDomain')\\\"\\n                {% if VUE3 %}\\n                :value=\\\"salesChannel.extensions.paypalPosSalesChannel.mediaDomain\\\"\\n                @update:value=\\\"forceUpdate\\\"\\n                {% else %}\\n                @input=\\\"forceUpdate\\\"\\n                {% endif %}>\\n            </sw-url-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_connection_success_disclaimer %}\\n            <div class=\\\"swag-paypal-pos-wizard-customization__subtitle\\\">\\n                {{ $tc('swag-paypal-pos.wizard.customization.subtitle') }}\\n            </div>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","export default \"{% block swag_paypal_pos_wizard_product_selection %}\\n    <div class=\\\"swag-paypal-pos-wizard-product-selection\\\">\\n\\n        {% block swag_paypal_pos_wizard_product_selection_info %}\\n            <p class=\\\"swag-paypal-pos-wizard-product-selection__info\\\">\\n                {{ $tc('swag-paypal-pos.wizard.productSelection.info') }}\\n            </p>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_product_selection_sales_channel_toggle %}\\n            <sw-switch-field\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"hasClone\\\"\\n                    {% else %}\\n                    v-model=\\\"hasClone\\\"\\n                    {% endif %}\\n                    class=\\\"swag-paypal-pos-wizard-product-selection__clone-switch\\\"\\n                    bordered\\n                    :label=\\\"$tc('swag-paypal-pos.wizard.productSelection.labelToggle')\\\"\\n                    {% if VUE3 %}\\n                    @update:value=\\\"updateClone\\\"\\n                    {% else %}\\n                    @change=\\\"updateClone\\\"\\n                    {% endif %}>\\n            </sw-switch-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_product_selection_sales_channel_select %}\\n            <sw-entity-single-select\\n                    {% if VUE3 %}\\n                    v-model:value=\\\"localCloneSalesChannelId\\\"\\n                    {% else %}\\n                    v-model=\\\"localCloneSalesChannelId\\\"\\n                    {% endif %}\\n                    class=\\\"swag-paypal-pos-wizard-product-selection__saleschannel-select\\\"\\n                    entity=\\\"sales_channel\\\"\\n                    :criteria=\\\"salesChannelCriteria\\\"\\n                    :disabled=\\\"!hasClone\\\"\\n                    :label=\\\"$tc('swag-paypal-pos.wizard.productSelection.labelSelect')\\\"\\n                    @input=\\\"forceUpdate\\\">\\n            </sw-entity-single-select>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-wizard-product-selection.html.twig';\n\nconst { Component } = Shopware;\nconst { Criteria } = Shopware.Data;\n\nComponent.register('swag-paypal-pos-wizard-product-selection', {\n    template,\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: true,\n        },\n        cloneSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n        saveSalesChannel: {\n            type: Function,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            manualSalesChannel: false,\n            hasClone: false,\n        };\n    },\n\n    computed: {\n        localCloneSalesChannelId: {\n            get() {\n                this.updateButtons();\n                return this.cloneSalesChannelId;\n            },\n            set(cloneSalesChannelId) {\n                this.$emit('update-clone-sales-channel', cloneSalesChannelId);\n            },\n        },\n\n        salesChannelCriteria() {\n            const criteria = new Criteria(1, 500);\n            criteria.addFilter(Criteria.not('and', [\n                Criteria.equals('id', this.salesChannel.id),\n            ]));\n\n            return criteria;\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.updateButtons();\n            this.setTitle();\n        },\n\n        setTitle() {\n            this.$emit('frw-set-title', this.$tc('swag-paypal-pos.wizard.productSelection.modalTitle'));\n        },\n\n        updateButtons() {\n            const buttonConfig = [\n                {\n                    key: 'back',\n                    label: this.$tc('sw-first-run-wizard.general.buttonBack'),\n                    position: 'left',\n                    action: this.routeBackToCustomization,\n                    disabled: false,\n                },\n                {\n                    key: 'next',\n                    label: this.$tc('sw-first-run-wizard.general.buttonNext'),\n                    position: 'right',\n                    variant: 'primary',\n                    action: this.routeToSyncLibrary,\n                    disabled: false,\n                },\n            ];\n\n            this.$emit('buttons-update', buttonConfig);\n        },\n\n        routeBackToCustomization() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.customization',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        routeToSyncLibrary() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.syncLibrary',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        updateClone() {\n            this.$emit('update-clone-sales-channel', null);\n            this.forceUpdate();\n        },\n\n        forceUpdate() {\n            this.$forceUpdate();\n            this.updateButtons();\n        },\n\n        toggleLoadingState(state) {\n            this.isConnecting = state;\n            this.$emit('toggle-loading', state);\n        },\n    },\n});\n","import template from './swag-paypal-pos-wizard-sync-prices.html.twig';\nimport './swag-paypal-pos-wizard-sync-prices.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pos-wizard-sync-prices', {\n    template,\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: true,\n        },\n        cloneSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n        saveSalesChannel: {\n            type: Function,\n            required: true,\n        },\n    },\n\n    computed: {\n        optionTrue() {\n            return {\n                name: this.$tc('swag-paypal-pos.wizard.syncPrices.optionTrueLabel'),\n                description: this.$tc('swag-paypal-pos.wizard.syncPrices.optionTrueDescription'),\n            };\n        },\n\n        optionFalse() {\n            return {\n                name: this.$tc('swag-paypal-pos.wizard.syncPrices.optionFalseLabel'),\n                description: this.$tc('swag-paypal-pos.wizard.syncPrices.optionFalseDescription'),\n            };\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.updateButtons();\n            this.setTitle();\n        },\n\n        setTitle() {\n            this.$emit('frw-set-title', this.$tc('swag-paypal-pos.wizard.syncPrices.modalTitle'));\n        },\n\n        updateButtons() {\n            const buttonConfig = [\n                {\n                    key: 'back',\n                    label: this.$tc('sw-first-run-wizard.general.buttonBack'),\n                    position: 'left',\n                    action: this.routeBackToSyncLibrary,\n                    disabled: false,\n                },\n                {\n                    key: 'next',\n                    label: this.$tc('sw-first-run-wizard.general.buttonNext'),\n                    position: 'right',\n                    variant: 'primary',\n                    action: this.routeToFinish,\n                    disabled: false,\n                },\n            ];\n\n            this.$emit('buttons-update', buttonConfig);\n        },\n\n        routeBackToSyncLibrary() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.syncLibrary',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        routeToFinish() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.finish',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        forceUpdate() {\n            this.$forceUpdate();\n        },\n\n        toggleLoadingState(state) {\n            this.isConnecting = state;\n            this.$emit('toggle-loading', state);\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_wizard_sync_prices %}\\n    <div class=\\\"swag-paypal-pos-wizard-sync-prices\\\">\\n\\n        {% block swag_paypal_pos_wizard_sync_prices_header %}\\n            <div class=\\\"swag-paypal-pos-wizard-sync-prices__headline\\\">\\n                {{ $tc('swag-paypal-pos.wizard.syncPrices.header') }}\\n            </div>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_sync_prices_description_input %}\\n            <swag-paypal-pos-boolean-radio\\n                {% if VUE3 %}\\n                v-model:value=\\\"salesChannel.extensions.paypalPosSalesChannel.syncPrices\\\"\\n                {% else %}\\n                v-model=\\\"salesChannel.extensions.paypalPosSalesChannel.syncPrices\\\"\\n                {% endif %}\\n                :label=\\\"$tc('swag-paypal-pos.wizard.syncPrices.description')\\\"\\n                :optionTrue=\\\"optionTrue\\\"\\n                :optionFalse=\\\"optionFalse\\\">\\n            </swag-paypal-pos-boolean-radio>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_sync_prices_disclaimer %}\\n            <div class=\\\"swag-paypal-pos-wizard-sync-prices__disclaimer\\\">\\n                {{ $tc('swag-paypal-pos.wizard.syncPrices.disclaimer') }}\\n            </div>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-wizard-sync-library.html.twig';\nimport './swag-paypal-pos-wizard-sync-library.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pos-wizard-sync-library', {\n    template,\n\n    inject: [\n        'SwagPayPalPosSettingApiService',\n    ],\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: true,\n        },\n        cloneSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n        saveSalesChannel: {\n            type: Function,\n            required: true,\n        },\n    },\n\n    data() {\n        return {\n            shopwareProductsCount: 0,\n            posProductsCount: 0,\n        };\n    },\n\n    computed: {\n        options() {\n            return [\n                {\n                    value: 2,\n                    name: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplacePermanentlyLabel'),\n                    description: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplacePermanentlyDescription'),\n                }, {\n                    value: 1,\n                    name: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplaceOneTimeLabel'),\n                    description: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplaceOneTimeDescription'),\n                }, {\n                    value: 0,\n                    name: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplaceNotLabel'),\n                    description: this.$tc('swag-paypal-pos.wizard.syncLibrary.optionReplaceNotDescription'),\n                },\n            ];\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.updateButtons();\n            this.setTitle();\n            this.fetchProductCounts();\n        },\n\n        setTitle() {\n            this.$emit('frw-set-title', this.$tc('swag-paypal-pos.wizard.syncLibrary.modalTitle'));\n        },\n\n        updateButtons() {\n            const buttonConfig = [\n                {\n                    key: 'back',\n                    label: this.$tc('sw-first-run-wizard.general.buttonBack'),\n                    position: 'left',\n                    action: this.routeBackToProductSelection,\n                    disabled: false,\n                },\n                {\n                    key: 'next',\n                    label: this.$tc('sw-first-run-wizard.general.buttonNext'),\n                    position: 'right',\n                    variant: 'primary',\n                    action: this.routeToSyncPrices,\n                    disabled: false,\n                },\n            ];\n\n            this.$emit('buttons-update', buttonConfig);\n        },\n\n        routeBackToProductSelection() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.productSelection',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        routeToSyncPrices() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.syncPrices',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        forceUpdate() {\n            this.$forceUpdate();\n        },\n\n        toggleLoadingState(state) {\n            this.isConnecting = state;\n            this.$emit('toggle-loading', state);\n        },\n\n        fetchProductCounts() {\n            this.toggleLoadingState(true);\n            this.SwagPayPalPosSettingApiService.getProductCount(\n                this.salesChannel.id,\n                this.cloneSalesChannelId,\n            ).then((response) => {\n                this.shopwareProductsCount = response.localCount;\n                this.posProductsCount = response.remoteCount;\n            }).finally(() => {\n                this.toggleLoadingState(false);\n            });\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_wizard_sync_library %}\\n    <div class=\\\"swag-paypal-pos-wizard-sync-library\\\">\\n\\n        {% block swag_paypal_pos_wizard_sync_library_header %}\\n            <i18n class=\\\"swag-paypal-pos-wizard-sync-library__headline\\\"\\n                  path=\\\"swag-paypal-pos.wizard.syncLibrary.header\\\"\\n                  tag=\\\"div\\\">\\n                <template #shopwareProducts>\\n                    <span>{{ $tc('swag-paypal-pos.wizard.syncLibrary.shopwareProducts', shopwareProductsCount) }}</span>\\n                </template>\\n                <template #posProducts>\\n                    <span>{{ $tc('swag-paypal-pos.wizard.syncLibrary.posProducts', posProductsCount) }}</span>\\n                </template>\\n            </i18n>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_sync_library_description_input %}\\n            <sw-radio-field\\n                {% if VUE3 %}\\n                v-model:value=\\\"salesChannel.extensions.paypalPosSalesChannel.replace\\\"\\n                {% else %}\\n                v-model=\\\"salesChannel.extensions.paypalPosSalesChannel.replace\\\"\\n                {% endif %}\\n                class=\\\"swag-paypal-pos-boolean-radio\\\"\\n                :label=\\\"$tc('swag-paypal-pos.wizard.syncLibrary.description')\\\"\\n                :options=\\\"options\\\">\\n            </sw-radio-field>\\n        {% endblock %}\\n\\n        {% block swag_paypal_pos_wizard_sync_library_disclaimer %}\\n            <div class=\\\"swag-paypal-pos-wizard-sync-library__disclaimer\\\">\\n                {{ $tc('swag-paypal-pos.wizard.syncLibrary.disclaimer') }}\\n            </div>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","import template from './swag-paypal-pos-wizard-finish.html.twig';\nimport './swag-paypal-pos-wizard-finish.scss';\n\nconst { Component } = Shopware;\n\nComponent.register('swag-paypal-pos-wizard-finish', {\n    template,\n\n    inject: [\n        'SwagPayPalPosApiService',\n    ],\n\n    props: {\n        salesChannel: {\n            type: Object,\n            required: true,\n        },\n        cloneSalesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.updateButtons();\n            this.setTitle();\n        },\n\n        setTitle() {\n            this.$emit('frw-set-title', this.$tc('swag-paypal-pos.wizard.finish.modalTitle'));\n        },\n\n        updateButtons() {\n            const buttonConfig = [\n                {\n                    key: 'back',\n                    label: this.$tc('sw-first-run-wizard.general.buttonBack'),\n                    position: 'left',\n                    action: this.routeBackToSyncPrices,\n                    disabled: false,\n                },\n                {\n                    key: 'finish',\n                    label: this.$tc('sw-first-run-wizard.general.buttonFinish'),\n                    position: 'right',\n                    variant: 'primary',\n                    action: this.onFinish,\n                    disabled: false,\n                },\n            ];\n\n            this.$emit('buttons-update', buttonConfig);\n        },\n\n        routeBackToSyncPrices() {\n            this.$router.push({\n                name: 'swag.paypal.pos.wizard.syncPrices',\n                params: { id: this.salesChannel.id },\n            });\n        },\n\n        onFinish() {\n            this.$emit('frw-finish');\n        },\n    },\n});\n","export default \"{% block swag_paypal_pos_wizard_finish %}\\n    <div class=\\\"swag-paypal-pos-wizard-finish\\\">\\n\\n        {% block swag_paypal_pos_wizard_finish_content %}\\n            <div class=\\\"swag-paypal-pos-wizard-finish__content\\\">\\n\\n                {% block swag_paypal_pos_wizard_finish_content_icon %}\\n                    <div class=\\\"swag-paypal-pos-wizard-finish__icon-wrapper\\\">\\n                        <sw-icon class=\\\"swag-paypal-pos-wizard-finish__icon\\\"\\n                                 name=\\\"regular-checkmark\\\"\\n                                 size=\\\"80px\\\"\\n                                 color=\\\"#37D046\\\">\\n                        </sw-icon>\\n                    </div>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_wizard_finish_content_header %}\\n                    <div class=\\\"swag-paypal-pos-wizard-finish__content-header\\\">\\n                        {{ $tc('swag-paypal-pos.wizard.finish.header') }}\\n                    </div>\\n                {% endblock %}\\n\\n                {% block swag_paypal_pos_wizard_finish_content_description %}\\n                    <div class=\\\"swag-paypal-pos-wizard-finish__content-description\\\">\\n                        <p class=\\\"swag-paypal-pos-wizard-finish__first-paragraph\\\">\\n                            {{ $tc('swag-paypal-pos.wizard.finish.firstParagraph') }}\\n                        </p>\\n\\n                        <p class=\\\"swag-paypal-pos-wizard-finish__second-paragraph\\\">\\n                            {{ $tc('swag-paypal-pos.wizard.finish.secondParagraph') }}\\n                        </p>\\n                    </div>\\n                {% endblock %}\\n            </div>\\n        {% endblock %}\\n    </div>\\n{% endblock %}\\n\";","import './component';\nimport './extension';\nimport './page';\n\nconst { Module } = Shopware;\n\nModule.register('swag-paypal-pos', {\n    type: 'plugin',\n    name: 'SwagPayPalPos',\n    title: 'swag-paypal.general.mainMenuItemGeneral',\n    description: 'swag-paypal.general.descriptionTextModule',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n    color: '#9AA8B5',\n    icon: 'regular-sync',\n\n    routes: {\n        detail: {\n            component: 'swag-paypal-pos',\n            path: ':id/detail',\n            redirect: {\n                name: 'swag.paypal.pos.detail.overview',\n            },\n            meta: {\n                privilege: 'sales_channel.viewer',\n            },\n            children: {\n                overview: {\n                    component: 'swag-paypal-pos-detail-overview',\n                    path: 'overview',\n                    meta: {\n                        privilege: 'sales_channel.viewer',\n                    },\n                },\n                syncedProducts: {\n                    component: 'swag-paypal-pos-detail-synced-products',\n                    path: 'synced-products',\n                    meta: {\n                        privilege: 'sales_channel.viewer',\n                    },\n                },\n                settings: {\n                    component: 'swag-paypal-pos-detail-settings',\n                    path: 'settings',\n                    meta: {\n                        privilege: 'sales_channel.viewer',\n                    },\n                },\n                runs: {\n                    component: 'swag-paypal-pos-detail-runs',\n                    path: 'runs',\n                    meta: {\n                        privilege: 'sales_channel.viewer',\n                    },\n                },\n            },\n        },\n        wizard: {\n            component: 'swag-paypal-pos-wizard',\n            path: ':id?/wizard',\n            redirect: {\n                name: 'swag.paypal.pos.wizard.connection',\n            },\n            meta: {\n                privilege: 'sales_channel.creator',\n            },\n            children: {\n                connection: {\n                    component: 'swag-paypal-pos-wizard-connection',\n                    path: 'connection',\n                    meta: {\n                        privilege: 'sales_channel.creator',\n                    },\n                },\n                connectionSuccess: {\n                    component: 'swag-paypal-pos-wizard-connection-success',\n                    path: 'connection-success',\n                    meta: {\n                        privilege: 'sales_channel.creator',\n                    },\n                },\n                connectionDisconnect: {\n                    component: 'swag-paypal-pos-wizard-connection-disconnect',\n                    path: 'connection-disconnect',\n                    meta: {\n                        privilege: 'sales_channel.creator',\n                    },\n                },\n                customization: {\n                    component: 'swag-paypal-pos-wizard-customization',\n                    path: 'customization',\n                    meta: {\n                        privilege: 'sales_channel.creator',\n                    },\n                },\n                productSelection: {\n                    component: 'swag-paypal-pos-wizard-product-selection',\n                    path: 'product-selection',\n                    meta: {\n                        privilege: 'sales_channel.creator',\n                    },\n                },\n                syncPrices: {\n                    component: 'swag-paypal-pos-wizard-sync-prices',\n                    path: 'sync-prices',\n                    meta: {\n                        privilege: 'sales_channel.creator',\n                    },\n                },\n                syncLibrary: {\n                    component: 'swag-paypal-pos-wizard-sync-library',\n                    path: 'sync-library',\n                    meta: {\n                        privilege: 'sales_channel.creator',\n                    },\n                },\n                finish: {\n                    component: 'swag-paypal-pos-wizard-finish',\n                    path: 'finish',\n                    meta: {\n                        privilege: 'sales_channel.creator',\n                    },\n                },\n            },\n        },\n    },\n});\n","import template from './swag-paypal-disputes-detail.html.twig';\nimport './swag-paypal-disputes-detail.scss';\n\nconst { Context, Component, Filter, Utils } = Shopware;\nconst { Criteria } = Shopware.Data;\nconst { capitalizeString } = Shopware.Utils.string;\n\nComponent.register('swag-paypal-disputes-detail', {\n    template,\n\n    inject: [\n        'SwagPayPalDisputeApiService',\n        'systemConfigApiService',\n        'repositoryFactory',\n    ],\n\n    mixins: ['notification'],\n\n    props: {\n        disputeId: {\n            type: String,\n            required: true,\n        },\n\n        salesChannelId: {\n            type: String,\n            required: false,\n            default: null,\n        },\n    },\n\n    data() {\n        return {\n            isLoading: false,\n            dispute: null,\n            resolutionCenterUrl: 'https://www.paypal.com/resolutioncenter',\n            orderModuleLink: null,\n        };\n    },\n\n    computed: {\n        orderTransactionRepository() {\n            return this.repositoryFactory.create('order_transaction');\n        },\n\n        orderTransactionCriteria() {\n            if (!this.dispute.disputed_transactions) {\n                return null;\n            }\n\n            const disputedTransaction = this.dispute.disputed_transactions[0];\n            if (!disputedTransaction?.custom) {\n                return null;\n            }\n\n            const id = JSON.parse(disputedTransaction.custom)?.orderTransactionId ?? disputedTransaction.custom;\n\n            if (!(typeof id === 'string') || id.length !== 32) {\n                return null;\n            }\n\n            const criteria = new Criteria(1, 1);\n            criteria.setIds([id]);\n\n            return criteria;\n        },\n\n        externalDetailPageLink() {\n            return `${this.resolutionCenterUrl}/${this.dispute.dispute_id}`;\n        },\n\n        dateFilter() {\n            return Filter.getByName('date');\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.isLoading = true;\n\n            this.systemConfigApiService.getValues('SwagPayPal.settings').then((response) => {\n                if (response['SwagPayPal.settings.sandbox']) {\n                    this.resolutionCenterUrl = 'https://www.sandbox.paypal.com/resolutioncenter';\n                }\n\n                this.getDetail();\n            });\n        },\n\n        getDetail() {\n            this.SwagPayPalDisputeApiService.detail(this.disputeId, this.salesChannelId).then((dispute) => {\n                this.dispute = dispute;\n                this.setLinkToOrderModule();\n                this.isLoading = false;\n            }).catch(this.handleError);\n        },\n\n        handleError(errorResponse) {\n            const errorDetail = errorResponse.response.data.errors[0].detail;\n            this.createNotificationError({\n                message: `${this.$tc('swag-paypal-disputes.list.errorTitle')}: ${errorDetail}`,\n                autoClose: false,\n            });\n            this.isLoading = false;\n        },\n\n        /**\n         * @deprecated tag:v8.0.0 - will be removed, use computed externalDetailPageLink instead\n         */\n        getExternalDetailPageLink() {\n            return `${this.resolutionCenterUrl}/${this.dispute.dispute_id}`;\n        },\n\n        setLinkToOrderModule() {\n            if (!this.orderTransactionCriteria) {\n                this.orderModuleLink = null;\n            }\n\n            this.orderTransactionRepository.search(this.orderTransactionCriteria, Context.api, this.orderTransactionCriteria)\n                .then((orderTransactions) => {\n                    const orderTransaction = orderTransactions[0];\n\n                    if (orderTransaction === null) {\n                        return;\n                    }\n\n                    this.orderModuleLink = { name: 'sw.order.detail.general', params: { id: orderTransaction.orderId } };\n                });\n        },\n\n        formatTechnicalText(technicalText) {\n            return capitalizeString(technicalText).replace(/_/g, ' ');\n        },\n\n        getInquiryClass(stage) {\n            if (stage === 'INQUIRY') {\n                return 'swag-paypal-disputes-detail__stage-inquiry';\n            }\n\n            return 'swag-paypal-disputes-detail__stage-other';\n        },\n\n        getDueDate(sellerResponseDueDate, buyerResponseDueDate) {\n            if (sellerResponseDueDate !== null) {\n                return `${this.$tc('swag-paypal-disputes.common.response_due_date.seller')}: ${\n                    this.formatDate(sellerResponseDueDate)}`;\n            }\n\n            if (buyerResponseDueDate !== null) {\n                return `${this.$tc('swag-paypal-disputes.common.response_due_date.buyer')}: ${\n                    this.formatDate(buyerResponseDueDate)}`;\n            }\n\n            return '';\n        },\n\n        copyToClipboard() {\n            if (this.dispute === null) {\n                return;\n            }\n\n            try {\n                Utils.dom.copyToClipboard(JSON.stringify(this.dispute));\n                this.createNotificationInfo({\n                    message: this.$tc('global.sw-field.notification.notificationCopySuccessMessage'),\n                });\n            } catch (err) {\n                this.createNotificationError({\n                    message: this.$tc('global.sw-field.notification.notificationCopyFailureMessage'),\n                });\n            }\n        },\n\n        formatDate(dateTime) {\n            return this.dateFilter(dateTime, {\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n            });\n        },\n    },\n});\n","export default \"{% block swag_paypal_disputes_detail %}\\n    <sw-page class=\\\"swag-paypal-disputes-detail\\\">\\n\\n        {% block swag_paypal_disputes_detail_smart_bar_header %}\\n            <template #smart-bar-header>\\n\\n                {% block swag_paypal_disputes_detail_smart_bar_header_title %}\\n                    <h2>\\n\\n                        {% block swag_paypal_disputes_detail_smart_bar_header_title %}\\n                            {{ $tc('swag-paypal-disputes.detail.title') }}\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_disputes_detail_smart_bar_header_dispute_id %}\\n                            {{ disputeId }}\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_disputes_detail_smart_bar_header_title_addition %}\\n                            {{ $tc('swag-paypal-disputes.detail.titleAddition') }}\\n                        {% endblock %}\\n\\n                    </h2>\\n                {% endblock %}\\n\\n            </template>\\n        {% endblock %}\\n\\n        {% block swag_paypal_disputes_detail_content %}\\n            <template #content>\\n                <sw-card-view>\\n\\n                    {% block swag_paypal_disputes_detail_content_details %}\\n                        <sw-card position-identifier=\\\"swag-paypal-disputes-detail-content-details\\\"\\n                                 :isLoading=\\\"isLoading\\\"\\n                                 :title=\\\"$tc('swag-paypal-disputes.detail.mainFieldsCardTitle')\\\">\\n\\n                            {% block swag_paypal_disputes_detail_content_details_fields %}\\n                                <template v-if=\\\"dispute\\\">\\n\\n                                    {% block swag_paypal_disputes_detail_content_details_fields_external_link %}\\n                                        <div class=\\\"swag-paypal-disputes-detail__links\\\">\\n                                            <sw-external-link :href=\\\"externalDetailPageLink\\\">\\n                                                {{ $tc('swag-paypal-disputes.detail.externalLinkText') }}\\n                                            </sw-external-link>\\n                                        </div>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_disputes_detail_content_details_fields_order_module_link %}\\n                                        <div class=\\\"swag-paypal-disputes-detail__links\\\">\\n                                            <router-link v-if=\\\"orderModuleLink\\\"\\n                                                         :to=\\\"orderModuleLink\\\"\\n                                                         target=\\\"_blank\\\"\\n                                                         rel=\\\"noopener\\\">\\n                                                {{ $tc('swag-paypal-disputes.detail.orderModuleLinkText') }}\\n                                            </router-link>\\n                                        </div>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_disputes_detail_content_details_fields_separator %}\\n                                        <hr class=\\\"swag-paypal-disputes-detail__separator\\\"/>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_disputes_detail_content_details_fields_id %}\\n                                        <sw-text-field :value=\\\"dispute.dispute_id\\\"\\n                                                       :label=\\\"$tc('swag-paypal-disputes.common.dispute_id')\\\"\\n                                                       disabled>\\n                                        </sw-text-field>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_disputes_detail_content_details_fields_update_time %}\\n                                        <sw-text-field :value=\\\"formatDate(dispute.update_time)\\\"\\n                                                       :label=\\\"$tc('swag-paypal-disputes.common.update_time')\\\"\\n                                                       disabled>\\n                                        </sw-text-field>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_disputes_detail_content_details_fields_due_date %}\\n                                        <sw-text-field v-if=\\\"dispute.seller_response_due_date || dispute.buyer_response_due_date\\\"\\n                                                       :value=\\\"getDueDate(dispute.seller_response_due_date, dispute.buyer_response_due_date)\\\"\\n                                                       :label=\\\"$tc('swag-paypal-disputes.common.response_due_date.label')\\\"\\n                                                       disabled>\\n                                        </sw-text-field>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_disputes_detail_content_details_fields_status %}\\n                                        <sw-text-field :value=\\\"`${formatTechnicalText(dispute.status)} (${formatTechnicalText(dispute.reason)})`\\\"\\n                                                       :label=\\\"$tc('swag-paypal-disputes.common.status')\\\"\\n                                                       disabled>\\n                                        </sw-text-field>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_disputes_detail_content_details_fields_dispute_life_cycle_stage %}\\n                                        <sw-text-field :value=\\\"formatTechnicalText(dispute.dispute_life_cycle_stage)\\\"\\n                                                       :label=\\\"$tc('swag-paypal-disputes.common.dispute_life_cycle_stage')\\\"\\n                                                       :class=\\\"getInquiryClass(dispute.dispute_life_cycle_stage)\\\"\\n                                                       disabled>\\n                                        </sw-text-field>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_disputes_detail_content_details_fields_dispute_amount %}\\n                                        <sw-text-field :value=\\\"`${dispute.dispute_amount.value} ${dispute.dispute_amount.currency_code}`\\\"\\n                                                       :label=\\\"$tc('swag-paypal-disputes.common.dispute_amount')\\\"\\n                                                       disabled>\\n                                        </sw-text-field>\\n                                    {% endblock %}\\n\\n                                </template>\\n                            {% endblock %}\\n\\n                        </sw-card>\\n                    {% endblock %}\\n\\n                    {% block swag_paypal_disputes_detail_content_raw_data %}\\n                        <sw-card position-identifier=\\\"swag-paypal-disputes-detail-content-raw-data\\\"\\n                                 :isLoading=\\\"isLoading\\\"\\n                                 :title=\\\"$tc('swag-paypal-disputes.detail.rawDataCardTitle')\\\">\\n\\n                            {% block swag_paypal_disputes_detail_content_raw_data_content %}\\n                                <template v-if=\\\"dispute\\\">\\n\\n                                    {% block swag_paypal_disputes_detail_content_raw_data_text %}\\n                                        <sw-textarea-field :value=\\\"JSON.stringify(dispute, null, 2)\\\"\\n                                                           disabled>\\n                                        </sw-textarea-field>\\n                                    {% endblock %}\\n\\n                                    {% block swag_paypal_disputes_detail_content_raw_data_copy_button %}\\n                                        <sw-button @click=\\\"copyToClipboard\\\">\\n                                            {{ $tc('swag-paypal-disputes.detail.copyButtonLabel') }}\\n                                        </sw-button>\\n                                    {% endblock %}\\n\\n                                </template>\\n                            {% endblock %}\\n\\n                        </sw-card>\\n                    {% endblock %}\\n\\n                </sw-card-view>\\n            </template>\\n        {% endblock %}\\n\\n    </sw-page>\\n{% endblock %}\\n\";","export default \"{% block swag_paypal_disputes_list %}\\n    <sw-page class=\\\"swag-paypal-disputes-list\\\">\\n\\n        {% block swag_paypal_disputes_list_smart_bar_header %}\\n            <template #smart-bar-header>\\n\\n                {% block swag_paypal_disputes_list_smart_bar_header_title %}\\n                    <h2>\\n\\n                        {% block swag_paypal_disputes_list_smart_bar_header_title_text %}\\n                            {{ $tc('swag-paypal-disputes.list.title') }}\\n                        {% endblock %}\\n\\n                        {% block swag_paypal_disputes_list_smart_bar_header_amount %}\\n                            <template v-if=\\\"!isLoading\\\">\\n                                ({{ total }})\\n                            </template>\\n                        {% endblock %}\\n\\n                    </h2>\\n                {% endblock %}\\n\\n            </template>\\n        {% endblock %}\\n\\n        {% block swag_paypal_disputes_list_content %}\\n            <template #content>\\n                <sw-loader v-if=\\\"isLoading\\\"></sw-loader>\\n                <template v-else>\\n\\n                    {% block swag_paypal_disputes_list_content_grid %}\\n                        <sw-data-grid v-if=\\\"disputes.length > 0\\\"\\n                                      :dataSource=\\\"visibleDisputes\\\"\\n                                      :columns=\\\"disputesColumns\\\"\\n                                      :showActions=\\\"false\\\"\\n                                      :showSelection=\\\"false\\\">\\n\\n                            {% block swag_paypal_disputes_list_content_grid_column_update_time %}\\n                                <template #column-update_time=\\\"{ item }\\\">\\n                                    <div>\\n                                        <div>{{ formatUpdateDate(item.update_time) }}</div>\\n                                        <div>{{ formatUpdateTime(item.update_time) }}</div>\\n                                    </div>\\n                                </template>\\n                            {% endblock %}\\n\\n\\n                            {% block swag_paypal_disputes_list_content_grid_column_seller_response_due_date %}\\n                                <template #column-response_due_date=\\\"{ item }\\\">\\n                                    <template v-if=\\\"item.seller_response_due_date\\\">\\n                                        <strong>{{ $tc('swag-paypal-disputes.common.response_due_date.seller') }}</strong>:\\n                                        {{ formatDate(item.seller_response_due_date) }}\\n                                    </template>\\n                                    <template v-else-if=\\\"item.buyer_response_due_date\\\">\\n                                        <strong>{{ $tc('swag-paypal-disputes.common.response_due_date.buyer') }}</strong>:\\n                                        {{ formatDate(item.buyer_response_due_date) }}\\n                                    </template>\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_disputes_list_content_grid_column_status %}\\n                                <template #column-status=\\\"{ item }\\\">\\n                                    <div>\\n                                        <div>\\n                                            {{ formatTechnicalText(item.dispute_state) }}\\n                                            <template v-if=\\\"item.dispute_state !== item.status\\\"> ({{ formatTechnicalText(item.status) }})</template>\\n                                        </div>\\n                                        <div class=\\\"swag-paypal-disputes-list__reason\\\">\\n                                            {{ formatTechnicalText(item.reason) }}\\n                                        </div>\\n                                    </div>\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_disputes_list_content_grid_column_dispute_id %}\\n                                <template #column-dispute_id=\\\"{ item }\\\">\\n                                    <router-link :to=\\\"{ name: 'swag.paypal.disputes.detail', params: { disputeId: item.dispute_id , salesChannelId} }\\\">\\n                                        {{ item.dispute_id }}\\n                                    </router-link>\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_disputes_list_content_grid_column_dispute_life_cycle_stage %}\\n                                <template #column-dispute_life_cycle_stage=\\\"{ item }\\\">\\n                                    <div v-if=\\\"item.dispute_life_cycle_stage === 'INQUIRY'\\\"\\n                                          class=\\\"swag-paypal-disputes-list__stage-inquiry\\\">\\n                                        {{ formatTechnicalText(item.dispute_life_cycle_stage) }}\\n                                    </div>\\n                                    <div v-else\\n                                          class=\\\"swag-paypal-disputes-list__stage-other\\\">\\n                                        {{ formatTechnicalText(item.dispute_life_cycle_stage) }}\\n                                    </div>\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_disputes_list_content_grid_column_dispute_amount %}\\n                                <template #column-dispute_amount=\\\"{ item }\\\">\\n                                    {{ item.dispute_amount.value }} {{ item.dispute_amount.currency_code }}\\n                                </template>\\n                            {% endblock %}\\n\\n                            {% block swag_paypal_disputes_list_content_grid_pagination %}\\n                                <template #pagination>\\n                                    <sw-pagination\\n                                        :page=\\\"page\\\"\\n                                        :limit=\\\"limit\\\"\\n                                        :total=\\\"total\\\"\\n                                        @page-change=\\\"onPageChange\\\">\\n                                    </sw-pagination>\\n                                </template>\\n                            {% endblock %}\\n\\n                        </sw-data-grid>\\n                    {% endblock %}\\n\\n                    {% block swag_paypal_disputes_list_content_empty_state %}\\n                        <sw-empty-state\\n                            v-if=\\\"disputes.length === 0\\\"\\n                            :title=\\\"$tc('swag-paypal-disputes.list.emptyState.title')\\\"\\n                            :subline=\\\"$tc('swag-paypal-disputes.list.emptyState.subline')\\\"\\n                            icon=\\\"regular-comments\\\"\\n                            color=\\\"#F88962\\\">\\n                        </sw-empty-state>\\n                    {% endblock %}\\n\\n                </template>\\n            </template>\\n        {% endblock %}\\n\\n        {% block swag_paypal_disputes_list_sidebar %}\\n            <template #sidebar>\\n                <sw-sidebar class=\\\"swag-paypal-disputes-list__sidebar\\\">\\n\\n                    {% block swag_paypal_disputes_list_sidebar_refresh %}\\n                        <sw-sidebar-item\\n                            icon=\\\"regular-sync\\\"\\n                            :title=\\\"$tc('swag-paypal-disputes.list.titleSidebarItemRefresh')\\\"\\n                            @click=\\\"onRefresh\\\">\\n                        </sw-sidebar-item>\\n                    {% endblock %}\\n\\n                    {% block swag_paypal_disputes_list_sidebar_filter %}\\n                        <sw-sidebar-item icon=\\\"regular-filter\\\"\\n                                         :title=\\\"$tc('swag-paypal-disputes.list.titleSidebarItemFilter')\\\">\\n\\n                            {% block swag_paypal_disputes_list_sidebar_filter_items %}\\n                                {% block swag_paypal_disputes_list_sidebar_filter_sales_channel %}\\n                                    <sw-sales-channel-switch :label=\\\"$tc('sw-settings.system-config.labelSalesChannelSelect')\\\"\\n                                                             @change-sales-channel-id=\\\"onSalesChannelChanged\\\">\\n                                    </sw-sales-channel-switch>\\n                                {% endblock %}\\n\\n                                {% block swag_paypal_disputes_list_sidebar_filter_dispute_state %}\\n                                    <sw-multi-select\\n                                        :label=\\\"$tc('swag-paypal-disputes.common.status')\\\"\\n                                        :options=\\\"disputeStates\\\"\\n                                        :value=\\\"disputeStateFilter\\\"\\n                                        {% if VUE3 %}\\n                                        @update:value=\\\"onChangeDisputeStateFilter\\\"\\n                                        {% else %}\\n                                        @change=\\\"onChangeDisputeStateFilter\\\"\\n                                        {% endif %}>\\n                                    </sw-multi-select>\\n                                {% endblock %}\\n                            {% endblock %}\\n\\n                        </sw-sidebar-item>\\n                    {% endblock %}\\n\\n                </sw-sidebar>\\n            </template>\\n        {% endblock %}\\n\\n    </sw-page>\\n{% endblock %}\\n\";","export const DISPUTE_STATE_REQUIRED_ACTION = 'REQUIRED_ACTION';\nexport const DISPUTE_STATE_REQUIRED_OTHER_PARTY_ACTION = 'REQUIRED_OTHER_PARTY_ACTION';\nexport const DISPUTE_STATE_UNDER_PAYPAL_REVIEW = 'UNDER_PAYPAL_REVIEW';\nexport const DISPUTE_STATE_RESOLVED = 'RESOLVED';\nexport const DISPUTE_STATE_OPEN_INQUIRIES = 'OPEN_INQUIRIES';\nexport const DISPUTE_STATE_APPEALABLE = 'APPEALABLE';\n\nexport default {\n    DISPUTE_STATE_REQUIRED_ACTION,\n    DISPUTE_STATE_REQUIRED_OTHER_PARTY_ACTION,\n    DISPUTE_STATE_UNDER_PAYPAL_REVIEW,\n    DISPUTE_STATE_RESOLVED,\n    DISPUTE_STATE_OPEN_INQUIRIES,\n    DISPUTE_STATE_APPEALABLE,\n};\n","import template from './swag-paypal-disputes-list.html.twig';\nimport {\n    DISPUTE_STATE_REQUIRED_ACTION,\n    DISPUTE_STATE_REQUIRED_OTHER_PARTY_ACTION,\n    DISPUTE_STATE_UNDER_PAYPAL_REVIEW,\n    DISPUTE_STATE_RESOLVED,\n    DISPUTE_STATE_OPEN_INQUIRIES,\n    DISPUTE_STATE_APPEALABLE,\n} from './swag-paypal-disputes-consts';\nimport './swag-paypal-disputes-list.scss';\n\nconst { Component, Filter } = Shopware;\nconst { debounce } = Shopware.Utils;\nconst { capitalizeString } = Shopware.Utils.string;\n\nComponent.register('swag-paypal-disputes-list', {\n    template,\n\n    inject: [\n        'SwagPayPalDisputeApiService',\n        'systemConfigApiService',\n    ],\n\n    mixins: ['notification'],\n\n    data() {\n        return {\n            isLoading: false,\n            disputes: [],\n            disputeStates: [\n                {\n                    value: DISPUTE_STATE_REQUIRED_ACTION,\n                    label: this.formatTechnicalText(DISPUTE_STATE_REQUIRED_ACTION),\n                },\n                {\n                    value: DISPUTE_STATE_REQUIRED_OTHER_PARTY_ACTION,\n                    label: this.formatTechnicalText(DISPUTE_STATE_REQUIRED_OTHER_PARTY_ACTION),\n                },\n                {\n                    value: DISPUTE_STATE_UNDER_PAYPAL_REVIEW,\n                    label: this.formatTechnicalText(DISPUTE_STATE_UNDER_PAYPAL_REVIEW),\n                },\n                {\n                    value: DISPUTE_STATE_RESOLVED,\n                    label: this.formatTechnicalText(DISPUTE_STATE_RESOLVED),\n                },\n                {\n                    value: DISPUTE_STATE_OPEN_INQUIRIES,\n                    label: this.formatTechnicalText(DISPUTE_STATE_OPEN_INQUIRIES),\n                },\n                {\n                    value: DISPUTE_STATE_APPEALABLE,\n                    label: this.formatTechnicalText(DISPUTE_STATE_APPEALABLE),\n                },\n            ],\n            disputeStateFilter: [],\n            salesChannelId: null,\n            total: 0,\n            limit: 10,\n            page: 1,\n            resolutionCenterUrl: 'https://www.paypal.com/resolutioncenter',\n        };\n    },\n\n    computed: {\n        dateFilter() {\n            return Filter.getByName('date');\n        },\n\n        disputesColumns() {\n            return [\n                {\n                    property: 'dispute_id',\n                    label: this.$tc('swag-paypal-disputes.common.dispute_id'),\n                },\n                {\n                    property: 'update_time',\n                    label: this.$tc('swag-paypal-disputes.common.update_time'),\n                },\n                {\n                    property: 'response_due_date',\n                    label: this.$tc('swag-paypal-disputes.common.response_due_date.label'),\n                },\n                {\n                    property: 'status',\n                    label: this.$tc('swag-paypal-disputes.common.status'),\n                },\n                {\n                    property: 'dispute_life_cycle_stage',\n                    label: this.$tc('swag-paypal-disputes.common.dispute_life_cycle_stage'),\n                },\n                {\n                    property: 'dispute_amount',\n                    label: this.$tc('swag-paypal-disputes.common.dispute_amount'),\n                },\n            ];\n        },\n\n        visibleDisputes() {\n            return this.disputes.slice((this.page - 1) * this.limit, (this.page - 1) * this.limit + this.limit);\n        },\n    },\n\n    created() {\n        this.createdComponent();\n    },\n\n    methods: {\n        createdComponent() {\n            this.isLoading = true;\n\n            this.systemConfigApiService.getValues('SwagPayPal.settings').then((response) => {\n                if (response['SwagPayPal.settings.sandbox']) {\n                    this.resolutionCenterUrl = 'https://www.sandbox.paypal.com/resolutioncenter';\n                }\n\n                this.getList();\n            });\n        },\n\n        getList() {\n            this.isLoading = true;\n            this.disputes = [];\n            let disputeStateFilter = null;\n            if (this.disputeStateFilter.length > 0) {\n                disputeStateFilter = this.disputeStateFilter.join(',');\n            }\n\n            this.SwagPayPalDisputeApiService.list(this.salesChannelId, disputeStateFilter).then((disputeList) => {\n                if (disputeList.items !== null) {\n                    this.disputes = this.sortDisputes(disputeList.items);\n                }\n                this.total = this.disputes.length;\n                this.isLoading = false;\n            }).catch(this.handleError);\n        },\n\n        sortDisputes(disputes) {\n            // sort resolved disputes as last\n            disputes.sort((a, b) => {\n                if (a.status === 'RESOLVED') {\n                    return 1;\n                }\n\n                if (b.status === 'RESOLVED') {\n                    return -1;\n                }\n\n                return 0;\n            });\n\n            return disputes;\n        },\n\n        debouncedGetList: debounce(function updateList() {\n            this.getList();\n        }, 850),\n\n        handleError(errorResponse) {\n            const errorDetail = errorResponse.response.data.errors[0].detail;\n            this.createNotificationError({\n                message: `${this.$tc('swag-paypal-disputes.list.errorTitle')}: ${errorDetail}`,\n                autoClose: false,\n            });\n            this.isLoading = false;\n        },\n\n        formatUpdateDate(dateTime) {\n            return this.formatDate(dateTime, {});\n        },\n\n        formatUpdateTime(dateTime) {\n            return this.formatDate(dateTime, {\n                day: undefined,\n                month: undefined,\n                year: undefined,\n                hour: '2-digit',\n                minute: '2-digit',\n                second: '2-digit',\n            });\n        },\n\n        formatTechnicalText(technicalText) {\n            return capitalizeString(technicalText).replace(/_/g, ' ');\n        },\n\n        onPageChange({ page, limit }) {\n            this.page = page;\n            this.limit = limit;\n            this.$emit('page-change');\n        },\n\n        onRefresh() {\n            this.getList();\n        },\n\n        onChangeDisputeStateFilter(value) {\n            this.disputeStateFilter = value;\n            this.debouncedGetList();\n        },\n\n        onSalesChannelChanged(value) {\n            this.salesChannelId = value;\n            this.getList();\n        },\n\n        getExternalDetailPageLink(dispute) {\n            return `${this.resolutionCenterUrl}/${dispute.dispute_id}`;\n        },\n\n        formatDate(dateTime, options = { hour: '2-digit', minute: '2-digit', second: '2-digit' }) {\n            return this.dateFilter(dateTime, options);\n        },\n    },\n});\n","import './acl';\nimport './page/swag-paypal-disputes-detail';\nimport './page/swag-paypal-disputes-list';\n\nconst { Module } = Shopware;\n\nModule.register('swag-paypal-disputes', {\n    type: 'plugin',\n    name: 'paypal-disputes',\n    title: 'swag-paypal-disputes.general.mainMenuItemGeneral',\n    description: 'swag-paypal-disputes.general.descriptionTextModule',\n    version: '1.0.0',\n    targetVersion: '1.0.0',\n    color: '#F88962',\n    icon: 'regular-comments',\n    favicon: 'icon-module-customers.png',\n\n    routes: {\n        index: {\n            component: 'swag-paypal-disputes-list',\n            path: 'index',\n            meta: {\n                privilege: 'swag_paypal_disputes.viewer',\n            },\n        },\n\n        detail: {\n            component: 'swag-paypal-disputes-detail',\n            path: 'detail/:disputeId/:salesChannelId?',\n            props: {\n                default(route) {\n                    return {\n                        disputeId: route.params.disputeId,\n                        salesChannelId: route.params.salesChannelId,\n                    };\n                },\n            },\n            meta: {\n                privilege: 'swag_paypal_disputes.viewer',\n                parentPath: 'swag.paypal.disputes.index',\n            },\n        },\n    },\n\n    navigation: [{\n        id: 'swag-paypal-disputes',\n        path: 'swag.paypal.disputes.index',\n        label: 'swag-paypal-disputes.general.mainMenuItemGeneral',\n        parent: 'sw-customer',\n        privilege: 'swag_paypal_disputes.viewer',\n    }],\n});\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./sw-settings-payment-list.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"5fdd32e2\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"0dd57816\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"3b54b768\", content, true, {});","const { Mixin } = Shopware;\n\nMixin.register('swag-paypal-pos-catch-error', {\n    methods: {\n        /**\n         * Creates a notification, if an error has been returned\n         *\n         * @param {string} snippet of the notification\n         * @param {Object} errorResponse\n         */\n        catchError(snippet, errorResponse) {\n            // mixins otherwise don't get i18n\n            this._i18n = this.$root._i18n;\n\n            let message = snippet ? this.$tc(snippet) : '';\n\n            try {\n                if (errorResponse.response.data && errorResponse.response.data.errors) {\n                    const errorText = errorResponse.response.data.errors.map((error) => {\n                        if (error.code === 'SWAG_PAYPAL_POS__EXISTING_POS_ACCOUNT') {\n                            message = this.$tc('swag-paypal-pos.authentication.messageDuplicateError');\n                        }\n\n                        if (error.hasOwnProperty('meta') && error.meta.hasOwnProperty('parameters')) {\n                            if (error.meta.parameters.salesChannelIds) {\n                                return `<br>${error.meta.parameters.salesChannelIds}`;\n                            }\n\n                            if (error.meta.parameters.message) {\n                                return `${error.meta.parameters.message} (${error.meta.parameters.name})`;\n                            }\n\n                            if (error.meta.parameters.name) {\n                                return error.meta.parameters.name;\n                            }\n                        }\n\n                        return error.detail;\n                    }, this).join(' / ');\n\n                    if (errorText) {\n                        message = message ? `${message}: ${errorText}` : errorText;\n                    }\n                }\n            } finally {\n                this.createNotificationError({ message });\n            }\n        },\n    },\n});\n","const { Component } = Shopware;\n\nComponent.extend('swag-paypal-pos-url-field', 'sw-url-field', {\n    methods: {\n        changeMode() {\n            // override, so no disabling of SSL is possible\n        },\n\n        getSSLMode() {\n            // override, so no disabling of SSL is possible\n            return true;\n        },\n    },\n});\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pos-wizard-sync-library.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"0887e496\", content, true, {});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/mini-css-extract-plugin/dist/loader.js??ref--15-1!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/css-loader/dist/cjs.js??ref--15-2!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/sass-loader/dist/cjs.js??ref--15-3!./swag-paypal-pui-details.scss\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../../../../../../../../../../../../builds/shopware/6/services/paypal/src/Administration/Resources/app/administration/node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"1e0c4c19\", content, true, {});"],"sourceRoot":""}